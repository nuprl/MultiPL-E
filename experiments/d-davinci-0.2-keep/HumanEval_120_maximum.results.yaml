name: HumanEval_120_maximum
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvk413235.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpvk413235.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpvk413235.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvk413235.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp34rl6hgt.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp34rl6hgt.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp34rl6hgt.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp34rl6hgt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfti_5105.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpfti_5105.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpfti_5105.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfti_5105.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvxyses0w.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpvxyses0w.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpvxyses0w.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvxyses0w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy6qrq780.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpy6qrq780.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpy6qrq780.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpy6qrq780.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa35fkdc3.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpa35fkdc3.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpa35fkdc3.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpa35fkdc3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] > result[0])\n        {\n            result[0] = arr[i];\n      \
    \      sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmx8axe19.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpmx8axe19.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpmx8axe19.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3p73891t.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp3p73891t.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp3p73891t.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3p73891t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdy6301o9.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpdy6301o9.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpdy6301o9.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdy6301o9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp16tkbn_1.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp16tkbn_1.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp16tkbn_1.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp16tkbn_1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoymom3ko.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpoymom3ko.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpoymom3ko.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpoymom3ko.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n      \
    \  if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n    \
    \        sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfj3j3rsh.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpfj3j3rsh.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpfj3j3rsh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahkqsl_r.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpahkqsl_r.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpahkqsl_r.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpahkqsl_r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] arrCopy = arr.dup;\n    arrCopy.sort;\n    for (long i = 0; i < k;\
    \ i++)\n    {\n        result[i] = arrCopy[arrCopy.length - 1 - i];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw6ebg__8.d(32): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw6ebg__8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyz17tmv3.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpyz17tmv3.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpyz17tmv3.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyz17tmv3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaklmo7wi.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpaklmo7wi.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpaklmo7wi.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpaklmo7wi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpte2pzdmk.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpte2pzdmk.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpte2pzdmk.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpte2pzdmk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkei3urpr.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpkei3urpr.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpkei3urpr.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkei3urpr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphpk2lm6v.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmphpk2lm6v.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmphpk2lm6v.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmphpk2lm6v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3chjto9z.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp3chjto9z.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp3chjto9z.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3chjto9z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] sorted = arr.sort();\n    for (long i = 0; i < k; i++)\n    {\n  \
    \      result[i] = sorted[arr.length - 1 - i];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp77u_z22v.d(31): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77u_z22v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n      \
    \  if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n    \
    \        sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcxg5edoq.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpcxg5edoq.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpcxg5edoq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt6k73ktv.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpt6k73ktv.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpt6k73ktv.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpt6k73ktv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxphqu9z8.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpxphqu9z8.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpxphqu9z8.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxphqu9z8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpro6dybjy.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpro6dybjy.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpro6dybjy.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpro6dybjy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[arr.length];\n    long[] temp2 = new long[arr.length];\n\
    \    long[] temp3 = new long[arr.length];\n    long[] temp4 = new long[arr.length];\n\
    \    long[] temp5 = new long[arr.length];\n    long[] temp6 = new long[arr.length];\n\
    \    long[] temp7 = new long[arr.length];\n    long[] temp8 = new long[arr.length];\n\
    \    long[] temp9 = new long[arr.length];\n    long[] temp10 = new long[arr.length];\n\
    \    long[] temp11 = new long[arr.length];\n    long[] temp12 = new long[arr.length];\n\
    \    long[] temp13 = new long[arr.length];\n    long[] temp14 = new long[arr.length];\n\
    \    long[] temp15 = new long[arr.length];\n    long[] temp16 = new long[arr.length];\n\
    \    long[] temp17 = new long[arr.length];\n    long[] temp18 = new long[arr.length];\n\
    \    long[] temp19 = new long[arr.length];\n    long[] temp20 = new long[arr.length];\n\
    \    long[] temp21 = new long[arr.length];\n    long[] temp22 = new long[arr.length];\n\
    \    long[] temp23 = new long[arr.length];\n    long[] temp24 = new long[arr.length];\n\
    \    long[] temp25 = new long[arr.length];\n    long[] temp26 = new long[arr.length];\n\
    \    long[] temp27 = new long[arr.length];\n    long[] temp28 = new long[arr.length];\n\
    \    long[] temp29 = new long[arr.length];\n    long[] temp30 = new long[arr.length];\n\
    \    long[] temp31 = new long[arr.length];\n    long[] temp32 = new long[arr.length];\n\
    \    long[] temp33 = new long[arr.length];\n    long[] temp34 = new long[arr.length];\n\
    \    long[] temp35 = new long[arr.length];\n    long[] temp36 = new long[\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd2o0ovor.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmpd2o0ovor.d(68): Error: found `{` when expecting `]`\\n/tmp/tmpd2o0ovor.d(69):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpd2o0ovor.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long max = 0;\n    long index = 0;\n    for\
    \ (long i = 0; i < k; i++) \n    {\n        max = arr[i];\n        index = i;\n\
    \        for (long j = i; j < arr.length; j++) \n        {\n            if (arr[j]\
    \ > max) \n            {\n                max = arr[j];\n                index\
    \ = j;\n            }\n        }\n        temp[i] = max;\n        arr[index] =\
    \ -1;\n    }\n    for (long i = 0; i < k; i++) \n    {\n        result[i] = temp[i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8wktwiah.d(59): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428add]\\n??:? void tmp8wktwiah.__unittest_L55_C1()\
    \ [0x4280d3]\\n??:? void tmp8wktwiah.__modtest() [0x42885c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cbbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430cd9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431188]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430c65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ba25]\\n??:? runModuleUnitTests [0x42c991]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428fa0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428f27]\\n??:? _d_run_main [0x428e92]\\n??:? main [0x42886f]\\\
    n??:? __libc_start_main [0x8e7f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    for (long i = 0; i < k; i++) \n    {\n  \
    \      temp[i] = arr[i];\n    }\n    sort(temp);\n    for (long i = k; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] > temp[0]) \n        {\n            temp[0]\
    \ = arr[i];\n            sort(temp);\n        }\n    }\n    for (long i = 0; i\
    \ < k; i++) \n    {\n        result[i] = temp[i];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiebb_ofd.d(36): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpiebb_ofd.d(42): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpiebb_ofd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp37wxjqn9.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp37wxjqn9.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp37wxjqn9.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp37wxjqn9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppy12e30m.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmppy12e30m.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmppy12e30m.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppy12e30m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6abc0dtx.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp6abc0dtx.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp6abc0dtx.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6abc0dtx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplc21g5x2.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmplc21g5x2.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmplc21g5x2.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmplc21g5x2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkk8vxiqd.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpkk8vxiqd.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpkk8vxiqd.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkk8vxiqd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    foreach(i, e; arr)\n    {\n        if(i < k)\n        {\n            result[i]\
    \ = e;\n        }\n        else\n        {\n            long min = result[0];\n\
    \            long minIndex = 0;\n            foreach(j, r; result)\n         \
    \   {\n                if(r < min)\n                {\n                    min\
    \ = r;\n                    minIndex = j;\n                }\n            }\n\
    \            if(e > min)\n            {\n                result[minIndex] = e;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoydsk8mr.d(61): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmpoydsk8mr.__unittest_L57_C1()\
    \ [0x428097]\\n??:? void tmpoydsk8mr.__modtest() [0x428820]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb7b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba0e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431148]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430c25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b9e5]\\n??:? runModuleUnitTests [0x42c951]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f60]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ee7]\\n??:? _d_run_main [0x428e52]\\n??:? main [0x428833]\\\
    n??:? __libc_start_main [0xd32ec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    int index = 0;\n    for (int i = 0; i < arr.length; i++) \n    {\n      \
    \  while (index > 0 && result[index - 1] < arr[i] && index + arr.length - i >\
    \ k) \n        {\n            index--;\n        }\n        if (index < k) \n \
    \       {\n            result[index++] = arr[i];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpim37ekme.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a25]\\n??:? void tmpim37ekme.__unittest_L45_C1()\
    \ [0x42801b]\\n??:? void tmpim37ekme.__modtest() [0x4287a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c21]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4310d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430bad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b96d]\\n??:? runModuleUnitTests [0x42c8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ee8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e6f]\\n??:? _d_run_main [0x428dda]\\n??:? main [0x4287b7]\\\
    n??:? __libc_start_main [0x4e525554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8s1i5x7q.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp8s1i5x7q.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp8s1i5x7q.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8s1i5x7q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6huoz9ye.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp6huoz9ye.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp6huoz9ye.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6huoz9ye.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ml7rg5a.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp2ml7rg5a.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp2ml7rg5a.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2ml7rg5a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj3loq5go.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpj3loq5go.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpj3loq5go.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpj3loq5go.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_7sw5880.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp_7sw5880.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp_7sw5880.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_7sw5880.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvsu3gyy0.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpvsu3gyy0.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpvsu3gyy0.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvsu3gyy0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw1b4316_.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpw1b4316_.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpw1b4316_.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpw1b4316_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps8sskypc.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmps8sskypc.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmps8sskypc.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmps8sskypc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    long[] max = new long[k];\n    long[] min = new long[k];\n    long[] max_index\
    \ = new long[k];\n    long[] min_index = new long[k];\n    long[] max_index_temp\
    \ = new long[k];\n    long[] min_index_temp = new long[k];\n    long max_index_temp_count\
    \ = 0;\n    long min_index_temp_count = 0;\n    long max_index_count = 0;\n  \
    \  long min_index_count = 0;\n    long max_count = 0;\n    long min_count = 0;\n\
    \    long max_temp = 0;\n    long min_temp = 0;\n    long max_temp_index = 0;\n\
    \    long min_temp_index = 0;\n    long temp = 0;\n    long temp_index = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long n = arr.length;\n    long m = k;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long\
    \ c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n\
    \    long h = 0;\n    long l = 0;\n    long o = 0;\n    long[] temp_array = new\
    \ long[k];\n    long[] temp_array_index = new long[k];\n    long temp_array_count\
    \ = 0;\n    long temp_array_index_count = 0;\n    long temp_array_index_temp =\
    \ 0;\n    long temp_array_index_temp_count = 0;\n    long temp_array_index_temp_count_temp\
    \ = 0;\n    long temp_array_index_temp_count_temp_temp = 0;\n    long temp_array\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpneuc8lo5.d(83): Error: semicolon expected, not `unittest`\\n/tmp/tmpneuc8lo5.d(83):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpneuc8lo5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1i8qbeyh.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp1i8qbeyh.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp1i8qbeyh.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1i8qbeyh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] arr2 = new long[k];\n    long[] arr3\
    \ = new long[k];\n    long[] arr4 = new long[k];\n    long[] arr5 = new long[k];\n\
    \    long[] arr6 = new long[k];\n    long[] arr7 = new long[k];\n    long[] arr8\
    \ = new long[k];\n    long[] arr9 = new long[k];\n    long[] arr10 = new long[k];\n\
    \    long[] arr11 = new long[k];\n    long[] arr12 = new long[k];\n    long[]\
    \ arr13 = new long[k];\n    long[] arr14 = new long[k];\n    long[] arr15 = new\
    \ long[k];\n    long[] arr16 = new long[k];\n    long[] arr17 = new long[k];\n\
    \    long[] arr18 = new long[k];\n    long[] arr19 = new long[k];\n    long[]\
    \ arr20 = new long[k];\n    long[] arr21 = new long[k];\n    long[] arr22 = new\
    \ long[k];\n    long[] arr23 = new long[k];\n    long[] arr24 = new long[k];\n\
    \    long[] arr25 = new long[k];\n    long[] arr26 = new long[k];\n    long[]\
    \ arr27 = new long[k];\n    long[] arr28 = new long[k];\n    long[] arr29 = new\
    \ long[k];\n    long[] arr30 = new long[k];\n    long[] arr31 = new long[k];\n\
    \    long[] arr32 = new long[k];\n    long[] arr33 = new long[k];\n    long[]\
    \ arr34 = new long[k];\n    long[] arr35 = new long[k];\n    long[] arr36 = new\
    \ long[k];\n    long[] arr37 = new long[k];\n    long[] arr38 = new long[k];\n\
    \    long[] arr39 = new long[k];\n    long[] arr40 = new long[k];\n    long[]\
    \ arr41 = new long[k];\n    long[] arr42 = new\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_mgx0wug.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp_mgx0wug.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp_mgx0wug.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_mgx0wug.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprv4pvask.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmprv4pvask.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmprv4pvask.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprv4pvask.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[arr.length];\n    long max = 0;\n    long maxIndex\
    \ = 0;\n    long tempIndex = 0;\n    long resultIndex = 0;\n    while(resultIndex\
    \ < k)\n    {\n        for(long i = 0; i < arr.length; i++)\n        {\n     \
    \       if(arr[i] > max)\n            {\n                max = arr[i];\n     \
    \           maxIndex = i;\n            }\n        }\n        result[resultIndex]\
    \ = max;\n        resultIndex++;\n        arr[maxIndex] = -1;\n        max = 0;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplr88nym9.d(57): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a3d]\\n??:? void tmplr88nym9.__unittest_L53_C1()\
    \ [0x428037]\\n??:? void tmplr88nym9.__modtest() [0x4287c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4310e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430bc5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b985]\\n??:? runModuleUnitTests [0x42c8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f00]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e87]\\n??:? _d_run_main [0x428df2]\\n??:? main [0x4287d3]\\\
    n??:? __libc_start_main [0xa7f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        res[i] = arr[i];\n    }\n \
    \   sort(res);\n    for (long i = k; i < arr.length; i++) \n    {\n        if\
    \ (arr[i] > res[0]) \n        {\n            res[0] = arr[i];\n            sort(res);\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi4sv6f74.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpi4sv6f74.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpi4sv6f74.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahiysq3l.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpahiysq3l.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpahiysq3l.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpahiysq3l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfzx98ubw.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpfzx98ubw.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpfzx98ubw.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfzx98ubw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4h4d1wc4.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp4h4d1wc4.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp4h4d1wc4.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4h4d1wc4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc2gnlm6m.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpc2gnlm6m.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpc2gnlm6m.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpc2gnlm6m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] maxHeap = new long[k];\n    long maxHeapSize = 0;\n    foreach(i;\
    \ 0 .. arr.length)\n    {\n        if(maxHeapSize < k)\n        {\n          \
    \  maxHeap[maxHeapSize] = arr[i];\n            maxHeapSize++;\n            if(maxHeapSize\
    \ == k)\n            {\n                maxHeap.sort();\n            }\n     \
    \   }\n        else\n        {\n            if(arr[i] > maxHeap[0])\n        \
    \    {\n                maxHeap[0] = arr[i];\n                maxHeap.sort();\n\
    \            }\n        }\n    }\n    return maxHeap;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpygcktt57.d(41): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpygcktt57.d(49): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygcktt57.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvx9f0t6b.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpvx9f0t6b.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpvx9f0t6b.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvx9f0t6b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5jegqian.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp5jegqian.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp5jegqian.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5jegqian.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] maxHeap = new long[k];\n    foreach(i; 0 .. k)\n    {\n        maxHeap[i]\
    \ = arr[i];\n    }\n    maxHeapify(maxHeap);\n    foreach(i; k .. arr.length)\n\
    \    {\n        if(arr[i] > maxHeap[0])\n        {\n            maxHeap[0] = arr[i];\n\
    \            maxHeapify(maxHeap);\n        }\n    }\n    foreach(i; 0 .. k)\n\
    \    {\n        result[i] = maxHeap[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfcpf8zpf.d(36): Error: undefined identifier `maxHeapify`\\n/tmp/tmpfcpf8zpf.d(42):\
    \ Error: undefined identifier `maxHeapify`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpfcpf8zpf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptcpqo3ds.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmptcpqo3ds.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmptcpqo3ds.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptcpqo3ds.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[arr.length];\n    long[] temp2 = new long[arr.length];\n\
    \    long[] temp3 = new long[arr.length];\n    long[] temp4 = new long[arr.length];\n\
    \    long[] temp5 = new long[arr.length];\n    long[] temp6 = new long[arr.length];\n\
    \    long[] temp7 = new long[arr.length];\n    long[] temp8 = new long[arr.length];\n\
    \    long[] temp9 = new long[arr.length];\n    long[] temp10 = new long[arr.length];\n\
    \    long[] temp11 = new long[arr.length];\n    long[] temp12 = new long[arr.length];\n\
    \    long[] temp13 = new long[arr.length];\n    long[] temp14 = new long[arr.length];\n\
    \    long[] temp15 = new long[arr.length];\n    long[] temp16 = new long[arr.length];\n\
    \    long[] temp17 = new long[arr.length];\n    long[] temp18 = new long[arr.length];\n\
    \    long[] temp19 = new long[arr.length];\n    long[] temp20 = new long[arr.length];\n\
    \    long[] temp21 = new long[arr.length];\n    long[] temp22 = new long[arr.length];\n\
    \    long[] temp23 = new long[arr.length];\n    long[] temp24 = new long[arr.length];\n\
    \    long[] temp25 = new long[arr.length];\n    long[] temp26 = new long[arr.length];\n\
    \    long[] temp27 = new long[arr.length];\n    long[] temp28 = new long[arr.length];\n\
    \    long[] temp29 = new long[arr.length];\n    long[] temp30 = new long[arr.length];\n\
    \    long[] temp31 = new long[arr.length];\n    long[] temp32 = new long[arr.length];\n\
    \    long[] temp33 = new long[arr.length];\n    long[] temp34 = new long[arr.length];\n\
    \    long[] temp35 = new long[arr.length];\n    long[] temp36 = new long[\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpltm6ou6t.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmpltm6ou6t.d(68): Error: found `{` when expecting `]`\\n/tmp/tmpltm6ou6t.d(69):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpltm6ou6t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n      \
    \  if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n    \
    \        sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe7kgt__c.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpe7kgt__c.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpe7kgt__c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpimg2fs4s.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpimg2fs4s.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpimg2fs4s.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpimg2fs4s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[arr.length];\n    long[] temp2 = new long[arr.length];\n\
    \    long[] temp3 = new long[arr.length];\n    long[] temp4 = new long[arr.length];\n\
    \    long[] temp5 = new long[arr.length];\n    long[] temp6 = new long[arr.length];\n\
    \    long[] temp7 = new long[arr.length];\n    long[] temp8 = new long[arr.length];\n\
    \    long[] temp9 = new long[arr.length];\n    long[] temp10 = new long[arr.length];\n\
    \    long[] temp11 = new long[arr.length];\n    long[] temp12 = new long[arr.length];\n\
    \    long[] temp13 = new long[arr.length];\n    long[] temp14 = new long[arr.length];\n\
    \    long[] temp15 = new long[arr.length];\n    long[] temp16 = new long[arr.length];\n\
    \    long[] temp17 = new long[arr.length];\n    long[] temp18 = new long[arr.length];\n\
    \    long[] temp19 = new long[arr.length];\n    long[] temp20 = new long[arr.length];\n\
    \    long[] temp21 = new long[arr.length];\n    long[] temp22 = new long[arr.length];\n\
    \    long[] temp23 = new long[arr.length];\n    long[] temp24 = new long[arr.length];\n\
    \    long[] temp25 = new long[arr.length];\n    long[] temp26 = new long[arr.length];\n\
    \    long[] temp27 = new long[arr.length];\n    long[] temp28 = new long[arr.length];\n\
    \    long[] temp29 = new long[arr.length];\n    long[] temp30 = new long[arr.length];\n\
    \    long[] temp31 = new long[arr.length];\n    long[] temp32 = new long[arr.length];\n\
    \    long[] temp33 = new long[arr.length];\n    long[] temp34 = new long[arr.length];\n\
    \    long[] temp35 = new long[arr.length];\n    long[] temp36 = new long[\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp920ugz78.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmp920ugz78.d(68): Error: found `{` when expecting `]`\\n/tmp/tmp920ugz78.d(69):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp920ugz78.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8h_7l2gl.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp8h_7l2gl.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp8h_7l2gl.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8h_7l2gl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxuoyftsg.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpxuoyftsg.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpxuoyftsg.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxuoyftsg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        temp[i] = arr[i];\n    }\n    sort(temp);\n    for (int\
    \ i = 0; i < k; i++)\n    {\n        result[i] = temp[arr.length - 1 - i];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpembvyk34.d(36): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpembvyk34.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ubckap5.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp0ubckap5.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp0ubckap5.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0ubckap5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzicxd7v6.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpzicxd7v6.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpzicxd7v6.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpzicxd7v6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7byqsp8j.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp7byqsp8j.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp7byqsp8j.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7byqsp8j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7qxcccj7.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp7qxcccj7.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp7qxcccj7.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7qxcccj7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj40uq_pv.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpj40uq_pv.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpj40uq_pv.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpj40uq_pv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long max = 0;\n    long maxIndex = 0;\n \
    \   long tempIndex = 0;\n    long tempMax = 0;\n    long tempMaxIndex = 0;\n \
    \   long tempMin = 0;\n    long tempMinIndex = 0;\n    long tempMinValue = 0;\n\
    \    long tempMaxValue = 0;\n    long tempValue = 0;\n    long resultIndex = 0;\n\
    \    long resultValue = 0;\n    long resultMax = 0;\n    long resultMaxIndex =\
    \ 0;\n    long resultMin = 0;\n    long resultMinIndex = 0;\n    long resultMinValue\
    \ = 0;\n    long resultMaxValue = 0;\n    long resultValue = 0;\n    long resultTemp\
    \ = 0;\n    long resultTempIndex = 0;\n    long resultTempValue = 0;\n    long\
    \ resultTempMax = 0;\n    long resultTempMaxIndex = 0;\n    long resultTempMin\
    \ = 0;\n    long resultTempMinIndex = 0;\n    long resultTempMinValue = 0;\n \
    \   long resultTempMaxValue = 0;\n    long resultTempValue = 0;\n    long resultTempTemp\
    \ = 0;\n    long resultTempTempIndex = 0;\n    long resultTempTempValue = 0;\n\
    \    long resultTempTempMax = 0;\n    long resultTempTempMaxIndex = 0;\n    long\
    \ resultTempTempMin = 0;\n    long resultTempTempMinIndex = 0;\n    long resultTempTempMinValue\
    \ = 0;\n    long resultTempTempMaxValue = 0;\n    long resultTempTempValue = 0;\n\
    \    long resultTempTempTemp = 0;\n    long resultTempTempTempIndex = 0;\n   \
    \ long resultTempTempTempValue = 0;\n    long resultTempTempTempMax = 0;\n   \
    \ long resultTempTempTempMaxIndex = 0;\n    long resultTempTempTempMin = 0;\n\
    \    long resultTempTempTempMinIndex = 0;\n    long resultTempTempTempMinValue\
    \ = 0;\n    long resultTempTempTempMaxValue = 0;\n    long resultTempTempTempValue\
    \ = 0;\n    long resultTempTempTempTemp = 0;\n    long resultTempTempTempTempIndex\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxrxjoq0u.d(83): Error: semicolon expected, not `unittest`\\n/tmp/tmpxrxjoq0u.d(83):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxrxjoq0u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[arr.length];\n    long[] temp2 = new long[arr.length];\n\
    \    long[] temp3 = new long[arr.length];\n    long[] temp4 = new long[arr.length];\n\
    \    long[] temp5 = new long[arr.length];\n    long[] temp6 = new long[arr.length];\n\
    \    long[] temp7 = new long[arr.length];\n    long[] temp8 = new long[arr.length];\n\
    \    long[] temp9 = new long[arr.length];\n    long[] temp10 = new long[arr.length];\n\
    \    long[] temp11 = new long[arr.length];\n    long[] temp12 = new long[arr.length];\n\
    \    long[] temp13 = new long[arr.length];\n    long[] temp14 = new long[arr.length];\n\
    \    long[] temp15 = new long[arr.length];\n    long[] temp16 = new long[arr.length];\n\
    \    long[] temp17 = new long[arr.length];\n    long[] temp18 = new long[arr.length];\n\
    \    long[] temp19 = new long[arr.length];\n    long[] temp20 = new long[arr.length];\n\
    \    long[] temp21 = new long[arr.length];\n    long[] temp22 = new long[arr.length];\n\
    \    long[] temp23 = new long[arr.length];\n    long[] temp24 = new long[arr.length];\n\
    \    long[] temp25 = new long[arr.length];\n    long[] temp26 = new long[arr.length];\n\
    \    long[] temp27 = new long[arr.length];\n    long[] temp28 = new long[arr.length];\n\
    \    long[] temp29 = new long[arr.length];\n    long[] temp30 = new long[arr.length];\n\
    \    long[] temp31 = new long[arr.length];\n    long[] temp32 = new long[arr.length];\n\
    \    long[] temp33 = new long[arr.length];\n    long[] temp34 = new long[arr.length];\n\
    \    long[] temp35 = new long[arr.length];\n    long[] temp36 = new long[\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqbj1eh2m.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmpqbj1eh2m.d(68): Error: found `{` when expecting `]`\\n/tmp/tmpqbj1eh2m.d(69):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpqbj1eh2m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    long[] max = new long[k];\n    long[] min = new long[k];\n    long[] max_index\
    \ = new long[k];\n    long[] min_index = new long[k];\n    long[] max_index_temp\
    \ = new long[k];\n    long[] min_index_temp = new long[k];\n    long[] max_temp\
    \ = new long[k];\n    long[] min_temp = new long[k];\n    long[] max_index_temp_temp\
    \ = new long[k];\n    long[] min_index_temp_temp = new long[k];\n    long[] max_temp_temp\
    \ = new long[k];\n    long[] min_temp_temp = new long[k];\n    long[] max_index_temp_temp_temp\
    \ = new long[k];\n    long[] min_index_temp_temp_temp = new long[k];\n    long[]\
    \ max_temp_temp_temp = new long[k];\n    long[] min_temp_temp_temp = new long[k];\n\
    \    long[] max_index_temp_temp_temp_temp = new long[k];\n    long[] min_index_temp_temp_temp_temp\
    \ = new long[k];\n    long[] max_temp_temp_temp_temp = new long[k];\n    long[]\
    \ min_temp_temp_temp_temp = new long[k];\n    long[] max_index_temp_temp_temp_temp_temp\
    \ = new long[k];\n    long[] min_index_temp_temp_temp_temp_temp = new long[k];\n\
    \    long[] max_temp_temp_temp_temp_temp = new long[k];\n    long[] min_temp_temp_temp_temp_temp\
    \ = new long[k];\n    long[] max_index_temp_temp_temp_temp_temp_temp = new long[k];\n\
    \    long[] min_index_temp_temp_temp_temp_temp_temp = new long[k];\n    long[]\
    \ max_temp_temp_temp_temp_temp_temp = new long[k];\n    long[] min_temp_temp_temp_temp_temp_temp\
    \ =\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp97dl9bx8.d(59): Error: expression expected, not `unittest`\\\
    n/tmp/tmp97dl9bx8.d(60): Error: semicolon expected, not `{`\\n/tmp/tmp97dl9bx8.d(75):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp97dl9bx8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        res[i] = arr[i];\n    }\n \
    \   sort(res);\n    for (long i = k; i < arr.length; i++) \n    {\n        if\
    \ (arr[i] > res[0]) \n        {\n            res[0] = arr[i];\n            sort(res);\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmurpqjc7.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpmurpqjc7.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpmurpqjc7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6062j46d.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp6062j46d.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp6062j46d.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6062j46d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd9qk6c3o.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpd9qk6c3o.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpd9qk6c3o.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpd9qk6c3o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqnq8fsiq.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpqnq8fsiq.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpqnq8fsiq.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqnq8fsiq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] > result[0])\n        {\n            result[0] = arr[i];\n      \
    \      sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp261cr9qy.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp261cr9qy.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp261cr9qy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdkgf8u2d.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpdkgf8u2d.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpdkgf8u2d.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdkgf8u2d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3y2hbybj.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp3y2hbybj.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp3y2hbybj.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3y2hbybj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpug8_jbwo.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpug8_jbwo.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpug8_jbwo.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpug8_jbwo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long max = -1000000000;\n    long maxIndex = 0;\n    for (long i = 0; i <\
    \ k; i++)\n    {\n        for (long j = 0; j < arr.length; j++)\n        {\n \
    \           if (arr[j] > max)\n            {\n                max = arr[j];\n\
    \                maxIndex = j;\n            }\n        }\n        result[i] =\
    \ max;\n        arr[maxIndex] = -1000000000;\n        max = -1000000000;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n  \
    \  assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnm2bwav_.d(53): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a2d]\\n??:? void tmpnm2bwav_.__unittest_L49_C1()\
    \ [0x428027]\\n??:? void tmpnm2bwav_.__modtest() [0x4287b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4310d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430bb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b975]\\n??:? runModuleUnitTests [0x42c8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e77]\\n??:? _d_run_main [0x428de2]\\n??:? main [0x4287c3]\\\
    n??:? __libc_start_main [0xb1ec9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp1 = new long[k];\n    long[] temp2\
    \ = new long[k];\n    long[] temp3 = new long[k];\n    long[] temp4 = new long[k];\n\
    \    long[] temp5 = new long[k];\n    long[] temp6 = new long[k];\n    long[]\
    \ temp7 = new long[k];\n    long[] temp8 = new long[k];\n    long[] temp9 = new\
    \ long[k];\n    long[] temp10 = new long[k];\n    long[] temp11 = new long[k];\n\
    \    long[] temp12 = new long[k];\n    long[] temp13 = new long[k];\n    long[]\
    \ temp14 = new long[k];\n    long[] temp15 = new long[k];\n    long[] temp16 =\
    \ new long[k];\n    long[] temp17 = new long[k];\n    long[] temp18 = new long[k];\n\
    \    long[] temp19 = new long[k];\n    long[] temp20 = new long[k];\n    long[]\
    \ temp21 = new long[k];\n    long[] temp22 = new long[k];\n    long[] temp23 =\
    \ new long[k];\n    long[] temp24 = new long[k];\n    long[] temp25 = new long[k];\n\
    \    long[] temp26 = new long[k];\n    long[] temp27 = new long[k];\n    long[]\
    \ temp28 = new long[k];\n    long[] temp29 = new long[k];\n    long[] temp30 =\
    \ new long[k];\n    long[] temp31 = new long[k];\n    long[] temp32 = new long[k];\n\
    \    long[] temp33 = new long[k];\n    long[] temp34 = new long[k];\n    long[]\
    \ temp35 = new long[k];\n    long[] temp36 = new long[k];\n    long[] temp37 =\
    \ new long[k];\n    long[] temp38 = new long[k];\n    long[] temp39 = new long[k];\n\
    \    long[] temp40 = new long[k];\n    long[] temp41 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7cfi86x2.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp7cfi86x2.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp7cfi86x2.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7cfi86x2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n      \
    \  if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n    \
    \        sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpch9eb3m5.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpch9eb3m5.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpch9eb3m5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk5eljzrw.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpk5eljzrw.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpk5eljzrw.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpk5eljzrw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp18ebx039.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp18ebx039.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp18ebx039.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp18ebx039.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0eqivl7i.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp0eqivl7i.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp0eqivl7i.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0eqivl7i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplbxictsj.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmplbxictsj.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmplbxictsj.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmplbxictsj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpczq_js95.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpczq_js95.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpczq_js95.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpczq_js95.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc9mznuzn.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpc9mznuzn.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpc9mznuzn.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpc9mznuzn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    int j =\
    \ 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n\
    \        {\n            temp[0] = arr[i];\n            for (j = 1; j < k; j++)\n\
    \            {\n                temp[j] = result[j-1];\n            }\n      \
    \      for (j = 0; j < k; j++)\n            {\n                result[j] = temp[j];\n\
    \            }\n        }\n        else if (arr[i] > result[1])\n        {\n \
    \           temp[0] = result[0];\n            temp[1] = arr[i];\n            for\
    \ (j = 2; j < k; j++)\n            {\n                temp[j] = result[j-1];\n\
    \            }\n            for (j = 0; j < k; j++)\n            {\n         \
    \       result[j] = temp[j];\n            }\n        }\n        else if (arr[i]\
    \ > result[2])\n        {\n            temp[0] = result[0];\n            temp[1]\
    \ = result[1];\n            temp[2] = arr[i];\n            for (j = 3; j < k;\
    \ j++)\n            {\n                temp[j] = result[j-1];\n            }\n\
    \            for (j = 0; j < k; j++)\n            {\n                result[j]\
    \ = temp[j];\n            }\n        }\n        else if (arr[i] > result[3])\n\
    \        {\n            temp[0] = result[0];\n            temp[1] = result[1];\n\
    \            temp[2] = result[2];\n            temp[3] = arr[i];\n           \
    \ for (j = 4; j < k; j++)\n            {\n                temp[j] = result[j-1];\n\
    \            }\n            for (j = 0; j < k; j++)\n            {\n         \
    \       result[j] = temp[j];\n            }\n        }\n        else if\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb9o3u5sl.d(91): Error: found `unittest` when expecting `(`\\\
    n/tmp/tmpb9o3u5sl.d(107): Error: found `void` when expecting `)`\\n/tmp/tmpb9o3u5sl.d(107):\
    \ Error: found `{` when expecting `;` following statement\\n/tmp/tmpb9o3u5sl.d(107):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9o3u5sl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp54icw75u.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp54icw75u.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp54icw75u.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp54icw75u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfz5oj2bs.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpfz5oj2bs.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpfz5oj2bs.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfz5oj2bs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[arr.length];\n    long[] temp2 = new long[arr.length];\n\
    \    long[] temp3 = new long[arr.length];\n    long[] temp4 = new long[arr.length];\n\
    \    long[] temp5 = new long[arr.length];\n    long[] temp6 = new long[arr.length];\n\
    \    long[] temp7 = new long[arr.length];\n    long[] temp8 = new long[arr.length];\n\
    \    long[] temp9 = new long[arr.length];\n    long[] temp10 = new long[arr.length];\n\
    \    long[] temp11 = new long[arr.length];\n    long[] temp12 = new long[arr.length];\n\
    \    long[] temp13 = new long[arr.length];\n    long[] temp14 = new long[arr.length];\n\
    \    long[] temp15 = new long[arr.length];\n    long[] temp16 = new long[arr.length];\n\
    \    long[] temp17 = new long[arr.length];\n    long[] temp18 = new long[arr.length];\n\
    \    long[] temp19 = new long[arr.length];\n    long[] temp20 = new long[arr.length];\n\
    \    long[] temp21 = new long[arr.length];\n    long[] temp22 = new long[arr.length];\n\
    \    long[] temp23 = new long[arr.length];\n    long[] temp24 = new long[arr.length];\n\
    \    long[] temp25 = new long[arr.length];\n    long[] temp26 = new long[arr.length];\n\
    \    long[] temp27 = new long[arr.length];\n    long[] temp28 = new long[arr.length];\n\
    \    long[] temp29 = new long[arr.length];\n    long[] temp30 = new long[arr.length];\n\
    \    long[] temp31 = new long[arr.length];\n    long[] temp32 = new long[arr.length];\n\
    \    long[] temp33 = new long[arr.length];\n    long[] temp34 = new long[arr.length];\n\
    \    long[] temp35 = new long[arr.length];\n    long[] temp36 = new long[\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpewtvigxn.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmpewtvigxn.d(68): Error: found `{` when expecting `]`\\n/tmp/tmpewtvigxn.d(69):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpewtvigxn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi247w5w3.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpi247w5w3.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpi247w5w3.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpi247w5w3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1e_bpdsk.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp1e_bpdsk.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp1e_bpdsk.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1e_bpdsk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        long max = arr[i];\n      \
    \  long maxIndex = i;\n        for (long j = i + 1; j < arr.length; j++) \n  \
    \      {\n            if (arr[j] > max) \n            {\n                max =\
    \ arr[j];\n                maxIndex = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[maxIndex] = arr[i];\n        arr[i] = max;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6h5q1mok.d(53): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a95]\\n??:? void tmp6h5q1mok.__unittest_L49_C1()\
    \ [0x42808b]\\n??:? void tmp6h5q1mok.__modtest() [0x428814]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431140]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430c1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b9dd]\\n??:? runModuleUnitTests [0x42c949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f58]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428edf]\\n??:? _d_run_main [0x428e4a]\\n??:? main [0x428827]\\\
    n??:? __libc_start_main [0xcf21a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9ai2pair.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp9ai2pair.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp9ai2pair.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9ai2pair.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz2_kv4ka.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpz2_kv4ka.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpz2_kv4ka.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpz2_kv4ka.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjewp6kf.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpxjewp6kf.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpxjewp6kf.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxjewp6kf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5y2g4dht.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp5y2g4dht.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp5y2g4dht.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5y2g4dht.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplngd3jgi.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmplngd3jgi.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmplngd3jgi.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmplngd3jgi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_aowqm1i.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp_aowqm1i.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp_aowqm1i.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_aowqm1i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1oqrii1d.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp1oqrii1d.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp1oqrii1d.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1oqrii1d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        res[i] = arr[i];\n    }\n  \
    \  sort(res);\n    for (long i = k; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ > res[0])\n        {\n            res[0] = arr[i];\n            sort(res);\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3rkvw7r7.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp3rkvw7r7.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp3rkvw7r7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_72454r_.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp_72454r_.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp_72454r_.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_72454r_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptmyo6zb5.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmptmyo6zb5.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmptmyo6zb5.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptmyo6zb5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw1v8yj2k.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpw1v8yj2k.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpw1v8yj2k.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpw1v8yj2k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n      \
    \  if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n    \
    \        sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptfhm9284.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmptfhm9284.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmptfhm9284.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxy6gkuqe.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpxy6gkuqe.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpxy6gkuqe.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxy6gkuqe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6tpd04gk.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp6tpd04gk.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp6tpd04gk.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6tpd04gk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdzmhhv4t.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpdzmhhv4t.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpdzmhhv4t.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdzmhhv4t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n      \
    \  if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n    \
    \        sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkpovltqf.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpkpovltqf.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpkpovltqf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_mj6krne.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp_mj6krne.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp_mj6krne.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_mj6krne.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2kuqfrhx.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp2kuqfrhx.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp2kuqfrhx.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2kuqfrhx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdtuylsxg.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpdtuylsxg.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpdtuylsxg.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdtuylsxg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        long max = -1000000;\n    \
    \    long maxIndex = -1;\n        for (long j = 0; j < arr.length; j++) \n   \
    \     {\n            if (arr[j] > max) \n            {\n                max =\
    \ arr[j];\n                maxIndex = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[maxIndex] = -1000000;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy36qbuwm.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a35]\\n??:? void tmpy36qbuwm.__unittest_L48_C1()\
    \ [0x42802f]\\n??:? void tmpy36qbuwm.__modtest() [0x4287b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4310e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430bbd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b97d]\\n??:? runModuleUnitTests [0x42c8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7f]\\n??:? _d_run_main [0x428dea]\\n??:? main [0x4287cb]\\\
    n??:? __libc_start_main [0xf5832554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprxag29rn.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmprxag29rn.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmprxag29rn.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprxag29rn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1w_3j6q5.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp1w_3j6q5.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp1w_3j6q5.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1w_3j6q5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnseb6xx8.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpnseb6xx8.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpnseb6xx8.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpnseb6xx8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] > result[0])\n        {\n            result[0] = arr[i];\n      \
    \      sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqrevqy5p.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpqrevqy5p.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpqrevqy5p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    long[] max = new long[k];\n    long[] min = new long[k];\n    long[] max_index\
    \ = new long[k];\n    long[] min_index = new long[k];\n    long max_index_count\
    \ = 0;\n    long min_index_count = 0;\n    long max_count = 0;\n    long min_count\
    \ = 0;\n    long max_value = -1000000000;\n    long min_value = 1000000000;\n\
    \    long max_value_index = 0;\n    long min_value_index = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long temp = 0;\n    long temp_index = 0;\n    long temp_count\
    \ = 0;\n    long temp_index_count = 0;\n    long temp_value = 0;\n    long temp_value_index\
    \ = 0;\n    long flag = 0;\n    long flag_index = 0;\n    long flag_count = 0;\n\
    \    long flag_index_count = 0;\n    long flag_value = 0;\n    long flag_value_index\
    \ = 0;\n    long flag_value_count = 0;\n    long flag_value_index_count = 0;\n\
    \    long flag_value_value = 0;\n    long flag_value_value_index = 0;\n    long\
    \ flag_value_value_count = 0;\n    long flag_value_value_index_count = 0;\n  \
    \  long flag_value_value_value = 0;\n    long flag_value_value_value_index = 0;\n\
    \    long flag_value_value_value_count = 0;\n    long flag_value_value_value_index_count\
    \ = 0;\n    long flag_value_value_value_value = 0;\n    long flag_value_value_value_value_index\
    \ = 0;\n    long flag_value_value_value_value_count = 0;\n    long flag_value_value_value_value_index_count\
    \ = 0;\n    long flag_value_value_value_value_value = 0;\n    long flag_value_value_value_value_value_index\
    \ = 0;\n\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps6msgvh6.d(74): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps6msgvh6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcx0r31w7.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpcx0r31w7.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpcx0r31w7.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcx0r31w7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] maxHeap = new long[k];\n    long maxHeapSize = 0;\n    foreach(i;\
    \ arr)\n    {\n        if(maxHeapSize < k)\n        {\n            maxHeap[maxHeapSize]\
    \ = i;\n            maxHeapSize++;\n            if(maxHeapSize == k)\n       \
    \     {\n                maxHeap.makeHeap();\n            }\n        }\n     \
    \   else\n        {\n            if(i > maxHeap[0])\n            {\n         \
    \       maxHeap[0] = i;\n                maxHeap.siftDown(0);\n            }\n\
    \        }\n    }\n    foreach(i; maxHeap)\n    {\n        result[i] = maxHeap[i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmjnf66ew.d(41): Error: no property `makeHeap` for type `long[]`\\\
    n/tmp/tmpmjnf66ew.d(49): Error: no property `siftDown` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmjnf66ew.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdhhpnddr.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpdhhpnddr.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpdhhpnddr.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdhhpnddr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbotguxgt.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpbotguxgt.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpbotguxgt.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpbotguxgt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx7d6_wx1.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpx7d6_wx1.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpx7d6_wx1.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpx7d6_wx1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n      \
    \  if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n    \
    \        sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe1my6pxk.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpe1my6pxk.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpe1my6pxk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq41gwhuv.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpq41gwhuv.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpq41gwhuv.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpq41gwhuv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long max = 0;\n    long maxIndex = 0;\n \
    \   for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n      \
    \  temp[i] = arr[i];\n    }\n    sort(result);\n    for (long i = k; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] > result[0]) \n        {\n            result[0]\
    \ = arr[i];\n            sort(result);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp57s5bxyw.d(39): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp57s5bxyw.d(45): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp57s5bxyw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0heszxs3.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp0heszxs3.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp0heszxs3.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0heszxs3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgqzdihoi.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpgqzdihoi.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpgqzdihoi.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgqzdihoi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] maxHeap = new long[k];\n    long maxHeapSize = 0;\n    for (long i\
    \ = 0; i < arr.length; i++) \n    {\n        if (maxHeapSize < k) \n        {\n\
    \            maxHeap[maxHeapSize] = arr[i];\n            maxHeapSize++;\n    \
    \        if (maxHeapSize == k) \n            {\n                buildMaxHeap(maxHeap,\
    \ maxHeapSize);\n            }\n        } \n        else \n        {\n       \
    \     if (arr[i] > maxHeap[0]) \n            {\n                maxHeap[0] = arr[i];\n\
    \                maxHeapify(maxHeap, 0, maxHeapSize);\n            }\n       \
    \ }\n    }\n    for (long i = 0; i < k; i++) \n    {\n        result[i] = maxHeap[i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvg7k9_b1.d(41): Error: undefined identifier `buildMaxHeap`\\\
    n/tmp/tmpvg7k9_b1.d(49): Error: undefined identifier `maxHeapify`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvg7k9_b1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl8g2ew8i.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpl8g2ew8i.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpl8g2ew8i.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpl8g2ew8i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphrygx63m.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmphrygx63m.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmphrygx63m.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmphrygx63m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n      \
    \  if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n    \
    \        sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpppg269zs.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpppg269zs.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpppg269zs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkcp8uw9d.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpkcp8uw9d.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpkcp8uw9d.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkcp8uw9d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpujhbtszn.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpujhbtszn.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpujhbtszn.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpujhbtszn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[arr.length];\n    long[] temp2 = new long[arr.length];\n\
    \    long[] temp3 = new long[arr.length];\n    long[] temp4 = new long[arr.length];\n\
    \    long[] temp5 = new long[arr.length];\n    long[] temp6 = new long[arr.length];\n\
    \    long[] temp7 = new long[arr.length];\n    long[] temp8 = new long[arr.length];\n\
    \    long[] temp9 = new long[arr.length];\n    long[] temp10 = new long[arr.length];\n\
    \    long[] temp11 = new long[arr.length];\n    long[] temp12 = new long[arr.length];\n\
    \    long[] temp13 = new long[arr.length];\n    long[] temp14 = new long[arr.length];\n\
    \    long[] temp15 = new long[arr.length];\n    long[] temp16 = new long[arr.length];\n\
    \    long[] temp17 = new long[arr.length];\n    long[] temp18 = new long[arr.length];\n\
    \    long[] temp19 = new long[arr.length];\n    long[] temp20 = new long[arr.length];\n\
    \    long[] temp21 = new long[arr.length];\n    long[] temp22 = new long[arr.length];\n\
    \    long[] temp23 = new long[arr.length];\n    long[] temp24 = new long[arr.length];\n\
    \    long[] temp25 = new long[arr.length];\n    long[] temp26 = new long[arr.length];\n\
    \    long[] temp27 = new long[arr.length];\n    long[] temp28 = new long[arr.length];\n\
    \    long[] temp29 = new long[arr.length];\n    long[] temp30 = new long[arr.length];\n\
    \    long[] temp31 = new long[arr.length];\n    long[] temp32 = new long[arr.length];\n\
    \    long[] temp33 = new long[arr.length];\n    long[] temp34 = new long[arr.length];\n\
    \    long[] temp35 = new long[arr.length];\n    long[] temp36 = new long[\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgcb72voz.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmpgcb72voz.d(68): Error: found `{` when expecting `]`\\n/tmp/tmpgcb72voz.d(69):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpgcb72voz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyu_oipx2.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpyu_oipx2.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpyu_oipx2.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyu_oipx2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp21844qf2.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp21844qf2.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp21844qf2.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp21844qf2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[arr.length];\n    long[] temp2 = new long[arr.length];\n\
    \    long[] temp3 = new long[arr.length];\n    long[] temp4 = new long[arr.length];\n\
    \    long[] temp5 = new long[arr.length];\n    long[] temp6 = new long[arr.length];\n\
    \    long[] temp7 = new long[arr.length];\n    long[] temp8 = new long[arr.length];\n\
    \    long[] temp9 = new long[arr.length];\n    long[] temp10 = new long[arr.length];\n\
    \    long[] temp11 = new long[arr.length];\n    long[] temp12 = new long[arr.length];\n\
    \    long[] temp13 = new long[arr.length];\n    long[] temp14 = new long[arr.length];\n\
    \    long[] temp15 = new long[arr.length];\n    long[] temp16 = new long[arr.length];\n\
    \    long[] temp17 = new long[arr.length];\n    long[] temp18 = new long[arr.length];\n\
    \    long[] temp19 = new long[arr.length];\n    long[] temp20 = new long[arr.length];\n\
    \    long[] temp21 = new long[arr.length];\n    long[] temp22 = new long[arr.length];\n\
    \    long[] temp23 = new long[arr.length];\n    long[] temp24 = new long[arr.length];\n\
    \    long[] temp25 = new long[arr.length];\n    long[] temp26 = new long[arr.length];\n\
    \    long[] temp27 = new long[arr.length];\n    long[] temp28 = new long[arr.length];\n\
    \    long[] temp29 = new long[arr.length];\n    long[] temp30 = new long[arr.length];\n\
    \    long[] temp31 = new long[arr.length];\n    long[] temp32 = new long[arr.length];\n\
    \    long[] temp33 = new long[arr.length];\n    long[] temp34 = new long[arr.length];\n\
    \    long[] temp35 = new long[arr.length];\n    long[] temp36 = new long[\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpojlc9zx0.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmpojlc9zx0.d(68): Error: found `{` when expecting `]`\\n/tmp/tmpojlc9zx0.d(69):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpojlc9zx0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4skwdpai.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp4skwdpai.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp4skwdpai.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4skwdpai.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6vl06u_a.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp6vl06u_a.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp6vl06u_a.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6vl06u_a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq8y83gv0.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpq8y83gv0.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpq8y83gv0.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpq8y83gv0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    for (long i = 0; i < k; i++) \n    {\n  \
    \      temp[i] = arr[i];\n    }\n    sort(temp);\n    for (long i = k; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] > temp[0]) \n        {\n            temp[0]\
    \ = arr[i];\n            sort(temp);\n        }\n    }\n    for (long i = 0; i\
    \ < k; i++) \n    {\n        result[i] = temp[i];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy4a9uhaj.d(36): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpy4a9uhaj.d(42): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpy4a9uhaj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    if (k == 0) return result;\n    if (k == arr.length) return arr;\n    if\
    \ (k == 1) return [max(arr)];\n    long[] sorted = arr.dup;\n    sort(sorted);\n\
    \    for (long i = 0; i < k; i++)\n    {\n        result[i] = sorted[arr.length\
    \ - i - 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjsr55xib.d(33): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpjsr55xib.d(35): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpjsr55xib.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpycqfm038.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpycqfm038.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpycqfm038.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpycqfm038.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    if (k == 0) return result;\n    if (k == arr.length) return arr;\n    if\
    \ (k > arr.length) return new long[0];\n    long[] temp = new long[k];\n    for\
    \ (long i = 0; i < k; i++)\n    {\n        temp[i] = arr[i];\n    }\n    temp.sort();\n\
    \    for (long i = k; i < arr.length; i++)\n    {\n        if (arr[i] > temp[0])\n\
    \        {\n            temp[0] = arr[i];\n            temp.sort();\n        }\n\
    \    }\n    for (long i = 0; i < k; i++)\n    {\n        result[i] = temp[k -\
    \ i - 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphlxpotof.d(39): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmphlxpotof.d(45): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphlxpotof.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfgg9pyqx.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpfgg9pyqx.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpfgg9pyqx.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfgg9pyqx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcp0ts50p.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpcp0ts50p.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpcp0ts50p.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcp0ts50p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0am37db.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpo0am37db.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpo0am37db.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpo0am37db.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmposh2fzc_.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmposh2fzc_.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmposh2fzc_.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmposh2fzc_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplup2wkh9.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmplup2wkh9.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmplup2wkh9.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmplup2wkh9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        long max = arr[i];\n      \
    \  long maxIndex = i;\n        for (long j = i + 1; j < arr.length; j++) \n  \
    \      {\n            if (arr[j] > max) \n            {\n                max =\
    \ arr[j];\n                maxIndex = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[maxIndex] = arr[i];\n        arr[i] = max;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp05891dau.d(53): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a95]\\n??:? void tmp05891dau.__unittest_L49_C1()\
    \ [0x42808b]\\n??:? void tmp05891dau.__modtest() [0x428814]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431140]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430c1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b9dd]\\n??:? runModuleUnitTests [0x42c949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f58]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428edf]\\n??:? _d_run_main [0x428e4a]\\n??:? main [0x428827]\\\
    n??:? __libc_start_main [0x65e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] > result[0])\n        {\n            result[0] = arr[i];\n      \
    \      sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0q2a90jc.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp0q2a90jc.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp0q2a90jc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7dzcw8g1.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp7dzcw8g1.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp7dzcw8g1.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7dzcw8g1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] > result[0])\n        {\n            result[0] = arr[i];\n      \
    \      sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5sjprmrf.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp5sjprmrf.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp5sjprmrf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbx9sdm8i.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpbx9sdm8i.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpbx9sdm8i.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpbx9sdm8i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9qp27_az.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp9qp27_az.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp9qp27_az.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9qp27_az.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] > result[0])\n        {\n            result[0] = arr[i];\n      \
    \      sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphpetp7a8.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmphpetp7a8.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmphpetp7a8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ed43w6e.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp2ed43w6e.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp2ed43w6e.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2ed43w6e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsfc6oxan.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpsfc6oxan.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpsfc6oxan.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsfc6oxan.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n      \
    \  if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n    \
    \        sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfgqzxlu3.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpfgqzxlu3.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpfgqzxlu3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9a0yl44l.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp9a0yl44l.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp9a0yl44l.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9a0yl44l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbx_rx88j.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpbx_rx88j.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpbx_rx88j.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpbx_rx88j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ccuw00g.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp_ccuw00g.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp_ccuw00g.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_ccuw00g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    qsort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n     \
    \   if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n   \
    \         qsort(result);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2m2t18h8.d(35): Error: undefined identifier `qsort`\\n/tmp/tmp2m2t18h8.d(41):\
    \ Error: undefined identifier `qsort`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2m2t18h8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    for (long i = 0; i < k; i++)\n    {\n   \
    \     result[i] = arr[i];\n    }\n    sort(result);\n    for (long i = k; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n      \
    \      result[0] = arr[i];\n            sort(result);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpva14mx0z.d(36): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpva14mx0z.d(42): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpva14mx0z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp1 = new long[k];\n    long[] temp2\
    \ = new long[k];\n    long[] temp3 = new long[k];\n    long[] temp4 = new long[k];\n\
    \    long[] temp5 = new long[k];\n    long[] temp6 = new long[k];\n    long[]\
    \ temp7 = new long[k];\n    long[] temp8 = new long[k];\n    long[] temp9 = new\
    \ long[k];\n    long[] temp10 = new long[k];\n    long[] temp11 = new long[k];\n\
    \    long[] temp12 = new long[k];\n    long[] temp13 = new long[k];\n    long[]\
    \ temp14 = new long[k];\n    long[] temp15 = new long[k];\n    long[] temp16 =\
    \ new long[k];\n    long[] temp17 = new long[k];\n    long[] temp18 = new long[k];\n\
    \    long[] temp19 = new long[k];\n    long[] temp20 = new long[k];\n    long[]\
    \ temp21 = new long[k];\n    long[] temp22 = new long[k];\n    long[] temp23 =\
    \ new long[k];\n    long[] temp24 = new long[k];\n    long[] temp25 = new long[k];\n\
    \    long[] temp26 = new long[k];\n    long[] temp27 = new long[k];\n    long[]\
    \ temp28 = new long[k];\n    long[] temp29 = new long[k];\n    long[] temp30 =\
    \ new long[k];\n    long[] temp31 = new long[k];\n    long[] temp32 = new long[k];\n\
    \    long[] temp33 = new long[k];\n    long[] temp34 = new long[k];\n    long[]\
    \ temp35 = new long[k];\n    long[] temp36 = new long[k];\n    long[] temp37 =\
    \ new long[k];\n    long[] temp38 = new long[k];\n    long[] temp39 = new long[k];\n\
    \    long[] temp40 = new long[k];\n    long[] temp41 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj4w576e2.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpj4w576e2.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpj4w576e2.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpj4w576e2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0qnhurgz.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp0qnhurgz.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp0qnhurgz.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0qnhurgz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1774e9jk.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp1774e9jk.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp1774e9jk.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1774e9jk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq62l8qwp.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpq62l8qwp.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpq62l8qwp.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpq62l8qwp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] tmp = new long[k];\n    long[] tmp2 = new long[k];\n    long[] tmp3\
    \ = new long[k];\n    long[] tmp4 = new long[k];\n    long[] tmp5 = new long[k];\n\
    \    long[] tmp6 = new long[k];\n    long[] tmp7 = new long[k];\n    long[] tmp8\
    \ = new long[k];\n    long[] tmp9 = new long[k];\n    long[] tmp10 = new long[k];\n\
    \    long[] tmp11 = new long[k];\n    long[] tmp12 = new long[k];\n    long[]\
    \ tmp13 = new long[k];\n    long[] tmp14 = new long[k];\n    long[] tmp15 = new\
    \ long[k];\n    long[] tmp16 = new long[k];\n    long[] tmp17 = new long[k];\n\
    \    long[] tmp18 = new long[k];\n    long[] tmp19 = new long[k];\n    long[]\
    \ tmp20 = new long[k];\n    long[] tmp21 = new long[k];\n    long[] tmp22 = new\
    \ long[k];\n    long[] tmp23 = new long[k];\n    long[] tmp24 = new long[k];\n\
    \    long[] tmp25 = new long[k];\n    long[] tmp26 = new long[k];\n    long[]\
    \ tmp27 = new long[k];\n    long[] tmp28 = new long[k];\n    long[] tmp29 = new\
    \ long[k];\n    long[] tmp30 = new long[k];\n    long[] tmp31 = new long[k];\n\
    \    long[] tmp32 = new long[k];\n    long[] tmp33 = new long[k];\n    long[]\
    \ tmp34 = new long[k];\n    long[] tmp35 = new long[k];\n    long[] tmp36 = new\
    \ long[k];\n    long[] tmp37 = new long[k];\n    long[] tmp38 = new long[k];\n\
    \    long[] tmp39 = new long[k];\n    long[] tmp40 = new long[k];\n    long[]\
    \ tmp41 = new long[k];\n    long[] tmp42 = new\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0hz1d6a1.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp0hz1d6a1.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp0hz1d6a1.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0hz1d6a1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpujnc_m69.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpujnc_m69.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpujnc_m69.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpujnc_m69.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyzpx0xty.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpyzpx0xty.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpyzpx0xty.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyzpx0xty.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        res[i] = arr[i];\n    }\n \
    \   sort(res);\n    for (long i = k; i < arr.length; i++) \n    {\n        if\
    \ (arr[i] > res[0]) \n        {\n            res[0] = arr[i];\n            sort(res);\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4udrcpn4.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp4udrcpn4.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp4udrcpn4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc30sah27.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpc30sah27.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpc30sah27.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpc30sah27.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphxs0szhs.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmphxs0szhs.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmphxs0szhs.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmphxs0szhs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5plhm_2o.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp5plhm_2o.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp5plhm_2o.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5plhm_2o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptamxrvvg.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmptamxrvvg.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmptamxrvvg.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptamxrvvg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6tagkkb4.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp6tagkkb4.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp6tagkkb4.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6tagkkb4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdlrqdoi5.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpdlrqdoi5.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpdlrqdoi5.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdlrqdoi5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkabheew6.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpkabheew6.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpkabheew6.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkabheew6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    for (int i = 0; i < k; i++) \n    {\n   \
    \     temp[i] = arr[i];\n    }\n    sort(temp);\n    for (int i = k; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] > temp[0]) \n        {\n            temp[0]\
    \ = arr[i];\n            sort(temp);\n        }\n    }\n    for (int i = 0; i\
    \ < k; i++) \n    {\n        result[i] = temp[i];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpup72_rvm.d(36): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpup72_rvm.d(37): Error: cannot implicitly convert\
    \ expression `k` of type `long` to `int`\\n/tmp/tmpup72_rvm.d(42): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpup72_rvm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[arr.length];\n    long[] temp2 = new long[arr.length];\n\
    \    long[] temp3 = new long[arr.length];\n    long[] temp4 = new long[arr.length];\n\
    \    long[] temp5 = new long[arr.length];\n    long[] temp6 = new long[arr.length];\n\
    \    long[] temp7 = new long[arr.length];\n    long[] temp8 = new long[arr.length];\n\
    \    long[] temp9 = new long[arr.length];\n    long[] temp10 = new long[arr.length];\n\
    \    long[] temp11 = new long[arr.length];\n    long[] temp12 = new long[arr.length];\n\
    \    long[] temp13 = new long[arr.length];\n    long[] temp14 = new long[arr.length];\n\
    \    long[] temp15 = new long[arr.length];\n    long[] temp16 = new long[arr.length];\n\
    \    long[] temp17 = new long[arr.length];\n    long[] temp18 = new long[arr.length];\n\
    \    long[] temp19 = new long[arr.length];\n    long[] temp20 = new long[arr.length];\n\
    \    long[] temp21 = new long[arr.length];\n    long[] temp22 = new long[arr.length];\n\
    \    long[] temp23 = new long[arr.length];\n    long[] temp24 = new long[arr.length];\n\
    \    long[] temp25 = new long[arr.length];\n    long[] temp26 = new long[arr.length];\n\
    \    long[] temp27 = new long[arr.length];\n    long[] temp28 = new long[arr.length];\n\
    \    long[] temp29 = new long[arr.length];\n    long[] temp30 = new long[arr.length];\n\
    \    long[] temp31 = new long[arr.length];\n    long[] temp32 = new long[arr.length];\n\
    \    long[] temp33 = new long[arr.length];\n    long[] temp34 = new long[arr.length];\n\
    \    long[] temp35 = new long[arr.length];\n    long[] temp36 = new long[\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp39mqqhdc.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmp39mqqhdc.d(68): Error: found `{` when expecting `]`\\n/tmp/tmp39mqqhdc.d(69):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp39mqqhdc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[arr.length];\n    long[] temp2 = new long[arr.length];\n\
    \    long[] temp3 = new long[arr.length];\n    long[] temp4 = new long[arr.length];\n\
    \    long[] temp5 = new long[arr.length];\n    long[] temp6 = new long[arr.length];\n\
    \    long[] temp7 = new long[arr.length];\n    long[] temp8 = new long[arr.length];\n\
    \    long[] temp9 = new long[arr.length];\n    long[] temp10 = new long[arr.length];\n\
    \    long[] temp11 = new long[arr.length];\n    long[] temp12 = new long[arr.length];\n\
    \    long[] temp13 = new long[arr.length];\n    long[] temp14 = new long[arr.length];\n\
    \    long[] temp15 = new long[arr.length];\n    long[] temp16 = new long[arr.length];\n\
    \    long[] temp17 = new long[arr.length];\n    long[] temp18 = new long[arr.length];\n\
    \    long[] temp19 = new long[arr.length];\n    long[] temp20 = new long[arr.length];\n\
    \    long[] temp21 = new long[arr.length];\n    long[] temp22 = new long[arr.length];\n\
    \    long[] temp23 = new long[arr.length];\n    long[] temp24 = new long[arr.length];\n\
    \    long[] temp25 = new long[arr.length];\n    long[] temp26 = new long[arr.length];\n\
    \    long[] temp27 = new long[arr.length];\n    long[] temp28 = new long[arr.length];\n\
    \    long[] temp29 = new long[arr.length];\n    long[] temp30 = new long[arr.length];\n\
    \    long[] temp31 = new long[arr.length];\n    long[] temp32 = new long[arr.length];\n\
    \    long[] temp33 = new long[arr.length];\n    long[] temp34 = new long[arr.length];\n\
    \    long[] temp35 = new long[arr.length];\n    long[] temp36 = new long[\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvzesaq9h.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmpvzesaq9h.d(68): Error: found `{` when expecting `]`\\n/tmp/tmpvzesaq9h.d(69):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpvzesaq9h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n      \
    \  if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n    \
    \        sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpan5yxyfk.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpan5yxyfk.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpan5yxyfk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw_ed0v7t.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpw_ed0v7t.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpw_ed0v7t.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpw_ed0v7t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7bwdt1j6.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp7bwdt1j6.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp7bwdt1j6.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7bwdt1j6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n\
    \    sort(result);\n    for (long i = k; i < arr.length; i++) \n    {\n      \
    \  if (arr[i] > result[0]) \n        {\n            result[0] = arr[i];\n    \
    \        sort(result);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6mrknzpw.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp6mrknzpw.d(41): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp6mrknzpw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3j7jdvlz.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp3j7jdvlz.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp3j7jdvlz.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3j7jdvlz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpggg7sv_i.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpggg7sv_i.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpggg7sv_i.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpggg7sv_i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3zuf7gtp.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp3zuf7gtp.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp3zuf7gtp.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3zuf7gtp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    long[] tmp = new long[k];\n    long[] tmp2 = new long[k];\n    long[] tmp3\
    \ = new long[k];\n    long[] tmp4 = new long[k];\n    long[] tmp5 = new long[k];\n\
    \    long[] tmp6 = new long[k];\n    long[] tmp7 = new long[k];\n    long[] tmp8\
    \ = new long[k];\n    long[] tmp9 = new long[k];\n    long[] tmp10 = new long[k];\n\
    \    long[] tmp11 = new long[k];\n    long[] tmp12 = new long[k];\n    long[]\
    \ tmp13 = new long[k];\n    long[] tmp14 = new long[k];\n    long[] tmp15 = new\
    \ long[k];\n    long[] tmp16 = new long[k];\n    long[] tmp17 = new long[k];\n\
    \    long[] tmp18 = new long[k];\n    long[] tmp19 = new long[k];\n    long[]\
    \ tmp20 = new long[k];\n    long[] tmp21 = new long[k];\n    long[] tmp22 = new\
    \ long[k];\n    long[] tmp23 = new long[k];\n    long[] tmp24 = new long[k];\n\
    \    long[] tmp25 = new long[k];\n    long[] tmp26 = new long[k];\n    long[]\
    \ tmp27 = new long[k];\n    long[] tmp28 = new long[k];\n    long[] tmp29 = new\
    \ long[k];\n    long[] tmp30 = new long[k];\n    long[] tmp31 = new long[k];\n\
    \    long[] tmp32 = new long[k];\n    long[] tmp33 = new long[k];\n    long[]\
    \ tmp34 = new long[k];\n    long[] tmp35 = new long[k];\n    long[] tmp36 = new\
    \ long[k];\n    long[] tmp37 = new long[k];\n    long[] tmp38 = new long[k];\n\
    \    long[] tmp39 = new long[k];\n    long[] tmp40 = new long[k];\n    long[]\
    \ tmp41 = new long[k];\n    long[] tmp42 = new\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzdvkqx2x.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpzdvkqx2x.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpzdvkqx2x.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpzdvkqx2x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ktrf5ax.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp5ktrf5ax.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp5ktrf5ax.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5ktrf5ax.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgxwkdgu1.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpgxwkdgu1.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpgxwkdgu1.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgxwkdgu1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] result = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp506cihq_.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmp506cihq_.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp506cihq_.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp506cihq_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    long[] tmp = new long[k];\n    long[] tmp2 = new long[k];\n    long[] tmp3\
    \ = new long[k];\n    long[] tmp4 = new long[k];\n    long[] tmp5 = new long[k];\n\
    \    long[] tmp6 = new long[k];\n    long[] tmp7 = new long[k];\n    long[] tmp8\
    \ = new long[k];\n    long[] tmp9 = new long[k];\n    long[] tmp10 = new long[k];\n\
    \    long[] tmp11 = new long[k];\n    long[] tmp12 = new long[k];\n    long[]\
    \ tmp13 = new long[k];\n    long[] tmp14 = new long[k];\n    long[] tmp15 = new\
    \ long[k];\n    long[] tmp16 = new long[k];\n    long[] tmp17 = new long[k];\n\
    \    long[] tmp18 = new long[k];\n    long[] tmp19 = new long[k];\n    long[]\
    \ tmp20 = new long[k];\n    long[] tmp21 = new long[k];\n    long[] tmp22 = new\
    \ long[k];\n    long[] tmp23 = new long[k];\n    long[] tmp24 = new long[k];\n\
    \    long[] tmp25 = new long[k];\n    long[] tmp26 = new long[k];\n    long[]\
    \ tmp27 = new long[k];\n    long[] tmp28 = new long[k];\n    long[] tmp29 = new\
    \ long[k];\n    long[] tmp30 = new long[k];\n    long[] tmp31 = new long[k];\n\
    \    long[] tmp32 = new long[k];\n    long[] tmp33 = new long[k];\n    long[]\
    \ tmp34 = new long[k];\n    long[] tmp35 = new long[k];\n    long[] tmp36 = new\
    \ long[k];\n    long[] tmp37 = new long[k];\n    long[] tmp38 = new long[k];\n\
    \    long[] tmp39 = new long[k];\n    long[] tmp40 = new long[k];\n    long[]\
    \ tmp41 = new long[k];\n    long[] tmp42 = new\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptrzpantb.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmptrzpantb.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmptrzpantb.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptrzpantb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n     \
    \   Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4],\
    \ k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The\
    \ length of the array will be in the range of [1, 1000].\n        2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \n*/\nlong[] maximum(long[] arr, long k) \n{\n    long[] res = new long[k];\n\
    \    long[] temp = new long[k];\n    long[] temp2 = new long[k];\n    long[] temp3\
    \ = new long[k];\n    long[] temp4 = new long[k];\n    long[] temp5 = new long[k];\n\
    \    long[] temp6 = new long[k];\n    long[] temp7 = new long[k];\n    long[]\
    \ temp8 = new long[k];\n    long[] temp9 = new long[k];\n    long[] temp10 = new\
    \ long[k];\n    long[] temp11 = new long[k];\n    long[] temp12 = new long[k];\n\
    \    long[] temp13 = new long[k];\n    long[] temp14 = new long[k];\n    long[]\
    \ temp15 = new long[k];\n    long[] temp16 = new long[k];\n    long[] temp17 =\
    \ new long[k];\n    long[] temp18 = new long[k];\n    long[] temp19 = new long[k];\n\
    \    long[] temp20 = new long[k];\n    long[] temp21 = new long[k];\n    long[]\
    \ temp22 = new long[k];\n    long[] temp23 = new long[k];\n    long[] temp24 =\
    \ new long[k];\n    long[] temp25 = new long[k];\n    long[] temp26 = new long[k];\n\
    \    long[] temp27 = new long[k];\n    long[] temp28 = new long[k];\n    long[]\
    \ temp29 = new long[k];\n    long[] temp30 = new long[k];\n    long[] temp31 =\
    \ new long[k];\n    long[] temp32 = new long[k];\n    long[] temp33 = new long[k];\n\
    \    long[] temp34 = new long[k];\n    long[] temp35 = new long[k];\n    long[]\
    \ temp36 = new long[k];\n    long[] temp37 = new long[k];\n    long[] temp38 =\
    \ new long[k];\n    long[] temp39 = new long[k];\n    long[] temp40 = new long[k];\n\
    \    long[] temp41 = new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn6bkk3ot.d(73): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpn6bkk3ot.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmpn6bkk3ot.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpn6bkk3ot.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
