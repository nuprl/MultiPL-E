name: HumanEval_153_Strongest_Extension
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nYou will be given the name of\
  \ a class (a string) and a list of extensions.\n    The extensions are to be used\
  \ to load additional classes to the class. The\n    strength of the extension is\
  \ as follows: Let CAP be the number of the uppercase\n    letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n    in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n    You should find the strongest\
  \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
  \    If there are two or more extensions with the same strength, you should\n  \
  \  choose the one that comes first in the list.\n    For example, if you are given\
  \ \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese',\
  \ 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
  \ is the strongest extension \n    (its strength is -1).\n    Example:\n    for\
  \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \n*/\n\
  string Strongest_Extension(string class_name, string[] extensions) \n"
tests: "unittest\n{\n    alias candidate = Strongest_Extension;\n\n    assert(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\");\n    assert(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
  );\n    assert(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
  , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\");\n    assert(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\");\n    assert(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\");\n    assert(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
  YameRore.okIWILL123\");\n    assert(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
  , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\");\n    assert(candidate(\"_\", [\"Bb\"\
  , \"91245\"]) == \"_.Bb\");\n    assert(candidate(\"Sp\", [\"671235\", \"Bb\"])\
  \ == \"Sp.671235\");\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
