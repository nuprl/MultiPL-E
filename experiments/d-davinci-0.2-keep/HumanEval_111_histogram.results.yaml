name: HumanEval_111_histogram
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (c in dict)\n            dict[c]++;\n        else\n       \
    \     dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9jbxicm2.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmp9jbxicm2.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmp9jbxicm2.d(34):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jbxicm2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) ret = null;\n    long[string]\
    \ hist = new long[string];\n    foreach(c; test.split())\n    {\n        hist[c]++;\n\
    \    }\n    long max = hist.values.max;\n    if(max > 0)\n    {\n        ret =\
    \ new long[string];\n        foreach(k, v; hist)\n        {\n            if(v\
    \ == max)\n            {\n                ret[k] = v;\n            }\n       \
    \ }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp7x2d76l.d(20): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpp7x2d76l.d(21): Error: no property `split` for type `string`\\\
    n/tmp/tmpp7x2d76l.d(25): Error: no property `max` for type `long[]`\\n/tmp/tmpp7x2d76l.d(28):\
    \ Error: cannot pass type `string` as a function argument\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp7x2d76l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (word.length == 0)\n   \
    \         continue;\n        if (dict.count(word) == 0)\n            dict[word]\
    \ = 1;\n        else\n            dict[word]++;\n    }\n    long max = dict.values.max;\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n          \
    \  result.get.put(key, value);\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp0qugkig.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpp0qugkig.d(33): Error: no property `max` for type `long[]`\\n/tmp/tmpp0qugkig.d(37):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpp0qugkig.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    result = new long[string];\n    foreach (c;\
    \ test.split)\n    {\n        if (result.get(c) is null)\n            result[c]\
    \ = 1;\n        else\n            result[c]++;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpak2l462v.d(22): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpak2l462v.d(23): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak2l462v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word] +=\
    \ 1;\n    }\n    long max = 0;\n    foreach (word; counts.keys)\n    {\n     \
    \   if (counts[word] > max)\n            max = counts[word];\n    }\n    foreach\
    \ (word; counts.keys)\n    {\n        if (counts[word] == max)\n            result.insert(word,\
    \ counts[word]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu2ruduc9.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpu2ruduc9.d(40): Error: no property `insert` for type `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2ruduc9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    auto\
    \ letterCount = new long[string];\n    foreach (letter; letters)\n    {\n    \
    \    if (letterCount.count(letter) == 0)\n            letterCount[letter] = 1;\n\
    \        else\n            letterCount[letter]++;\n    }\n    long maxCount =\
    \ max(letterCount.values);\n    foreach (letter; letterCount.keys)\n    {\n  \
    \      if (letterCount[letter] == maxCount)\n            result.insert(letter,\
    \ maxCount);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpblj6_cs1.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpblj6_cs1.d(23): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpblj6_cs1.d(31): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpblj6_cs1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    if (test.length\
    \ == 0)\n        return null;\n    foreach (c; test.split)\n    {\n        if\
    \ (result.counts(c))\n            result[c]++;\n        else\n            result[c]\
    \ = 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf7r5cjny.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpf7r5cjny.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpf7r5cjny.d(21): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpf7r5cjny.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) ret;\n    if(test.length\
    \ == 0)\n        return ret;\n    auto words = test.split;\n    long[string] counts;\n\
    \    foreach(word; words)\n    {\n        if(counts.count(word) == 0)\n      \
    \      counts[word] = 1;\n        else\n            counts[word]++;\n    }\n \
    \   long max = maxElement(counts.values);\n    foreach(word; counts.keys)\n  \
    \  {\n        if(counts[word] == max)\n            ret.get.put(word, max);\n \
    \   }\n    return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp43hk256m.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp43hk256m.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp43hk256m.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp43hk256m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]\
    \ += 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzz_9ngzq.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpzz_9ngzq.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz_9ngzq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.string;\n    import std.stdio;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.uni;\n    import std.algorithm;\n  \
    \  import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.string;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.typecons;\n    import std.uni;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.string;\n    import\
    \ std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.uni;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.string;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.uni;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.typecons;\n    import std.math;\n\
    \    import std.string;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.uni;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.string;\n    import std.stdio;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.uni;\n    import std.algorithm;\n  \
    \  import std.array;\n    import\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpojhtz0yu.d(88): Error: identifier expected following `import`\\\
    n/tmp/tmpojhtz0yu.d(88): Error: `;` expected\\n/tmp/tmpojhtz0yu.d(133): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpojhtz0yu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ counts = new long[string];\n    foreach (word; words)\n    {\n        if (counts.count(word)\
    \ == 0)\n            counts[word] = 1;\n        else\n            counts[word]\
    \ += 1;\n    }\n    long max = 0;\n    foreach (key, value; counts)\n    {\n \
    \       if (value > max)\n            max = value;\n    }\n    foreach (key, value;\
    \ counts)\n    {\n        if (value == max)\n            result.insert(key, value);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp28nbtuz1.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp28nbtuz1.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp28nbtuz1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    result = new long[string];\n    foreach (c;\
    \ test.split)\n    {\n        if (result.get(c))\n            result[c]++;\n \
    \       else\n            result[c] = 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7_hakf61.d(22): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp7_hakf61.d(23): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_hakf61.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(!result.contains(c))\n            result[c] =\
    \ 0;\n        result[c]++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3n8mw_a9.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp3n8mw_a9.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3n8mw_a9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach(char c; test)\n\
    \    {\n        if(c == ' ')\n            continue;\n        if(dict.count(c)\
    \ == 0)\n            dict[c] = 1;\n        else\n            dict[c]++;\n    }\n\
    \    long max = maxElement(dict.values);\n    foreach(string key; dict.keys)\n\
    \    {\n        if(dict[key] == max)\n            result.get.insert(key, max);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyeshn3yk.d(27): Error: no property `count` for type `long[string]`\\\
    n/tmp/tmpyeshn3yk.d(28): Error: cannot implicitly convert expression `c` of type\
    \ `char` to `string`\\n/tmp/tmpyeshn3yk.d(30): Error: cannot implicitly convert\
    \ expression `c` of type `char` to `string`\\n/tmp/tmpyeshn3yk.d(32): Error: undefined\
    \ identifier `maxElement`\\n/tmp/tmpyeshn3yk.d(36): Error: no property `insert`\
    \ for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpyeshn3yk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp07e5fquq.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp07e5fquq.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp07e5fquq.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp07e5fquq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key, value);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa5be3pdz.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpa5be3pdz.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpa5be3pdz.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5be3pdz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ hist = new long[string];\n    foreach (word; words)\n    {\n        if (word.length\
    \ == 0)\n            continue;\n        if (hist.count(word) == 0)\n         \
    \   hist[word] = 1;\n        else\n            hist[word] += 1;\n    }\n    long\
    \ max = 0;\n    foreach (key, value; hist)\n    {\n        if (value > max)\n\
    \            max = value;\n    }\n    foreach (key, value; hist)\n    {\n    \
    \    if (value == max)\n            result.add(key);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp15i3vfdu.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp15i3vfdu.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15i3vfdu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (word; counts.keys)\n\
    \    {\n        if (counts[word] == max)\n            result.insert(word, counts[word]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeeuuoc4z.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpeeuuoc4z.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpeeuuoc4z.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeeuuoc4z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] hist;\n    foreach (c; test.split())\n\
    \    {\n        if (hist.count(c) == 0)\n            hist[c] = 1;\n        else\n\
    \            hist[c]++;\n    }\n    long max = maxElement(hist.values);\n    foreach\
    \ (k, v; hist)\n    {\n        if (v == max)\n            result[k] = v;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpal2rk4jy.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpal2rk4jy.d(30): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpal2rk4jy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    if (test.empty)\n        return null;\n    auto\
    \ result = new long[string];\n    auto words = test.split;\n    foreach (word;\
    \ words)\n    {\n        if (result.count(word))\n            result[word]++;\n\
    \        else\n            result[word] = 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi_6te0_8.d(19): Error: no property `empty` for type `string`\\\
    n/tmp/tmpi_6te0_8.d(21): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpi_6te0_8.d(22): Error: no property `split` for type `string`\\n/tmp/tmpi_6te0_8.d(20):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpi_6te0_8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ counts = new long[string];\n    foreach (word; words)\n    {\n        if (counts.count(word)\
    \ == 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key, value);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpso9d9mdh.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpso9d9mdh.d(23): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpso9d9mdh.d(31): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpso9d9mdh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpki243bhi.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpki243bhi.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpki243bhi.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpki243bhi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        result[c]++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvn9ty7a4.d(19): Error: cannot pass type `string` as a function\
    \ argument\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvn9ty7a4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = 0;\n    foreach (count; counts)\n    {\n        if (count.value\
    \ > max)\n            max = count.value;\n    }\n    long[string] max_counts;\n\
    \    foreach (count; counts)\n    {\n        if (count.value == max)\n       \
    \     max_counts[count.key] = count.value;\n    }\n    return max_counts;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0a_6espz.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp0a_6espz.d(34): Error: no property `value` for type `long`\\n/tmp/tmp0a_6espz.d(35):\
    \ Error: no property `value` for type `long`\\n/tmp/tmp0a_6espz.d(40): Error:\
    \ no property `value` for type `long`\\n/tmp/tmp0a_6espz.d(41): Error: no property\
    \ `key` for type `long`\\n/tmp/tmp0a_6espz.d(43): Error: cannot implicitly convert\
    \ expression `max_counts` of type `long[string]` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0a_6espz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (c in dict)\n            dict[c]++;\n        else\n       \
    \     dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n    long[string]\
    \ maxDict;\n    foreach (k, v; dict)\n    {\n        if (v == max)\n         \
    \   maxDict[k] = v;\n    }\n    return maxDict;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi3mkqi_b.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpi3mkqi_b.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpi3mkqi_b.d(37):\
    \ Error: cannot implicitly convert expression `maxDict` of type `long[string]`\
    \ to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpi3mkqi_b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ dict = new long[string];\n    foreach (word; words)\n    {\n        if (word\
    \ in dict)\n            dict[word]++;\n        else\n            dict[word] =\
    \ 1;\n    }\n    long max = dict.values.max;\n    foreach (key, value; dict)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9c9hw0k2.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp9c9hw0k2.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9c9hw0k2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.put(key, value);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp770e25ic.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp770e25ic.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp770e25ic.d(35):\
    \ Error: no property `put` for type `Nullable!(long[string])`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp770e25ic.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(c.length == 1)\n        {\n            if(result.count(c) ==\
    \ 0)\n            {\n                result[c] = 1;\n            }\n         \
    \   else\n            {\n                result[c]++;\n            }\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1fj9e1h.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpc1fj9e1h.d(34): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpc1fj9e1h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    if (test.empty)\n        return null;\n    auto\
    \ result = new long[string];\n    foreach (c; test.split)\n    {\n        if (result.count(c)\
    \ == 0)\n            result[c] = 1;\n        else\n            result[c]++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdf0jvlhs.d(19): Error: no property `empty` for type `string`\\\
    n/tmp/tmpdf0jvlhs.d(21): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpdf0jvlhs.d(22): Error: no property `split` for type `string`\\n/tmp/tmpdf0jvlhs.d(20):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdf0jvlhs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (word; counts.keys)\n\
    \    {\n        if (counts[word] == max)\n            result.get.put(word, max);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi8n6bgnc.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpi8n6bgnc.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpi8n6bgnc.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpi8n6bgnc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (letter;\
    \ test.split()) \n    {\n        if (dict.count(letter) == 0)\n            dict[letter]\
    \ = 1;\n        else\n            dict[letter]++;\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach (key, value; dict) \n    {\n        if (value == max)\n         \
    \   result.insert(key);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkfxg11ho.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpkfxg11ho.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpkfxg11ho.d(34):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfxg11ho.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (word in dict)\n       \
    \     dict[word] += 1;\n        else\n            dict[word] = 1;\n    }\n   \
    \ long max = maxElement(dict.values);\n    foreach (key, value; dict)\n    {\n\
    \        if (value == max)\n            result.get.insert(key, value);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz_wspc79.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpz_wspc79.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpz_wspc79.d(35):\
    \ Error: no property `insert` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpz_wspc79.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    long[string]\
    \ histogram;\n    foreach (word; words)\n    {\n        if (histogram.count(word)\
    \ == 0)\n            histogram[word] = 1;\n        else\n            histogram[word]++;\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach (key, value;\
    \ histogram)\n    {\n        if (value == max)\n            result.insert(key);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa0gmn8m6.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpa0gmn8m6.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpa0gmn8m6.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0gmn8m6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return null;\n    auto letters = test.split;\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeyw6h5ij.d(27): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmpeyw6h5ij.d(28): Error: found `{` when expecting `)`\\n/tmp/tmpeyw6h5ij.d(72):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeyw6h5ij.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ counts = new long[words.length];\n    foreach (i, word; words)\n    {\n    \
    \    counts[i] = 0;\n        foreach (j, w; words)\n        {\n            if\
    \ (word == w)\n                counts[i]++;\n        }\n    }\n    long max =\
    \ maxElement(counts);\n    auto maxWords = new long[words.length];\n    long maxWordsCount\
    \ = 0;\n    foreach (i, count; counts)\n    {\n        if (count == max)\n   \
    \     {\n            maxWords[maxWordsCount] = i;\n            maxWordsCount++;\n\
    \        }\n    }\n    auto resultMap = new long[maxWordsCount];\n    foreach\
    \ (i, maxWord; maxWords)\n    {\n        resultMap[i] = max;\n    }\n    result\
    \ = resultMap;\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp57m1q01d.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp57m1q01d.d(33): Error: undefined identifier `maxElement`\\n/tmp/tmp57m1q01d.d(49):\
    \ Error: template `std.typecons.Nullable!(long[string]).Nullable.opAssign` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2804):\
    \        `std.typecons.Nullable!(long[string]).Nullable.opAssign()(T value)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57m1q01d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ dict = new long[string];\n    foreach (word; words)\n    {\n        if (dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word]++;\n\
    \    }\n    long max = 0;\n    foreach (key, value; dict)\n    {\n        if (value\
    \ > max)\n            max = value;\n    }\n    foreach (key, value; dict)\n  \
    \  {\n        if (value == max)\n            result.insert(key);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ctfv2q2.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp2ctfv2q2.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ctfv2q2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\
    \ \n    {\n        if(c.length == 1)\n        {\n            result[c]++;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf_2pe2mr.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpf_2pe2mr.d(27): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpf_2pe2mr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        counts[word]++;\n    }\n\
    \    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.get!(long[string])[key]\
    \ = value;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3sk3tsdn.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp3sk3tsdn.d(28): Error: undefined identifier `maxElement`\\n/tmp/tmp3sk3tsdn.d(32):\
    \ Error: `inout` method `std.typecons.Nullable!(long[string]).Nullable.get!(long[string]).get`\
    \ is not callable using a mutable object\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp3sk3tsdn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ wordCount = words.length;\n    long[string] counts;\n    foreach (word; words)\n\
    \    {\n        if (counts.count(word) == 0)\n            counts[word] = 1;\n\
    \        else\n            counts[word]++;\n    }\n    long max = 0;\n    foreach\
    \ (word; counts.keys)\n    {\n        if (counts[word] > max)\n            max\
    \ = counts[word];\n    }\n    long[string] maxCounts;\n    foreach (word; counts.keys)\n\
    \    {\n        if (counts[word] == max)\n            maxCounts[word] = max;\n\
    \    }\n    return maxCounts;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpteagzcky.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpteagzcky.d(44): Error: cannot implicitly convert expression `maxCounts`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpteagzcky.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    import std.algorithm : max;\n    import std.array\
    \ : array;\n    import std.conv : to;\n    import std.range : map, filter, each,\
    \ zip, take, countUntil, count;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Nullable;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons :\nunittest\n{\n    alias candidate = histogram;\n\n{\n       \
    \ auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8koacgwj.d(67): Error: identifier expected following `:`\\n/tmp/tmp8koacgwj.d(67):\
    \ Error: `;` expected\\n/tmp/tmp8koacgwj.d(112): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8koacgwj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(char c; test)\n\
    \    {\n        if(c == ' ')\n            continue;\n        if(result.count(c)\
    \ == 0)\n            result[c] = 1;\n        else\n            result[c]++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjx61cspi.d(24): Error: no property `count` for type `long[string]`\\\
    n/tmp/tmpjx61cspi.d(25): Error: cannot implicitly convert expression `c` of type\
    \ `char` to `string`\\n/tmp/tmpjx61cspi.d(27): Error: cannot implicitly convert\
    \ expression `c` of type `char` to `string`\\n/tmp/tmpjx61cspi.d(29): Error: cannot\
    \ implicitly convert expression `result` of type `long[string]` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjx61cspi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(c in result)\n            result[c]++;\n  \
    \      else\n            result[c] = 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpilq58azf.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpilq58azf.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilq58azf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    long[string]\
    \ hist;\n    foreach (word; words)\n    {\n        if (word.length != 1)\n   \
    \         return result;\n        hist[word]++;\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach (key, value; hist)\n    {\n        if (value == max)\n          \
    \  result.get.put(key, value);\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxrru3fqp.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpxrru3fqp.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpxrru3fqp.d(34):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxrru3fqp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(result.count(c) == 0)\n        {\n          \
    \  result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj3yzqww6.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpj3yzqww6.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3yzqww6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    result.init = true;\n    long[string] dict;\n\
    \    foreach (c; test.split)\n    {\n        if (c in dict)\n            dict[c]++;\n\
    \        else\n            dict[c] = 1;\n    }\n    long max = dict.values.max;\n\
    \    foreach (k, v; dict)\n    {\n        if (v == max)\n            result.value[k]\
    \ = v;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm4ct0qcc.d(22): Error: template `std.typecons.Nullable!(long[string]).Nullable.opAssign`\
    \ cannot deduce function from argument types `!()(bool)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2804):\
    \        `std.typecons.Nullable!(long[string]).Nullable.opAssign()(T value)`\\\
    n/tmp/tmpm4ct0qcc.d(24): Error: no property `split` for type `string`\\n/tmp/tmpm4ct0qcc.d(31):\
    \ Error: no property `max` for type `long[]`\\n/tmp/tmpm4ct0qcc.d(35): Error:\
    \ no property `value` for type `Nullable!(long[string])`, did you mean `std.typecons.Nullable!(long[string]).Nullable._value`?\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm4ct0qcc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) res;\n    if (test.length\
    \ == 0)\n        return res;\n    auto words = test.split(\" \");\n    auto dict\
    \ = new long[string];\n    foreach (word; words)\n    {\n        if (dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word]++;\n\
    \    }\n    long max = dict.values.max;\n    foreach (key, value; dict)\n    {\n\
    \        if (value == max)\n            res.insert(key);\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqlf5rmxh.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpqlf5rmxh.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqlf5rmxh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (dict.count(word) == 0)\n\
    \            dict[word] = 1;\n        else\n            dict[word]++;\n    }\n\
    \    long max = 0;\n    foreach (key, value; dict)\n    {\n        if (value >\
    \ max)\n            max = value;\n    }\n    long[string] result_dict;\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n            result_dict[key]\
    \ = value;\n    }\n    result = result_dict;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpky_frtsz.d(22): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpky_frtsz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (letter; counts.keys)\n\
    \    {\n        if (counts[letter] == max)\n            result.insert(letter,\
    \ counts);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcfarkwh9.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpcfarkwh9.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpcfarkwh9.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcfarkwh9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    auto\
    \ letterCount = new long[string];\n    foreach (letter; letters)\n    {\n    \
    \    if (letterCount.count(letter) == 0)\n            letterCount[letter] = 1;\n\
    \        else\n            letterCount[letter]++;\n    }\n    auto maxCount =\
    \ max(letterCount.values);\n    foreach (letter; letterCount.keys)\n    {\n  \
    \      if (letterCount[letter] == maxCount)\n            result.insert(letter);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo7m5vxj7.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpo7m5vxj7.d(23): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpo7m5vxj7.d(31): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7m5vxj7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(c.length == 1)\n        {\n            result[c]++;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ctcugv1.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmp6ctcugv1.d(27): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6ctcugv1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split())\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx9sh5s4b.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpx9sh5s4b.d(31): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpx9sh5s4b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    \n    long[string] dict;\n    foreach (c;\
    \ test.split)\n    {\n        if (c in dict)\n            dict[c]++;\n       \
    \ else\n            dict[c] = 1;\n    }\n    \n    long max = maxElement(dict.values);\n\
    \    foreach (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj1hsx6s5.d(24): Error: no property `split` for type `string`\\\
    n/tmp/tmpj1hsx6s5.d(32): Error: undefined identifier `maxElement`\\n/tmp/tmpj1hsx6s5.d(36):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1hsx6s5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (word; counts.keys)\n\
    \    {\n        if (counts[word] == max)\n            result.insert(word, counts[word]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpod12_8fs.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpod12_8fs.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpod12_8fs.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpod12_8fs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0) \n    {\n        return result;\n    }\n    auto letters = test.split;\n\
    \    long[string] letterCounts;\n    foreach (letter; letters) \n    {\n     \
    \   if (letterCounts.contains(letter)) \n        {\n            letterCounts[letter]++;\n\
    \        } \n        else \n        {\n            letterCounts[letter] = 1;\n\
    \        }\n    }\n    long maxCount = max(letterCounts.values);\n    foreach\
    \ (letter; letterCounts.keys) \n    {\n        if (letterCounts[letter] == maxCount)\
    \ \n        {\n            result.emplace(letterCounts);\n            break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpagmp407s.d(24): Error: no property `split` for type `string`\\\
    n/tmp/tmpagmp407s.d(37): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\n/tmp/tmpagmp407s.d(42): Error: no property `emplace` for type `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpagmp407s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    if (test.length\
    \ == 0)\n        return null;\n    foreach (c; test.split)\n    {\n        if\
    \ (result.counts(c))\n            result[c]++;\n        else\n            result[c]\
    \ = 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkcfw7pqn.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpkcfw7pqn.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpkcfw7pqn.d(21): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkcfw7pqn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    \n    auto words = test.split(' ');\n   \
    \ auto wordCount = words.length;\n    auto wordMap = new long[string];\n    foreach\
    \ (word; words)\n    {\n        if (wordMap.count(word) == 0)\n            wordMap[word]\
    \ = 1;\n        else\n            wordMap[word]++;\n    }\n    \n    auto max\
    \ = wordMap.values.max;\n    foreach (word; wordMap.keys)\n    {\n        if (wordMap[word]\
    \ == max)\n            result.get.put(word, wordMap[word]);\n    }\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkj_wi1yh.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpkj_wi1yh.d(25): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj_wi1yh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (word in dict)\n       \
    \     dict[word] += 1;\n        else\n            dict[word] = 1;\n    }\n   \
    \ long max = maxElement(dict.values);\n    foreach (key, value; dict)\n    {\n\
    \        if (value == max)\n            result.get.put(key, value);\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n  \
    \      auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbny56ha2.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpbny56ha2.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpbny56ha2.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpbny56ha2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length)\n        {\n            if(result.count(c))\n\
    \            {\n                result[c]++;\n            }\n            else\n\
    \            {\n                result[c] = 1;\n            }\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgf0hzk2h.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpgf0hzk2h.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgf0hzk2h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    auto hist =\
    \ new long[string];\n    foreach (word; words)\n    {\n        if (hist.count(word)\
    \ == 0)\n            hist[word] = 1;\n        else\n            hist[word]++;\n\
    \    }\n    long max = 0;\n    foreach (word; hist.keys)\n    {\n        if (hist[word]\
    \ > max)\n            max = hist[word];\n    }\n    foreach (word; hist.keys)\n\
    \    {\n        if (hist[word] == max)\n            result.insert(word, hist[word]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpamaq_3ot.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpamaq_3ot.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpamaq_3ot.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c]++;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9x7kfypq.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmp9x7kfypq.d(31): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9x7kfypq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (c in dict)\n            dict[c]++;\n        else\n       \
    \     dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy4kpcqrr.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpy4kpcqrr.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpy4kpcqrr.d(34):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4kpcqrr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ky2ofcy.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp4ky2ofcy.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp4ky2ofcy.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ky2ofcy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (dict.count(word) == 0)\n\
    \            dict[word] = 1;\n        else\n            dict[word]++;\n    }\n\
    \    long max = dict.values.max;\n    foreach (key, value; dict)\n    {\n    \
    \    if (value == max)\n            result.insert(key);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0o4l6q46.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp0o4l6q46.d(31): Error: no property `max` for type `long[]`\\n/tmp/tmp0o4l6q46.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0o4l6q46.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    \n    long[string] dict;\n    string[] words\
    \ = test.split(\" \");\n    foreach (word; words)\n    {\n        if (word.length\
    \ == 0)\n            continue;\n        if (dict.count(word) == 0)\n         \
    \   dict[word] = 1;\n        else\n            dict[word]++;\n    }\n    \n  \
    \  long max = dict.values.max;\n    foreach (key, value; dict)\n    {\n      \
    \  if (value == max)\n            result.get.insert(key, value);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph3_iav8c.d(24): Error: no property `split` for type `string`\\\
    n/tmp/tmph3_iav8c.d(29): Error: no property `count` for type `long[string]`\\\
    n/tmp/tmph3_iav8c.d(35): Error: no property `max` for type `long[]`\\n/tmp/tmph3_iav8c.d(39):\
    \ Error: no property `insert` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmph3_iav8c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    if (test.empty)\n        return null;\n    auto\
    \ result = new long[string];\n    auto words = test.split;\n    foreach (word;\
    \ words)\n    {\n        if (result.count(word))\n            result[word]++;\n\
    \        else\n            result[word] = 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps9lfxwkd.d(19): Error: no property `empty` for type `string`\\\
    n/tmp/tmps9lfxwkd.d(21): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmps9lfxwkd.d(22): Error: no property `split` for type `string`\\n/tmp/tmps9lfxwkd.d(20):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmps9lfxwkd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgvdibdrd.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpgvdibdrd.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpgvdibdrd.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvdibdrd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ dict = new long[string];\n    foreach(word; words)\n    {\n        if(dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word]++;\n\
    \    }\n    long max = dict.values.max;\n    foreach(key, value; dict)\n    {\n\
    \        if(value == max)\n            result.get.put(key, value);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8yh8ls29.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp8yh8ls29.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8yh8ls29.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key, value);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp93k11cy1.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp93k11cy1.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp93k11cy1.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp93k11cy1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto dict = new long[string];\n    foreach\
    \ (c; test.split)\n    {\n        if (c in dict)\n            dict[c]++;\n   \
    \     else\n            dict[c] = 1;\n    }\n    long max = dict.values.max;\n\
    \    foreach (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx7t6_b7c.d(22): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpx7t6_b7c.d(23): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7t6_b7c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key, value);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbczxkamr.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpbczxkamr.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpbczxkamr.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbczxkamr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key, value);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjvdhq0ea.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpjvdhq0ea.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpjvdhq0ea.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjvdhq0ea.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (letter; counts.keys)\n\
    \    {\n        if (counts[letter] == max)\n            result.insert(letter,\
    \ counts);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx7km3ykw.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpx7km3ykw.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpx7km3ykw.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7km3ykw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    if (test.empty)\n        return null;\n    auto\
    \ result = new long[string];\n    foreach (c; test.split)\n    {\n        if (result.count(c)\
    \ == 0)\n            result[c] = 1;\n        else\n            result[c]++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvsr3nkss.d(19): Error: no property `empty` for type `string`\\\
    n/tmp/tmpvsr3nkss.d(21): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpvsr3nkss.d(22): Error: no property `split` for type `string`\\n/tmp/tmpvsr3nkss.d(20):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvsr3nkss.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split())\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    if(result.length == 0)\n    {\n        return null;\n    }\n    long\
    \ max = maxElement(result.values);\n    long[string] finalResult;\n    foreach(k,\
    \ v; result)\n    {\n        if(v == max)\n        {\n            finalResult[k]\
    \ = v;\n        }\n    }\n    return finalResult;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl_rrero9.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpl_rrero9.d(35): Error: undefined identifier `maxElement`\\n/tmp/tmpl_rrero9.d(33):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\n/tmp/tmpl_rrero9.d(44): Error: cannot implicitly\
    \ convert expression `finalResult` of type `long[string]` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_rrero9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (word.length == 0)\n   \
    \         continue;\n        if (dict.count(word) == 0)\n            dict[word]\
    \ = 1;\n        else\n            dict[word]++;\n    }\n    long max = 0;\n  \
    \  foreach (key, value; dict)\n    {\n        if (value > max)\n            max\
    \ = value;\n    }\n    long[string] resultDict;\n    foreach (key, value; dict)\n\
    \    {\n        if (value == max)\n            resultDict[key] = value;\n    }\n\
    \    result = resultDict;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp60a98cgu.d(22): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60a98cgu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(result.count(c) == 0)\n        {\n          \
    \  result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp033spaaa.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp033spaaa.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp033spaaa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    if (test.empty)\n        return null;\n    auto\
    \ result = new long[string];\n    foreach (c; test.split)\n    {\n        if (c\
    \ in result)\n            result[c]++;\n        else\n            result[c] =\
    \ 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe0odftw2.d(19): Error: no property `empty` for type `string`\\\
    n/tmp/tmpe0odftw2.d(21): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpe0odftw2.d(22): Error: no property `split` for type `string`\\n/tmp/tmpe0odftw2.d(20):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpe0odftw2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    auto\
    \ counts = new long[string];\n    foreach (letter; letters)\n    {\n        if\
    \ (counts.count(letter) == 0)\n            counts[letter] = 1;\n        else\n\
    \            counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (letter; letters)\n    {\n        if (counts[letter] == max)\n  \
    \          result[letter] = max;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0s7qwggr.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp0s7qwggr.d(23): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmp0s7qwggr.d(31): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0s7qwggr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ hist = new long[string];\n    foreach (word; words)\n    {\n        if (hist.count(word)\
    \ == 0)\n            hist[word] = 1;\n        else\n            hist[word]++;\n\
    \    }\n    long max = 0;\n    foreach (word; hist.keys)\n    {\n        if (hist[word]\
    \ > max)\n            max = hist[word];\n    }\n    foreach (word; hist.keys)\n\
    \    {\n        if (hist[word] == max)\n            result[word] = max;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1sw8j4v_.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp1sw8j4v_.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1sw8j4v_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (word in dict)\n       \
    \     dict[word]++;\n        else\n            dict[word] = 1;\n    }\n    long\
    \ max = maxElement(dict.values);\n    foreach (key, value; dict)\n    {\n    \
    \    if (value == max)\n            result.insert(key);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_7zvawp.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpb_7zvawp.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpb_7zvawp.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_7zvawp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjzl6pj8a.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpjzl6pj8a.d(31): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpjzl6pj8a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    result = new long[string];\n    foreach (c;\
    \ test.split)\n    {\n        if (result.get(c) is null)\n            result[c]\
    \ = 1;\n        else\n            result[c]++;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4zn03m5l.d(22): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp4zn03m5l.d(23): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zn03m5l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(result.counts[c] == 0)\n            result[c]\
    \ = 1;\n        else\n            result[c]++;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptkbu9lqq.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmptkbu9lqq.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptkbu9lqq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    long[string] max_counts;\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    max_counts[key] = value;\n    }\n    return max_counts;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm6qstlw2.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpm6qstlw2.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpm6qstlw2.d(38):\
    \ Error: cannot implicitly convert expression `max_counts` of type `long[string]`\
    \ to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpm6qstlw2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long maxCount = max(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == maxCount)\n            result.insert(key);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph3_wc90r.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmph3_wc90r.d(31): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\n/tmp/tmph3_wc90r.d(35): Error: no property `insert` for type `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3_wc90r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length)\n        {\n            if(result.count(c)\
    \ == 0)\n            {\n                result[c] = 1;\n            }\n      \
    \      else\n            {\n                result[c] += 1;\n            }\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ci9mo5f.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp3ci9mo5f.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ci9mo5f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (word.length == 0)\n   \
    \         continue;\n        if (dict.count(word) == 0)\n            dict[word]\
    \ = 1;\n        else\n            dict[word]++;\n    }\n    long max = dict.values.max;\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n          \
    \  result.emplace(key, value);\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg5p5_uwa.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpg5p5_uwa.d(33): Error: no property `max` for type `long[]`\\n/tmp/tmpg5p5_uwa.d(37):\
    \ Error: no property `emplace` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5p5_uwa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    if (test.empty)\n        return null;\n    long[string]\
    \ result;\n    foreach (c; test.split)\n    {\n        if (result.count(c) ==\
    \ 0)\n            result[c] = 1;\n        else\n            result[c]++;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9poa2np8.d(19): Error: no property `empty` for type `string`\\\
    n/tmp/tmp9poa2np8.d(22): Error: no property `split` for type `string`\\n/tmp/tmp9poa2np8.d(20):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\n/tmp/tmp9poa2np8.d(29): Error: cannot implicitly\
    \ convert expression `result` of type `long[string]` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9poa2np8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] hist = new long[string];\n \
    \   foreach (c; test.split)\n    {\n        if (hist.count(c) == 0)\n        \
    \    hist[c] = 1;\n        else\n            hist[c]++;\n    }\n    long max =\
    \ maxElement(hist.values);\n    foreach (k, v; hist)\n    {\n        if (v ==\
    \ max)\n            result.insert(k);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf3zvfyuv.d(22): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpf3zvfyuv.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpf3zvfyuv.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpf3zvfyuv.d(34):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3zvfyuv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (word in dict)\n       \
    \     dict[word]++;\n        else\n            dict[word] = 1;\n    }\n    long\
    \ max = maxElement(dict.values);\n    foreach (key, value; dict)\n    {\n    \
    \    if (value == max)\n            result.insert(key);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe0_v7p3y.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpe0_v7p3y.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpe0_v7p3y.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe0_v7p3y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    if (test.empty)\n        return null;\n    auto\
    \ result = new long[string];\n    foreach (c; test.split)\n    {\n        if (result.count(c)\
    \ == 0)\n            result[c] = 1;\n        else\n            result[c]++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3l1dyzzl.d(19): Error: no property `empty` for type `string`\\\
    n/tmp/tmp3l1dyzzl.d(21): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmp3l1dyzzl.d(22): Error: no property `split` for type `string`\\n/tmp/tmp3l1dyzzl.d(20):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp3l1dyzzl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzbo3tpq9.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpzbo3tpq9.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbo3tpq9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    import std.algorithm : max;\n    import std.array\
    \ : array;\n    import std.conv : to;\n    import std.range : filter, map, reduce,\
    \ zip;\n    import std.typecons : tuple;\n    import std.typecons : Nullable;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.\nunittest\n{\n    alias candidate = histogram;\n\n{\n       \
    \ auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppj7iyr10.d(68): Error: identifier expected following `package`\\\
    n/tmp/tmppj7iyr10.d(68): Error: `;` expected\\n/tmp/tmppj7iyr10.d(113): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppj7iyr10.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split(\" \"))\n    {\n        if(c.length == 0)\n            continue;\n\
    \        if(result.count(c) == 0)\n            result[c] = 1;\n        else\n\
    \            result[c]++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp90goba92.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp90goba92.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90goba92.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(c.length == 1)\n        {\n            result[c]++;\n     \
    \   }\n    }\n    if(result.length == 0)\n    {\n        return null;\n    }\n\
    \    long max = maxElement(result.values);\n    long[string] max_result;\n   \
    \ foreach(k, v; result)\n    {\n        if(v == max)\n        {\n            max_result[k]\
    \ = v;\n        }\n    }\n    return max_result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp76x10uns.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmp76x10uns.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp76x10uns.d(29):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\n/tmp/tmp76x10uns.d(40): Error: cannot implicitly\
    \ convert expression `max_result` of type `long[string]` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76x10uns.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    \n    long[string] dict;\n    string[] words\
    \ = test.split(\" \");\n    foreach (word; words)\n    {\n        if (dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word]++;\n\
    \    }\n    \n    long max = maxElement(dict.values);\n    long[string] maxDict;\n\
    \    foreach (word; dict.keys)\n    {\n        if (dict[word] == max)\n      \
    \      maxDict[word] = max;\n    }\n    \n    result = maxDict;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmparp3xptk.d(24): Error: no property `split` for type `string`\\\
    n/tmp/tmparp3xptk.d(27): Error: no property `count` for type `long[string]`\\\
    n/tmp/tmparp3xptk.d(33): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparp3xptk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c]++;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjelz0ff3.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpjelz0ff3.d(31): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpjelz0ff3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    if (test.length ==\
    \ 0)\n        return null;\n    foreach (c; test.split)\n    {\n        if (result.count(c)\
    \ == 0)\n            result[c] = 1;\n        else\n            result[c]++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx0axq1m9.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpx0axq1m9.d(21): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!(long[string])`\\n/tmp/tmpx0axq1m9.d(29): Error:\
    \ cannot implicitly convert expression `result` of type `long[string]` to `Nullable!(long[string])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0axq1m9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    long max = maxElement(result.values);\n    long[string] max_result;\n\
    \    foreach(c; result.keys)\n    {\n        if(result[c] == max)\n        {\n\
    \            max_result[c] = max;\n        }\n    }\n    return max_result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9eekrp85.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmp9eekrp85.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp9eekrp85.d(40):\
    \ Error: cannot implicitly convert expression `max_result` of type `long[string]`\
    \ to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9eekrp85.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(result.count(c) == 0)\n        {\n          \
    \  result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8pa_ehta.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp8pa_ehta.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8pa_ehta.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = Nullable!(long[string])();\n \
    \   if (test.length == 0)\n        return result;\n    auto words = test.split(\"\
    \ \");\n    auto dict = long[string]();\n    foreach (word; words)\n    {\n  \
    \      if (word.length == 0)\n            continue;\n        if (dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word]++;\n\
    \    }\n    long max = 0;\n    foreach (key, value; dict)\n    {\n        if (value\
    \ > max)\n            max = value;\n    }\n    result = long[string]();\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n            result[key]\
    \ = value;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmo4pa1_5.d(23): Error: found `[` when expecting `.` following\
    \ long\\n/tmp/tmpmo4pa1_5.d(23): Error: semicolon expected following auto declaration,\
    \ not `]`\\n/tmp/tmpmo4pa1_5.d(23): Error: found `]` instead of statement\\n/tmp/tmpmo4pa1_5.d(39):\
    \ Error: found `[` when expecting `.` following long\\n/tmp/tmpmo4pa1_5.d(39):\
    \ Error: found `]` when expecting `;` following statement\\n/tmp/tmpmo4pa1_5.d(39):\
    \ Error: expression expected, not `)`\\n/tmp/tmpmo4pa1_5.d(39): Error: found `;`\
    \ when expecting `)`\\n/tmp/tmpmo4pa1_5.d(40): Error: found `foreach` when expecting\
    \ `;` following statement\\n/tmp/tmpmo4pa1_5.d(40): Error: found `;` when expecting\
    \ `)`\\n/tmp/tmpmo4pa1_5.d(40): Error: found `dict` when expecting `;` following\
    \ statement\\n/tmp/tmpmo4pa1_5.d(40): Error: found `)` instead of statement\\\
    n/tmp/tmpmo4pa1_5.d(45): Error: declaration expected, not `return`\\n/tmp/tmpmo4pa1_5.d(46):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpmo4pa1_5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key, value);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0nwox05t.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp0nwox05t.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp0nwox05t.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0nwox05t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split()) \n    {\n        if(result.count(c) == 0) \n        {\n      \
    \      result[c] = 1;\n        } \n        else \n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzowuib0_.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpzowuib0_.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzowuib0_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    long[string]\
    \ hist;\n    foreach(word; words)\n    {\n        if(hist.count(word) == 0)\n\
    \            hist[word] = 1;\n        else\n            hist[word]++;\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(key, value; hist)\n    {\n\
    \        if(value == max)\n            result.get.put(key, value);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiu34_p8v.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpiu34_p8v.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpiu34_p8v.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpiu34_p8v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (c in dict)\n            dict[c]++;\n        else\n       \
    \     dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n    long[string]\
    \ maxDict;\n    foreach (k, v; dict)\n    {\n        if (v == max)\n         \
    \   maxDict[k] = v;\n    }\n    return maxDict;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoyvbn2au.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpoyvbn2au.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpoyvbn2au.d(37):\
    \ Error: cannot implicitly convert expression `maxDict` of type `long[string]`\
    \ to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpoyvbn2au.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]\
    \ += 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbbx32g4v.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpbbx32g4v.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbbx32g4v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        result[c]++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsby24icq.d(19): Error: cannot pass type `string` as a function\
    \ argument\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsby24icq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    import std.algorithm : max;\n    import std.array\
    \ : array;\n    import std.conv : to;\n    import std.range : filter, map, reduce,\
    \ zip;\n    import std.stdio : writeln;\n    import std.typecons : tuple;\n  \
    \  import std.typecons : Nullable;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.type\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb7mhevdd.d(66): Error: `;` expected\\n/tmp/tmpb7mhevdd.d(111):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb7mhevdd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ dict = words.assocArray;\n    auto max = dict.values.max;\n    foreach (word;\
    \ dict)\n    {\n        if (word.value == max)\n            result.insert(word.key,\
    \ max);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpld1tk6hy.d(22): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpld1tk6hy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (c in dict)\n            dict[c]++;\n        else\n       \
    \     dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (k, v; dict)\n    {\n        if (v == max)\n            result.get.put(k, v);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcabqjvpp.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpcabqjvpp.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpcabqjvpp.d(34):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcabqjvpp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (word.length == 0)\n   \
    \         continue;\n        if (dict.count(word) == 0)\n            dict[word]\
    \ = 1;\n        else\n            dict[word]++;\n    }\n    long max = 0;\n  \
    \  foreach (key, value; dict)\n    {\n        if (value > max)\n            max\
    \ = value;\n    }\n    long[string] res;\n    foreach (key, value; dict)\n   \
    \ {\n        if (value == max)\n            res[key] = value;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph098iw8_.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmph098iw8_.d(45): Error: cannot implicitly convert expression `res` of\
    \ type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmph098iw8_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (c in dict)\n            dict[c]++;\n        else\n       \
    \     dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeyjneg8r.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpeyjneg8r.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpeyjneg8r.d(34):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeyjneg8r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0) \n    {\n        return result;\n    }\n    auto letters = test.split(\"\
    \ \");\n    long[string] counts;\n    foreach (letter; letters) \n    {\n    \
    \    counts[letter]++;\n    }\n    long max = max(counts.values);\n    foreach\
    \ (letter; counts.keys) \n    {\n        if (counts[letter] == max) \n       \
    \ {\n            result.set(counts);\n            break;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n  \
    \      auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeudmxcal.d(24): Error: no property `split` for type `string`\\\
    n/tmp/tmpeudmxcal.d(30): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\n/tmp/tmpeudmxcal.d(35): Error: no property `set` for type `Nullable!(long[string])`,\
    \ did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeudmxcal.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(c.length == 1)\n        {\n            result[c]++;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3i4gv8y_.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmp3i4gv8y_.d(27): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3i4gv8y_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (ch; test.split)\n\
    \    {\n        if (ch in dict)\n            dict[ch]++;\n        else\n     \
    \       dict[ch] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (key, val; dict)\n    {\n        if (val == max)\n            result.insert(key);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3n82rxis.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmp3n82rxis.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmp3n82rxis.d(34):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3n82rxis.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(result.counts[c] == 0)\n            result[c]\
    \ = 1;\n        else\n            result[c]++;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptgct7313.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmptgct7313.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptgct7313.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbxq48tqh.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpbxq48tqh.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbxq48tqh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.get.put(key, value);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf13oanif.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpf13oanif.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpf13oanif.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpf13oanif.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split())\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c]++;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvznv563f.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpvznv563f.d(31): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvznv563f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ wordCount = words.length;\n    auto wordDict = new long[string];\n    foreach\
    \ (word; words)\n    {\n        if (wordDict.count(word) == 0)\n            wordDict[word]\
    \ = 1;\n        else\n            wordDict[word]++;\n    }\n    auto maxCount\
    \ = max(wordDict.values);\n    foreach (word; wordDict.keys)\n    {\n        if\
    \ (wordDict[word] == maxCount)\n            result[word] = maxCount;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfl74k485.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpfl74k485.d(24): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpfl74k485.d(32): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfl74k485.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (ch; test.split)\n\
    \    {\n        if (ch in dict)\n            dict[ch]++;\n        else\n     \
    \       dict[ch] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt88h4msj.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpt88h4msj.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpt88h4msj.d(34):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt88h4msj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ letterCount;\n    foreach (letter; letters)\n    {\n        if (letterCount.count(letter)\
    \ == 0)\n            letterCount[letter] = 1;\n        else\n            letterCount[letter]++;\n\
    \    }\n    long maxCount = max(letterCount.values);\n    foreach (letter; letterCount.keys)\n\
    \    {\n        if (letterCount[letter] == maxCount)\n            result.get.put(letter,\
    \ maxCount);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpajpuyz83.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpajpuyz83.d(31): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\n/tmp/tmpajpuyz83.d(35): Error: no property `put` for type `long[string]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpajpuyz83.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 1)\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpflah77aj.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpflah77aj.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpflah77aj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]\
    \ += 1;\n    }\n    long max = maxElement(counts.values);\n    foreach (key, value;\
    \ counts)\n    {\n        if (value == max)\n            result.get.put(key, value);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptgv_mp7r.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmptgv_mp7r.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmptgv_mp7r.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptgv_mp7r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ wordCount = words.length;\n    auto counts = new long[wordCount];\n    foreach\
    \ (i, word; words)\n    {\n        counts[i] = 0;\n        foreach (j, w; words)\n\
    \        {\n            if (word == w)\n                counts[i]++;\n       \
    \ }\n    }\n    auto max = maxElement(counts);\n    auto maxCount = counts[max];\n\
    \    result = new long[string];\n    foreach (i, word; words)\n    {\n       \
    \ if (counts[i] == maxCount)\n            result[word] = maxCount;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr6nix947.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpr6nix947.d(34): Error: undefined identifier `maxElement`\\n/tmp/tmpr6nix947.d(36):\
    \ Error: cannot pass type `string` as a function argument\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr6nix947.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) ret = null;\n    long[string]\
    \ ret_ = new long[string];\n    long max = 0;\n    foreach(c; test.split)\n  \
    \  {\n        if(ret_.count(c) == 0)\n        {\n            ret_[c] = 1;\n  \
    \      }\n        else\n        {\n            ret_[c]++;\n        }\n       \
    \ if(ret_[c] > max)\n        {\n            max = ret_[c];\n        }\n    }\n\
    \    foreach(c; ret_.keys)\n    {\n        if(ret_[c] == max)\n        {\n   \
    \         ret = ret_;\n            break;\n        }\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0aw5584m.d(20): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp0aw5584m.d(22): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0aw5584m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ hist = new long[string];\n    foreach (word; words)\n    {\n        if (hist.count(word)\
    \ == 0)\n            hist[word] = 1;\n        else\n            hist[word]++;\n\
    \    }\n    long max = maxElement(hist.values);\n    foreach (key, value; hist)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpav3u6ij0.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpav3u6ij0.d(23): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpav3u6ij0.d(31): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpav3u6ij0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ counts = long[string](words.length);\n    foreach (word; words)\n    {\n   \
    \     counts[word]++;\n    }\n    long max = 0;\n    foreach (count; counts)\n\
    \    {\n        if (count > max)\n            max = count;\n    }\n    result\
    \ = long[string](max);\n    foreach (count; counts)\n    {\n        if (count\
    \ == max)\n            result[counts.idup] = count;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe4ij_6b8.d(23): Error: found `[` when expecting `.` following\
    \ long\\n/tmp/tmpe4ij_6b8.d(23): Error: semicolon expected following auto declaration,\
    \ not `]`\\n/tmp/tmpe4ij_6b8.d(23): Error: found `]` instead of statement\\n/tmp/tmpe4ij_6b8.d(34):\
    \ Error: found `[` when expecting `.` following long\\n/tmp/tmpe4ij_6b8.d(34):\
    \ Error: found `]` when expecting `;` following statement\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe4ij_6b8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ map;\n    foreach (word; words)\n    {\n        if (map.count(word) == 0)\n\
    \            map[word] = 1;\n        else\n            map[word]++;\n    }\n \
    \   long max = maxElement(map.values);\n    foreach (key, value; map)\n    {\n\
    \        if (value == max)\n            result.insert(key);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8fwhq9g5.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp8fwhq9g5.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp8fwhq9g5.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fwhq9g5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ histo;\n    foreach (word; words)\n    {\n        if (histo.count(word) == 0)\n\
    \            histo[word] = 1;\n        else\n            histo[word] += 1;\n \
    \   }\n    long max = maxElement(histo.values);\n    foreach (word; histo.keys)\n\
    \    {\n        if (histo[word] == max)\n            result.get.put(word, max);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdmeltzof.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpdmeltzof.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpdmeltzof.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdmeltzof.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    import std.algorithm : max, min;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.range : map, filter,\
    \ zip, joiner;\n    import std.typecons : tuple;\n    import std.typecons : Nullable;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \   \nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1hiq6v2r.d(68): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hiq6v2r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphg0to6ff.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmphg0to6ff.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphg0to6ff.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    result = new long[string];\n    string[]\
    \ words = test.split(\" \");\n    foreach (word; words)\n    {\n        if (result.get(word))\n\
    \            result.get(word)++;\n        else\n            result.set(word, 1);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2sihc9gx.d(22): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp2sihc9gx.d(23): Error: no property `split` for type `string`\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2852):\
    \ Error: incompatible types for `(fallback) : (this._value)`: `inout(char[])`\
    \ and `inout(long[string])`\\n/tmp/tmp2sihc9gx.d(26): Error: template instance\
    \ `std.typecons.Nullable!(long[string]).Nullable.get!(char[])` error instantiating\\\
    n/tmp/tmp2sihc9gx.d(29): Error: no property `set` for type `Nullable!(long[string])`,\
    \ did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2sihc9gx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (word in dict)\n       \
    \     dict[word] += 1;\n        else\n            dict[word] = 1;\n    }\n   \
    \ long max = dict.values.max;\n    foreach (key, value; dict)\n    {\n       \
    \ if (value == max)\n            result.insert(key);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsf4z1p6u.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpsf4z1p6u.d(31): Error: no property `max` for type `long[]`\\n/tmp/tmpsf4z1p6u.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsf4z1p6u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ letterCounts;\n    foreach (letter; letters)\n    {\n        if (letterCounts.count(letter)\
    \ == 0)\n            letterCounts[letter] = 1;\n        else\n            letterCounts[letter]++;\n\
    \    }\n    long maxCount = max(letterCounts.values);\n    foreach (letter; letterCounts.keys)\n\
    \    {\n        if (letterCounts[letter] == maxCount)\n            result[letter]\
    \ = maxCount;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6uhj5lmj.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp6uhj5lmj.d(31): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6uhj5lmj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] histogram;\n    foreach (c;\
    \ test.split)\n    {\n        if (c in histogram)\n            histogram[c]++;\n\
    \        else\n            histogram[c] = 1;\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach (key, value; histogram)\n    {\n        if (value == max)\n     \
    \       result.insert(key);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm42xhdf1.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpm42xhdf1.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpm42xhdf1.d(34):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm42xhdf1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto dict = new long[string];\n    foreach\
    \ (char c; test)\n    {\n        if (c == ' ')\n            continue;\n      \
    \  if (dict.count(c) == 0)\n            dict[c] = 1;\n        else\n         \
    \   dict[c]++;\n    }\n    long max = 0;\n    foreach (char c; test)\n    {\n\
    \        if (c == ' ')\n            continue;\n        if (dict[c] > max)\n  \
    \          max = dict[c];\n    }\n    foreach (char c; test)\n    {\n        if\
    \ (c == ' ')\n            continue;\n        if (dict[c] == max)\n           \
    \ result[c] = max;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_bxql31f.d(22): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp_bxql31f.d(45): Error: cannot implicitly convert expression\
    \ `c` of type `char` to `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_bxql31f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0) \n    {\n        return result;\n    }\n    auto words = test.split(\"\
    \ \");\n    long[string] counts;\n    foreach (word; words) \n    {\n        if\
    \ (counts.count(word) == 0) \n        {\n            counts[word] = 1;\n     \
    \   }\n        else \n        {\n            counts[word]++;\n        }\n    }\n\
    \    long max = maxElement(counts.values);\n    foreach (word; counts.keys) \n\
    \    {\n        if (counts[word] == max) \n        {\n            result.set(counts);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxp5f3kuz.d(24): Error: no property `split` for type `string`\\\
    n/tmp/tmpxp5f3kuz.d(37): Error: undefined identifier `maxElement`\\n/tmp/tmpxp5f3kuz.d(42):\
    \ Error: no property `set` for type `Nullable!(long[string])`, did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxp5f3kuz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]\
    \ += 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ut0xxrd.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp1ut0xxrd.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ut0xxrd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ histogram;\n    foreach (word; words)\n    {\n        if (histogram.find(word)\
    \ == null)\n            histogram[word] = 1;\n        else\n            histogram[word]++;\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach (word; histogram.keys)\n\
    \    {\n        if (histogram[word] == max)\n            result.get.put(word,\
    \ max);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps0awgm_c.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmps0awgm_c.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmps0awgm_c.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmps0awgm_c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (dict.count(word) == 0)\n\
    \            dict[word] = 1;\n        else\n            dict[word] += 1;\n   \
    \ }\n    long max = maxElement(dict.values);\n    foreach (key, value; dict)\n\
    \    {\n        if (value == max)\n            result.get!(long[string])[key]\
    \ = value;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp36kehtl.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpp36kehtl.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpp36kehtl.d(35):\
    \ Error: `inout` method `std.typecons.Nullable!(long[string]).Nullable.get!(long[string]).get`\
    \ is not callable using a mutable object\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpp36kehtl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.find(c) is null)\n        {\n      \
    \      result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpexd3h7f_.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpexd3h7f_.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexd3h7f_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 1)\n        {\n            if(result.count(c)\
    \ == 0)\n            {\n                result[c] = 1;\n            }\n      \
    \      else\n            {\n                result[c]++;\n            }\n    \
    \    }\n    }\n    if(result.length == 0)\n    {\n        return null;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_vbnin1i.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp_vbnin1i.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmp_vbnin1i.d(36): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_vbnin1i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    if (test.empty)\n        return null;\n    auto\
    \ result = new long[string];\n    foreach (ch; test.split)\n    {\n        if\
    \ (result.count(ch) == 0)\n            result[ch] = 1;\n        else\n       \
    \     result[ch] += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp50cxhv2o.d(19): Error: no property `empty` for type `string`\\\
    n/tmp/tmp50cxhv2o.d(21): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmp50cxhv2o.d(22): Error: no property `split` for type `string`\\n/tmp/tmp50cxhv2o.d(20):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp50cxhv2o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(result.find(c) is null)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt9kqk81w.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpt9kqk81w.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9kqk81w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    auto hist =\
    \ new long[string];\n    foreach (word; words)\n    {\n        hist[word]++;\n\
    \    }\n    long max = maxElement(hist.values);\n    foreach (key, value; hist)\n\
    \    {\n        if (value == max)\n            result.get.put(key, value);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf8rm25wh.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpf8rm25wh.d(23): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpf8rm25wh.d(28): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8rm25wh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(result.count(c) == 0)\n        {\n          \
    \  result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdhkcd38e.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpdhkcd38e.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhkcd38e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0) \n    {\n        return result;\n    }\n    else \n    {\n        result\
    \ = new long[string];\n        foreach (letter; test.split(\" \")) \n        {\n\
    \            if (result.get(letter) is null) \n            {\n               \
    \ result[letter] = 1;\n            }\n            else \n            {\n     \
    \           result[letter]++;\n            }\n        }\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf8l4v7q9.d(26): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpf8l4v7q9.d(27): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8l4v7q9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    auto\
    \ counts = new long[string];\n    foreach (letter; letters)\n    {\n        if\
    \ (counts.count(letter) == 0)\n            counts[letter] = 1;\n        else\n\
    \            counts[letter]++;\n    }\n    auto max = maxElement(counts.values);\n\
    \    foreach (letter; letters)\n    {\n        if (counts[letter] == max)\n  \
    \          result.get.put(letter, counts[letter]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppp4lxwu8.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmppp4lxwu8.d(23): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmppp4lxwu8.d(31): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppp4lxwu8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ dict = new long[string];\n    foreach (word; words)\n    {\n        if (dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word] +=\
    \ 1;\n    }\n    long max = 0;\n    foreach (word; dict.keys)\n    {\n       \
    \ if (dict[word] > max)\n            max = dict[word];\n    }\n    auto max_dict\
    \ = new long[string];\n    foreach (word; dict.keys)\n    {\n        if (dict[word]\
    \ == max)\n            max_dict[word] = dict[word];\n    }\n    return max_dict;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf87scyom.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpf87scyom.d(23): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpf87scyom.d(37): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf87scyom.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split();\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key, value);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8za39ot_.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp8za39ot_.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp8za39ot_.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8za39ot_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach(word; words)\n    {\n        if(word in dict)\n         \
    \   dict[word]++;\n        else\n            dict[word] = 1;\n    }\n    long\
    \ max = maxElement(dict.values);\n    long[string] max_dict;\n    foreach(key,\
    \ value; dict)\n    {\n        if(value == max)\n            max_dict[key] = value;\n\
    \    }\n    result = max_dict;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzgnrhq48.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpzgnrhq48.d(31): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzgnrhq48.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    if (test.empty)\n        return null;\n    auto\
    \ result = new long[string];\n    foreach (c; test.split)\n    {\n        if (c.length\
    \ != 1)\n            continue;\n        if (result.contains(c))\n            result[c]++;\n\
    \        else\n            result[c] = 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgaqr4zur.d(19): Error: no property `empty` for type `string`\\\
    n/tmp/tmpgaqr4zur.d(21): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpgaqr4zur.d(22): Error: no property `split` for type `string`\\n/tmp/tmpgaqr4zur.d(20):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgaqr4zur.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph57pexca.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmph57pexca.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph57pexca.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ letterCounts;\n    foreach(letter; letters)\n    {\n        if(letterCounts.count(letter)\
    \ == 0)\n            letterCounts[letter] = 1;\n        else\n            letterCounts[letter]++;\n\
    \    }\n    long maxCount = max(letterCounts.values);\n    foreach(letter; letterCounts.keys)\n\
    \    {\n        if(letterCounts[letter] == maxCount)\n            result.get.insert(letter,\
    \ letterCounts[letter]);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7dsrxdyu.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp7dsrxdyu.d(31): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\n/tmp/tmp7dsrxdyu.d(35): Error: no property `insert` for type `long[string]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dsrxdyu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c]++;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxf8acxa8.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpxf8acxa8.d(31): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxf8acxa8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split())\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpemd0zyg3.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpemd0zyg3.d(31): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpemd0zyg3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (word in dict)\n       \
    \     dict[word] += 1;\n        else\n            dict[word] = 1;\n    }\n   \
    \ long max = dict.values.max;\n    foreach (key, value; dict)\n    {\n       \
    \ if (value == max)\n            result.get.put(key, value);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps4cfogks.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmps4cfogks.d(31): Error: no property `max` for type `long[]`\\n/tmp/tmps4cfogks.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmps4cfogks.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (letter; letters) \n    {\n        if (letter in dict)\n\
    \            dict[letter]++;\n        else\n            dict[letter] = 1;\n  \
    \  }\n    long max = maxElement(dict.values);\n    foreach (key, value; dict)\
    \ \n    {\n        if (value == max)\n            result.insert(key, value);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe75gjrwa.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpe75gjrwa.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpe75gjrwa.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe75gjrwa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) ret = null;\n    if(test.length\
    \ == 0)\n        return ret;\n    long[string] d = new long[string];\n    foreach(c;\
    \ test.split(\" \"))\n    {\n        d[c]++;\n    }\n    long max = maxElement(d.values);\n\
    \    ret = new long[string];\n    foreach(k, v; d)\n    {\n        if(v == max)\n\
    \            ret[k] = v;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdo3hyin_.d(22): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpdo3hyin_.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpdo3hyin_.d(27): Error: undefined identifier `maxElement`\\n/tmp/tmpdo3hyin_.d(28):\
    \ Error: cannot pass type `string` as a function argument\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdo3hyin_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd359ehco.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpd359ehco.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd359ehco.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ counts = long[string](words.length);\n    foreach (word; words)\n    {\n   \
    \     counts[word]++;\n    }\n    long max = maxElement(counts.values);\n    foreach\
    \ (key, value; counts)\n    {\n        if (value == max)\n            result.get.put(key,\
    \ value);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_e3m_cka.d(23): Error: found `[` when expecting `.` following\
    \ long\\n/tmp/tmp_e3m_cka.d(23): Error: semicolon expected following auto declaration,\
    \ not `]`\\n/tmp/tmp_e3m_cka.d(23): Error: found `]` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_e3m_cka.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto dict = new long[string];\n    foreach\
    \ (c; test.split)\n    {\n        if (c in dict)\n            dict[c]++;\n   \
    \     else\n            dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach (c; dict.keys)\n    {\n        if (dict[c] == max)\n            result.insert(c);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp52udy04x.d(22): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmp52udy04x.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmp52udy04x.d(30): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52udy04x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] counts;\n    foreach(c; test.split)\n\
    \    {\n        counts[c]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    Nullable!(long[string]) result;\n    foreach(c; counts.keys)\n    {\n   \
    \     if(counts[c] == max)\n        {\n            result.insert(c, counts[c]);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgn3uchjd.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpgn3uchjd.d(24): Error: undefined identifier `maxElement`\\n/tmp/tmpgn3uchjd.d(30):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgn3uchjd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    auto\
    \ letterCount = new long[string];\n    foreach (letter; letters)\n    {\n    \
    \    if (letterCount.count(letter) == 0)\n            letterCount[letter] = 1;\n\
    \        else\n            letterCount[letter] += 1;\n    }\n    long maxCount\
    \ = max(letterCount.values);\n    foreach (letter; letterCount.keys)\n    {\n\
    \        if (letterCount[letter] == maxCount)\n            result.get.put(letter,\
    \ maxCount);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp98_hdftz.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp98_hdftz.d(23): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmp98_hdftz.d(31): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp98_hdftz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ hist = new long[string];\n    foreach (word; words)\n    {\n        if (hist.count(word)\
    \ == 0)\n            hist[word] = 1;\n        else\n            hist[word]++;\n\
    \    }\n    long max = hist.values.max;\n    foreach (key, value; hist)\n    {\n\
    \        if (value == max)\n            result.insert(key);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0mozeopv.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp0mozeopv.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0mozeopv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string]();\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        if(!result.count(c))\n\
    \            result[c] = 0;\n        result[c]++;\n    }\n    if(result.empty)\n\
    \        return null;\n    long max = maxElement(result.values);\n    foreach(ref\
    \ value; result.values)\n    {\n        if(value != max)\n            result.remove(value);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpybrbyct8.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpybrbyct8.d(30): Error: undefined identifier `maxElement`\\\
    n/tmp/tmpybrbyct8.d(29): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpybrbyct8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]\
    \ += 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphi4iw9gx.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmphi4iw9gx.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphi4iw9gx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split())\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c]++;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl_0s4m01.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpl_0s4m01.d(31): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpl_0s4m01.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.get.put(key, value);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2xzzixoz.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp2xzzixoz.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp2xzzixoz.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2xzzixoz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ hist;\n    foreach (word; words)\n    {\n        if (hist.count(word) == 0)\n\
    \            hist[word] = 1;\n        else\n            hist[word]++;\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach (key, value; hist)\n   \
    \ {\n        if (value == max)\n            result.insert(key);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ao2nci6.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp1ao2nci6.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp1ao2nci6.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ao2nci6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa1tsz_53.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpa1tsz_53.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpa1tsz_53.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1tsz_53.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    string[] words = test.split();\n\
    \    foreach(word; words)\n    {\n        if(result.count(word) == 0)\n      \
    \  {\n            result[word] = 1;\n        }\n        else\n        {\n    \
    \        result[word] += 1;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpygko4vk3.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpygko4vk3.d(23): Error: no property `count` for type `long[string]`\\\
    n/tmp/tmpygko4vk3.d(32): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpygko4vk3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ letterCounts;\n    foreach (letter; letters)\n    {\n        if (letterCounts.count(letter)\
    \ == 0)\n            letterCounts[letter] = 1;\n        else\n            letterCounts[letter]++;\n\
    \    }\n    long max = maxElement(letterCounts.values);\n    foreach (letter;\
    \ letterCounts.keys)\n    {\n        if (letterCounts[letter] == max)\n      \
    \      result.get.put(letter, max);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9omsetfx.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp9omsetfx.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp9omsetfx.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9omsetfx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\
    \ \n    {\n        result[c]++;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz5apjytp.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpz5apjytp.d(24): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpz5apjytp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ counts = new long[string];\n    foreach (word; words)\n    {\n        if (counts.count(word)\
    \ == 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = 0;\n    foreach (count; counts)\n    {\n        if (count.value\
    \ > max)\n            max = count.value;\n    }\n    foreach (count; counts)\n\
    \    {\n        if (count.value == max)\n            result.insert(count.key,\
    \ count.value);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgbb88et7.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpgbb88et7.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbb88et7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.stdio;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.algorithm : max;\n    import std.range\
    \ : iota;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.string : split;\n    import std.typecons : Nullable;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphi86dmw0.d(70): Error: `;` expected\\n/tmp/tmphi86dmw0.d(115):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphi86dmw0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word] +=\
    \ 1;\n    }\n    long max = maxElement(counts.values);\n    foreach (key, value;\
    \ counts)\n    {\n        if (value == max)\n            result.get.put(key, value);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0zb64kb.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpo0zb64kb.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpo0zb64kb.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpo0zb64kb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ counts = new long[string];\n    foreach (word; words)\n    {\n        if (counts.count(word)\
    \ == 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    auto max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.get.insert(key, value);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3p4ihvxg.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp3p4ihvxg.d(23): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmp3p4ihvxg.d(31): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3p4ihvxg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    auto wordCount\
    \ = words.length;\n    auto wordMap = new long[string];\n    foreach (word; words)\n\
    \    {\n        if (wordMap.count(word) == 0)\n            wordMap[word] = 1;\n\
    \        else\n            wordMap[word]++;\n    }\n    auto maxCount = max(wordMap.values);\n\
    \    foreach (word; wordMap.keys)\n    {\n        if (wordMap[word] == maxCount)\n\
    \            result.get.insert(word, maxCount);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzv5kq5s_.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpzv5kq5s_.d(24): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpzv5kq5s_.d(32): Error: undefined identifier `max`, did you mean function\
    \ `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzv5kq5s_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto dict = new long[string];\n    foreach\
    \ (c; test.split)\n    {\n        if (dict.count(c) == 0)\n            dict[c]\
    \ = 1;\n        else\n            dict[c]++;\n    }\n    long max = dict.values.max;\n\
    \    foreach (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjf87cz87.d(22): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpjf87cz87.d(23): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjf87cz87.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (ch; test.split)\n\
    \    {\n        if (ch in dict)\n            dict[ch]++;\n        else\n     \
    \       dict[ch] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n            result.insert(key);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptbf9cf8a.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmptbf9cf8a.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmptbf9cf8a.d(34):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbf9cf8a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (dict.count(c) == 0)\n            dict[c] = 1;\n        else\n\
    \            dict[c]++;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n            result.insert(key);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbfkqwluq.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpbfkqwluq.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpbfkqwluq.d(34):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbfkqwluq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    \n    auto words = test.split(\" \");\n \
    \   long[string] histo;\n    foreach (word; words)\n    {\n        histo[word]++;\n\
    \    }\n    \n    long max = maxElement(histo.values);\n    foreach (word; histo.keys)\n\
    \    {\n        if (histo[word] == max)\n            result.get!(long[string])[word]\
    \ = max;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppebz1293.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmppebz1293.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmppebz1293.d(34):\
    \ Error: `inout` method `std.typecons.Nullable!(long[string]).Nullable.get!(long[string]).get`\
    \ is not callable using a mutable object\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmppebz1293.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (word; words)\n\
    \    {\n        if (counts[word] == max)\n            result.insert(word, counts);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoy9ih_uc.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpoy9ih_uc.d(31): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoy9ih_uc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split;\n    auto hist =\
    \ new long[string];\n    foreach (word; words)\n    {\n        hist[word]++;\n\
    \    }\n    auto max = hist.values.max;\n    foreach (key, value; hist)\n    {\n\
    \        if (value == max)\n            result.get.put(key, value);\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n  \
    \      auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv35pvi58.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpv35pvi58.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv35pvi58.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (c in dict)\n            dict[c]++;\n        else\n       \
    \     dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8j3u1s1v.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmp8j3u1s1v.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmp8j3u1s1v.d(34):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8j3u1s1v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n        return result;\n    auto dict = new long[string];\n    foreach(char\
    \ c; test)\n    {\n        if(dict.count(c))\n            dict[c]++;\n       \
    \ else\n            dict[c] = 1;\n    }\n    long max = dict.values.max;\n   \
    \ foreach(string key; dict.keys)\n    {\n        if(dict[key] == max)\n      \
    \      result.get.put(key, max);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7s_g9bfe.d(22): Error: cannot pass type `string` as a function\
    \ argument\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7s_g9bfe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ counts = new long[string];\n    foreach (word; words)\n    {\n        if (counts.count(word)\
    \ == 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = 0;\n    foreach (word; counts.keys)\n    {\n        if\
    \ (counts[word] > max)\n            max = counts[word];\n    }\n    foreach (word;\
    \ counts.keys)\n    {\n        if (counts[word] == max)\n            result.insert(word,\
    \ counts[word]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3udgyphu.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp3udgyphu.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3udgyphu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpniw_fs9s.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpniw_fs9s.d(31): Error: cannot implicitly convert expression `result`\
    \ of type `long[string]` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpniw_fs9s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ hist = new long[string]();\n    foreach (word; words)\n    {\n        if (hist.count(word)\
    \ == 0)\n            hist[word] = 1;\n        else\n            hist[word]++;\n\
    \    }\n    long max = 0;\n    foreach (word; hist.keys)\n    {\n        if (hist[word]\
    \ > max)\n            max = hist[word];\n    }\n    foreach (word; hist.keys)\n\
    \    {\n        if (hist[word] == max)\n            result.insert(word);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppcnbqyya.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmppcnbqyya.d(23): Error: cannot pass type `string` as a function argument\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnbqyya.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split;\n    long[string]\
    \ dict;\n    foreach (letter; letters)\n    {\n        if (dict.count(letter)\
    \ == 0)\n            dict[letter] = 1;\n        else\n            dict[letter]\
    \ += 1;\n    }\n    long max = maxElement(dict.values);\n    foreach (key, value;\
    \ dict)\n    {\n        if (value == max)\n            result.get.put(key, value);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmewfnjof.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpmewfnjof.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmpmewfnjof.d(35):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmewfnjof.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    \n    auto words = test.split(\" \");\n \
    \   long[string] dict;\n    foreach (word; words)\n    {\n        if (dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word]++;\n\
    \    }\n    \n    long max = dict.values.max;\n    foreach (key, value; dict)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0x2qo9ad.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmp0x2qo9ad.d(33): Error: no property `max` for type `long[]`\\n/tmp/tmp0x2qo9ad.d(37):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0x2qo9ad.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8bsj9awy.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmp8bsj9awy.d(31): Error: undefined identifier `maxElement`\\n/tmp/tmp8bsj9awy.d(35):\
    \ Error: no property `insert` for type `Nullable!(long[string])`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bsj9awy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.stdio;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        auto words = test.split(\" \");\n        auto word_count\
    \ = words.length;\n        auto word_dict = new long[string];\n        foreach\
    \ (word; words)\n        {\n            if (word_dict.count(word) == 0)\n    \
    \        {\n                word_dict[word] = 1;\n            }\n            else\n\
    \            {\n                word_dict[word] += 1;\n            }\n       \
    \ }\n        long max_count = 0;\n        foreach (word; word_dict.keys)\n   \
    \     {\n            if (word_dict[word] > max_count)\n            {\n       \
    \         max_count = word_dict[word];\n            }\n        }\n        foreach\
    \ (word; word_dict.keys)\n        {\n            if (word_dict[word] == max_count)\n\
    \            {\n                result[word] = max_count;\n            }\n   \
    \     }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg6ktsof5.d(36): Error: cannot pass type `string` as a function\
    \ argument\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg6ktsof5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (c in dict)\n            dict[c]++;\n        else\n       \
    \     dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (k, v; dict)\n    {\n        if (v == max)\n            result.get.put(k, v);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf705ux3h.d(23): Error: no property `split` for type `string`\\\
    n/tmp/tmpf705ux3h.d(30): Error: undefined identifier `maxElement`\\n/tmp/tmpf705ux3h.d(34):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpf705ux3h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0) \n    {\n        return result;\n    }\n    auto words = test.split(\"\
    \ \");\n    long[string] histogram;\n    foreach (word; words) \n    {\n     \
    \   if (histogram.count(word) == 0) \n        {\n            histogram[word] =\
    \ 1;\n        }\n        else \n        {\n            histogram[word] += 1;\n\
    \        }\n    }\n    long max = maxElement(histogram.values);\n    foreach (key,\
    \ value; histogram) \n    {\n        if (value == max) \n        {\n         \
    \   result.get.put(key, value);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1q75akem.d(24): Error: no property `split` for type `string`\\\
    n/tmp/tmp1q75akem.d(37): Error: undefined identifier `maxElement`\\n/tmp/tmp1q75akem.d(42):\
    \ Error: no property `put` for type `long[string]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1q75akem.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(!result.count(c))\n            result[c] =\
    \ 0;\n        result[c]++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgntj0bax.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpgntj0bax.d(20): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgntj0bax.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    auto\
    \ letterCount = new long[string];\n    foreach (letter; letters)\n    {\n    \
    \    if (letterCount.count(letter) == 0)\n            letterCount[letter] = 1;\n\
    \        else\n            letterCount[letter]++;\n    }\n    auto max = maxElement(letterCount.values);\n\
    \    foreach (letter; letterCount.keys)\n    {\n        if (letterCount[letter]\
    \ == max)\n            result.insert(letter, letterCount[letter]);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd5xlpk8k.d(22): Error: no property `split` for type `string`\\\
    n/tmp/tmpd5xlpk8k.d(23): Error: cannot pass type `string` as a function argument\\\
    n/tmp/tmpd5xlpk8k.d(31): Error: undefined identifier `maxElement`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd5xlpk8k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a')\
    \ == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b\
    \ b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string])\
    \ histogram(string test) \n{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length)\n        {\n            if(result.count(c))\n\
    \            {\n                result[c]++;\n            }\n            else\n\
    \            {\n                result[c] = 1;\n            }\n        }\n   \
    \ }\n    if(result.length)\n    {\n        return result;\n    }\n    return null;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpif_fdbgr.d(19): Error: cannot pass type `string` as a function\
    \ argument\\n/tmp/tmpif_fdbgr.d(20): Error: no property `split` for type `string`\\\
    n/tmp/tmpif_fdbgr.d(38): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!(long[string])`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpif_fdbgr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
