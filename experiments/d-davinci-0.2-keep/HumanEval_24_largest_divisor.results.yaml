name: HumanEval_24_largest_divisor
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long max = 0;\n    for (long i = 1;\
    \ i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            max =\
    \ i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n \
    \       if (n % i == 0) {\n            return i;\n        }\n        i--;\n  \
    \  }\n    return i;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj7r5gxxs.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpj7r5gxxs.__unittest_L19_C1()\
    \ [0x427a60]\\n??:? void tmpj7r5gxxs.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0xc246d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1yk76ure.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmp1yk76ure.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmp1yk76ure.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0x8d3e6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    foreach (i; 1 .. n)\n    {\n       \
    \ if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3xuk_x05.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d85]\\n??:? void tmp3xuk_x05.__unittest_L19_C1()\
    \ [0x427ab2]\\n??:? void tmp3xuk_x05.__modtest() [0x427b08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a93e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a915]\\n??:? runModuleUnitTests [0x42b881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42815b]\\n??:? _d_run_main [0x4280c6]\\n??:? main [0x427b1b]\\\
    n??:? __libc_start_main [0xd5846554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return i;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    for (long i = n-1; i > 0; i--)\n   \
    \ {\n        if (n % i == 0)\n        {\n            return i;\n        }\n  \
    \  }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while(i > 1)\n    {\n\
    \        if(n % i == 0)\n            return i;\n        i--;\n    }\n    return\
    \ 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa846nkqq.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d7d]\\n??:? void tmpa846nkqq.__unittest_L19_C1()\
    \ [0x427a64]\\n??:? void tmpa846nkqq.__modtest() [0x427afc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baa3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a936]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a90d]\\n??:? runModuleUnitTests [0x42b879]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428153]\\n??:? _d_run_main [0x4280be]\\n??:? main [0x427b0f]\\\
    n??:? __libc_start_main [0x8b32a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo98mgaxc.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpo98mgaxc.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmpo98mgaxc.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0x90666554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n \
    \       if (n % i == 0) {\n            return i;\n        }\n        i--;\n  \
    \  }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt_qi3q27.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpt_qi3q27.__unittest_L19_C1()\
    \ [0x427a60]\\n??:? void tmpt_qi3q27.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0x3743e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg2jxr1pq.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpg2jxr1pq.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmpg2jxr1pq.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0x32939554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplj0k02im.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmplj0k02im.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmplj0k02im.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0xd1082554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9wnxzh_e.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmp9wnxzh_e.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmp9wnxzh_e.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0xe4d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb63h6ju_.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d7d]\\n??:? void tmpb63h6ju_.__unittest_L21_C1()\
    \ [0x427a64]\\n??:? void tmpb63h6ju_.__modtest() [0x427afc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baa3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a936]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a90d]\\n??:? runModuleUnitTests [0x42b879]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428153]\\n??:? _d_run_main [0x4280be]\\n??:? main [0x427b0f]\\\
    n??:? __libc_start_main [0x4c6d7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n \
    \       if (n % i == 0) {\n            return i;\n        }\n        i--;\n  \
    \  }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzlk4h657.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpzlk4h657.__unittest_L19_C1()\
    \ [0x427a60]\\n??:? void tmpzlk4h657.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0x2d0a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp16cis0ra.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmp16cis0ra.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmp16cis0ra.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0xa2952554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    foreach\
    \ (i; 2..n) {\n        if (n % i == 0) {\n            largest_divisor = i;\n \
    \       }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n \
    \       if (n % i == 0) {\n            return i;\n        }\n        i--;\n  \
    \  }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2m0ski48.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmp2m0ski48.__unittest_L19_C1()\
    \ [0x427a60]\\n??:? void tmp2m0ski48.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0xb5b6a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long max = 0;\n    for (long i = 1;\
    \ i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--)\n    {\n        if (n % i == 0)\n        {\n            return i;\n   \
    \     }\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpku367y8f.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpku367y8f.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmpku367y8f.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0x5b317554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while(i > 0)\n\
    \    {\n        if(n % i == 0)\n            return i;\n        i--;\n    }\n \
    \   return i;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i -= 1;\n\
    \    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n-1; i > 0; i--)\n\
    \    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n\
    \    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--)\n    {\n        if (n % i == 0)\n        {\n            return i;\n   \
    \     }\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0)\n            return i;\n        i--;\n    }\n\
    \    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n   \
    \ assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return i;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjyfc9qok.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpjyfc9qok.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmpjyfc9qok.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0xb202d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvx12ix7m.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpvx12ix7m.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmpvx12ix7m.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0x39b7c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp38id35s7.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmp38id35s7.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmp38id35s7.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0xb02ad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n/2; i > 0; i--)\
    \ {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i -= 1;\n\
    \    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--)\n    {\n        if (n % i == 0)\n        {\n            return i;\n   \
    \     }\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n \
    \       if (n % i == 0) {\n            return i;\n        }\n        i--;\n  \
    \  }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpztfk5j2y.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpztfk5j2y.__unittest_L19_C1()\
    \ [0x427a60]\\n??:? void tmpztfk5j2y.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0xd0266554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i -= 1;\n\
    \    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    for (long i = n - 1; i > 0; i--) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\n/*\n For a given number n, find the largest\
    \ prime number that divides n evenly, smaller than n\n    >>> largest_prime_divisor(15)\n\
    \    5\n*/\nlong largest_prime_divisor(long n) \n{\n    long i = n;\n    while\
    \ (i > 0) \n    {\n        if (n % i == 0 && is_prime(i)) \n        {\n      \
    \      return i;\n        }\n        i--;\n    }\n    return 0;\n}\n/*\n For a\
    \ given number n, find the smallest prime number that divides n evenly, larger\
    \ than 1\n    >>> smallest_prime_divisor(15)\n    3\n*/\nlong smallest_prime_divisor(long\
    \ n) \n{\n    long i = 2;\n    while (i < n) \n    {\n        if (n % i == 0 &&\
    \ is_prime(i)) \n        {\n            return i;\n        }\n        i++;\n \
    \   }\n    return 0;\n}\n/*\n For a given number n, find the smallest number that\
    \ divides n evenly, larger than 1\n    >>> smallest_divisor(15)\n    3\n*/\nlong\
    \ smallest_divisor(long n) \n{\n    long i = 2;\n    while (i < n) \n    {\n \
    \       if (n % i == 0) \n        {\n            return i;\n        }\n      \
    \  i++;\n    }\n    return 0;\n}\n/*\n For a given number n, find the largest\
    \ prime number that divides n evenly, smaller than n\n    >>> largest_prime_divisor(15)\n\
    \    5\n*/\nlong largest_prime_divisor(long n) \n{\n    long i = n;\n    while\
    \ (i > 0) \n    {\n        if (n % i == 0 && is_prime(i)) \n        {\n      \
    \      return i;\n        }\n        i--;\n    }\n   \nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0d1nkxg9.d(92): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0d1nkxg9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcpg8ko88.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d7d]\\n??:? void tmpcpg8ko88.__unittest_L21_C1()\
    \ [0x427a64]\\n??:? void tmpcpg8ko88.__modtest() [0x427afc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baa3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a936]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a90d]\\n??:? runModuleUnitTests [0x42b879]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428153]\\n??:? _d_run_main [0x4280be]\\n??:? main [0x427b0f]\\\
    n??:? __libc_start_main [0xe2878554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return i;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while(i > 0)\n\
    \    {\n        if(n % i == 0)\n            return i;\n        i--;\n    }\n \
    \   return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n\
    {\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    foreach\
    \ (i; 2..n)\n    {\n        if (n % i == 0)\n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n \
    \       if (n % i == 0) {\n            return i;\n        }\n        i--;\n  \
    \  }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn9o9vvp5.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d7d]\\n??:? void tmpn9o9vvp5.__unittest_L19_C1()\
    \ [0x427a64]\\n??:? void tmpn9o9vvp5.__modtest() [0x427afc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baa3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a936]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a90d]\\n??:? runModuleUnitTests [0x42b879]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428153]\\n??:? _d_run_main [0x4280be]\\n??:? main [0x427b0f]\\\
    n??:? __libc_start_main [0x2eff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi_qx2c1q.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d7d]\\n??:? void tmpi_qx2c1q.__unittest_L21_C1()\
    \ [0x427a64]\\n??:? void tmpi_qx2c1q.__modtest() [0x427afc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baa3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a936]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a90d]\\n??:? runModuleUnitTests [0x42b879]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428153]\\n??:? _d_run_main [0x4280be]\\n??:? main [0x427b0f]\\\
    n??:? __libc_start_main [0xd2d15554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvfezkum2.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d7d]\\n??:? void tmpvfezkum2.__unittest_L21_C1()\
    \ [0x427a64]\\n??:? void tmpvfezkum2.__modtest() [0x427afc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baa3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a936]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a90d]\\n??:? runModuleUnitTests [0x42b879]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428153]\\n??:? _d_run_main [0x4280be]\\n??:? main [0x427b0f]\\\
    n??:? __libc_start_main [0xa833c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--)\n    {\n        if (n % i == 0)\n        {\n            return i;\n   \
    \     }\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n-1; i > 0; i--)\
    \ {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n-1; i > 0; i--)\n\
    \    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg2z7nq5n.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpg2z7nq5n.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmpg2z7nq5n.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0x9668554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while(i > 0)\n    {\n\
    \        if(n % i == 0)\n            return i;\n        i -= 1;\n    }\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpee5b4ni9.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpee5b4ni9.__unittest_L19_C1()\
    \ [0x427a60]\\n??:? void tmpee5b4ni9.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0xc0405554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n \
    \       if (n % i == 0) {\n            return i;\n        }\n        i--;\n  \
    \  }\n    return i;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprvrtf2n3.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmprvrtf2n3.__unittest_L19_C1()\
    \ [0x427a60]\\n??:? void tmprvrtf2n3.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0x7a663554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n \
    \       if (n % i == 0) {\n            return i;\n        }\n        i--;\n  \
    \  }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8i6ml1g9.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmp8i6ml1g9.__unittest_L19_C1()\
    \ [0x427a60]\\n??:? void tmp8i6ml1g9.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0x6a80c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiqrsh744.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d7d]\\n??:? void tmpiqrsh744.__unittest_L21_C1()\
    \ [0x427a64]\\n??:? void tmpiqrsh744.__modtest() [0x427afc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baa3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a936]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a90d]\\n??:? runModuleUnitTests [0x42b879]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428153]\\n??:? _d_run_main [0x4280be]\\n??:? main [0x427b0f]\\\
    n??:? __libc_start_main [0x59789554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i <= n / 2; i++) \n    {\n        if (n % i == 0) \n        {\n     \
    \       largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n\
    }\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n / 2;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n-1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgwwi7uxw.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmpgwwi7uxw.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmpgwwi7uxw.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0x1d158554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n / 2;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n  \
    \  {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9b4_10hf.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d75]\\n??:? void tmp9b4_10hf.__unittest_L21_C1()\
    \ [0x427a60]\\n??:? void tmp9b4_10hf.__modtest() [0x427af8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a92e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fac1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a905]\\n??:? runModuleUnitTests [0x42b871]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42814b]\\n??:? _d_run_main [0x4280b6]\\n??:? main [0x427b0b]\\\
    n??:? __libc_start_main [0xc0cf9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) \n    {\n        if (n % i == 0) \n        {\n            return i;\n \
    \       }\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n-1; i > 0; i--)\n\
    \    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n\
    \    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1;\n    foreach\
    \ (i; 2..n) \n    {\n        if (n % i == 0) \n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \n\
    */\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
