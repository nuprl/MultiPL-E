name: HumanEval_59_largest_prime_factor
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
  \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
  \    29\n    >>> largest_prime_factor(2048)\n    2\n    \n*/\nlong largest_prime_factor(long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
  \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
  \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\n\
  void main(){}"
completions: ["{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } \n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } \n        else \n        {\n            i++;\n  \
    \      }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest = i;\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    return largest;\n\
    }\n/*\nReturn the largest palindrome made from the product of two 3-digit numbers.\n\
    \    >>> largest_palindrome(2)\n    9009\n    >>> largest_palindrome(3)\n    906609\n\
    */\nlong largest_palindrome(long n) \n{\n    long largest = 0;\n    long lower_bound\
    \ = 10 ^ (n - 1);\n    long upper_bound = 10 ^ n - 1;\n    for (long i = upper_bound;\
    \ i >= lower_bound; i--) {\n        for (long j = i; j >= lower_bound; j--) {\n\
    \            long product = i * j;\n            if (product > largest && is_palindrome(product))\
    \ {\n                largest = product;\n            }\n        }\n    }\n   \
    \ return largest;\n}\n/*\nReturn the smallest number evenly divisible by all numbers\
    \ from 1 to n.\n    >>> smallest_multiple(10)\n    2520\n    >>> smallest_multiple(20)\n\
    \    232792560\n*/\nlong smallest_multiple(long n) \n{\n    long result = 1;\n\
    \    for (long i = 2; i <= n; i++) {\n        result = lcm(result, i);\n    }\n\
    \    return result;\n}\n/*\nReturn the sum of all the primes below n.\n    >>>\
    \ sum_of_primes(10)\n    17\n    >>> sum_of_primes(2000000)\n    142913828922\n\
    */\nlong sum_of_primes(long n) \n{\n    long sum = 0;\n    for (long i = 2; i\
    \ < n; i++) {\n        if (is_prime(i)) {\n            sum += i;\n        }\n\
    \    }\n    return sum;\n}\n/*\nReturn the difference between the sum of the squares\
    \ of the first n natural numbers and the square of the sum.\n   ", "{\n    long\
    \ largest = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0)\
    \ {\n            largest = i;\n            n /= i;\n        } else {\n       \
    \     i += 1;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime = 0;\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ largest_prime = i;\n            n /= i;\n        } \n        else \n       \
    \ {\n            i++;\n        }\n    }\n    return largest_prime;\n}", "{\n \
    \   long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest = i;\n            n /= i;\n  \
    \      }\n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest;\n}",
  "{\n    long factor = 2;\n    long largest_factor = 1;\n    while (n > 1) \n   \
    \ {\n        if (n % factor == 0) \n        {\n            largest_factor = factor;\n\
    \            n /= factor;\n            while (n % factor == 0) \n            {\n\
    \                n /= factor;\n            }\n        }\n        factor = factor\
    \ + 1;\n    }\n    return largest_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest_prime_factor = 1;\n    long factor = 2;\n    while (n > 1) \n\
    \    {\n        while (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor += 1;\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest = 0;\n    long i =\
    \ 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest;\n}", "{\n    long largest_prime = 1;\n    long i = 2;\n  \
    \  while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long max_prime = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n\
    \ % i == 0) {\n            max_prime = i;\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return max_prime;\n}", "{\n    long\
    \ largest_prime = 0;\n    long i = 2;\n    while (i < n) \n    {\n        if (n\
    \ % i == 0) \n        {\n            largest_prime = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return largest_prime;\n}", "{\n    long largest = 0;\n    long i = 2;\n   \
    \ while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest = 0;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            largest_prime_factor = i;\n           \
    \ n /= i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i += 1;\n        }\n \
    \   }\n    return largest;\n}", "{\n    long largest = 0;\n    long factor = 2;\n\
    \    while (n > 1) \n    {\n        if (n % factor == 0) \n        {\n       \
    \     largest = factor;\n            n /= factor;\n            while (n % factor\
    \ == 0) \n            {\n                n /= factor;\n            }\n       \
    \ }\n        factor++;\n    }\n    return largest;\n}", "{\n    long largest_prime\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i += 1;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime =\
    \ 1;\n    long factor = 2;\n    while (n > 1) \n    {\n        while (n % factor\
    \ == 0) \n        {\n            largest_prime = factor;\n            n /= factor;\n\
    \        }\n        factor += 1;\n    }\n    return largest_prime;\n}", "{\n \
    \   long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest_prime = i;\n          \
    \  n /= i;\n        } \n        else \n        {\n            i += 1;\n      \
    \  }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime = 0;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest_prime = i;\n            n /= i;\n        } \n     \
    \   else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest_prime = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return largest_prime;\n}", "{\n    long largest_prime = 0;\n    long i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime =\
    \ i;\n            n /= i;\n        } else {\n            i++;\n        }\n   \
    \ }\n    return largest_prime;\n}", "{\n    long largest = 0;\n    long i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest = i;\n \
    \           n /= i;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return largest;\n}", "{\n    long largest_prime_factor = 1;\n    long d = 2;\n\
    \    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n         \
    \   largest_prime_factor = d;\n            n /= d;\n        }\n        d = d +\
    \ 1;\n        if (d*d > n) \n        {\n            if (n > 1) \n            {\n\
    \                largest_prime_factor = n;\n            }\n            break;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest_prime = 1;\n    foreach(i; 2..n)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            if(isPrime(i))\n            {\n                largest_prime\
    \ = i;\n            }\n        }\n    }\n    return largest_prime;\n}", "{\n \
    \   long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n      \
    \  } else {\n            i += 1;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime = 1;\n    long factor\
    \ = 2;\n    while (n > 1) \n    {\n        if (n % factor == 0) \n        {\n\
    \            largest_prime = factor;\n            n /= factor;\n            while\
    \ (n % factor == 0) \n            {\n                n /= factor;\n          \
    \  }\n        }\n        factor = factor + 1;\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long i = 2;\n    long max = 0;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            max = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return max;\n}", "{\n\
    \    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n      \
    \  } else {\n            i += 1;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % factor == 0) \n        {\n            largest_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1;\n    }\n    return largest_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0;\n    for (long i = 2; i <= n; i++) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n            i--;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest_prime_factor = 1;\n    while (n % 2 == 0) \n    {\n        largest_prime_factor\
    \ = 2;\n        n /= 2;\n    }\n    long p = 3;\n    while (n != 1) \n    {\n\
    \        while (n % p == 0) \n        {\n            largest_prime_factor = p;\n\
    \            n /= p;\n        }\n        p += 2;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        }\n        else \n        {\n            i++;\n  \
    \      }\n    }\n    return largest_prime;\n}", "{\n    long i = 2;\n    long\
    \ max = 0;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n\
    \            max = i;\n            n /= i;\n        } \n        else \n      \
    \  {\n            i++;\n        }\n    }\n    return max;\n}", "{\n    long largest\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        }\n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n    {\n  \
    \      if (n % i == 0) \n        {\n            largest_prime = i;\n         \
    \   n /= i;\n        } \n        else \n        {\n            i++;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest_prime = 1;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest_prime = i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i++;\n        }\n    }\n    return largest_prime;\n}",
  "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) \n \
    \   {\n        if (n % i == 0) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest = i;\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest = 0;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest = i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest_prime = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return largest_prime;\n}", "{\n    long largest_prime = 0;\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ largest_prime = i;\n            n /= i;\n        }\n        else \n        {\n\
    \            i++;\n        }\n    }\n    return largest_prime;\n}", "{\n    long\
    \ largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } \n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i += 1;\n        }\n    }\n    return largest_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n  \
    \  long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return largest_prime;\n}",
  "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) \n \
    \   {\n        if (n % i == 0) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i += 1;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        }\n        else \n        {\n            i++;\n  \
    \      }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime = 1;\n\
    \    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n          \
    \  largest_prime = i;\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long max = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n\
    \ % i == 0) \n        {\n            max = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return max;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest_prime = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i += 1;\n        }\n    }\n\
    \    return largest_prime;\n}", "{\n    long max_prime = -1;\n    while (n % 2\
    \ == 0) \n    {\n        max_prime = 2;\n        n >>= 1;\n    }\n    for (long\
    \ i = 3; i <= sqrt(n); i += 2) \n    {\n        while (n % i == 0) \n        {\n\
    \            max_prime = i;\n            n = n / i;\n        }\n    }\n    if\
    \ (n > 2)\n        max_prime = n;\n    return max_prime;\n}", "{\n    long largest\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime = 0;\n    foreach(i; 2..n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            if (isPrime(i)) \n\
    \            {\n                largest_prime = i;\n            }\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest = 0;\n    foreach(i;\
    \ iota(2, n))\n    {\n        if(n % i == 0)\n        {\n            largest =\
    \ i;\n            n /= i;\n        }\n    }\n    return largest;\n}", "{\n   \
    \ long largest_prime = 0;\n    long divisor = 2;\n    while (n > 1) \n    {\n\
    \        if (n % divisor == 0) \n        {\n            largest_prime = divisor;\n\
    \            n /= divisor;\n            while (n % divisor == 0) \n          \
    \  {\n                n /= divisor;\n            }\n        }\n        divisor++;\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest_prime = 1;\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime;\n}", "{\n    long largest_prime_factor = 0;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest_prime_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime = 2;\n    while (n % 2 ==\
    \ 0) \n    {\n        n /= 2;\n    }\n    for (long i = 3; i <= sqrt(n); i +=\
    \ 2) \n    {\n        while (n % i == 0) \n        {\n            largest_prime\
    \ = i;\n            n /= i;\n        }\n    }\n    if (n > 2) \n    {\n      \
    \  largest_prime = n;\n    }\n    return largest_prime;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        }\n \
    \       else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n  \
    \  long largest_prime = 0;\n    long i = 2;\n    while (i < n) \n    {\n     \
    \   if (n % i == 0) \n        {\n            if (is_prime(i)) \n            {\n\
    \                largest_prime = i;\n            }\n            n /= i;\n    \
    \    }\n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime;\n}", "{\n    long largest = 0;\n    foreach(i; 2..n)\n    {\n\
    \        if(n % i == 0)\n        {\n            if(isPrime(i))\n            {\n\
    \                largest = i;\n            }\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime =\
    \ 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n        } else {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest_factor = i;\n       \
    \     n /= i;\n        } \n        else \n        {\n            i += 1;\n   \
    \     }\n    }\n    return largest_factor;\n}", "{\n    long largest_prime = 1;\n\
    \    foreach(i; 2 .. n) \n    {\n        if (n % i == 0) \n        {\n       \
    \     if (isPrime(i)) \n            {\n                largest_prime = i;\n  \
    \          }\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        }\n        else \n        {\n            i++;\n  \
    \      }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0;\n  \
    \  long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n       \
    \ {\n            largest = i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i\
    \ += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ result = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest = 0;\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest = 0;\n    foreach(i;\
    \ 2..n)\n    {\n        if(n % i == 0)\n        {\n            if(isPrime(i))\n\
    \            {\n                largest = i;\n            }\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest = 0;\n    long i = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            largest = i;\n          \
    \  n /= i;\n        } else {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_factor = 1;\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ largest_factor = i;\n            n /= i;\n        } \n        else \n      \
    \  {\n            i += 1;\n        }\n    }\n    return largest_factor;\n}", "{\n\
    \    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n    {\n  \
    \      if (n % i == 0) \n        {\n            largest_prime = i;\n         \
    \   n /= i;\n        }\n        else \n        {\n            i += 1;\n      \
    \  }\n    }\n    return largest_prime;\n}", "{\n    long largest = 1;\n    foreach(i;\
    \ 2 .. sqrt(n)) \n    {\n        if(n % i == 0) \n        {\n            if(isPrime(i))\
    \ \n            {\n                largest = i;\n            }\n        }\n  \
    \  }\n    return largest;\n}", "{\n    long largest_prime = 1;\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ largest_prime = i;\n            n /= i;\n        } \n        else \n       \
    \ {\n            i++;\n        }\n    }\n    return largest_prime;\n}", "{\n \
    \   long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i += 1;\n        }\n    }\n \
    \   return largest;\n}", "{\n    long largest_prime_factor = 1;\n    long i =\
    \ 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n      \
    \      largest_prime_factor = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } \n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        }\n \
    \       else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0;\n \
    \   long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n           \
    \ largest = i;\n            n /= i;\n        } else {\n            i++;\n    \
    \    }\n    }\n    return largest;\n}", "{\n    long largest_prime = 0;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest_prime = i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i++;\n        }\n    }\n    return largest_prime;\n}",
  "{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) \n \
    \   {\n        if (n % i == 0) \n        {\n            largest_prime_factor =\
    \ max(largest_prime_factor, i);\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest_prime_factor = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n  \
    \  long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n    {\n    \
    \    if (n % i == 0) \n        {\n            largest_prime = i;\n           \
    \ n /= i;\n        } \n        else \n        {\n            i++;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor = 1;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest_prime_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n \
    \   {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return largest_factor;\n}", "{\n    long i = 2;\n    long\
    \ max = 1;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n\
    \            max = i;\n            n /= i;\n        } \n        else \n      \
    \  {\n            i++;\n        }\n    }\n    return max;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}", "{\n\
    \    long largest_factor = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    return largest_factor;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i += 1;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime_factor = 0;\n    long i =\
    \ 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n      \
    \      largest_prime_factor = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i < n) \n   \
    \ {\n        if (n % i == 0) \n        {\n            if (is_prime(i)) \n    \
    \        {\n                largest_prime = i;\n            }\n            n /=\
    \ i;\n        }\n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest_prime;\n}", "{\n    long largest_prime = 0;\n    long i =\
    \ 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n      \
    \      largest_prime = i;\n            n /= i;\n        } \n        else \n  \
    \      {\n            i++;\n        }\n    }\n    return largest_prime;\n}", "{\n\
    \    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest = i;\n   \
    \         n /= i;\n        } \n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest = 0;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest = i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i += 1;\n        }\n    }\n    return largest;\n}", "{\n \
    \   long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest_prime = i;\n          \
    \  n /= i;\n        } \n        else \n        {\n            i++;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor = 1;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest_prime_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0;\n    long largest_prime_factor_sqrt = sqrt(n);\n \
    \   long i = 2;\n    while (i <= largest_prime_factor_sqrt) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest_prime_factor = i;\n          \
    \  n /= i;\n            largest_prime_factor_sqrt = sqrt(n);\n        }\n    \
    \    else \n        {\n            i++;\n        }\n    }\n    if (n > largest_prime_factor)\
    \ \n    {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        }\n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n    {\n  \
    \      if (n % i == 0) \n        {\n            largest_prime = i;\n         \
    \   n /= i;\n        } \n        else \n        {\n            i += 1;\n     \
    \   }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0;\n    long\
    \ i = 2;\n    while (i < n) \n    {\n        if (n % i == 0) \n        {\n   \
    \         largest = i;\n            n /= i;\n        } \n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return max(largest, n);\n}", "{\n\
    \    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest = 0;\n    long i = 2;\n    while (i * i <= n) \n    {\n    \
    \    if (n % i == 0) \n        {\n            largest = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i += 1;\n        }\n    }\n\
    \    if (n > largest) \n    {\n        largest = n;\n    }\n    return largest;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_factor = 0;\n    long factor =\
    \ 2;\n    while (n > 1) \n    {\n        if (n % factor == 0) \n        {\n  \
    \          largest_factor = factor;\n            n /= factor;\n            while\
    \ (n % factor == 0) \n            {\n                n /= factor;\n          \
    \  }\n        }\n        factor = factor + 1;\n    }\n    return largest_factor;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest_prime = 2;\n    long i = 3;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n      \
    \  } else {\n            i += 2;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_factor = 0;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_factor = i;\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return largest_factor;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime = 1;\n    long i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime =\
    \ i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest = 0;\n    long i =\
    \ 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime_factor = 1;\n    long i =\
    \ 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n      \
    \      largest_prime_factor = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        }\n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime_factor = 1;\n    long i =\
    \ 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n      \
    \      largest_prime_factor = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n  \
    \  long largest = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i\
    \ == 0) {\n            largest = i;\n            n /= i;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n \
    \   {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return largest_factor;\n}", "{\n    long largest_factor\
    \ = 0;\n    long factor = 2;\n    while (n > 1) \n    {\n        while (n % factor\
    \ == 0) \n        {\n            largest_factor = factor;\n            n /= factor;\n\
    \        }\n        factor += 1;\n    }\n    return largest_factor;\n}", "{\n\
    \    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n    {\n  \
    \      if (n % i == 0) \n        {\n            largest_prime = i;\n         \
    \   n /= i;\n        } \n        else \n        {\n            i++;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest = 0;\n    long i =\
    \ 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n      \
    \      largest = i;\n            n /= i;\n        } \n        else \n        {\n\
    \            i += 1;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0)\
    \ {\n            largest = i;\n            n /= i;\n        } else {\n       \
    \     i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest =\
    \ 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        }\n        else \n        {\n            i++;\n  \
    \      }\n    }\n    return largest_prime;\n}", "{\n    long largest_factor =\
    \ 1;\n    long factor = 2;\n    while (n > 1) \n    {\n        if (n % factor\
    \ == 0) \n        {\n            largest_factor = factor;\n            n /= factor;\n\
    \            while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor = factor + 1;\n    }\n    return largest_factor;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest_prime = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return largest_prime;\n}", "{\n    long largest = 0;\n    long i = 2;\n   \
    \ while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest_prime_factor = 1;\n    long d = 2;\n    while (n > 1) \n   \
    \ {\n        while (n % d == 0) \n        {\n            largest_prime_factor\
    \ = d;\n            n /= d;\n        }\n        d = d + 1;\n        if (d*d >\
    \ n) \n        {\n            if (n > 1) \n            {\n                largest_prime_factor\
    \ = n;\n            }\n            break;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long max_prime_factor = 1;\n    long i =\
    \ 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n      \
    \      max_prime_factor = i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i += 1;\n        }\n    }\n    return max_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 0;\n    long factor = 2;\n    while (factor\
    \ <= n) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        } \n        else \n        {\n\
    \            factor++;\n        }\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) \n \
    \   {\n        if (n % i == 0) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_factor = 1;\n    long d = 2;\n\
    \    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n         \
    \   largest_factor = d;\n            n /= d;\n        }\n        d = d + 1;\n\
    \        if (d*d > n) \n        {\n            if (n > 1) \n            {\n  \
    \              largest_factor = n;\n            }\n            break;\n      \
    \  }\n    }\n    return largest_factor;\n}", "{\n    long largest = 0;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest = i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          n /= i;\n        } \n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return i;\n}", "{\n    long largest = 0;\n    long i =\
    \ 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n      \
    \      largest = i;\n            n /= i;\n        } \n        else \n        {\n\
    \            i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i\
    \ += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            largest = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0;\n \
    \   foreach(i; iota(2, n))\n    {\n        if(n % i == 0)\n        {\n       \
    \     if(is_prime(i))\n            {\n                largest = i;\n         \
    \   }\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long max_prime = 1;\n    long i = 2;\n  \
    \  while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            max_prime\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return max_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1;\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest = 0;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest = i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i += 1;\n        }\n    }\n    return largest;\n}", "{\n \
    \   long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest_prime = i;\n          \
    \  n /= i;\n        }\n        else \n        {\n            i++;\n        }\n\
    \    }\n    return largest_prime;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
