name: HumanEval_47_median
language: humaneval_to_dlang.py
prompt: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>> median([3,\
  \ 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n   \
  \ \n*/\nfloat median(long[] l) \n"
tests: "unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
  \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) ==\
  \ 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
  \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
completions: ["{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return\
    \ sorted[sorted.length / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted\
    \ = l.dup.sort;\n    long mid = sorted.length / 2;\n    if (sorted.length % 2\
    \ == 0)\n        return (sorted[mid] + sorted[mid - 1]) / 2.0;\n    else\n   \
    \     return sorted[mid];\n}", "{\n    long[] sorted = l.sort();\n    long len\
    \ = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len / 2];\n \
    \   else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n\
    \        return sorted[sorted.length / 2];\n    else\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) {\n        return sorted[sorted.length\
    \ / 2];\n    } else {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}", "{\n    if (l.length == 0)\n        return 0;\n   \
    \ else if (l.length == 1)\n        return l[0];\n    else if (l.length == 2)\n\
    \        return (l[0] + l[1]) / 2.0;\n    else\n    {\n        long[] sorted =\
    \ l.dup;\n        sorted.sort;\n        if (sorted.length % 2 == 0)\n        \
    \    return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n\
    \        else\n            return sorted[sorted.length / 2];\n    }\n}", "{\n\
    \    long[] sorted = l.dup.sort;\n    long n = sorted.length;\n    if (n % 2 ==\
    \ 1)\n        return sorted[n / 2];\n    else\n        return (sorted[n / 2 -\
    \ 1] + sorted[n / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    return sorted[sorted.length / 2];\n}", "{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }", "{\n    long[] l2 = l.dup;\n    l2.sort;\n    long len = l2.length;\n    if\
    \ (len % 2 == 0) \n    {\n        return (l2[len / 2 - 1] + l2[len / 2]) / 2.0;\n\
    \    } \n    else \n    {\n        return l2[len / 2];\n    }\n}", "{\n    long[]\
    \ sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n\
    \        return sorted[sorted.length / 2];\n    }\n    else\n    {\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}",
  "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup;\n    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 ==\
    \ 1) {\n        return sorted[len / 2];\n    } else {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) {\n        return sorted[sorted.length\
    \ / 2];\n    } else {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1) {\n        return sorted[len\
    \ / 2];\n    } else {\n        return (sorted[len / 2 - 1] + sorted[len / 2])\
    \ / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if\
    \ (sorted.length % 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n\
    \        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) /\
    \ 2.0;\n}", "{\n    long[] s = l.dup;\n    s.sort;\n    long n = s.length;\n \
    \   if (n % 2 == 1)\n        return s[n / 2];\n    else\n        return (s[n /\
    \ 2 - 1] + s[n / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = sort(l);\n    long n = l.length;\n    if (n % 2 == 1)\n \
    \       return sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.sort();\n    long len = sorted.length;\n\
    \    if (len % 2 == 1) \n    {\n        return sorted[len / 2];\n    } \n    else\
    \ \n    {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n   \
    \ }\n}", "{\n    long[] sorted = l.sort();\n    long len = sorted.length;\n  \
    \  if (len % 2 == 1) {\n        return sorted[len / 2];\n    } else {\n      \
    \  return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}", "{\n    long[]\
    \ sorted = l.dup;\n    sorted.sort;\n    long n = sorted.length;\n    if (n %\
    \ 2 == 1) \n    {\n        return sorted[n / 2];\n    } \n    else \n    {\n \
    \       return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}", "{\n   \
    \ long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n\
    \        return sorted[sorted.length / 2];\n    else\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else \n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n\
    \        return sorted[n / 2];\n    } \n    else \n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else \n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    return (sorted[sorted.length\
    \ / 2] + sorted[(sorted.length - 1) / 2]) / 2.0;\n}", "{\n    l.sort();\n    long\
    \ n = l.length;\n    if (n % 2 == 1) \n    {\n        return l[n / 2];\n    }\
    \ \n    else \n    {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n\
    }", "{\n    long[] s = l.sort();\n    int n = s.length;\n    if (n % 2 == 0)\n\
    \        return (s[n/2] + s[n/2-1]) / 2.0;\n    else\n        return s[n/2];\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length %\
    \ 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    long n = sorted.length;\n \
    \   if (n % 2 == 1)\n        return sorted[n / 2];\n    else\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    int len = sorted.length;\n\
    \    if (len % 2 == 0)\n    {\n        return (sorted[len / 2] + sorted[len /\
    \ 2 - 1]) / 2.0;\n    }\n    else\n    {\n        return sorted[len / 2];\n  \
    \  }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1) \n    {\n        return sorted[sorted.length / 2];\n    } \n    else\
    \ \n    {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1) \n    {\n        return sorted[len / 2];\n    } \n    else\
    \ \n    {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n   \
    \ }\n}", "{\n    long[] sorted = l.sort();\n    long n = sorted.length;\n    if\
    \ (n % 2 == 1) \n    {\n        return sorted[n / 2];\n    }\n    else \n    {\n\
    \        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}", "{\n  \
    \  long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n\
    \        return sorted[sorted.length / 2];\n    else\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1) {\n        return sorted[len\
    \ / 2];\n    } else {\n        return (sorted[len / 2 - 1] + sorted[len / 2])\
    \ / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sort(sorted);\n    int\
    \ n = l.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n    else\n\
    \        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n    long[]\
    \ sorted = l.sort();\n    long n = sorted.length;\n    if (n % 2 == 1)\n     \
    \   return sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    return\
    \ sorted[sorted.length / 2];\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n\
    \        return sorted[sorted.length / 2];\n    else\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long\
    \ len = sorted.length;\n    if (len % 2 == 1) {\n        return sorted[len / 2];\n\
    \    } else {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    \    }\n}", "{\n    long[] sorted = l.sort();\n    long n = sorted.length;\n \
    \   if (n % 2 == 1)\n        return sorted[n / 2];\n    else\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n    long[] a = l.dup;\n    a.sort;\n\
    \    return a[a.length / 2];\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) {\n  \
    \      return sorted[len / 2];\n    } else {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n  \
    \  sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n      \
    \  return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1) {\n        return sorted[sorted.length / 2];\n    } else {\n     \
    \   return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n\
    \    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\
    \ \n    {\n        return sorted[sorted.length / 2];\n    } \n    else \n    {\n\
    \        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) /\
    \ 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    return sorted[sorted.length\
    \ / 2];\n}", "{\n    long[] sorted = sort(l);\n    long len = l.length;\n    if\
    \ (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n   \
    \ sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted = l.sort();\n    long len\
    \ = sorted.length;\n    if (len % 2 == 1) {\n        return sorted[len / 2];\n\
    \    } else {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    \    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.sort();\n    long len = sorted.length;\n    if (len % 2\
    \ == 1)\n        return sorted[len / 2];\n    else\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n   \
    \ sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n       \
    \ return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long\
    \ len = sorted.length;\n    if (len % 2 == 1)\n    {\n        return sorted[len\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[len / 2 - 1] + sorted[len\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup;\n    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n\
    \        return sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] +\
    \ sorted[n / 2]) / 2.0;\n}", "{\n    long[] sorted = l.sort();\n    long len =\
    \ sorted.length;\n    if (len % 2 == 1) \n    {\n        return sorted[len / 2];\n\
    \    } \n    else \n    {\n        return (sorted[len / 2 - 1] + sorted[len /\
    \ 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n  \
    \  if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length /\
    \ 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length %\
    \ 2 == 1)\n    {\n        return sorted[sorted.length / 2];\n    }\n    else\n\
    \    {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length /\
    \ 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.sort();\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup;\n    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n\
    \    {\n        return sorted[n / 2];\n    }\n    else\n    {\n        return\
    \ (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted\
    \ = l.sort();\n    long size = sorted.length;\n    if (size % 2 == 0)\n    {\n\
    \        return (sorted[size / 2] + sorted[size / 2 - 1]) / 2.0;\n    }\n    else\n\
    \    {\n        return sorted[size / 2];\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long length = sorted.length;\n    if (length % 2 == 0)\
    \ \n    {\n        return (sorted[length / 2 - 1] + sorted[length / 2]) / 2.0;\n\
    \    } \n    else \n    {\n        return sorted[length / 2];\n    }\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n\
    \        return sorted[sorted.length / 2];\n    else\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n    long[] sorted = sort(l);\n\
    \    int len = l.length;\n    if (len % 2 == 0)\n        return (sorted[len /\
    \ 2] + sorted[len / 2 - 1]) / 2.0;\n    else\n        return sorted[len / 2];\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n    {\n        return sorted[len / 2];\n    }\n    else\n\
    \    {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1) \n    {\n        return sorted[len / 2];\n    }\n    else\
    \ \n    {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n   \
    \ }\n}", "{\n    long[] sorted = l.sort();\n    long n = sorted.length;\n    if\
    \ (n % 2 == 1) \n    {\n        return sorted[n / 2];\n    }\n    else \n    {\n\
    \        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}", "{\n  \
    \  long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n \
    \   if (len % 2 == 1) {\n        return sorted[len / 2];\n    } else {\n     \
    \   return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}", "{\n   \
    \ long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n\
    \        return sorted[sorted.length / 2];\n    else\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    int n = sorted.length;\n  \
    \  if (n % 2 == 1) \n    {\n        return sorted[n / 2];\n    }\n    else \n\
    \    {\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\n\
    /*\nReturn the mode of elements in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n\
    \    [1, 2, 3, 4, 5]\n    >>> mode([-10, 4, 6, 1000, 10, 20])\n    [4, 6, 10,\
    \ 20, 1000]\n*/\nlong[] mode(long[] l) \n{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long[] modes = [];\n    long max_count = 0;\n    long curr_count = 0;\n \
    \   long curr_num = sorted[0];\n    foreach (long num; sorted) \n    {\n     \
    \   if (num == curr_num) \n        {\n            curr_count++;\n        }\n \
    \       else \n        {\n            if (curr_count > max_count) \n         \
    \   {\n                modes = [curr_num];\n                max_count = curr_count;\n\
    \            }\n            else if (curr_count == max_count) \n            {\n\
    \                modes ~= curr_num;\n            }\n            curr_num = num;\n\
    \            curr_count = 1;\n        }\n    }\n    if (curr_count > max_count)\
    \ \n    {\n        modes = [curr_num];\n        max_count = curr_count;\n    }\n\
    \    else if (curr_count == max_count) \n    {\n        modes ~= curr_num;\n \
    \   }\n    return modes;\n}\n/*\nReturn the range of elements in the list l.\n\
    \    >>> range([3, 1, 2, 4, 5])\n    4\n    >>> range([-10, 4, 6, 1000, 10, 20])\n\
    \    1010\n*/\nlong range(", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    if (sorted.length % 2 == 1)\n        return sorted[sorted.length / 2];\n\
    \    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.sort();\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return\
    \ sorted[sorted.length / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted\
    \ = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return\
    \ sorted[sorted.length / 2];\n    else\n        return (sorted[sorted.length /\
    \ 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup.sort;\n\
    \    int n = sorted.length;\n    if (n % 2 == 1) {\n        return sorted[n /\
    \ 2];\n    } else {\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n\
    \    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    int n = l.length;\n\
    \    if (n == 0) \n    {\n        return 0;\n    }\n    else if (n == 1) \n  \
    \  {\n        return l[0];\n    }\n    else if (n == 2) \n    {\n        return\
    \ (l[0] + l[1]) / 2.0;\n    }\n    else \n    {\n        sort(l);\n        if\
    \ (n % 2 == 0) \n        {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \        }\n        else \n        {\n            return l[n / 2];\n        }\n\
    \    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1) \n    {\n        return sorted[len / 2];\n    }\n    else\
    \ \n    {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n   \
    \ }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1)\n    {\n        return sorted[sorted.length / 2];\n    }\n    else\n\
    \    {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length /\
    \ 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n  \
    \  long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    return sorted[sorted.length/2];\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    int len = sorted.length;\n\
    \    if (len % 2 == 0)\n    {\n        return (sorted[len / 2] + sorted[len /\
    \ 2 - 1]) / 2.0;\n    }\n    else\n    {\n        return sorted[len / 2];\n  \
    \  }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\
    \ {\n        return sorted[sorted.length / 2];\n    } else {\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted\
    \ = l.dup.sort;\n    int len = sorted.length;\n    if (len % 2 == 1)\n       \
    \ return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long\
    \ n = sorted.length;\n    if (n % 2 == 1) \n    {\n        return sorted[n / 2];\n\
    \    } \n    else \n    {\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n    }\n}", "{\n    l.sort();\n    long n = l.length;\n    if (n % 2\
    \ == 1)\n        return l[n / 2];\n    else\n        return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    int\
    \ n = sorted.length;\n    if (n % 2 == 1) \n    {\n        return sorted[n / 2];\n\
    \    } \n    else \n    {\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long\
    \ n = sorted.length;\n    if (n % 2 == 1) \n    {\n        return sorted[n / 2];\n\
    \    } \n    else \n    {\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup;\n    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 ==\
    \ 1)\n        return sorted[len / 2];\n    else\n        return (sorted[len /\
    \ 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n    {\n        return sorted[len\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[len / 2 - 1] + sorted[len\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length /\
    \ 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1] +\
    \ sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len =\
    \ sorted.length;\n    if (len % 2 == 1)\n        return sorted[len / 2];\n   \
    \ else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    long n = sorted.length;\n \
    \   if (n % 2 == 1)\n        return sorted[n / 2];\n    else\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    return sorted[sorted.length / 2];\n}", "{\n    long[] sorted = l.dup;\n \
    \   sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    return\
    \ sorted[sorted.length / 2];\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup;\n    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n\
    \        return sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] +\
    \ sorted[n / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    if (sorted.length % 2 == 1)\n        return sorted[sorted.length / 2];\n\
    \    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long\
    \ len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len / 2];\n\
    \    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}",
  "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n\
    \        return sorted[sorted.length / 2];\n    else\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.sort();\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup;\n    sorted.sort;\n    int n = sorted.length;\n    if (n % 2 == 1) {\n\
    \        return sorted[n / 2];\n    }\n    else {\n        return (sorted[n /\
    \ 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    int\
    \ len = sorted.length;\n    if (len % 2 == 0)\n    {\n        return (sorted[len\
    \ / 2] + sorted[len / 2 - 1]) / 2.0;\n    }\n    else\n    {\n        return sorted[len\
    \ / 2];\n    }\n}", "{\n    long[] sorted = l.sort();\n    long len = sorted.length;\n\
    \    if (len % 2 == 1) {\n        return sorted[len / 2];\n    } else {\n    \
    \    return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}", "{\n  \
    \  long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n \
    \   if (len % 2 == 1) \n    {\n        return sorted[len / 2];\n    } \n    else\
    \ \n    {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n   \
    \ }\n}", "{\n    long[] sorted = l.sort();\n    int mid = sorted.length / 2;\n\
    \    if (sorted.length % 2 == 0) \n    {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2.0;\n    } \n    else \n    {\n        return sorted[mid];\n    }\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length %\
    \ 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup;\n    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 ==\
    \ 1) \n    {\n        return sorted[len / 2];\n    } \n    else \n    {\n    \
    \    return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}", "{\n  \
    \  long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n\
    \        return sorted[sorted.length / 2];\n    else\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1) \n    {\n        return\
    \ sorted[len / 2];\n    } \n    else \n    {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n  \
    \  sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n%2 == 1)\n        return\
    \ sorted[n/2];\n    else\n        return (sorted[n/2-1] + sorted[n/2])/2.0;\n}",
  "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\
    \ \n    {\n        return sorted[sorted.length / 2];\n    } \n    else \n    {\n\
    \        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) /\
    \ 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long\
    \ len = sorted.length;\n    if (len % 2 == 1) \n    {\n        return sorted[len\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[len / 2 - 1] + sorted[len\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.sort();\n    long n = sorted.length;\n\
    \    if (n % 2 == 1) \n    {\n        return sorted[n / 2];\n    } \n    else\
    \ \n    {\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}",
  "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1) \n    {\n        return sorted[len / 2];\n    } \n    else\
    \ \n    {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n   \
    \ }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1) \n    {\n        return sorted[len / 2];\n    } \n    else\
    \ \n    {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n   \
    \ }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1)\n        return sorted[len / 2];\n    else\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted =\
    \ l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1) {\n        return sorted[sorted.length / 2];\n    }\n    else {\n\
    \        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) /\
    \ 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1) \n    {\n        return sorted[sorted.length / 2];\n    } \n    else\
    \ \n    {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup.sort;\n    long n = sorted.length;\n\
    \    if (n % 2 == 1)\n        return sorted[n / 2];\n    else\n        return\
    \ (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1) \n    {\n        return\
    \ sorted[len / 2];\n    } \n    else \n    {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n  \
    \  sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long\
    \ n = sorted.length;\n    if (n % 2 == 1)\n    {\n        return sorted[n / 2];\n\
    \    }\n    else\n    {\n        return (sorted[n / 2 - 1] + sorted[n / 2]) /\
    \ 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long\
    \ len = sorted.length;\n    if (len % 2 == 1) \n    {\n        return sorted[len\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[len / 2 - 1] + sorted[len\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length %\
    \ 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n\
    \    long[] l2 = l.dup;\n    l2.sort;\n    long n = l2.length;\n    if (n % 2\
    \ == 1) \n    {\n        return l2[n / 2];\n    } \n    else \n    {\n       \
    \ return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted\
    \ = l.sort();\n    int length = sorted.length;\n    if (length % 2 == 0)\n   \
    \ {\n        return (sorted[length / 2] + sorted[length / 2 - 1]) / 2.0;\n   \
    \ }\n    else\n    {\n        return sorted[length / 2];\n    }\n}", "{\n    long[]\
    \ sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n    if (len\
    \ % 2 == 1)\n        return sorted[len / 2];\n    else\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted = l.sort();\n\
    \    long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1) \n    {\n        return sorted[len / 2];\n    }\n    else\
    \ \n    {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n   \
    \ }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n\
    \    if (len % 2 == 1) \n    {\n        return sorted[len / 2];\n    }\n    else\
    \ \n    {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n   \
    \ }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1) \n    {\n        return sorted[sorted.length / 2];\n    } \n    else\
    \ \n    {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long n = sorted.length;\n\
    \    if (n % 2 == 1)\n        return sorted[n / 2];\n    else\n        return\
    \ (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long\
    \ n = sorted.length;\n    if (n % 2 == 1) \n    {\n        return sorted[n / 2];\n\
    \    } \n    else \n    {\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long\
    \ len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len / 2];\n\
    \    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}",
  "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length % 2 == 1)\n\
    \        return sorted[sorted.length / 2];\n    else\n        return (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length %\
    \ 2 == 1) {\n        return sorted[sorted.length / 2];\n    } else {\n       \
    \ return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n\
    \    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1)\n        return sorted[sorted.length / 2];\n    else\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n\
    \    long[] sorted = l.dup.sort;\n    if (sorted.length % 2 == 1)\n        return\
    \ sorted[sorted.length / 2];\n    else\n        return (sorted[sorted.length /\
    \ 2 - 1] + sorted[sorted.length / 2]) / 2.0;\n}", "{\n    l.sort;\n    if (l.length\
    \ % 2 == 0)\n    {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2.0;\n\
    \    }\n    else\n    {\n        return l[l.length / 2];\n    }\n}", "{\n    long[]\
    \ sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n    if (len\
    \ % 2 == 1)\n        return sorted[len / 2];\n    else\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n   \
    \ sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1) {\n        return\
    \ sorted[n / 2];\n    } else {\n        return (sorted[n / 2 - 1] + sorted[n /\
    \ 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n  \
    \  long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }", "{\n    long[] sorted = l.sort();\n    int len = sorted.length;\n    if (len\
    \ % 2 == 0)\n    {\n        return (sorted[len / 2] + sorted[len / 2 - 1]) / 2.0;\n\
    \    }\n    else\n    {\n        return sorted[len / 2];\n    }\n}", "{\n    long[]\
    \ sorted = l.dup;\n    sorted.sort;\n    long len = sorted.length;\n    if (len\
    \ % 2 == 1)\n        return sorted[len / 2];\n    else\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n   \
    \ sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) {\n     \
    \   return sorted[len / 2];\n    } else {\n        return (sorted[len / 2 - 1]\
    \ + sorted[len / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    return sorted[sorted.length/2];\n}", "{\n    long[] sorted = l.dup;\n   \
    \ sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n   \
    \     return sorted[n / 2];\n    } \n    else \n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length\
    \ % 2 == 1) \n    {\n        return sorted[sorted.length / 2];\n    } \n    else\
    \ \n    {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n        return sorted[n\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[n / 2 - 1] + sorted[n\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    if (sorted.length % 2 == 1) {\n        return sorted[sorted.length / 2];\n\
    \    } else {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }", "{\n    long[] sorted = l.dup;\n    sorted.sort;\n    if (sorted.length %\
    \ 2 == 1) \n    {\n        return sorted[sorted.length / 2];\n    } \n    else\
    \ \n    {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.sort();\n    int n = l.length;\n\
    \    if (n % 2 == 1)\n        return sorted[n / 2];\n    else\n        return\
    \ (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}", "{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long length = sorted.length;\n    if (length % 2 == 0)\
    \ \n    {\n        return (sorted[length / 2 - 1] + sorted[length / 2]) / 2.0;\n\
    \    }\n    else \n    {\n        return sorted[length / 2];\n    }\n}", "{\n\
    \    long[] sorted = l.sort();\n    long len = sorted.length;\n    if (len % 2\
    \ == 1)\n        return sorted[len / 2];\n    else\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2.0;\n}", "{\n    long[] l2 = l.dup;\n    l2.sort;\n\
    \    if (l2.length % 2 == 0)\n    {\n        return (l2[l2.length / 2] + l2[l2.length\
    \ / 2 - 1]) / 2.0;\n    }\n    else\n    {\n        return l2[l2.length / 2];\n\
    \    }\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
