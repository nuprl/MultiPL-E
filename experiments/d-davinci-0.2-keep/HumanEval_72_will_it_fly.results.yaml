name: HumanEval_72_will_it_fly
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] rev = q.dup;\n        rev.reverse;\n        return q ==\
    \ rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph9w6sj61.d(36): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph9w6sj61.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_27_2vl.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_27_2vl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  if(sum > w)\n        return false;\n    long[] q_rev = q[];\n    q_rev.reverse();\n\
    \    if(q == q_rev)\n        return true;\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxs3tbol7.d(30): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxs3tbol7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        foreach(var i; q)\n        {\n            if(i != q[$-1-i])\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4mrpdcl2.d(25): Error: undefined identifier `var`\\n/tmp/tmp4mrpdcl2.d(35):\
    \ Error: undefined identifier `var`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4mrpdcl2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum <= w)\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        if(q == q2)\n        {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6bspa3b8.d(25): Error: undefined identifier `var`\\n/tmp/tmp6bspa3b8.d(32):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bspa3b8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return q.equal(q.dup.reverse);\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7kv2hgdl.d(25): Error: undefined identifier `var`\\n/tmp/tmp7kv2hgdl.d(35):\
    \ Error: no property `equal` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7kv2hgdl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbyh419sk.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyh419sk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo9ov_5h7.d(25): Error: undefined identifier `var`\\n/tmp/tmpo9ov_5h7.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9ov_5h7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var e; q)\n        sum += e;\n\
    \    return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuwitcnm7.d(25): Error: undefined identifier `var`\\n/tmp/tmpuwitcnm7.d(27):\
    \ Error: no property `equal` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpuwitcnm7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy6m2nqdm.d(25): Error: undefined identifier `var`\\n/tmp/tmpy6m2nqdm.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpy6m2nqdm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1dp_bihf.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1dp_bihf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q[0..$/2] == q[$/2..$] : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiyxfnq5g.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283cd]\\n??:? void tmpiyxfnq5g.__unittest_L29_C1()\
    \ [0x427f3c]\\n??:? void tmpiyxfnq5g.__modtest() [0x42814c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c42b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430451]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430900]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b295]\\n??:? runModuleUnitTests [0x42c201]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428890]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428817]\\n??:? _d_run_main [0x428782]\\n??:? main [0x42815f]\\\
    n??:? __libc_start_main [0x40f5f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3tu3hfqq.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tu3hfqq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(item; q)\n    {\n        sum\
    \ += item;\n    }\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6qamhgin.d(29): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6qamhgin.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q_reversed = q[];\n        q_reversed.reverse();\n    \
    \    if(q == q_reversed)\n        {\n            return true;\n        }\n   \
    \     else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6k26pa4v.d(36): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6k26pa4v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    return sum <= w && q.length > 1 ? q == q.dup.reverse : true;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa873lwsf.d(29): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpa873lwsf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(item; q)\n    {\n        sum\
    \ += item;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppjt830n2.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42819d]\\n??:? void tmppjt830n2.__unittest_L38_C1()\
    \ [0x427df0]\\n??:? void tmppjt830n2.__modtest() [0x427f20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c187]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b01a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430139]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aff1]\\n??:? runModuleUnitTests [0x42bf5d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428573]\\n??:? _d_run_main [0x4284de]\\n??:? main [0x427f33]\\\
    n??:? __libc_start_main [0xd5afe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(long i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum <= w)\n    {\n        return true;\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_ji0_6xo.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42819d]\\n??:? void tmp_ji0_6xo.__unittest_L35_C1()\
    \ [0x427df0]\\n??:? void tmp_ji0_6xo.__modtest() [0x427f20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c187]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b01a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430139]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aff1]\\n??:? runModuleUnitTests [0x42bf5d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428573]\\n??:? _d_run_main [0x4284de]\\n??:? main [0x427f33]\\\
    n??:? __libc_start_main [0x13bad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? isPalindrome(q) : true;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprjltpry2.d(27): Error: undefined identifier `isPalindrome`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjltpry2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q[0..$/2] == q[$/2..$] : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7mh1i18a.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283cd]\\n??:? void tmp7mh1i18a.__unittest_L29_C1()\
    \ [0x427f3c]\\n??:? void tmp7mh1i18a.__modtest() [0x42814c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c42b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430451]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430900]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b295]\\n??:? runModuleUnitTests [0x42c201]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428890]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428817]\\n??:? _d_run_main [0x428782]\\n??:? main [0x42815f]\\\
    n??:? __libc_start_main [0x16fc0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7epd0bqv.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp7epd0bqv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum <= w)\n    {\n        foreach(var i; q)\n        {\n\
    \            if(i != q[q.length - 1])\n            {\n                return false;\n\
    \            }\n            q.popBack();\n        }\n        return true;\n  \
    \  }\n    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n\
    \    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmputyinl5v.d(25): Error: undefined identifier `var`\\n/tmp/tmputyinl5v.d(31):\
    \ Error: undefined identifier `var`\\n/tmp/tmputyinl5v.d(37): Error: no property\
    \ `popBack` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmputyinl5v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n        if(q ==\
    \ q_rev)\n        {\n            return true;\n        }\n        else\n     \
    \   {\n            return false;\n        }\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_2xyeru3.d(36): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2xyeru3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpebafj5di.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42819d]\\n??:? void tmpebafj5di.__unittest_L38_C1()\
    \ [0x427df0]\\n??:? void tmpebafj5di.__modtest() [0x427f20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c187]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b01a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430139]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aff1]\\n??:? runModuleUnitTests [0x42bf5d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428573]\\n??:? _d_run_main [0x4284de]\\n??:? main [0x427f33]\\\
    n??:? __libc_start_main [0x4919c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q == q.dup.reverse : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpggs6h6g9.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpggs6h6g9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    return sum <= w && q.length % 2 == 0 && q.equal(q.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqqczavl1.d(25): Error: undefined identifier `var`\\n/tmp/tmpqqczavl1.d(29):\
    \ Error: no property `equal` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqqczavl1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        auto r = q.dup;\n        r.reverse;\n        if(r == q)\n    \
    \    {\n            return true;\n        }\n        else\n        {\n       \
    \     return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ij504_9.d(25): Error: undefined identifier `var`\\n/tmp/tmp5ij504_9.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ij504_9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxa009zwy.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxa009zwy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q[0..$/2] == q[$/2..$] : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk33vfkk7.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283cd]\\n??:? void tmpk33vfkk7.__unittest_L29_C1()\
    \ [0x427f3c]\\n??:? void tmpk33vfkk7.__modtest() [0x42814c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c42b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430451]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430900]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b295]\\n??:? runModuleUnitTests [0x42c201]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428890]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428817]\\n??:? _d_run_main [0x428782]\\n??:? main [0x42815f]\\\
    n??:? __libc_start_main [0x9b230554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    long max = 0;\n    foreach(i; q)\n  \
    \  {\n        sum += i;\n        if(i > max)\n            max = i;\n    }\n  \
    \  if(sum > w)\n        return false;\n    if(q.length == 1)\n        return true;\n\
    \    if(q.length % 2 == 0)\n        return false;\n    long half = q.length /\
    \ 2;\n    for(int i = 0; i < half; i++)\n    {\n        if(q[i] != q[q.length\
    \ - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_pazp5o3.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_pazp5o3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl1jp73qj.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl1jp73qj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum <= w)\n    {\n        long[] reverse = q.dup;\n   \
    \     reverse.reverse;\n        if(reverse == q)\n        {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl4bn09u6.d(25): Error: undefined identifier `var`\\n/tmp/tmpl4bn09u6.d(32):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpl4bn09u6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6wimm5sh.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wimm5sh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ggibllv.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ggibllv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkt272dfy.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkt272dfy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoiboovrj.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoiboovrj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpam9c9ep7.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpam9c9ep7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        int n = q.length;\n        for(int i = 0; i < n/2; i++)\n    \
    \    {\n            if(q[i] != q[n-i-1])\n            {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvz36q6fz.d(25): Error: undefined identifier `var`\\n/tmp/tmpvz36q6fz.d(35):\
    \ Error: cannot implicitly convert expression `q.length` of type `ulong` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvz36q6fz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var item; q)\n    {\n       \
    \ sum += item;\n    }\n    return (sum <= w) && (q.length == 1 || q.length % 2\
    \ == 0 || q[0] == q[$-1]);\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4i8hdz9e.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4i8hdz9e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q[0..$/2] == q[$/2..$] : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmped0zuua3.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283cd]\\n??:? void tmped0zuua3.__unittest_L29_C1()\
    \ [0x427f3c]\\n??:? void tmped0zuua3.__modtest() [0x42814c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c42b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430451]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430900]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b295]\\n??:? runModuleUnitTests [0x42c201]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428890]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428817]\\n??:? _d_run_main [0x428782]\\n??:? main [0x42815f]\\\
    n??:? __libc_start_main [0x1cea0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        if(q2 == q)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbf4g1ag4.d(25): Error: undefined identifier `var`\\n/tmp/tmpbf4g1ag4.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpbf4g1ag4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzwlgnnfl.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwlgnnfl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 && q == q.dup.reverse;\n}\nunittest\n{\n  \
    \  alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) ==\
    \ true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp72fao1bn.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp72fao1bn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(num; q)\n    {\n        sum +=\
    \ num;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q_reversed = q.dup;\n        q_reversed.reverse;\n    \
    \    return q == q_reversed;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfl3bvfh7.d(36): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfl3bvfh7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpemog8f_w.d(25): Error: undefined identifier `var`\\n/tmp/tmpemog8f_w.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpemog8f_w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp168qtimu.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp168qtimu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptvmieyil.d(29): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmptvmieyil.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjtgn5uqn.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjtgn5uqn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length == q.reversed.length;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyw_ttbi1.d(27): Error: no property `reversed` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyw_ttbi1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7346zc8m.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7346zc8m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7d78e812.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42819d]\\n??:? void tmp7d78e812.__unittest_L38_C1()\
    \ [0x427df0]\\n??:? void tmp7d78e812.__modtest() [0x427f20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c187]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b01a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430139]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aff1]\\n??:? runModuleUnitTests [0x42bf5d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428573]\\n??:? _d_run_main [0x4284de]\\n??:? main [0x427f33]\\\
    n??:? __libc_start_main [0xfd2d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(x; q)\n    {\n        sum +=\
    \ x;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q_rev = q[];\n        q_rev.reverse;\n        if(q == q_rev)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe974xptb.d(36): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpe974xptb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return q.equal(q.dup.reverse);\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw7p6eodc.d(25): Error: undefined identifier `var`\\n/tmp/tmpw7p6eodc.d(35):\
    \ Error: no property `equal` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpw7p6eodc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_yzwjnvc.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_yzwjnvc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length % 2 == 0 && q[0 .. q.length / 2] == q[q.length\
    \ / 2 .. $].reverse;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n \
    \   assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpanz9pywr.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpanz9pywr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr42u65ue.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpr42u65ue.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length == q.reverse.length;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr2bc8be5.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpr2bc8be5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwymt9xya.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwymt9xya.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphp_pgpgr.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphp_pgpgr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum <= w)\n    {\n        return true;\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2bfjosga.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2bfjosga.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long total = 0;\n    foreach(long i; q)\n    {\n       \
    \ total += i;\n    }\n    if(total > w)\n    {\n        return false;\n    }\n\
    \    else\n    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuqbg8a4m.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42819d]\\n??:? void tmpuqbg8a4m.__unittest_L38_C1()\
    \ [0x427df0]\\n??:? void tmpuqbg8a4m.__modtest() [0x427f20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c187]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b01a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430139]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aff1]\\n??:? runModuleUnitTests [0x42bf5d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428573]\\n??:? _d_run_main [0x4284de]\\n??:? main [0x427f33]\\\
    n??:? __libc_start_main [0xe2d18554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(long i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq4xc8c0s.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42819d]\\n??:? void tmpq4xc8c0s.__unittest_L38_C1()\
    \ [0x427df0]\\n??:? void tmpq4xc8c0s.__modtest() [0x427f20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c187]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b01a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430139]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aff1]\\n??:? runModuleUnitTests [0x42bf5d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428573]\\n??:? _d_run_main [0x4284de]\\n??:? main [0x427f33]\\\
    n??:? __libc_start_main [0xb60f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length <= 1 || q.length > 1 && q[0] == q[$-1] && will_it_fly(q[1..$-1],\
    \ w);\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var item; q)\n    {\n       \
    \ sum += item;\n    }\n    if(sum <= w)\n    {\n        long[] q2 = q.dup;\n \
    \       q2.reverse;\n        if(q == q2)\n        {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2on_taqe.d(25): Error: undefined identifier `var`\\n/tmp/tmp2on_taqe.d(32):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2on_taqe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp46_zlom7.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46_zlom7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk16mfycn.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk16mfycn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  if(sum > w)\n        return false;\n    else\n    {\n        long[] q2 = q.dup;\n\
    \        q2.reverse;\n        return q == q2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3fnfn72j.d(32): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fnfn72j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var e; q)\n        sum += e;\n\
    \    return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp13q8m_aw.d(25): Error: undefined identifier `var`\\n/tmp/tmp13q8m_aw.d(27):\
    \ Error: no property `equal` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp13q8m_aw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  if(sum > w)\n        return false;\n    else\n    {\n        long[] q2 = q[];\n\
    \        q2.reverse();\n        return q == q2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5nh4rc7i.d(32): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp5nh4rc7i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx8g1z58m.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx8g1z58m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        auto isPalindrome = q.front == q.back;\n        return isPalindrome;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp25jdhbb4.d(35): Error: no property `front` for type `long[]`\\\
    n/tmp/tmp25jdhbb4.d(35): Error: no property `back` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25jdhbb4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    long[]\
    \ q2 = q.dup;\n    q2.reverse;\n    if(q == q2)\n    {\n        return true;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpomu1t0nr.d(25): Error: undefined identifier `var`\\n/tmp/tmpomu1t0nr.d(34):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpomu1t0nr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return (sum <= w) && (q == q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp41qgif80.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp41qgif80.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdvni_pqr.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvni_pqr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp00uitxj4.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp00uitxj4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    return sum <= w && q.length % 2 == 0 && q.equal(q.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprspz0947.d(25): Error: undefined identifier `var`\\n/tmp/tmprspz0947.d(29):\
    \ Error: no property `equal` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprspz0947.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  if(sum <= w)\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n    \
    \    return q == q2;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprs_37933.d(30): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmprs_37933.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 && q.equal(q.reverse);\n}\nunittest\n{\n  \
    \  alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) ==\
    \ true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg1cztyv1.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1cztyv1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 && q.equal(q.dup.reverse);\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo3l8qllm.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo3l8qllm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwvc61xky.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvc61xky.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum <= w)\n    {\n        long[] q2 = q[0..$/2];\n       \
    \ long[] q3 = q[$/2..$];\n        q3 = q3.reverse;\n        if(q2 == q3)\n   \
    \     {\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwhldpnsb.d(33): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhldpnsb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return (sum <= w) && (q == q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp48usigv.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpp48usigv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q_copy = q;\n        q_copy.reverse();\n        if(q ==\
    \ q_copy)\n        {\n            return true;\n        }\n        else\n    \
    \    {\n            return false;\n        }\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ddc5glb.d(36): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ddc5glb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjeqezcl5.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpjeqezcl5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr4w0oou_.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4w0oou_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprs9l462v.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmprs9l462v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv71xb0yo.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv71xb0yo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcnqhmyzb.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcnqhmyzb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl7nkjre_.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42819d]\\n??:? void tmpl7nkjre_.__unittest_L38_C1()\
    \ [0x427df0]\\n??:? void tmpl7nkjre_.__modtest() [0x427f20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c187]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b01a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430139]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aff1]\\n??:? runModuleUnitTests [0x42bf5d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428573]\\n??:? _d_run_main [0x4284de]\\n??:? main [0x427f33]\\\
    n??:? __libc_start_main [0x910f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5329oa8h.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp5329oa8h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpio4nkw7c.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpio4nkw7c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi08okfqg.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi08okfqg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    long[]\
    \ q2 = q.dup;\n    q2.reverse;\n    if(q == q2)\n    {\n        return true;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmt4eu7em.d(25): Error: undefined identifier `var`\\n/tmp/tmpmt4eu7em.d(34):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmt4eu7em.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnatigxcx.d(25): Error: undefined identifier `var`\\n/tmp/tmpnatigxcx.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpnatigxcx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q_copy = q;\n        q_copy.reverse();\n        if(q ==\
    \ q_copy)\n        {\n            return true;\n        }\n        else\n    \
    \    {\n            return false;\n        }\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8yt839d7.d(25): Error: undefined identifier `var`\\n/tmp/tmp8yt839d7.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8yt839d7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe8s7innd.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8s7innd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q[0..$/2] == q[$/2..$] : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9tdmai3p.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283cd]\\n??:? void tmp9tdmai3p.__unittest_L29_C1()\
    \ [0x427f3c]\\n??:? void tmp9tdmai3p.__modtest() [0x42814c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c42b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430451]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430900]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b295]\\n??:? runModuleUnitTests [0x42c201]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428890]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428817]\\n??:? _d_run_main [0x428782]\\n??:? main [0x42815f]\\\
    n??:? __libc_start_main [0x9f86a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfujvl6r5.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfujvl6r5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsm7pq4sq.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpsm7pq4sq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum <= w)\n    {\n        long[] q_reversed = q[];\n     \
    \   q_reversed.reverse();\n        if(q == q_reversed)\n        {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplmyqjing.d(32): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplmyqjing.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpslrso84h.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpslrso84h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    long[]\
    \ q_rev = q.dup;\n    q_rev.reverse;\n    return q == q_rev;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbjdfdgjy.d(25): Error: undefined identifier `var`\\n/tmp/tmpbjdfdgjy.d(34):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjdfdgjy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmwc3rf45.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmwc3rf45.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplw9_cp12.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplw9_cp12.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph9yc62zk.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph9yc62zk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length == q.reverse.length;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpod6z9l5k.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpod6z9l5k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpenzq7z93.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpenzq7z93.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(long i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n        return\
    \ q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n \
    \   assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvqe463cl.d(36): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpvqe463cl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_aq0j67r.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_aq0j67r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return (sum <= w) && (q == q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ve1p4o7.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ve1p4o7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var item; q)\n    {\n       \
    \ sum += item;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n\
    \    else\n    {\n        long[] q_reversed = q.dup.reverse;\n        return q\
    \ == q_reversed;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n\
    \    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp636x5v2w.d(25): Error: undefined identifier `var`\\n/tmp/tmp636x5v2w.d(35):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp636x5v2w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcdtt0e__.d(25): Error: undefined identifier `var`\\n/tmp/tmpcdtt0e__.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcdtt0e__.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum <= w)\n    {\n        if(q.length % 2 == 0)\n        {\n\
    \            long[] firstHalf = q[0..(q.length/2)];\n            long[] secondHalf\
    \ = q[(q.length/2)..$];\n            secondHalf = secondHalf.reverse;\n      \
    \      if(firstHalf == secondHalf)\n            {\n                return true;\n\
    \            }\n            else\n            {\n                return false;\n\
    \            }\n        }\n        else\n        {\n            long[] firstHalf\
    \ = q[0..(q.length/2)];\n            long[] secondHalf = q[(q.length/2+1)..$];\n\
    \            secondHalf = secondHalf.reverse;\n            if(firstHalf == secondHalf)\n\
    \            {\n                return true;\n            }\n            else\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpytndy6nt.d(35): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpytndy6nt.d(49):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpytndy6nt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe8rbol7s.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8rbol7s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var item; q)\n    {\n       \
    \ sum += item;\n    }\n    return (sum <= w) && (q.length == 1 || q.length ==\
    \ 2 || q.length % 2 == 0 && q[0..q.length/2] == q[q.length/2..$].reverse);\n}\n\
    unittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L,\
    \ 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2e_6igfn.d(25): Error: undefined identifier `var`\\n/tmp/tmp2e_6igfn.d(29):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2e_6igfn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length == q.reversed.length;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp37e3ogpw.d(27): Error: no property `reversed` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37e3ogpw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        auto reversed = q.dup.reverse;\n        return q == reversed;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp038ercna.d(25): Error: undefined identifier `var`\\n/tmp/tmp038ercna.d(35):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp038ercna.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2bcpib3_.d(25): Error: undefined identifier `var`\\n/tmp/tmp2bcpib3_.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2bcpib3_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(item; q)\n    {\n        sum\
    \ += item;\n    }\n    return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2yiro2hm.d(29): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2yiro2hm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2umqwc8u.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2umqwc8u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpch1cdqio.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpch1cdqio.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzjtinubi.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjtinubi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp07pgibm_.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp07pgibm_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var item; q)\n    {\n       \
    \ sum += item;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n\
    \    else\n    {\n        long[] temp = q.dup;\n        temp.reverse;\n      \
    \  if(temp == q)\n        {\n            return true;\n        }\n        else\n\
    \        {\n            return false;\n        }\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpru6wnwld.d(25): Error: undefined identifier `var`\\n/tmp/tmpru6wnwld.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpru6wnwld.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum <= w)\n    {\n        return true;\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp7i7_8cb.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42819d]\\n??:? void tmpp7i7_8cb.__unittest_L35_C1()\
    \ [0x427df0]\\n??:? void tmpp7i7_8cb.__modtest() [0x427f20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c187]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b01a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430139]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aff1]\\n??:? runModuleUnitTests [0x42bf5d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428573]\\n??:? _d_run_main [0x4284de]\\n??:? main [0x427f33]\\\
    n??:? __libc_start_main [0x99b21554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphdnc46bl.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphdnc46bl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdtt2z0zi.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtt2z0zi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp58dkj2ed.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58dkj2ed.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3micsl8a.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3micsl8a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q[0..$/2] == q[$/2..$] : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4ujr36c4.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283cd]\\n??:? void tmp4ujr36c4.__unittest_L29_C1()\
    \ [0x427f3c]\\n??:? void tmp4ujr36c4.__modtest() [0x42814c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c42b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430451]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430900]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b295]\\n??:? runModuleUnitTests [0x42c201]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428890]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428817]\\n??:? _d_run_main [0x428782]\\n??:? main [0x42815f]\\\
    n??:? __libc_start_main [0xc93c7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw__mdazh.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42819d]\\n??:? void tmpw__mdazh.__unittest_L38_C1()\
    \ [0x427df0]\\n??:? void tmpw__mdazh.__modtest() [0x427f20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c187]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b01a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43065c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430139]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aff1]\\n??:? runModuleUnitTests [0x42bf5d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428573]\\n??:? _d_run_main [0x4284de]\\n??:? main [0x427f33]\\\
    n??:? __libc_start_main [0xe3e73554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp37xu_y8z.d(25): Error: undefined identifier `var`\\n/tmp/tmp37xu_y8z.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp37xu_y8z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    long max = 0;\n    foreach(i; q)\n  \
    \  {\n        sum += i;\n        if(i > max)\n            max = i;\n    }\n  \
    \  if(sum <= w && isPalindrome(q))\n        return true;\n    return false;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzxzs0hc1.d(32): Error: undefined identifier `isPalindrome`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxzs0hc1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    return (sum <= w) && (q.length == 1 || q[0] == q[$-1]);\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7vbeobx7.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vbeobx7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp74cejzzg.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74cejzzg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q_reversed = q.dup.reverse;\n        return q == q_reversed;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp82m32n2.d(25): Error: undefined identifier `var`\\n/tmp/tmpp82m32n2.d(35):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpp82m32n2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    auto sum = 0;\n    foreach(i; q)\n        sum += i;\n  \
    \  return sum <= w && q.length > 1 ? q == q.dup.reverse : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzj4cokrz.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzj4cokrz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpawak8377.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpawak8377.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj0cjuboa.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0cjuboa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph8c2yord.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph8c2yord.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return (sum <= w) && (q == q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1y6uv8rx.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1y6uv8rx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdc00srsg.d(25): Error: undefined identifier `var`\\n/tmp/tmpdc00srsg.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpdc00srsg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q == q.dup.reverse : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe06pvrxx.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpe06pvrxx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaldyflcr.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpaldyflcr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprya0p1_n.d(36): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmprya0p1_n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpymp62y1q.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpymp62y1q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgxz25hxp.d(25): Error: undefined identifier `var`\\n/tmp/tmpgxz25hxp.d(29):\
    \ Error: no property `equal` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgxz25hxp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  if(sum > w)\n        return false;\n    else\n    {\n        long[] r = q.dup;\n\
    \        r.reverse;\n        return q == r;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsyb9q6i5.d(32): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyb9q6i5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa0y9h803.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0y9h803.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    return (sum <= w) && (q.length % 2 == 0) ? true : false;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl6wu0jif.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6wu0jif.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpowudca2f.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpowudca2f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2celgigg.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2celgigg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp50k7ywja.d(25): Error: undefined identifier `var`\\n/tmp/tmp50k7ywja.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp50k7ywja.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] r = q.dup.reverse;\n        foreach(var i; 0..q.length)\n\
    \        {\n            if(q[i] != r[i])\n            {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk2l9lpca.d(25): Error: undefined identifier `var`\\n/tmp/tmpk2l9lpca.d(35):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpk2l9lpca.d(36):\
    \ Error: undefined identifier `var`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpk2l9lpca.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt45m146h.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt45m146h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum <= w)\n    {\n        return true;\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpspaelrr0.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpspaelrr0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var item; q)\n    {\n       \
    \ sum += item;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n\
    \    auto reversed = q.dup;\n    reversed.reverse;\n    return reversed == q;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_57ambec.d(25): Error: undefined identifier `var`\\n/tmp/tmp_57ambec.d(34):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_57ambec.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(i; q)\n    {\n        sum +=\
    \ i;\n    }\n    if(sum <= w)\n    {\n        long[] q_rev = q[];\n        reverse(q_rev);\n\
    \        if(q == q_rev)\n        {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpttv_fv09.d(32): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpttv_fv09.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q[0..$/2] == q[$/2..$] : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnjuoavg4.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283cd]\\n??:? void tmpnjuoavg4.__unittest_L29_C1()\
    \ [0x427f3c]\\n??:? void tmpnjuoavg4.__modtest() [0x42814c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c42b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430451]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430900]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b295]\\n??:? runModuleUnitTests [0x42c201]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428890]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428817]\\n??:? _d_run_main [0x428782]\\n??:? main [0x42815f]\\\
    n??:? __libc_start_main [0xa3060554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var item; q)\n    {\n       \
    \ sum += item;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n\
    \    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n    \
    \    if(q == q_rev)\n        {\n            return true;\n        }\n        else\n\
    \        {\n            return false;\n        }\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8w7b0wkd.d(25): Error: undefined identifier `var`\\n/tmp/tmp8w7b0wkd.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8w7b0wkd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4lmv6nse.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lmv6nse.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx5z27mhz.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx5z27mhz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum <= w)\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        if(q == q2)\n        {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwcyzvsvo.d(25): Error: undefined identifier `var`\\n/tmp/tmpwcyzvsvo.d(32):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcyzvsvo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(element; q)\n    {\n        sum\
    \ += element;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n \
    \   else\n    {\n        long[] q_reverse = q.dup;\n        q_reverse.reverse;\n\
    \        if(q == q_reverse)\n        {\n            return true;\n        }\n\
    \        else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9cu5tm03.d(36): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9cu5tm03.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8cttehby.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8cttehby.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q_reversed = q.dup.reverse;\n        if(q == q_reversed)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpul651ws6.d(25): Error: undefined identifier `var`\\n/tmp/tmpul651ws6.d(35):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpul651ws6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps4_vvoq_.d(25): Error: undefined identifier `var`\\n/tmp/tmps4_vvoq_.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmps4_vvoq_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q[0..$/2] == q[$/2..$] : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmp6w3ta1.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283cd]\\n??:? void tmpmp6w3ta1.__unittest_L29_C1()\
    \ [0x427f3c]\\n??:? void tmpmp6w3ta1.__modtest() [0x42814c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c42b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430451]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430900]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b295]\\n??:? runModuleUnitTests [0x42c201]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428890]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428817]\\n??:? _d_run_main [0x428782]\\n??:? main [0x42815f]\\\
    n??:? __libc_start_main [0xd41a2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    return (sum <= w) && (sum == q.front + q.back);\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0y_r8kmx.d(25): Error: undefined identifier `var`\\n/tmp/tmp0y_r8kmx.d(29):\
    \ Error: no property `front` for type `long[]`\\n/tmp/tmp0y_r8kmx.d(29): Error:\
    \ no property `back` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp0y_r8kmx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q[0..$/2] == q[$/2..$] : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnzk77fxz.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283cd]\\n??:? void tmpnzk77fxz.__unittest_L29_C1()\
    \ [0x427f3c]\\n??:? void tmpnzk77fxz.__modtest() [0x42814c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c42b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430451]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430900]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b295]\\n??:? runModuleUnitTests [0x42c201]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428890]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428817]\\n??:? _d_run_main [0x428782]\\n??:? main [0x42815f]\\\
    n??:? __libc_start_main [0xbd4af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return (sum <= w) && (q.length == 1 || q[0] == q[$-1]);\n}\nunittest\n{\n \
    \   alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) ==\
    \ true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(long i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] reverse = q[];\n        reverse = reverse.dup;\n      \
    \  reverse.reverse;\n        if(reverse == q)\n        {\n            return true;\n\
    \        }\n        else\n        {\n            return false;\n        }\n  \
    \  }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hn9pf60.d(37): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hn9pf60.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 && q.equal(q.dup.reverse);\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaol4uqk2.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaol4uqk2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_u4ssq2.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph_u4ssq2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqdhl6ngc.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqdhl6ngc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    return sum <= w && q.length % 2 == 0 && q[0 .. q.length /\
    \ 2] == q[q.length / 2 .. $].reverse;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcxhllxjh.d(25): Error: undefined identifier `var`\\n/tmp/tmpcxhllxjh.d(29):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcxhllxjh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcg9aixye.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcg9aixye.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj1bj1ylv.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1bj1ylv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    if (q.length == 0) return false;\n    if (q.length == 1)\
    \ return true;\n    if (q.length == 2) return false;\n    if (q.length == 3) return\
    \ true;\n    if (q.length == 4) return false;\n    if (q.length == 5) return true;\n\
    \    if (q.length == 6) return false;\n    if (q.length == 7) return true;\n \
    \   if (q.length == 8) return false;\n    if (q.length == 9) return true;\n  \
    \  if (q.length == 10) return false;\n    if (q.length == 11) return true;\n \
    \   if (q.length == 12) return false;\n    if (q.length == 13) return true;\n\
    \    if (q.length == 14) return false;\n    if (q.length == 15) return true;\n\
    \    if (q.length == 16) return false;\n    if (q.length == 17) return true;\n\
    \    if (q.length == 18) return false;\n    if (q.length == 19) return true;\n\
    \    if (q.length == 20) return false;\n    if (q.length == 21) return true;\n\
    \    if (q.length == 22) return false;\n    if (q.length == 23) return true;\n\
    \    if (q.length == 24) return false;\n    if (q.length == 25) return true;\n\
    \    if (q.length == 26) return false;\n    if (q.length == 27) return true;\n\
    \    if (q.length == 28) return false;\n    if (q.length == 29) return true;\n\
    \    if (q.length == 30) return false;\n    if (q.length == 31) return true;\n\
    \    if (q.length == 32) return false;\n    if (q.length == 33) return true;\n\
    \    if (q.length == 34) return false;\n    if (q.length == 35) return true;\n\
    \    if (q.length == 36) return false;\n    if (q.length == 37) return true;\n\
    \    if (q.length == 38) return false;\n    if\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf3304sjy.d(64): Error: found `unittest` when expecting `(`\\\
    n/tmp/tmpf3304sjy.d(75): Error: found `void` when expecting `)`\\n/tmp/tmpf3304sjy.d(75):\
    \ Error: found `{` when expecting `;` following statement\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3304sjy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp962xnq3d.d(25): Error: undefined identifier `var`\\n/tmp/tmp962xnq3d.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp962xnq3d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8t136q2k.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8t136q2k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  if(sum > w)\n        return false;\n    else\n    {\n        long[] q_rev =\
    \ q.dup;\n        q_rev.reverse;\n        if(q == q_rev)\n            return true;\n\
    \        else\n            return false;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw0nfx913.d(32): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0nfx913.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum <= w)\n    {\n        if(q.length == 1)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            long[]\
    \ q2 = q[0..$/2];\n            long[] q3 = q[$/2..$];\n            reverse(q3);\n\
    \            if(q2 == q3)\n            {\n                return true;\n     \
    \       }\n            else\n            {\n                return false;\n  \
    \          }\n        }\n    }\n    else\n    {\n        return false;\n    }\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdddjlgrl.d(25): Error: undefined identifier `var`\\n/tmp/tmpdddjlgrl.d(39):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpdddjlgrl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkelb3r97.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkelb3r97.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        long[] q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvixntw5g.d(25): Error: undefined identifier `var`\\n/tmp/tmpvixntw5g.d(36):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpvixntw5g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6zrccg_t.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zrccg_t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return (sum <= w) && (q.length % 2 == 0) && (q[0..q.length/2] == q[q.length/2..$].reverse);\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd7ssr6_1.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7ssr6_1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return isPalindrome(q);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9trg9i3h.d(25): Error: undefined identifier `var`\\n/tmp/tmp9trg9i3h.d(35):\
    \ Error: undefined identifier `isPalindrome`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9trg9i3h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  if(sum > w)\n        return false;\n    else\n    {\n        long[] q2 = q.dup;\n\
    \        q2.reverse;\n        return q == q2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5zcsxaw6.d(32): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp5zcsxaw6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        auto q_reversed = q.dup.reverse;\n        return q == q_reversed;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu0q27l_x.d(25): Error: undefined identifier `var`\\n/tmp/tmpu0q27l_x.d(35):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0q27l_x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5tvx0l22.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5tvx0l22.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp_3uytr5.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_3uytr5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q[0..$/2] == q[$/2..$] : true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwvupz10h.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283cd]\\n??:? void tmpwvupz10h.__unittest_L29_C1()\
    \ [0x427f3c]\\n??:? void tmpwvupz10h.__modtest() [0x42814c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c42b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430451]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430900]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b295]\\n??:? runModuleUnitTests [0x42c201]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428890]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428817]\\n??:? _d_run_main [0x428782]\\n??:? main [0x42815f]\\\
    n??:? __libc_start_main [0xc5ba2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    long max = 0;\n    foreach(i; q)\n  \
    \  {\n        sum += i;\n        if(i > max)\n            max = i;\n    }\n  \
    \  if(sum > w)\n        return false;\n    if(q.length == 1)\n        return true;\n\
    \    if(q.length % 2 == 0)\n        return false;\n    long[] firstHalf = q[0..q.length/2];\n\
    \    long[] secondHalf = q[q.length/2+1..$];\n    secondHalf.reverse;\n    if(firstHalf\
    \ != secondHalf)\n        return false;\n    return true;\n}\nunittest\n{\n  \
    \  alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) ==\
    \ true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplvjh685n.d(40): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplvjh685n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpom_5whzj.d(27): Error: no property `equal` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpom_5whzj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum <= w)\n    {\n        long[] q_rev = q.dup;\n     \
    \   q_rev.reverse;\n        if(q == q_rev)\n        {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptxojfqm5.d(25): Error: undefined identifier `var`\\n/tmp/tmptxojfqm5.d(32):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmptxojfqm5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 && q == q.dup.reverse;\n}\nunittest\n{\n  \
    \  alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) ==\
    \ true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp22xgf755.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp22xgf755.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(var i; q)\n    {\n        sum\
    \ += i;\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp695n5rqx.d(25): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp695n5rqx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1,\
    \ 2], 5) \u279E False \n    # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279E False\n    # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2,\
    \ 3], 9) \u279E True\n    # 3+2+3 is less than the maximum possible weight, and\
    \ it's balanced.\n\n    will_it_fly([3], 5) \u279E True\n    # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n    \n*/\nbool will_it_fly(long[]\
    \ q, long w) \n{\n    long sum = 0;\n    foreach(e; q)\n        sum += e;\n  \
    \  return sum <= w && q.length > 1 ? q[0 .. q.length / 2] == q[q.length - 1 ..\
    \ q.length / 2 - 1].reverse : true;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyqiiglh9.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpyqiiglh9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
