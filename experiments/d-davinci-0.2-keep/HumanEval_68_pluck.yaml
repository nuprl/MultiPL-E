name: HumanEval_68_pluck
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
  \ a branch of a tree that has non-negative integer nodes\n    your task is to pluck\
  \ one of the nodes and return it.\n    The plucked node should be the node with\
  \ the smallest even value.\n    If multiple nodes with the same smallest even value\
  \ are found return the node that has smallest index.\n\n    The plucked node should\
  \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
  \ values or the given array is empty, return [].\n\n    Example 1:\n        Input:\
  \ [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n\
  \        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and\
  \ 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output:\
  \ []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0,\
  \ 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \                     so we will choose the first zero, which has the smallest index.\n\
  \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
  \    \n*/\nlong[] pluck(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
  \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
  \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
  \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
  \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
completions: ["{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    if (arr.length == 0)\n       \
    \ return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    \n    long min = long.max;\n    long minIndex = long.max;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    \n   \
    \ if (min == long.max)\n        return [];\n    \n    return [min, minIndex];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    long[] result = [0, 0];\n    long min = 0;\n    long\
    \ minIndex = 0;\n    bool found = false;\n    foreach(i, e; arr)\n    {\n    \
    \    if(e % 2 == 0)\n        {\n            if(!found)\n            {\n      \
    \          found = true;\n                min = e;\n                minIndex =\
    \ i;\n            }\n            else\n            {\n                if(e < min)\n\
    \                {\n                    min = e;\n                    minIndex\
    \ = i;\n                }\n            }\n        }\n    }\n    if(found)\n  \
    \  {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if\
    \ (v < min && v % 2 == 0)\n        {\n            min = v;\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = int.max;\n    long minEvenIndex = int.max;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < minEven)\n        {\n            minEven\
    \ = e;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == int.max)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n        return [];\n    return [min, index];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = long.max;\n    long index = 0;\n \
    \   foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min ==\
    \ long.max)\n        return [];\n    return [min, index];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = 10001;\n    long index = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (min == 10001)\n\
    \        return [];\n    return [min, index];\n}", "{\n    if (arr.length == 0)\
    \ \n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, v; arr) \n    {\n        if (v % 2 == 0 && v < min) \n        {\n      \
    \      min = v;\n            index = i;\n        }\n    }\n    if (min % 2 ==\
    \ 0) \n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    long[] result = [0,\
    \ 0];\n    long min = int.max;\n    long index = 0;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n \
    \           index = i;\n        }\n    }\n    if(min != int.max)\n    {\n    \
    \    result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0) return [];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n   \
    \ {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n   \
    \         index = i;\n        }\n    }\n    if (index == -1) return [];\n    return\
    \ [min, index];\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long[] result = new long[2];\n    long min = long.max;\n    long index\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n \
    \       {\n            min = v;\n            index = i;\n        }\n    }\n  \
    \  if (min == long.max)\n        return new long[0];\n    result[0] = min;\n \
    \   result[1] = index;\n    return result;\n}", "{\n    long[] result = [0, 0];\n\
    \    long smallestEven = 0;\n    long smallestEvenIndex = 0;\n    long smallestEvenFound\
    \ = false;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0)\n        {\n\
    \            if(!smallestEvenFound)\n            {\n                smallestEven\
    \ = e;\n                smallestEvenIndex = i;\n                smallestEvenFound\
    \ = true;\n            }\n            else\n            {\n                if(e\
    \ < smallestEven)\n                {\n                    smallestEven = e;\n\
    \                    smallestEvenIndex = i;\n                }\n            }\n\
    \        }\n    }\n    if(smallestEvenFound)\n    {\n        result[0] = smallestEven;\n\
    \        result[1] = smallestEvenIndex;\n    }\n    return result;\n}", "{\n \
    \   long[] result = [0, 0];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    long minEven = 0;\n    long minEvenIndex = 0;\n    bool found = false;\n\
    \    foreach(i, e; arr)\n    {\n        if(e < min)\n        {\n            min\
    \ = e;\n            minIndex = i;\n        }\n        if(e % 2 == 0)\n       \
    \ {\n            if(!found)\n            {\n                minEven = e;\n   \
    \             minEvenIndex = i;\n                found = true;\n            }\n\
    \            else\n            {\n                if(e < minEven)\n          \
    \      {\n                    minEven = e;\n                    minEvenIndex =\
    \ i;\n                }\n            }\n        }\n    }\n    if(found)\n    {\n\
    \        result[0] = minEven;\n        result[1] = minEvenIndex;\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    long[] result = [0, 0];\n    long min = 0;\n    long index\
    \ = 0;\n    long i = 0;\n    foreach(long val; arr)\n    {\n        if(val % 2\
    \ == 0)\n        {\n            if(min == 0)\n            {\n                min\
    \ = val;\n                index = i;\n            }\n            else if(val <\
    \ min)\n            {\n                min = val;\n                index = i;\n\
    \            }\n        }\n        i++;\n    }\n    if(min != 0)\n    {\n    \
    \    result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    if (arr.length == 0) return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0) return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = int.max;\n    long index = -1;\n \
    \   foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n        return [];\n    return [min, index];\n}", "{\n    long[] result\
    \ = [0, 0];\n    long[] evens = arr.filter!(a => a % 2 == 0);\n    if (evens.length\
    \ == 0)\n        return result;\n    result[0] = evens.min;\n    result[1] = arr.indexOf(result[0]);\n\
    \    return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n  \
    \  long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n \
    \       if (e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n   \
    \ {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n   \
    \         index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n\
    \    return [min, index];\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    \n    long minEven = long.max;\n    long minEvenIndex = -1;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ minEven)\n        {\n            minEven = arr[i];\n            minEvenIndex\
    \ = i;\n        }\n    }\n    \n    if (minEvenIndex == -1)\n        return [];\n\
    \    else\n        return [minEven, minEvenIndex];\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    \n    long min = long.max;\n    long\
    \ minIndex = long.max;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0\
    \ && e < min)\n        {\n            min = e;\n            minIndex = i;\n  \
    \      }\n    }\n    \n    if (min == long.max)\n        return new long[0];\n\
    \    \n    return [min, minIndex];\n}", "{\n    if (arr.length == 0)\n       \
    \ return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 ==\
    \ 0)\n        return [min, minIndex];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ long minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0)\n\
    \        {\n            if (e < min)\n            {\n                min = e;\n\
    \                minIndex = i;\n            }\n        }\n    }\n    if (min ==\
    \ arr[0])\n        return [min, minIndex];\n    else\n        return [];\n}",
  "{\n    if (arr.length == 0)\n        return [].dup;\n    \n    long minEven = long.max;\n\
    \    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n            minEven\
    \ = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    \n    if (minEven\
    \ == long.max)\n        return [].dup;\n    \n    return [minEven, minEvenIndex].dup;\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    if (arr.length == 0)\n       \
    \ return [];\n    \n    long min = arr[0];\n    long minIndex = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 ==\
    \ 0)\n        return [min, minIndex];\n    else\n        return [];\n}", "{\n\
    \    long[] result = [0, 0];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n   \
    \ {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min == arr[0])\n        return\
    \ result;\n    result[0] = min;\n    result[1] = minIndex;\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(index == -1)\n        return [];\n \
    \   result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n   \
    \ if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ minEven = long.max;\n    long minEvenIndex = long.max;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < minEven)\n        {\n            minEven\
    \ = v;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    long min = long.max;\n    long index = -1;\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if(index == -1)\n      \
    \  return [];\n    return [min, index];\n}", "{\n    if (arr.length == 0)\n  \
    \      return [];\n    long minEven = long.max;\n    long minEvenIndex = -1;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n    \
    \    {\n            minEven = v;\n            minEvenIndex = i;\n        }\n \
    \   }\n    if (minEvenIndex == -1)\n        return [];\n    return [minEven, minEvenIndex];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long minEven = arr[0];\n\
    \    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < minEven)\n\
    \            {\n                minEven = arr[i];\n                minEvenIndex\
    \ = i;\n            }\n        }\n    }\n    if (minEven % 2 == 0)\n        return\
    \ [minEven, minEvenIndex];\n    return [];\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (index == -1)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  long[] result = new long[2];\n    long min = long.max;\n    long minIndex =\
    \ long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  minIndex = i;\n        }\n    }\n    if (min == long.max)\n    {\n        return\
    \ result;\n    }\n    result[0] = min;\n    result[1] = minIndex;\n    return\
    \ result;\n}", "{\n    long[] result = [0, 0];\n    long min = 0;\n    long minIndex\
    \ = 0;\n    long index = 0;\n    bool isFirst = true;\n    foreach(long i; arr)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            if(isFirst)\n         \
    \   {\n                min = i;\n                minIndex = index;\n         \
    \       isFirst = false;\n            }\n            else\n            {\n   \
    \             if(i < min)\n                {\n                    min = i;\n \
    \                   minIndex = index;\n                }\n            }\n    \
    \    }\n        index++;\n    }\n    if(!isFirst)\n    {\n        result[0] =\
    \ min;\n        result[1] = minIndex;\n    }\n    return result;\n}", "{\n   \
    \ if (arr.length == 0)\n        return [];\n    \n    long min = arr[0];\n   \
    \ long minIndex = 0;\n    long minEven = 0;\n    long minEvenIndex = 0;\n    bool\
    \ hasEven = false;\n    \n    foreach (i, v; arr)\n    {\n        if (v < min)\n\
    \        {\n            min = v;\n            minIndex = i;\n        }\n     \
    \   \n        if (v % 2 == 0)\n        {\n            if (!hasEven)\n        \
    \    {\n                minEven = v;\n                minEvenIndex = i;\n    \
    \            hasEven = true;\n            }\n            else if (v < minEven)\n\
    \            {\n                minEven = v;\n                minEvenIndex = i;\n\
    \            }\n        }\n    }\n    \n    if (hasEven)\n        return [minEven,\
    \ minEvenIndex];\n    else\n        return [];\n}", "{\n    if (arr.length ==\
    \ 0)\n        return [];\n    else\n    {\n        long min = arr[0];\n      \
    \  long minIndex = 0;\n        foreach(i, v; arr)\n        {\n            if (v\
    \ % 2 == 0 && v < min)\n            {\n                min = v;\n            \
    \    minIndex = i;\n            }\n        }\n        if (min % 2 == 0)\n    \
    \        return [min, minIndex];\n        else\n            return [];\n    }\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    if (arr.length == 0) return [];\n    long minEven = long.max;\n    long\
    \ minEvenIndex = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < minEven)\n        {\n            minEven = e;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if (minEvenIndex == -1) return [];\n    return [minEven,\
    \ minEvenIndex];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    \n\
    \    long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         index = i;\n        }\n    }\n    \n    if (index == -1)\n        return\
    \ [];\n    \n    return [min, index];\n}", "{\n    if (arr.length == 0)\n    \
    \    return [];\n    auto min = arr[0];\n    auto index = 0;\n    auto found =\
    \ false;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n\
    \            if (!found)\n            {\n                min = v;\n          \
    \      index = i;\n                found = true;\n            }\n            else\n\
    \            {\n                if (v < min)\n                {\n            \
    \        min = v;\n                    index = i;\n                }\n       \
    \     }\n        }\n    }\n    if (found)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    long[] result = [long.max, long.max];\n    long[] evens = arr.filter!(a\
    \ => a % 2 == 0);\n    if (evens.length == 0)\n        return [];\n    long min\
    \ = evens.min;\n    foreach (i, e; arr)\n    {\n        if (e == min)\n      \
    \  {\n            result[0] = e;\n            result[1] = i;\n            break;\n\
    \        }\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n    \
    \    return [];\n    \n    long min = long.max;\n    long minIndex = -1;\n   \
    \ foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    \n   \
    \ if (minIndex == -1)\n        return [];\n    \n    return [min, minIndex];\n\
    }", "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n  \
    \      {\n            min = e;\n            index = i;\n        }\n    }\n   \
    \ if(index != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = [0, 0];\n    long min\
    \ = 0;\n    long index = 0;\n    long i = 0;\n    foreach(long value; arr)\n \
    \   {\n        if(value % 2 == 0)\n        {\n            if(min == 0)\n     \
    \       {\n                min = value;\n                index = i;\n        \
    \    }\n            else if(value < min)\n            {\n                min =\
    \ value;\n                index = i;\n            }\n        }\n        i++;\n\
    \    }\n    if(min != 0)\n    {\n        result[0] = min;\n        result[1] =\
    \ index;\n    }\n    return result;\n}", "{\n    long[] result = [0,0];\n    if(arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach(i,v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    if(min\
    \ == arr[0])\n        return result;\n    result[0] = min;\n    result[1] = minIndex;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return [];\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [long.max, long.max];\n    foreach(i, v; arr)\n    {\n        if(v % 2 ==\
    \ 0 && v < result[0])\n        {\n            result[0] = v;\n            result[1]\
    \ = i;\n        }\n    }\n    if(result[0] == long.max)\n        return [];\n\
    \    return result;\n}", "{\n    long[] result = [0, 0];\n    if (arr.length ==\
    \ 0)\n        return result;\n    \n    long smallestEven = arr[0];\n    long\
    \ smallestIndex = 0;\n    bool found = false;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0)\n        {\n            if (!found)\n            {\n\
    \                smallestEven = v;\n                smallestIndex = i;\n     \
    \           found = true;\n            }\n            else\n            {\n  \
    \              if (v < smallestEven)\n                {\n                    smallestEven\
    \ = v;\n                    smallestIndex = i;\n                }\n          \
    \  }\n        }\n    }\n    if (found)\n    {\n        result[0] = smallestEven;\n\
    \        result[1] = smallestIndex;\n    }\n    return result;\n}", "{\n    if\
    \ (arr.length == 0)\n        return [];\n    long minEven = arr[0];\n    long\
    \ minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n      \
    \  if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < minEven)\n      \
    \      {\n                minEven = arr[i];\n                minEvenIndex = i;\n\
    \            }\n        }\n    }\n    if (minEven % 2 == 0)\n        return [minEven,\
    \ minEvenIndex];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            minIndex = i;\n        }\n  \
    \  }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n\
    \    long index = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2\
    \ == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if (min == long.max)\n        return [];\n    return [min,\
    \ index];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long[] evens\
    \ = arr.filter!(a => a % 2 == 0).array;\n    if (evens.length == 0)\n        return\
    \ [];\n    long min = evens[0];\n    long index = 0;\n    foreach (i, e; evens)\n\
    \    {\n        if (e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    return [min, index];\n}", "{\n    long[] ret = new\
    \ long[2];\n    long min = long.max;\n    long minIndex = long.max;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            minIndex = i;\n        }\n    }\n    if(min == long.max)\n\
    \        return ret;\n    ret[0] = min;\n    ret[1] = minIndex;\n    return ret;\n\
    }", "{\n    long[] res = new long[2];\n    long min = long.max;\n    long index\
    \ = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n   \
    \     {\n            min = e;\n            index = i;\n        }\n    }\n    if(min\
    \ == long.max) return res;\n    res[0] = min;\n    res[1] = index;\n    return\
    \ res;\n}", "{\n    long[] result = new long[2];\n    long minEven = long.max;\n\
    \    long minEvenIndex = -1;\n    foreach(i, value; arr)\n    {\n        if(value\
    \ % 2 == 0 && value < minEven)\n        {\n            minEven = value;\n    \
    \        minEvenIndex = i;\n        }\n    }\n    if(minEvenIndex != -1)\n   \
    \ {\n        result[0] = minEven;\n        result[1] = minEvenIndex;\n    }\n\
    \    return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n  \
    \  long min = long.max;\n    long minIndex = -1;\n    foreach (i, v; arr)\n  \
    \  {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n  \
    \          minIndex = i;\n        }\n    }\n    if (minIndex == -1)\n        return\
    \ [];\n    return [min, minIndex];\n}", "{\n    if (arr.length == 0)\n       \
    \ return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n     \
    \   return [];\n    return [min, index];\n}", "{\n    if (arr.length == 0)\n \
    \       return [];\n    long minEven = long.max;\n    long minEvenIndex = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n    \
    \    {\n            minEven = v;\n            minEvenIndex = i;\n        }\n \
    \   }\n    if (minEven == long.max)\n        return [];\n    return [minEven,\
    \ minEvenIndex];\n}", "{\n    if (arr.length == 0)\n        return [].dup;\n \
    \   \n    long minEven = long.max;\n    long minEvenIndex = -1;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n        {\n        \
    \    minEven = v;\n            minEvenIndex = i;\n        }\n    }\n    \n   \
    \ if (minEvenIndex == -1)\n        return [].dup;\n    \n    return [minEven,\
    \ minEvenIndex].dup;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    \n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long smallest = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < smallest)\n        {\n            smallest = arr[i];\n         \
    \   index = i;\n        }\n    }\n    if (smallest % 2 == 0)\n        return [smallest,\
    \ index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    long[] result = [0, 0];\n    long\
    \ min = 0;\n    long index = 0;\n    long i = 0;\n    foreach(e; arr)\n    {\n\
    \        if(e % 2 == 0)\n        {\n            if(result[0] == 0)\n         \
    \   {\n                result[0] = e;\n                result[1] = i;\n      \
    \      }\n            else if(e < result[0])\n            {\n                result[0]\
    \ = e;\n                result[1] = i;\n            }\n        }\n        i++;\n\
    \    }\n    if(result[0] == 0)\n    {\n        result = [];\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, minIndex];\n    return [];\n}", "{\n    if (arr.length ==\
    \ 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\
    \ \n        return [];\n    long min = long.max;\n    long index = -1;\n    foreach\
    \ (i, v; arr) \n    {\n        if (v % 2 == 0 && v < min) \n        {\n      \
    \      min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\
    \ \n        return [];\n    return [min, index];\n}", "{\n    if (arr.length ==\
    \ 0) return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0) return\
    \ [min, index];\n    return [];\n}", "{\n    long[] result = [0, 0];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n      \
    \  if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0] =\
    \ min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [0, 0];\n    if (arr.length == 0)\n        return result;\n    \n \
    \   long smallestEven = int.max;\n    long smallestEvenIndex = int.max;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < smallestEven)\n        {\n\
    \            smallestEven = v;\n            smallestEvenIndex = i;\n        }\n\
    \    }\n    if (smallestEven == int.max)\n        return result;\n    return [smallestEven,\
    \ smallestEvenIndex];\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long minEven = arr[0];\n    long minEvenIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < minEven)\n            {\n     \
    \           minEven = arr[i];\n                minEvenIndex = i;\n           \
    \ }\n        }\n    }\n    if (minEven % 2 == 0)\n        return [minEven, minEvenIndex];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, val; arr)\n    {\n  \
    \      if (val % 2 == 0 && val < min)\n        {\n            min = val;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    if (arr.length == 0)\n       \
    \ return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return new long[0];\n    \n    long min = long.max;\n    long minIndex\
    \ = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    \n    if (minIndex == -1)\n        return new long[0];\n    \n    return\
    \ [min, minIndex];\n}", "{\n    long[] result = [0,0];\n    long min = 0;\n  \
    \  long index = 0;\n    bool found = false;\n    foreach(long i; arr)\n    {\n\
    \        if(i%2 == 0)\n        {\n            if(!found)\n            {\n    \
    \            min = i;\n                index = arr.indexOf(i);\n             \
    \   found = true;\n            }\n            else\n            {\n          \
    \      if(i < min)\n                {\n                    min = i;\n        \
    \            index = arr.indexOf(i);\n                }\n            }\n     \
    \   }\n    }\n    if(found)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  int index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n      \
    \  result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n\
    \    if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long\
    \ index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n  \
    \  return [min, index];\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] % 2 == 0 && arr[i] < min) \n        {\n   \
    \         min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = long.max;\n    long index = 0;\n \
    \   foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min ==\
    \ long.max)\n        return [];\n    return [min, index];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0) \n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++) \n    {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) \n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0) \n        return [min, minIndex];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return new long[0];\n    long min = arr[0];\n    long index = 0;\n  \
    \  foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return new long[0];\n}", "{\n   \
    \ if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    if (arr.length == 0)\n       \
    \ return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    long[] result = [];\n    long min = long.max;\n \
    \   long minIndex = long.max;\n    for (long i = 0; i < arr.length; i++)\n   \
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min != long.max)\n\
    \    {\n        result ~= min;\n        result ~= minIndex;\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long minEven\
    \ = long.max;\n    long minEvenIndex = -1;\n    foreach (i, e; arr)\n    {\n \
    \       if (e % 2 == 0 && e < minEven)\n        {\n            minEven = e;\n\
    \            minEvenIndex = i;\n        }\n    }\n    if (minEvenIndex == -1)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    long[] result = [0, 0];\n    long min = 0;\n    long index\
    \ = 0;\n    long i = 0;\n    foreach(e; arr)\n    {\n        if(e % 2 == 0)\n\
    \        {\n            if(min == 0)\n            {\n                min = e;\n\
    \                index = i;\n            }\n            else if(e < min)\n   \
    \         {\n                min = e;\n                index = i;\n          \
    \  }\n        }\n        i++;\n    }\n    if(min != 0)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    if\
    \ (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n \
    \       {\n            min = v;\n            index = i;\n        }\n    }\n  \
    \  if (min % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n \
    \   long[] result = [0, 0];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min == arr[0])\n        return\
    \ result;\n    result[0] = min;\n    result[1] = minIndex;\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n  \
    \      {\n            min = v;\n            index = i;\n        }\n    }\n   \
    \ if(index != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = [0, 0];\n    long min\
    \ = 0;\n    long index = 0;\n    long i = 0;\n    foreach(long val; arr)\n   \
    \ {\n        if(val % 2 == 0)\n        {\n            if(min == 0)\n         \
    \   {\n                min = val;\n                index = i;\n            }\n\
    \            else if(val < min)\n            {\n                min = val;\n \
    \               index = i;\n            }\n        }\n        i++;\n    }\n  \
    \  if(min != 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0) return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, value; arr)\n    {\n\
    \        if (value % 2 == 0 && value < min)\n        {\n            min = value;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n \
    \       return [min, minIndex];\n    }\n    return [];\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    long index = -1;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n    \
    \    return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return [];\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n\
    \                min = arr[i];\n                index = i;\n            }\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = index;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return [];\n}", "{\n    long[] result = [0, 0];\n    long min = 0;\n    bool\
    \ isFirst = true;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0)\n        {\n            if (isFirst)\n            {\n    \
    \            min = arr[i];\n                result[0] = min;\n               \
    \ result[1] = i;\n                isFirst = false;\n            }\n          \
    \  else\n            {\n                if (arr[i] < min)\n                {\n\
    \                    min = arr[i];\n                    result[0] = min;\n   \
    \                 result[1] = i;\n                }\n            }\n        }\n\
    \    }\n    if (isFirst)\n    {\n        return [];\n    }\n    return result;\n\
    }", "{\n    long[] result = [0, 0];\n    long min = long.max;\n    long index\
    \ = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n   \
    \     {\n            min = e;\n            index = i;\n        }\n    }\n    if(min\
    \ != long.max)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    auto min = arr[0];\n    auto minIndex = 0;\n    foreach (i, e; arr)\n   \
    \ {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    if (arr.length == 0)\n       \
    \ return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if(min == long.max)\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    long[] res = new long[2];\n    long\
    \ min = long.max;\n    long minIndex = long.max;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ == long.max)\n        return res;\n    res[0] = min;\n    res[1] = minIndex;\n\
    \    return res;\n}", "{\n    if (arr.length == 0)\n        return [];\n    \n\
    \    long min = arr[0];\n    long minIndex = 0;\n    bool hasEven = false;\n \
    \   foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n         \
    \   hasEven = true;\n            if (v < min)\n            {\n               \
    \ min = v;\n                minIndex = i;\n            }\n        }\n    }\n \
    \   if (hasEven)\n        return [min, minIndex];\n    else\n        return [];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    \n    long min = long.max;\n\
    \    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            index = i;\n     \
    \   }\n    }\n    \n    if (index == -1)\n        return [];\n    \n    return\
    \ [min, index];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    long[] result = [];\n    long min = long.max;\n \
    \   long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e\
    \ < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min != long.max)\n    {\n        result ~= min;\n        result\
    \ ~= index;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n   \
    \     return [];\n    \n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    else\n        return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    long[] result = [0, 0];\n    bool\
    \ hasEven = false;\n    foreach(i, val; arr)\n    {\n        if(val % 2 == 0)\n\
    \        {\n            hasEven = true;\n            if(result[0] == 0 || val\
    \ < result[0])\n            {\n                result[0] = val;\n            \
    \    result[1] = i;\n            }\n        }\n    }\n    if(!hasEven)\n     \
    \   return [];\n    return result;\n}", "{\n    if (arr.length == 0)\n       \
    \ return [];\n    long[] evens = arr.filter!(a => a % 2 == 0).array;\n    if (evens.length\
    \ == 0)\n        return [];\n    long min = evens[0];\n    long index = 0;\n \
    \   for (long i = 1; i < evens.length; i++)\n    {\n        if (evens[i] < min)\n\
    \        {\n            min = evens[i];\n            index = i;\n        }\n \
    \   }\n    return [min, index];\n}", "{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    int\
    \ index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    if\
    \ (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index\
    \ = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n \
    \       {\n            min = e;\n            index = i;\n        }\n    }\n  \
    \  if (min % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n \
    \   if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, val; arr)\n    {\n  \
    \      if (val % 2 == 0 && val < min)\n        {\n            min = val;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    if (arr.length == 0) return [];\n\
    \    long[] evens = arr.filter!(a => a % 2 == 0).sort;\n    if (evens.length ==\
    \ 0) return [];\n    long smallest = evens[0];\n    long index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            minIndex = i;\n        }\n  \
    \  }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n\
    }", "{\n    long[] result = [0, 0];\n    long min = 0;\n    bool found = false;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n\
    \        {\n            if (!found)\n            {\n                min = arr[i];\n\
    \                result[0] = min;\n                result[1] = i;\n          \
    \      found = true;\n            }\n            else\n            {\n       \
    \         if (arr[i] < min)\n                {\n                    min = arr[i];\n\
    \                    result[0] = min;\n                    result[1] = i;\n  \
    \              }\n            }\n        }\n    }\n    if (!found)\n    {\n  \
    \      return [];\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[2];\n    long min = long.max;\n    long minIndex = long.max;\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            minIndex = i;\n        }\n    }\n    if(min != long.max)\n\
    \    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    if (arr.length == 0) return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0) return [min, index];\n    return [];\n}", "{\n \
    \   long[] result = [0, 0];\n    long min = 0;\n    long index = 0;\n    bool\
    \ found = false;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0)\n    \
    \    {\n            if(!found)\n            {\n                min = e;\n    \
    \            index = i;\n                found = true;\n            }\n      \
    \      else\n            {\n                if(e < min)\n                {\n \
    \                   min = e;\n                    index = i;\n               \
    \ }\n            }\n        }\n    }\n    if(found)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    if\
    \ (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n \
    \       {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n}", "{\n\
    \    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long minEven = arr[0];\n    long minEvenIndex\
    \ = 0;\n    bool found = false;\n    for (long i = 0; i < arr.length; i++)\n \
    \   {\n        if (arr[i] % 2 == 0)\n        {\n            if (!found)\n    \
    \        {\n                minEven = arr[i];\n                minEvenIndex =\
    \ i;\n                found = true;\n            }\n            else\n       \
    \     {\n                if (arr[i] < minEven)\n                {\n          \
    \          minEven = arr[i];\n                    minEvenIndex = i;\n        \
    \        }\n            }\n        }\n    }\n    if (found)\n    {\n        result[0]\
    \ = minEven;\n        result[1] = minEvenIndex;\n    }\n    return result;\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    long[] result = new long[2];\n    long min = -1;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0)\n\
    \        {\n            if(min == -1)\n            {\n                min = v;\n\
    \                index = i;\n            }\n            else if(v < min)\n   \
    \         {\n                min = v;\n                index = i;\n          \
    \  }\n        }\n    }\n    if(min == -1)\n    {\n        return result;\n   \
    \ }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n\
    \    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n\
    \    if (arr.length == 0)\n        return [];\n    \n    long min = long.max;\n\
    \    long minIndex = long.max;\n    foreach (i, v; arr)\n    {\n        if (v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex\
    \ = i;\n        }\n    }\n    \n    if (min == long.max)\n        return [];\n\
    \    \n    return [min, minIndex];\n}", "{\n    long[] result = [0, 0];\n    long\
    \ min = 0;\n    long index = 0;\n    bool found = false;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0)\n        {\n            if(!found)\n          \
    \  {\n                min = v;\n                index = i;\n                found\
    \ = true;\n            }\n            else\n            {\n                if(v\
    \ < min)\n                {\n                    min = v;\n                  \
    \  index = i;\n                }\n            }\n        }\n    }\n    if(found)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    long[] res = new long[2];\n\
    \    if (arr.length == 0)\n        return res;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        res[0] = min;\n        res[1] =\
    \ minIndex;\n    }\n    return res;\n}", "{\n    long[] result = [0, 0];\n   \
    \ long smallestEven = 0;\n    long smallestIndex = 0;\n    long index = 0;\n \
    \   bool isEven = false;\n    foreach(long element; arr)\n    {\n        if(element\
    \ % 2 == 0)\n        {\n            if(!isEven)\n            {\n             \
    \   smallestEven = element;\n                smallestIndex = index;\n        \
    \        isEven = true;\n            }\n            else\n            {\n    \
    \            if(element < smallestEven)\n                {\n                 \
    \   smallestEven = element;\n                    smallestIndex = index;\n    \
    \            }\n            }\n        }\n        index++;\n    }\n    if(isEven)\n\
    \    {\n        result[0] = smallestEven;\n        result[1] = smallestIndex;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n   \
    \ {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    if (arr.length == 0)\n       \
    \ return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n   \
    \ long minIndex = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            minIndex = i;\n  \
    \      }\n    }\n    if (minIndex == -1)\n        return [];\n    return [min,\
    \ minIndex];\n}", "{\n    if (arr.length == 0) return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0) return [min,\
    \ index];\n    return [];\n}", "{\n    long[] result = [0L, 0L];\n    long min\
    \ = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            result[0] = v;\n            result[1]\
    \ = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    if (arr.length == 0) return new long[0];\n    long[] result\
    \ = new long[2];\n    long min = int.max;\n    foreach (i, v; arr)\n    {\n  \
    \      if (v % 2 == 0 && v < min)\n        {\n            min = v;\n         \
    \   result[0] = v;\n            result[1] = i;\n        }\n    }\n    if (min\
    \ == int.max) return new long[0];\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = int.max;\n    long index = -1;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if(index == -1)\n      \
    \  return [];\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    long[] result = [0, 0];\n    long\
    \ min = 0;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e %\
    \ 2 == 0)\n        {\n            if(min == 0)\n            {\n              \
    \  min = e;\n                index = i;\n            }\n            else if(e\
    \ < min)\n            {\n                min = e;\n                index = i;\n\
    \            }\n        }\n    }\n    if(min != 0)\n    {\n        result[0] =\
    \ min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    if\
    \ (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index\
    \ = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n \
    \       {\n            min = e;\n            index = i;\n        }\n    }\n  \
    \  if (min % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n \
    \   if (arr.length == 0)\n        return [];\n    \n    long min = arr[0];\n \
    \   long minIndex = 0;\n    bool found = false;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0)\n        {\n            if (!found)\n           \
    \ {\n                min = v;\n                minIndex = i;\n               \
    \ found = true;\n            }\n            else\n            {\n            \
    \    if (v < min)\n                {\n                    min = v;\n         \
    \           minIndex = i;\n                }\n            }\n        }\n    }\n\
    \    if (found)\n        return [min, minIndex];\n    else\n        return [];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long min_index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 ==\
    \ 0 && e < min)\n        {\n            min = e;\n            min_index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, min_index];\n \
    \   return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long minIndex = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (minIndex\
    \ == -1)\n        return [];\n    return [min, minIndex];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0) return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    if (arr.length == 0)\n       \
    \ return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    \n    long min = arr[0];\n\
    \    long minIndex = 0;\n    long minEven = arr[0];\n    long minEvenIndex = 0;\n\
    \    bool foundEven = false;\n    \n    foreach (i, v; arr)\n    {\n        if\
    \ (v < min)\n        {\n            min = v;\n            minIndex = i;\n    \
    \    }\n        \n        if (v % 2 == 0)\n        {\n            if (!foundEven)\n\
    \            {\n                minEven = v;\n                minEvenIndex = i;\n\
    \                foundEven = true;\n            }\n            else if (v < minEven)\n\
    \            {\n                minEven = v;\n                minEvenIndex = i;\n\
    \            }\n        }\n    }\n    \n    if (foundEven)\n        return [minEven,\
    \ minEvenIndex];\n    else\n        return [min, minIndex];\n}", "{\n    long[]\
    \ result = new long[2];\n    if (arr.length == 0)\n        return result;\n  \
    \  long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = [long.max, long.max];\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n        {\n       \
    \     result[0] = v;\n            result[1] = i;\n        }\n    }\n    if(result[0]\
    \ == long.max)\n        return [];\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n    \n \
    \   long min = arr[0];\n    long minIndex = 0;\n    long minEven = long.max;\n\
    \    long minEvenIndex = 0;\n    \n    foreach (i, v; arr)\n    {\n        if\
    \ (v < min)\n        {\n            min = v;\n            minIndex = i;\n    \
    \    }\n        \n        if (v % 2 == 0 && v < minEven)\n        {\n        \
    \    minEven = v;\n            minEvenIndex = i;\n        }\n    }\n    \n   \
    \ if (minEven == long.max)\n        return new long[0];\n    \n    return [minEven,\
    \ minEvenIndex];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
