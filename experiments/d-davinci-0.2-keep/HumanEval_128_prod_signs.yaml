name: HumanEval_128_prod_signs
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
  \ arr of integers and you need to return\n    sum of magnitudes of integers multiplied\
  \ by product of all signs\n    of each number in the array, represented by 1, -1\
  \ or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
  \ 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n\
  \    \n*/\nNullable!(long) prod_signs(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = prod_signs;\n\n{\n        auto result =\
  \ candidate([1L, 2L, 2L, -4L]);\n        assert(!result.isNull && result.get ==\
  \ -9L);\n}\n\n{\n        auto result = candidate([0L, 1L]);\n        assert(!result.isNull\
  \ && result.get == 0L);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 2L,\
  \ 3L, -1L, 1L]);\n        assert(!result.isNull && result.get == -10L);\n}\n\n{\n\
  \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
  \        auto result = candidate([2L, 4L, 1L, 2L, -1L, -1L, 9L]);\n        assert(!result.isNull\
  \ && result.get == 20L);\n}\n\n{\n        auto result = candidate([-1L, 1L, -1L,\
  \ 1L]);\n        assert(!result.isNull && result.get == 4L);\n}\n\n{\n        auto\
  \ result = candidate([-1L, 1L, 1L, 1L]);\n        assert(!result.isNull && result.get\
  \ == -4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 0L]);\n      \
  \  assert(!result.isNull && result.get == 0L);\n}\n\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
