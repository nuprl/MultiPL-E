name: HumanEval_128_prod_signs
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
  \ arr of integers and you need to return\n    sum of magnitudes of integers multiplied\
  \ by product of all signs\n    of each number in the array, represented by 1, -1\
  \ or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1,\
  \ 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n\
  \    \n*/\nNullable!(long) prod_signs(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = prod_signs;\n\n{\n        auto result =\
  \ candidate([1L, 2L, 2L, -4L]);\n        assert(!result.isNull && result.get ==\
  \ -9L);\n}\n\n{\n        auto result = candidate([0L, 1L]);\n        assert(!result.isNull\
  \ && result.get == 0L);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 2L,\
  \ 3L, -1L, 1L]);\n        assert(!result.isNull && result.get == -10L);\n}\n\n{\n\
  \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
  \        auto result = candidate([2L, 4L, 1L, 2L, -1L, -1L, 9L]);\n        assert(!result.isNull\
  \ && result.get == 20L);\n}\n\n{\n        auto result = candidate([-1L, 1L, -1L,\
  \ 1L]);\n        assert(!result.isNull && result.get == 4L);\n}\n\n{\n        auto\
  \ result = candidate([-1L, 1L, 1L, 1L]);\n        assert(!result.isNull && result.get\
  \ == -4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 0L]);\n      \
  \  assert(!result.isNull && result.get == 0L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    if (arr.length == 0)\n        return null;\n    long prod =\
    \ 1;\n    long sum = 0;\n    foreach (elem; arr)\n    {\n        if (elem > 0)\n\
    \            prod *= 1;\n        else if (elem < 0)\n            prod *= -1;\n\
    \        else\n            prod *= 0;\n        sum += abs(elem);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ sum = 0;\n    long prod = 1;\n    foreach (i; arr)\n    {\n        sum += abs(i);\n\
    \        prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0) return null;\n    long sum = 0;\n    long prod = 1;\n    foreach (i; arr)\
    \ \n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i < 0)\n\
    \            prod *= -1;\n        else if (i == 0)\n            prod = 0;\n  \
    \      sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if\
    \ (i < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n   \
    \     sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if\
    \ (i < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n   \
    \     sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i == 0)\n            continue;\n        sum +=\
    \ abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n \
    \   if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long sum\
    \ = 0;\n    foreach (i; arr)\n    {\n        if (i == 0)\n            continue;\n\
    \        prod *= sign(i);\n        sum += abs(i);\n    }\n    return prod * sum;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n \
    \   long sum = 0;\n    foreach (i; arr)\n    {\n        if (i < 0)\n         \
    \   prod *= -1;\n        else if (i > 0)\n            prod *= 1;\n        else\n\
    \            prod *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0) return null;\n    long prod = 1;\n    long sum\
    \ = 0;\n    foreach (i; arr) \n    {\n        sum += abs(i);\n        prod *=\
    \ sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n\
    \        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i;\
    \ arr) \n    {\n        if (i > 0)\n            prod *= 1;\n        else if (i\
    \ < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n      \
    \  sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length ==\
    \ 0)\n        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach\
    \ (i; arr)\n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n       \
    \ if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n            prod\
    \ *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0) return null;\n    long\
    \ sum = 0;\n    long prod = 1;\n    foreach (i; arr) \n    {\n        sum += abs(i);\n\
    \        prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i < 0)\n            prod *= -1;\n        else if\
    \ (i > 0)\n            prod *= 1;\n        else\n            prod *= 0;\n    \
    \    sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i == 0)\n            continue;\n        sum +=\
    \ abs(i);\n        prod *= sign(i);\n    }\n    return prod * sum;\n}", "{\n \
    \   if (arr.length == 0)\n        return null;\n    long sum = 0;\n    long prod\
    \ = 1;\n    foreach (i; arr) \n    {\n        sum += abs(i);\n        prod *=\
    \ sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0) return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n\
    \        if (i != 0) \n        {\n            prod *= sign(i);\n            sum\
    \ += abs(i);\n        }\n    }\n    return prod * sum;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if\
    \ (i < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n   \
    \     sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach\
    \ (i; arr) \n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if\
    \ (i > 0)\n            prod *= 1;\n        else if (i < 0)\n            prod *=\
    \ -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if\
    \ (i > 0)\n            prod *= 1;\n        else if (i < 0)\n            prod *=\
    \ -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if\
    \ (i == 0)\n            continue;\n        prod *= i > 0 ? 1 : -1;\n        sum\
    \ += abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n\
    \        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i;\
    \ arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if (i\
    \ < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n      \
    \  sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length ==\
    \ 0)\n        return null;\n    else\n    {\n        long sum = 0;\n        long\
    \ prod = 1;\n        foreach (i; arr)\n        {\n            sum += abs(i);\n\
    \            prod *= sign(i);\n        }\n        return sum * prod;\n    }\n}",
  "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long\
    \ sum = 0;\n    foreach (i; arr)\n    {\n        if (i == 0)\n            continue;\n\
    \        prod *= i < 0 ? -1 : 1;\n        sum += abs(i);\n    }\n    return prod\
    \ * sum;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long prod\
    \ = 1;\n    long sum = 0;\n    foreach (elem; arr)\n    {\n        if (elem <\
    \ 0)\n            prod *= -1;\n        else if (elem == 0)\n            prod =\
    \ 0;\n        sum += abs(elem);\n    }\n    return sum * prod;\n}", "{\n    if\
    \ (arr.length == 0)\n        return null;\n    long prod = 1;\n    long sum =\
    \ 0;\n    foreach (i; arr) \n    {\n        if (i > 0)\n            prod *= 1;\n\
    \        else if (i < 0)\n            prod *= -1;\n        else\n            prod\
    \ *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if\
    \ (arr.length == 0)\n        return null;\n    long prod = 1;\n    long sum =\
    \ 0;\n    foreach (i; arr) \n    {\n        if (i == 0)\n            continue;\n\
    \        prod *= i > 0 ? 1 : -1;\n        sum += abs(i);\n    }\n    return prod\
    \ * sum;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long prod\
    \ = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n \
    \           prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n   \
    \     else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ sum = 0;\n    long prod = 1;\n    foreach (i; arr)\n    {\n        sum += abs(i);\n\
    \        prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr) \n    {\n        if (i == 0)\n            continue;\n        prod *=\
    \ i > 0 ? 1 : -1;\n        sum += abs(i);\n    }\n    return prod * sum;\n}",
  "{\n    if (arr.length == 0)\n        return null;\n    long sum = 0;\n    long\
    \ prod = 1;\n    foreach (i; arr)\n    {\n        if (i == 0)\n            continue;\n\
    \        sum += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long res = 1;\n  \
    \  foreach (i; arr)\n    {\n        res *= sign(i);\n    }\n    return res * arr.map!(abs).sum;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long sum = 0;\n  \
    \  long prod = 1;\n    foreach (i; arr) \n    {\n        sum += abs(i);\n    \
    \    prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if\
    \ (i < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n   \
    \     sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if\
    \ (i < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n   \
    \     sum += abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach\
    \ (i; arr)\n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if\
    \ (i > 0)\n            prod *= 1;\n        else if (i < 0)\n            prod *=\
    \ -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n       \
    \ if (i < 0)\n            prod *= -1;\n        else if (i == 0)\n            prod\
    \ = 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if\
    \ (arr.length == 0)\n        return null;\n    long sum = 0;\n    long prod =\
    \ 1;\n    foreach (i; arr)\n    {\n        sum += abs(i);\n        prod *= sign(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i == 0)\n            continue;\n        else if (i > 0)\n       \
    \     prod *= 1;\n        else\n            prod *= -1;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long sum = 0;\n    long prod = 1;\n    foreach (i; arr)\n    {\n\
    \        sum += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return Nullable!(long)();\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n\
    \            prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n  \
    \      else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ Nullable!(long)(sum * prod);\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long sum = 0;\n    long prod = 1;\n    foreach (elem; arr)\n    {\n\
    \        sum += abs(elem);\n        prod *= sign(elem);\n    }\n    return sum\
    \ * prod;\n}", "{\n    long prod = 1;\n    long sum = 0;\n    foreach(i; arr)\n\
    \    {\n        if(i < 0)\n        {\n            prod *= -1;\n            sum\
    \ += abs(i);\n        }\n        else if(i > 0)\n        {\n            sum +=\
    \ i;\n        }\n        else\n        {\n            return null;\n        }\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0) return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n       \
    \ if (i == 0) continue;\n        sum += abs(i);\n        prod *= signbit(i) ?\
    \ -1 : 1;\n    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0) \n\
    \    {\n        return null;\n    }\n    long prod = 1;\n    long sum = 0;\n \
    \   foreach (i; arr) \n    {\n        if (i > 0) \n        {\n            prod\
    \ *= 1;\n        }\n        else if (i < 0) \n        {\n            prod *= -1;\n\
    \        }\n        else \n        {\n            prod *= 0;\n        }\n    \
    \    sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (x; arr) \n    {\n        prod *= sign(x);\n        sum += abs(x);\n    }\n\
    \    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long sum = 0;\n    long prod = 1;\n    foreach (i; arr)\n    {\n        sum\
    \ += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n\
    \    if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long\
    \ sum = 0;\n    foreach (i; arr)\n    {\n        if (i == 0)\n            continue;\n\
    \        prod *= i < 0 ? -1 : 1;\n        sum += abs(i);\n    }\n    return prod\
    \ * sum;\n}", "{\n    if (arr.length == 0) return null;\n    long prod = 1;\n\
    \    long sum = 0;\n    foreach (i; arr) \n    {\n        if (i == 0) continue;\n\
    \        sum += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n \
    \   long sum = 0;\n    foreach (i; arr) \n    {\n        if (i < 0)\n        \
    \    prod *= -1;\n        else if (i > 0)\n            prod *= 1;\n        else\n\
    \            prod *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n \
    \   long sum = 0;\n    foreach (i; arr)\n    {\n        if (i == 0)\n        \
    \    continue;\n        if (i < 0)\n            prod *= -1;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ Nullable!(long)();\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\
    \ \n    {\n        if (i > 0) \n        {\n            prod *= 1;\n          \
    \  sum += i;\n        }\n        else if (i < 0) \n        {\n            prod\
    \ *= -1;\n            sum += abs(i);\n        }\n        else \n        {\n  \
    \          prod *= 0;\n        }\n    }\n    return Nullable!(long)(sum * prod);\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n \
    \   long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n         \
    \   prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n        else\n\
    \            prod *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0) return null;\n    long prod = 1;\n    long sum\
    \ = 0;\n    foreach (i; arr) \n    {\n        if (i == 0) continue;\n        prod\
    \ *= sign(i);\n        sum += abs(i);\n    }\n    return prod * sum;\n}", "{\n\
    \    if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long\
    \ sum = 0;\n    foreach (i; arr) \n    {\n        if (i < 0)\n            prod\
    \ *= -1;\n        else if (i == 0)\n            prod = 0;\n        sum += abs(i);\n\
    \    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i < 0)\n            prod *= -1;\n        else if (i == 0)\n     \
    \       prod = 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n}",
  "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long\
    \ sum = 0;\n    foreach (i; arr)\n    {\n        if (i < 0)\n            prod\
    \ *= -1;\n        else if (i > 0)\n            prod *= 1;\n        else\n    \
    \        prod *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n}",
  "{\n    if (arr.length == 0)\n        return null;\n    long sum = 0;\n    long\
    \ prod = 1;\n    foreach (i; arr)\n    {\n        if (i < 0)\n            prod\
    \ *= -1;\n        else if (i == 0)\n            prod = 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n\
    \        if (i == 0)\n            continue;\n        prod *= sign(i);\n      \
    \  sum += abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length ==\
    \ 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr) \n    {\n        if (i == 0)\n            continue;\n        prod *=\
    \ sign(i);\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n  \
    \  if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long sum\
    \ = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n            prod *= 1;\n\
    \        else if (i < 0)\n            prod *= -1;\n        else\n            prod\
    \ *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if\
    \ (arr.length == 0)\n        return null;\n    long sum = 0;\n    long prod =\
    \ 1;\n    foreach (i; arr)\n    {\n        sum += abs(i);\n        prod *= sign(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long sum = 0;\n    long prod = 1;\n    foreach (i; arr)\n    {\n\
    \        if (i == 0)\n            continue;\n        sum += abs(i);\n        prod\
    \ *= sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\
    \ \n    {\n        return null;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    foreach (i; arr) \n    {\n        if (i < 0) \n        {\n            sum\
    \ += abs(i);\n            prod *= -1;\n        }\n        else if (i > 0) \n \
    \       {\n            sum += abs(i);\n            prod *= 1;\n        }\n   \
    \     else \n        {\n            prod *= 0;\n        }\n    }\n    return sum\
    \ * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long prod\
    \ = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n \
    \           prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n   \
    \     else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i < 0)\n\
    \            prod *= -1;\n        else if (i > 0)\n            prod *= 1;\n  \
    \      else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n\
    \            prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n  \
    \      else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0) return null;\n    long prod =\
    \ 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n        if (i < 0) \n \
    \       {\n            prod *= -1;\n            sum += abs(i);\n        }\n  \
    \      else if (i > 0) \n        {\n            sum += i;\n        }\n       \
    \ else \n        {\n            prod = 0;\n        }\n    }\n    return sum *\
    \ prod;\n}", "{\n    if (arr.length == 0) \n    {\n        return null;\n    }\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n       \
    \ if (i > 0) \n        {\n            prod *= 1;\n        } \n        else if\
    \ (i < 0) \n        {\n            prod *= -1;\n        } \n        else \n  \
    \      {\n            prod *= 0;\n        }\n        sum += abs(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if\
    \ (i > 0)\n            prod *= 1;\n        else if (i < 0)\n            prod *=\
    \ -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0) \n    {\n        return\
    \ null;\n    }\n    long sum = 0;\n    long prod = 1;\n    foreach (i; arr) \n\
    \    {\n        if (i < 0) \n        {\n            prod *= -1;\n        }\n \
    \       else if (i == 0) \n        {\n            prod = 0;\n            break;\n\
    \        }\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n  \
    \  if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long sum\
    \ = 0;\n    foreach (i; arr) \n    {\n        if (i > 0)\n            prod *=\
    \ 1;\n        else if (i < 0)\n            prod *= -1;\n        else\n       \
    \     prod *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n\
    \    if (arr.length == 0) return null;\n    long prod = 1;\n    long sum = 0;\n\
    \    foreach (i; arr) \n    {\n        prod *= sign(i);\n        sum += abs(i);\n\
    \    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long sum = 0;\n    long prod = 1;\n    foreach (i; arr) \n    {\n\
    \        if (i == 0)\n            continue;\n        sum += abs(i);\n        prod\
    \ *= sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n\
    \        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i;\
    \ arr)\n    {\n        if (i == 0)\n            continue;\n        prod *= sign(i);\n\
    \        sum += abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach\
    \ (i; arr) \n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if\
    \ (i == 0)\n            continue;\n        prod *= sign(i);\n        sum += abs(i);\n\
    \    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i == 0)\n            continue;\n        prod *= sign(i);\n      \
    \  sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length ==\
    \ 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if\
    \ (i < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n   \
    \     sum += abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i < 0)\n            prod *= -1;\n        sum +=\
    \ abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n \
    \       return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n\
    \    {\n        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n\
    \            prod *= -1;\n        else\n            prod *= 0;\n        sum +=\
    \ abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n \
    \       return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n\
    \    {\n        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n\
    \            prod *= -1;\n        else\n            prod *= 0;\n        sum +=\
    \ abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0) return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n        {\n            prod *= 1;\n            sum += i;\n\
    \        }\n        else if (i < 0)\n        {\n            prod *= -1;\n    \
    \        sum += abs(i);\n        }\n        else\n        {\n            prod\
    \ *= 0;\n        }\n    }\n    return prod * sum;\n}", "{\n    if (arr.length\
    \ == 0)\n        return Nullable!(long)();\n    long prod = 1;\n    long sum =\
    \ 0;\n    foreach (elem; arr)\n    {\n        if (elem > 0)\n            prod\
    \ *= 1;\n        else if (elem < 0)\n            prod *= -1;\n        else\n \
    \           prod *= 0;\n        sum += abs(elem);\n    }\n    return Nullable!(long)(sum\
    \ * prod);\n}", "{\n    if (arr.length == 0)\n        return null;\n    long prod\
    \ = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n \
    \           prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n   \
    \     else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n\
    \            prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n  \
    \      else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0) \n    {\n        return null;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n\
    \        if (i == 0) \n        {\n            continue;\n        }\n        prod\
    \ *= i / abs(i);\n        sum += abs(i);\n    }\n    return prod * sum;\n}", "{\n\
    \    if (arr.length == 0) \n    {\n        return Nullable!(long)();\n    }\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n       \
    \ if (i < 0) \n        {\n            prod *= -1;\n        }\n        else if\
    \ (i == 0) \n        {\n            prod = 0;\n            break;\n        }\n\
    \        sum += abs(i);\n    }\n    return Nullable!(long)(sum * prod);\n}", "{\n\
    \    if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long\
    \ sum = 0;\n    foreach (i; arr) \n    {\n        if (i == 0)\n            continue;\n\
    \        prod *= sign(i);\n        sum += abs(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0) return null;\n    long prod = 1;\n    long sum\
    \ = 0;\n    foreach (i; arr) \n    {\n        if (i == 0) continue;\n        sum\
    \ += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n\
    \    if (arr.length == 0) return null;\n    long prod = 1;\n    long sum = 0;\n\
    \    foreach (i; arr) \n    {\n        if (i == 0) continue;\n        if (i <\
    \ 0) prod *= -1;\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n\
    \    if (arr.length == 0)\n        return null;\n    else\n    {\n        long\
    \ sum = 0;\n        long prod = 1;\n        foreach (i; arr)\n        {\n    \
    \        if (i > 0)\n                sum += i;\n            else if (i < 0)\n\
    \            {\n                sum += abs(i);\n                prod *= -1;\n\
    \            }\n        }\n        return sum * prod;\n    }\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if\
    \ (i < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n   \
    \     sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach\
    \ (i; arr) \n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long sum = 0;\n    long prod = 1;\n    foreach (i; arr)\n    {\n        sum\
    \ += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n\
    \    if (arr.length == 0) return null;\n    long sum = 0;\n    long prod = 1;\n\
    \    foreach (i; arr) \n    {\n        sum += abs(i);\n        prod *= sign(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n\
    \        if (i == 0)\n            continue;\n        prod *= sign(i);\n      \
    \  sum += abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length ==\
    \ 0)\n        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach\
    \ (i; arr)\n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if\
    \ (i > 0)\n            prod *= 1;\n        else if (i < 0)\n            prod *=\
    \ -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n       \
    \ if (i < 0)\n            prod *= -1;\n        else if (i == 0)\n            prod\
    \ = 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach(i; arr)\n    {\n        if(i == 0)\n\
    \        {\n            return null;\n        }\n        else if(i > 0)\n    \
    \    {\n            prod *= 1;\n            sum += i;\n        }\n        else\n\
    \        {\n            prod *= -1;\n            sum += abs(i);\n        }\n \
    \   }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long sum = 0;\n    long prod = 1;\n    foreach (i; arr) \n    {\n\
    \        sum += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long sum = 0;\n  \
    \  long prod = 1;\n    foreach (i; arr)\n    {\n        sum += abs(i);\n     \
    \   prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if\
    \ (i < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n   \
    \     sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        prod *= sign(i);\n        sum += abs(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n       \
    \ if (i < 0)\n            prod *= -1;\n        else if (i > 0)\n            prod\
    \ *= 1;\n        else\n            prod *= 0;\n        sum += abs(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n       \
    \ if (i < 0)\n            prod *= -1;\n        else if (i == 0)\n            prod\
    \ = 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if\
    \ (arr.length == 0)\n        return null;\n    long prod = 1;\n    long sum =\
    \ 0;\n    foreach (i; arr) \n    {\n        if (i > 0)\n            prod *= 1;\n\
    \        else if (i < 0)\n            prod *= -1;\n        else\n            prod\
    \ *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if\
    \ (arr.length == 0)\n        return null;\n    long prod = 1;\n    long sum =\
    \ 0;\n    foreach (i; arr) \n    {\n        if (i < 0)\n            prod *= -1;\n\
    \        else if (i == 0)\n            prod = 0;\n        sum += abs(i);\n   \
    \ }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    Nullable!(long) result = 0;\n    foreach(i;\
    \ arr)\n    {\n        if(i == 0)\n        {\n            return null;\n     \
    \   }\n        else\n        {\n            result *= i / abs(i);\n          \
    \  result += abs(i);\n        }\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach\
    \ (i; arr) \n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if\
    \ (i > 0)\n            prod *= 1;\n        else if (i < 0)\n            prod *=\
    \ -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        sum\
    \ += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n\
    \    if (arr.length == 0) return null;\n    long prod = 1;\n    long sum = 0;\n\
    \    foreach (i; arr)\n    {\n        if (i == 0) continue;\n        prod *= sign(i);\n\
    \        sum += abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i < 0)\n            prod *= -1;\n        else if\
    \ (i == 0)\n            prod = 0;\n        sum += abs(i);\n    }\n    return sum\
    \ * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long prod\
    \ = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n \
    \           prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n   \
    \     else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n\
    \            prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n  \
    \      else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0) \n    {\n        return null;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n\
    \        if (i > 0) \n        {\n            prod *= 1;\n        }\n        else\
    \ if (i < 0) \n        {\n            prod *= -1;\n        }\n        else \n\
    \        {\n            prod *= 0;\n        }\n        sum += abs(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long sum = 0;\n    long prod = 1;\n    foreach (i; arr)\n    {\n        sum\
    \ += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n\
    \    if (arr.length == 0) return null;\n    long sum = 0;\n    long prod = 1;\n\
    \    foreach (elem; arr) \n    {\n        sum += abs(elem);\n        prod *= sign(elem);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    long sum = 0;\n    long prod = 1;\n\
    \    foreach(i; arr) \n    {\n        sum += abs(i);\n        prod *= sign(i);\n\
    \    }\n    return prod == 0 ? null : sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (elem; arr)\n    {\n        if (elem == 0)\n            continue;\n        prod\
    \ *= elem < 0 ? -1 : 1;\n        sum += abs(elem);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n \
    \   long sum = 0;\n    foreach (i; arr)\n    {\n        if (i < 0)\n         \
    \   prod *= -1;\n        else if (i == 0)\n            prod = 0;\n        sum\
    \ += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n\
    \        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i;\
    \ arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if (i\
    \ < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n      \
    \  sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length ==\
    \ 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if\
    \ (i < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n   \
    \     sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (i; arr) \n    {\n        if (i > 0)\n            prod *= 1;\n        else if\
    \ (i < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n   \
    \     sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach\
    \ (i; arr) \n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if\
    \ (i > 0)\n            prod *= 1;\n        else if (i < 0)\n            prod *=\
    \ -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n    }\n \
    \   return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if\
    \ (i > 0)\n            prod *= 1;\n        else if (i < 0)\n            prod *=\
    \ -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n    }\n \
    \   return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n       \
    \ if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n            prod\
    \ *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if\
    \ (i == 0)\n            continue;\n        prod *= sign(i);\n        sum += abs(i);\n\
    \    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        sum += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n \
    \   long sum = 0;\n    foreach (i; arr)\n    {\n        if (i == 0)\n        \
    \    continue;\n        prod *= sign(i);\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n        if (i ==\
    \ 0) \n        {\n            prod = 0;\n            break;\n        }\n     \
    \   sum += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n}",
  "{\n    if (arr.length == 0) \n    {\n        return null;\n    }\n    long prod\
    \ = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n        if (i != 0) \n\
    \        {\n            prod *= i / abs(i);\n            sum += abs(i);\n    \
    \    }\n    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n    \
    \    return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n\
    \    {\n        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n\
    \            prod *= -1;\n        else\n            prod *= 0;\n        sum +=\
    \ abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n \
    \       return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n\
    \    {\n        if (i == 0)\n            continue;\n        prod *= sign(i);\n\
    \        sum += abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach\
    \ (i; arr) \n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n\
    \    long sum = 0;\n    long prod = 1;\n    foreach (i; arr) \n    {\n       \
    \ sum += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n}",
  "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long\
    \ sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n            prod\
    \ *= 1;\n        else if (i < 0)\n            prod *= -1;\n        else\n    \
    \        prod *= 0;\n        sum += abs(i);\n    }\n    return prod * sum;\n}",
  "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long\
    \ sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n            prod\
    \ *= 1;\n        else if (i < 0)\n            prod *= -1;\n        else\n    \
    \        prod *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n}",
  "{\n    if (arr.length == 0)\n        return null;\n    long sum = 0;\n    long\
    \ prod = 1;\n    foreach (i; arr) \n    {\n        sum += abs(i);\n        prod\
    \ *= sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n\
    \        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i;\
    \ arr) \n    {\n        if (i == 0) \n        {\n            prod = 0;\n     \
    \       break;\n        }\n        prod *= i > 0 ? 1 : -1;\n        sum += abs(i);\n\
    \    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0) \n    {\n   \
    \     return null;\n    }\n    long prod = 1;\n    long sum = 0;\n    foreach\
    \ (elem; arr) \n    {\n        if (elem < 0) \n        {\n            prod *=\
    \ -1;\n        }\n        else if (elem == 0) \n        {\n            prod =\
    \ 0;\n        }\n        sum += abs(elem);\n    }\n    return sum * prod;\n}",
  "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long\
    \ sum = 0;\n    foreach (i; arr) \n    {\n        if (i < 0)\n            prod\
    \ *= -1;\n        else if (i == 0)\n            prod = 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (elem; arr)\n    {\n\
    \        if (elem > 0)\n            prod *= 1;\n        else if (elem < 0)\n \
    \           prod *= -1;\n        else\n            prod *= 0;\n        sum +=\
    \ abs(elem);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n\
    \        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach (i;\
    \ arr) \n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n        if (i >\
    \ 0)\n            prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n\
    \        else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n        if (i ==\
    \ 0)\n            continue;\n        prod *= sign(i);\n        sum += abs(i);\n\
    \    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n\
    \        sum += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n \
    \   long sum = 0;\n    foreach (i; arr) \n    {\n        if (i == 0)\n       \
    \     continue;\n        prod *= i > 0 ? 1 : -1;\n        sum += abs(i);\n   \
    \ }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long sum = 0;\n    long prod = 1;\n    foreach (i; arr)\n    {\n\
    \        sum += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n \
    \   long sum = 0;\n    foreach (i; arr)\n    {\n        if (i == 0)\n        \
    \    continue;\n        sum += abs(i);\n        prod *= sign(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n        if (i >\
    \ 0)\n            prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n\
    \        else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n\
    \            prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n  \
    \      else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n\
    \            prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n  \
    \      else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i < 0)\n\
    \            prod *= -1;\n        else if (i > 0)\n            prod *= 1;\n  \
    \      else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i < 0)\n\
    \            prod *= -1;\n        else if (i == 0)\n            prod = 0;\n  \
    \      sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0) return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\
    \ \n    {\n        if (i == 0) continue;\n        prod *= sign(i);\n        sum\
    \ += abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n\
    \        return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i;\
    \ arr)\n    {\n        if (i > 0)\n            prod *= 1;\n        else if (i\
    \ < 0)\n            prod *= -1;\n        else\n            prod *= 0;\n      \
    \  sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length ==\
    \ 0)\n        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach\
    \ (i; arr) \n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0) return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n        if (i >\
    \ 0) \n        {\n            prod *= 1;\n            sum += i;\n        }\n \
    \       else if (i < 0) \n        {\n            prod *= -1;\n            sum\
    \ += abs(i);\n        }\n        else \n        {\n            prod *= 0;\n  \
    \      }\n    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0) \n \
    \   {\n        return null;\n    }\n    long prod = 1;\n    long sum = 0;\n  \
    \  foreach (i; arr) \n    {\n        if (i < 0) \n        {\n            prod\
    \ *= -1;\n        }\n        else if (i == 0) \n        {\n            prod =\
    \ 0;\n            break;\n        }\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i ==\
    \ 0)\n            continue;\n        sum += abs(i);\n        prod *= sign(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i == 0)\n            continue;\n        if (i < 0)\n            prod\
    \ *= -1;\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if\
    \ (arr.length == 0)\n        return null;\n    long sum = 0;\n    long prod =\
    \ 1;\n    foreach (i; arr)\n    {\n        sum += abs(i);\n        prod *= sign(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long sum = 0;\n    long prod = 1;\n    foreach (i; arr)\n    {\n\
    \        sum += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n \
    \   long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n         \
    \   prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n        else\n\
    \            prod *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n \
    \   long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n         \
    \   prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n        else\n\
    \            prod *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0) \n    {\n        return null;\n    }\n    long\
    \ prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n        if (i ==\
    \ 0) \n        {\n            continue;\n        }\n        prod *= i > 0 ? 1\
    \ : -1;\n        sum += abs(i);\n    }\n    return prod * sum;\n}", "{\n    long\
    \ sum = 0;\n    long prod = 1;\n    foreach(i; arr) \n    {\n        if (i ==\
    \ 0) \n        {\n            return null;\n        }\n        sum += abs(i);\n\
    \        prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0) \n    {\n        return Nullable!(long)();\n    }\n    else \n    {\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (i; arr) \n  \
    \      {\n            if (i > 0) \n            {\n                prod *= 1;\n\
    \                sum += i;\n            }\n            else if (i < 0) \n    \
    \        {\n                prod *= -1;\n                sum += abs(i);\n    \
    \        }\n            else \n            {\n                prod *= 0;\n   \
    \         }\n        }\n        return Nullable!(long)(sum * prod);\n    }\n}",
  "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1;\n    long\
    \ sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n            prod\
    \ *= 1;\n        else if (i < 0)\n            prod *= -1;\n        else\n    \
    \        prod *= 0;\n        sum += abs(i);\n    }\n    return sum * prod;\n}",
  "{\n    if (arr.length == 0)\n        return null;\n    long sum = 0;\n    long\
    \ prod = 1;\n    foreach (i; arr)\n    {\n        sum += abs(i);\n        prod\
    \ *= sign(i);\n    }\n    return sum * prod;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
