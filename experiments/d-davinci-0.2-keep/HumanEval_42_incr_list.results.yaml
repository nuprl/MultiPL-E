name: HumanEval_42_incr_list
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new\
    \ long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n    }\n\
    \    return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>>\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp81vggj8g.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81vggj8g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n        result[i] = e + 1;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    return\
    \ l.map!(a => a + 1)();\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    return l.map!(a => a + 1);\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    return l.map!(a => a + 1).array();\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list5(long[] l) \n{\n    return\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplsc5993_.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmplsc5993_.d(68): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplsc5993_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_3(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3,\nunittest\n{\n \
    \   alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfopq6qqj.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfopq6qqj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6csng0o0.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6csng0o0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n        result[i] = l[i] + 1;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    int i = 0;\n    foreach (long x; l)\n    \
    \    result[i++] = x + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_3(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ i = 0;\n    foreach (long x; l)\n        result[i++] = x + 1;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    int i = 0;\n    foreach (long x; l)\n    \
    \    result[i++] = x + 1;\n    return result;\n}\n/*\n\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpycvt0bxh.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycvt0bxh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1qpwsmt9.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1qpwsmt9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list3(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4omyl1ro.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4omyl1ro.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppn806i0j.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppn806i0j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>>\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxvschety.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvschety.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret;\n    foreach(i; l)\n    {\n       \
    \ ret ~= i + 1;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate =\
    \ incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqzntnuzr.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzntnuzr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa12nyy1n.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa12nyy1n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_2lesaqu.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2lesaqu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    return l.map!(a => a + 1);\n}\nunittest\n{\n  \
    \  alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2eq6vkal.d(13): Error: no property `map` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2eq6vkal.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n        ret[i] = l[i] + 1;\n    return ret;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        ret[i]\
    \ = l[i] + 1;\n    return ret;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++)\n        ret[i] = l[i] + 1;\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n        ret[i] = l[i] + 1;\n    return ret;\n}\n\
    /*\n\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeshyhhn9.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeshyhhn9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n        ret[i] = e + 1;\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l) \n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l) \n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2kqf82ov.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2kqf82ov.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        ret[i] = l[i] + 1;\n    }\n    return\
    \ ret;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n\
    \    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i]\
    \ = e + 1;\n    }\n    return ret;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list3(long[] l) \n{\n    long[] ret = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        ret[i] = l[i] + 1;\n    }\n    return\
    \ ret;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list4(long[] l) \n{\n\
    \    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i]\
    \ = e + 1;\n    }\n\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6nflwh0l.d(70): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6nflwh0l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc7do70fi.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7do70fi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>>\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp43umm8t7.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43umm8t7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list2(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list3(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwshoxgeb.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwshoxgeb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n        ret[i] = l[i] + 1;\n    return ret;\n}\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n        result[i] = l[i] + 1;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        result[i]\
    \ = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n        result[i] = l[i] + 1;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        result[i]\
    \ = l[i] + 1;\n    return result;\n}\n/*\n\nunittest\n{\n    alias candidate =\
    \ incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps1r5jx85.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1r5jx85.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        res[i] = l[i] + 1;\n    }\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\
    \    long[] res = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n\
    \    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10,\
    \ 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        res[i] = l[i] + 1;\n \
    \   }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \   >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++)\n    {\n        res\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsr6pkizb.d(68): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpsr6pkizb.d(76): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpsr6pkizb.d(76): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsr6pkizb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements decremented by 1.\n    >>> decr_list([1, 2, 3])\n  \
    \  [0, 1, 2]\n    >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [4, 2, 4,\
    \ 1, 2, 2, 8, -1, 122]\n*/\nlong[] decr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l) \n    {\n        result[i] = e -\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements multiplied by\
    \ 2.\n    >>> mult_list([1, 2, 3])\n    [2, 4, 6]\n    >>> mult_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [10, 6, 10, 4, 6, 6, 18, 0, 246]\n*/\nlong[] mult_list(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    foreach(i, e; l) \n   \
    \ {\n        result[i] = e * 2;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements divided by 2.\n    >>> div_list([1, 2, 3])\n    [0, 1, 1]\n  \
    \  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [2, 1, 2, 1, 1, 1, 4, 0, 61]\n\
    */\nlong[] div_list(long[] l) \n{\n    long[] result = new long[l.length];\n \
    \   foreach(i, e; l) \n    {\n        result[i] = e / 2;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements squared.\n    >>> square_list([1, 2, 3])\n  \
    \ \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp22gfoi0j.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22gfoi0j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>>\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnwyev9oo.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnwyev9oo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l) \n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l) \n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp04g706sb.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04g706sb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3kohijrl.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3kohijrl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ndhkjs8.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ndhkjs8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_2(long[] l) \n{\n    return\
    \ map!(a => a + 1)(l);\n}\n/*\nReturn list with elements incremented by 1.\n \
    \   >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    return map!(a => a + 1)(l);\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_4(long[] l) \n{\n    return map!(a => a + 1)(l);\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n\
    \    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10,\
    \ 1, 124]\n    \n*/\nlong[] incr_list_5(long[] l) \n{\n   \nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf9mv69ku.d(67): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf9mv69ku.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_mnx_pbe.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_mnx_pbe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n    >>> decr_list([1, 2, 3])\n    [0,\
    \ 1, 2]\n    >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [4, 2, 4, 1, 2,\
    \ 2, 8, -1, 122]\n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach(i, e; l)\n    {\n        res[i] = e - 1;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1, 2, 3])\n    [0, 1, 2]\n    >>> decr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [4, 2, 4, 1, 2, 2, 8, -1, 122]\n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkrfq3g_p.d(69): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkrfq3g_p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list3(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9j46fgke.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9j46fgke.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdh13mlz_.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdh13mlz_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>>\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfzha6cdc.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfzha6cdc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new\
    \ long[l.length];\n    foreach(i, e; l)\n    {\n        ret[i] = e + 1;\n    }\n\
    \    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>>\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjus4n3b1.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjus4n3b1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n    >>> decr_list([1, 2, 3])\n    [0,\
    \ 1, 2]\n    >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [4, 2, 4, 1, 2,\
    \ 2, 8, -1, 122]\n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach(i, e; l)\n    {\n        res[i] = e - 1;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1, 2, 3])\n    [0, 1, 2]\n    >>> decr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [4, 2, 4, 1, 2, 2, 8, -1, 122]\n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7fdrrwou.d(69): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7fdrrwou.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    return\
    \ l.map!(a => a + 1);\n}\n/*\nReturn list with elements incremented by 1.\n  \
    \  >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    return l.map!((a) => a + 1);\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    return l.map!((a) => a + 1)();\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list5(long[] l) \n{\n   \nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4gbybqln.d(67): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4gbybqln.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new\
    \ long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n    }\n\
    \    return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>>\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpogcvnh8e.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpogcvnh8e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_3(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3,\nunittest\n{\n \
    \   alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzij3xxq0.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzij3xxq0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++) \n    {\n        result[i] = l[i] + 1;\n    }\n  \
    \  return result;\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n    \
    \    result[i] = l[i] + 1;\n    }\n    return result;\n}\n/*\nReturn list with\
    \ elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n  \
    \  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1,\
    \ 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n   \nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpca09s817.d(67): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca09s817.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    return l.map!(a => a + 1)();\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n\
    \    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10,\
    \ 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return l.map!(a => a\
    \ + 1)();\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n\
    \    return l.map!(a => a + 1)();\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    return l.map!(a => a + 1\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7itnznti.d(65): Error: found `unittest` when expecting `)` following\
    \ template argument list\\n/tmp/tmp7itnznti.d(66): Error: found `{` when expecting\
    \ `;` following `return` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp7itnznti.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    return\
    \ map!((e) => e + 1)(l);\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    return map!((e) => e + 1)(l);\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    return map!((e) => e + 1)(l);\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n\
    \    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10,\
    \ 1, 124]\n    \n*/\nlong[] incr_list5(long[] l) \n{\n    return\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppa7u3e6d.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmppa7u3e6d.d(68): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppa7u3e6d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4i4pkw6f.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4i4pkw6f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] ret =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        ret[i] = e + 1;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_4(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjqfcwluy.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfcwluy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list3(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvuqj8rtn.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvuqj8rtn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n        result[i] = e + 1;\n    return result;\n}\n/*\nReturn list with\
    \ elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n  \
    \  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1,\
    \ 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    return l.map!(a => a +\
    \ 1)();\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[] l) \n{\n\
    \    return l.map!(a => a + 1)();\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    return l.map!(a => a + 1)();\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n\
    \    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10,\
    \ 1, 124]\n    \n*/\nlong[] incr_list5(long[] l) \n{\n    return l.map!(a\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_nmqo2b1.d(65): Error: found `unittest` when expecting `)` following\
    \ template argument list\\n/tmp/tmp_nmqo2b1.d(66): Error: found `{` when expecting\
    \ `;` following `return` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp_nmqo2b1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    return map!(a\
    \ => a + 1)(l);\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[] l) \n{\n\
    \    return map!(a => a + 1)(l);\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    return map!(a => a + 1)(l);\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n\
    \    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10,\
    \ 1, 124]\n    \n*/\nlong[] incr_list5(long[] l) \n{\n    return map!(\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpldoa26n9.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmpldoa26n9.d(68): Error: found `{` when expecting `)` following template\
    \ argument list\\n/tmp/tmpldoa26n9.d(69): Error: found `alias` when expecting\
    \ `;` following `return` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpldoa26n9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    return\
    \ l.map!(a => a + 1);\n}\n/*\nReturn list with elements incremented by 1.\n  \
    \  >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    return l.map!(a => a + 1)();\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    return l.map!((a) => a + 1)();\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list5(long[] l) \n{\n    return\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp1rh81m2.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmpp1rh81m2.d(68): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1rh81m2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] r = new long[l.length];\n    foreach(i,\
    \ e; l)\n        r[i] = e + 1;\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplaaflk6h.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplaaflk6h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l) \n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list3(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l) \n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incre\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4gqppp34.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4gqppp34.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n        ret[i] = e + 1;\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzuffypgs.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzuffypgs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzolpx6mc.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzolpx6mc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptqgv82p_.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqgv82p_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] r = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        r[i] = e + 1;\n    }\n    return r;\n}\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n        result[i] = e + 1;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l) \n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l) \n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incre\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqmhouzbi.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmhouzbi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n    >>> decr_list([1, 2, 3])\n    [0,\
    \ 1, 2]\n    >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [4, 2, 4, 1, 2,\
    \ 2, 8, -1, 122]\n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach(i, e; l) \n    {\n        res[i] = e - 1;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach(i, e; l) \n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1, 2, 3])\n    [0, 1, 2]\n    >>> decr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [4, 2, 4, 1, 2, 2, 8, -1, 122]\n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l) \n    {\n\
    \        res[i] = e - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk8rtnsmh.d(69): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8rtnsmh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new\
    \ long[l.length];\n    foreach(i, e; l)\n    {\n        ret[i] = e + 1;\n    }\n\
    \    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>>\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprtn84fez.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtn84fez.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_3(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi8c2rxx_.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi8c2rxx_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_3(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3,\nunittest\n{\n \
    \   alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfb3xs5qj.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfb3xs5qj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new\
    \ long[l.length];\n    foreach(i, e; l)\n    {\n        ret[i] = e + 1;\n    }\n\
    \    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>>\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp38bcpofi.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38bcpofi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new\
    \ long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n    }\n\
    \    return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>>\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp46gm_d7c.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46gm_d7c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    return map!((e)\
    \ => e + 1)(l);\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[] l) \n{\n\
    \    return map!((e) => e + 1)(l);\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    return map!((e) => e + 1)(l);\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n\
    \    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10,\
    \ 1, 124]\n    \n*/\nlong[] incr_list5(long[] l) \n{\n    return\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp83i91pr5.d(67): Error: expression expected, not `unittest`\\\
    n/tmp/tmp83i91pr5.d(68): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83i91pr5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph0ev6i8e.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0ev6i8e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res =\
    \ new long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdx8rmlyu.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdx8rmlyu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        res[i] = l[i] + 1;\n    }\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n\
    \    long[] res = new long[l.length];\n    foreach (int i, long e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list3(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach\
    \ (int i, ref long e; l)\n    {\n        e = e + 1;\n        res[i] = e;\n   \
    \ }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n   \
    \ >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list4(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (int i, ref long e;\
    \ l)\n    {\n        e = e + 1;\n       \nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprkoch8tp.d(70): Error: found `unittest` instead of statement\\\
    n/tmp/tmprkoch8tp.d(78): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprkoch8tp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new\
    \ long[l.length];\n    foreach(i, e; l)\n    {\n        ret[i] = e + 1;\n    }\n\
    \    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>>\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgcvii1bo.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcvii1bo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new\
    \ long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e + 1;\n    }\n\
    \    return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>>\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1syabxsi.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1syabxsi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>>\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt6hl5rgv.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6hl5rgv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] r = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        r[i] = e + 1;\n    }\n    return r;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n\
    \    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10,\
    \ 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    foreach(i, e; l)\n    {\n        r[i] = e + 1;\n    }\n    return r;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] r\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        r[i] = e + 1;\n\
    \    }\n    return r;\n}\n/*\nReturn list with elements incremented by 1.\n  \
    \  >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] r = new long[l.length];\n    foreach(i, e; l)\n    {\n  \
    \      r[i] = e + 1;\n    }\n    return r;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>>\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp51zom8uk.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51zom8uk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n        res[i] = e + 1;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_v2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_v3(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_v4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i]\
    \ = e + 1;\n    }\n    return result;\n}\n/*\nReturn list with\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpestseik4.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpestseik4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    return l.map!(a\
    \ => a + 1)();\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[] l) \n{\n\
    \    return l.map!((a) => a + 1)();\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    return l.map!((a) => a + 1)();\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list5(long[] l) \n{\n\nunittest\n{\n \
    \   alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppdqte8xh.d(67): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppdqte8xh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l)\n        ret[i] = e + 1;\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    return\
    \ l.map!(a => a + 1)();\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    return l.map!((a) => a + 1)();\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    return l.map!((a) => a + 1)();\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list5(long[] l) \n{\n\nunittest\n{\n \
    \   alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpupkdy8ui.d(67): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpupkdy8ui.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_2(long[] l) \n{\n    return l.map!(a\
    \ => a + 1);\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_3(long[] l) \n{\n\
    \    return l.map!((a) => a + 1);\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list_4(long[] l) \n{\n    return l.map!((a) => a + 1)();\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list_5(long[] l) \n\nunittest\n{\n   \
    \ alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmputgz2wcj.d(66): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmputgz2wcj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach(i, e; l)\n    {\n        result[i] = e +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>>\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvd6od71_.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvd6od71_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++)\n    {\n        result[i] = l[i] + 1;\n    }\n   \
    \ return result;\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    foreach\
    \ (e; l)\n    {\n        result[i] = e + 1;\n        i++;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    int i = 0;\n    foreach (e; l)\n    {\n  \
    \      result[i] = e + 1;\n        i++;\n    }\n    return result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list4(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    int i = 0;\n    foreach (e; l)\n    {\n\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnu114kyy.d(73): Error: found `unittest` instead of statement\\\
    n/tmp/tmpnu114kyy.d(81): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnu114kyy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] ret =\
    \ new long[l.length];\n    foreach(i, e; l) \n    {\n        ret[i] = e + 1;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach(i, e; l) \n    {\n\
    \        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list4(long[] l) \n{\n    long[] ret = new long[l.length];\n    foreach(i,\
    \ e; l) \n    {\n        ret[i] = e + 1;\n    }\n    return ret;\n}\n/*\nReturn\
    \ list with elements incre\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe5ur0yp9.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5ur0yp9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[]\
    \ incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n    >>> decr_list([1, 2, 3])\n    [0,\
    \ 1, 2]\n    >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [4, 2, 4, 1, 2,\
    \ 2, 8, -1, 122]\n    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new\
    \ long[l.length];\n    foreach(i, e; l)\n    {\n        res[i] = e - 1;\n    }\n\
    \    return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach(i, e; l)\n    {\n\
    \        res[i] = e + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1, 2, 3])\n    [0, 1, 2]\n    >>> decr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [4, 2, 4, 1, 2, 2, 8, -1, 122]\n    \n*/\nlong[]\
    \ decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n    foreach(i,\
    \ e; l)\n    {\n        res[i] = e - 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ibvxjab.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ibvxjab.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
