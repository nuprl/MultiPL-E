name: HumanEval_83_starts_one_ends
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
  \ n, return the count of the numbers of n-digit\n    positive integers that start\
  \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n"
tests: "unittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
  \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
  \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
  void main(){}"
completions: ["{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n  \
    \  for (long i = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n\
    \    }\n    start /= 10;\n    end -= 1;\n    count = end - start + 1;\n    return\
    \ count;\n}", "{\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n \
    \       return 10;\n    else\n    {\n        long result = 0;\n        for (long\
    \ i = 1; i < n; i++)\n        {\n            result += starts_one_ends(i);\n \
    \       }\n        result *= 9;\n        result += pow(10, n - 1);\n        return\
    \ result;\n    }\n}", "{\n    long count = 0;\n    long start = 1;\n    long end\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        start *= 10;\n        end\
    \ *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    count = end - start + 1;\n\
    \    return count;\n}", "{\n    long result = 0;\n    if (n == 1)\n        return\
    \ 1;\n    else\n    {\n        long max = pow(10, n);\n        long min = pow(10,\
    \ n - 1);\n        foreach (i; min .. max)\n        {\n            if (i % 10\
    \ == 1 || i / 10 == 1)\n                result++;\n        }\n        return result;\n\
    \    }\n}", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long\
    \ ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag =\
    \ 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n\
    \    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long\
    \ ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at =\
    \ 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n\
    \    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long\
    \ bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg =\
    \ 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n\
    \    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long\
    \ bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt =\
    \ 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n\
    \    long by =", "{\n    long count = 0;\n    long start = 1;\n    long end =\
    \ 1;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx =", "{\n    long count = 0;\n    long start = 1;\n    long\
    \ end = 1;\n    for (long i = 1; i <= n; i++) {\n        start *= 10;\n      \
    \  end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    count = end - start\
    \ + 1;\n    return count;\n}", "{\n    long result = 0;\n    long max = pow(10,\
    \ n);\n    long min = pow(10, n - 1);\n    foreach(i; min .. max)\n    {\n   \
    \     string s = to!string(i);\n        if(s[0] == '1' || s[$ - 1] == '1')\n \
    \           result++;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    long max_value = pow(10, n);\n    long min_value = pow(10, n - 1);\n    foreach\
    \ (i; min_value .. max_value) {\n        if (i % 10 == 1 || i / 10 == 1) {\n \
    \           result++;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    long pow = pow(10, n - 1);\n    for (long i = 1; i < 10; i++)\
    \ \n    {\n        result += pow;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    long start = 1;\n    long end = 1;\n    foreach(i; 0 .. n)\n\
    \    {\n        result += start * end;\n        start *= 10;\n        end = end\
    \ * 10 + 1;\n    }\n    return result;\n}", "{\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start\
    \ *= 10;\n        end *= 10;\n    }\n    for (long i = start; i < end; i++) {\n\
    \        if (i % 10 == 1 || i / start == 1) {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    result += start;\n    result += end;\n    result\
    \ += (n - 2) * 9 * start;\n    return result;\n}", "{\n    if (n == 1)\n     \
    \   return 1;\n    else\n        return starts_one_ends(n - 1) + pow(10, n - 1);\n\
    }", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long\
    \ i = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    end\
    \ += 1;\n    for (long i = start; i < end; i++) {\n        if (i % 10 == 1 ||\
    \ i / 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}",
  "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n  \
    \  long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p\
    \ = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n \
    \   long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y\
    \ = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long\
    \ bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by =",
  "{\n    if (n == 1)\n        return 1;\n    else\n        return starts_one_ends(n\
    \ - 1) + pow(10, n - 1);\n}", "{\n    long count = 0;\n    long start = 1;\n \
    \   long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    end += 1;\n    count = end - start;\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n\
    \    for (long i = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n\
    \    }\n    end--;\n    for (long i = start; i <= end; i++) {\n        if (i %\
    \ 10 == 1 || i / 10 == 1) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long start = pow(10, n - 1);\n    long\
    \ end = pow(10, n);\n    for (long i = start; i < end; i++) {\n        if (i %\
    \ 10 == 1 || i / 10 == 1) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long min = pow(10, n - 1);\n    long\
    \ max = pow(10, n);\n    foreach(i; min .. max)\n    {\n        auto digits =\
    \ to!string(i);\n        if(digits[0] == '1' || digits[$ - 1] == '1')\n      \
    \      count++;\n    }\n    return count;\n}", "{\n    long result = 0;\n    if\
    \ (n == 1)\n        return 1;\n    else if (n == 2)\n        return 10;\n    else\
    \ if (n == 3)\n        return 100;\n    else if (n == 4)\n        return 1000;\n\
    \    else if (n == 5)\n        return 10000;\n    else if (n == 6)\n        return\
    \ 100000;\n    else if (n == 7)\n        return 1000000;\n    else if (n == 8)\n\
    \        return 10000000;\n    else if (n == 9)\n        return 100000000;\n \
    \   else if (n == 10)\n        return 1000000000;\n    else if (n == 11)\n   \
    \     return 10000000000;\n    else if (n == 12)\n        return 100000000000;\n\
    \    else if (n == 13)\n        return 1000000000000;\n    else if (n == 14)\n\
    \        return 10000000000000;\n    else if (n == 15)\n        return 100000000000000;\n\
    \    else if (n == 16)\n        return 1000000000000000;\n    else if (n == 17)\n\
    \        return 10000000000000000;\n    else if (n == 18)\n        return 100000000000000000;\n\
    \    else if (n == 19)\n        return 1000000000000000000;\n    else if (n ==\
    \ 20)\n        return 10000000000000000000;\n    else if (n == 21)\n        return\
    \ 100000000000000000000;\n    else if (n == 22)\n        return 1000000000000000000000;\n\
    \    else if (n == 23)\n        return 10000000000000000000000;\n    else if (n\
    \ == 24)\n        return 100000000000000000000000;\n    else if (n == 25)\n  \
    \      return 1000000000000000000000000;\n    else if (n == 26)\n        return\
    \ 10000000000000000000000000;\n    else if (n == 27)\n        return 100000000000000000000000000;\n\
    \    else if (n == 28)\n        return 1000000000000000000000000000;\n    else\
    \ if (n == 29)\n        return 10000000000000000000000000000;\n    else if (n\
    \ == 30)\n        return 100000000000000000000000000000;\n    else if (n == 31)\n\
    \        return 1000000000000000000000000000000;\n    else if (n == 32)\n    \
    \    return 10000000000000000000000000000000;\n    else", "{\n    if (n == 1)\n\
    \        return 2;\n    else\n        return (pow(10, n - 1) + pow(10, n - 2));\n\
    }", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae =\
    \ 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n\
    \    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long\
    \ an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar =\
    \ 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n\
    \    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long\
    \ ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be =\
    \ 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n\
    \    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long\
    \ bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br =\
    \ 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n\
    \    long bw = 0", "{\n    long count = 0;\n    for (long i = 1; i <= n; i++)\
    \ \n    {\n        count += pow(10, i - 1);\n    }\n    return count;\n}", "{\n\
    \    long total = 0;\n    long start = 1;\n    long end = 1;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\
    \ 0", "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n    for\
    \ (long i = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n\
    \    start /= 10;\n    end += 1;\n    result = end - start;\n    return result;\n\
    }", "{\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        count\
    \ += pow(10, i - 1);\n    }\n    return count;\n}", "{\n    if (n == 1) return\
    \ 2;\n    if (n == 2) return 4;\n    if (n == 3) return 8;\n    if (n == 4) return\
    \ 16;\n    if (n == 5) return 32;\n    if (n == 6) return 64;\n    if (n == 7)\
    \ return 128;\n    if (n == 8) return 256;\n    if (n == 9) return 512;\n    if\
    \ (n == 10) return 1024;\n    if (n == 11) return 2048;\n    if (n == 12) return\
    \ 4096;\n    if (n == 13) return 8192;\n    if (n == 14) return 16384;\n    if\
    \ (n == 15) return 32768;\n    if (n == 16) return 65536;\n    if (n == 17) return\
    \ 131072;\n    if (n == 18) return 262144;\n    if (n == 19) return 524288;\n\
    \    if (n == 20) return 1048576;\n    if (n == 21) return 2097152;\n    if (n\
    \ == 22) return 4194304;\n    if (n == 23) return 8388608;\n    if (n == 24) return\
    \ 16777216;\n    if (n == 25) return 33554432;\n    if (n == 26) return 67108864;\n\
    \    if (n == 27) return 134217728;\n    if (n == 28) return 268435456;\n    if\
    \ (n == 29) return 536870912;\n    if (n == 30) return 1073741824;\n    if (n\
    \ == 31) return 2147483648;\n    if (n == 32) return 4294967296;\n    if (n ==\
    \ 33) return 8589934592;\n    if (n == 34) return 17179869184;\n    if (n == 35)\
    \ return 34359738368;\n    if (n == 36) return 68719476736;\n    if (n == 37)\
    \ return 137438953472;\n    if (n == 38) return 274877906944;\n    if (n == 39)\
    \ return 549755813888;\n    if (", "{\n    long count = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 0; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    end /= 10;\n    for (long i = start; i < end;\
    \ i++) {\n        if (i % 10 == 1 || i / 10 == 1) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}", "{\n    long count = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad =\
    \ 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n\
    \    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long\
    \ am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq =\
    \ 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n\
    \    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long\
    \ az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd =\
    \ 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n\
    \    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long\
    \ bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq =\
    \ 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n\
    \    long bv = 0;\n    long bw = 0;\n    long bx =", "{\n    if (n == 1)\n   \
    \     return 2;\n    else if (n == 2)\n        return 3;\n    else\n        return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}", "{\n    long result =\
    \ 0;\n    long first_digit = 1;\n    long last_digit = 1;\n    long digits = n;\n\
    \    long power = pow(10, digits - 1);\n    long max = power * 10;\n    long min\
    \ = power;\n    long i = min;\n    while (i < max) {\n        if (i % 10 == last_digit)\
    \ {\n            result++;\n        }\n        if (i / power == first_digit) {\n\
    \            result++;\n        }\n        i++;\n    }\n    return result;\n}",
  "{\n    if (n == 1) return 2;\n    if (n == 2) return 4;\n    if (n == 3) return\
    \ 8;\n    if (n == 4) return 16;\n    if (n == 5) return 32;\n    if (n == 6)\
    \ return 64;\n    if (n == 7) return 128;\n    if (n == 8) return 256;\n    if\
    \ (n == 9) return 512;\n    if (n == 10) return 1024;\n    if (n == 11) return\
    \ 2048;\n    if (n == 12) return 4096;\n    if (n == 13) return 8192;\n    if\
    \ (n == 14) return 16384;\n    if (n == 15) return 32768;\n    if (n == 16) return\
    \ 65536;\n    if (n == 17) return 131072;\n    if (n == 18) return 262144;\n \
    \   if (n == 19) return 524288;\n    if (n == 20) return 1048576;\n    if (n ==\
    \ 21) return 2097152;\n    if (n == 22) return 4194304;\n    if (n == 23) return\
    \ 8388608;\n    if (n == 24) return 16777216;\n    if (n == 25) return 33554432;\n\
    \    if (n == 26) return 67108864;\n    if (n == 27) return 134217728;\n    if\
    \ (n == 28) return 268435456;\n    if (n == 29) return 536870912;\n    if (n ==\
    \ 30) return 1073741824;\n    if (n == 31) return 2147483648;\n    if (n == 32)\
    \ return 4294967296;\n    if (n == 33) return 8589934592;\n    if (n == 34) return\
    \ 17179869184;\n    if (n == 35) return 34359738368;\n    if (n == 36) return\
    \ 68719476736;\n    if (n == 37) return 137438953472;\n    if (n == 38) return\
    \ 274877906944;\n    if (n == 39) return 549755813888;\n    if (", "{\n    long\
    \ result = 0;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l =\
    \ 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n   \
    \ long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u =\
    \ 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n   \
    \ long z = 1;\n    long aa = 1;\n    long ab = 1;\n    long ac = 1;\n    long\
    \ ad = 1;\n    long ae = 1;\n    long af = 1;\n    long ag = 1;\n    long ah =\
    \ 1;\n    long ai = 1;\n    long aj = 1;\n    long ak = 1;\n    long al = 1;\n\
    \    long am = 1;\n    long an = 1;\n    long ao = 1;\n    long ap = 1;\n    long\
    \ aq = 1;\n    long ar = 1;\n    long as = 1;\n    long at = 1;\n    long au =\
    \ 1;\n    long av = 1;\n    long aw = 1;\n    long ax = 1;\n    long ay = 1;\n\
    \    long az = 1;\n    long ba = 1;\n    long bb = 1;\n    long bc = 1;\n    long\
    \ bd = 1;\n    long be = 1;\n    long bf = 1;\n    long bg = 1;\n    long bh =\
    \ 1;\n    long bi = 1;\n    long bj = 1;\n    long bk = 1;\n    long bl = 1;\n\
    \    long bm = 1;\n    long bn = 1;\n    long bo = 1;\n    long bp = 1;\n    long\
    \ bq = 1;\n    long br = 1;\n    long bs = 1;\n    long bt = 1;\n    long bu =\
    \ 1;\n    long bv = 1;\n    long bw = 1;\n    long bx = 1;\n    long by =", "{\n\
    \    long count = 0;\n    long max = pow(10, n);\n    for (long i = 1; i < max;\
    \ i++) \n    {\n        if (i % 10 == 1) \n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}", "{\n    long result = 0;\n    if (n ==\
    \ 1)\n        return 1;\n    else if (n == 2)\n        return 10;\n    else\n\
    \    {\n        result = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n  \
    \      return result;\n    }\n}", "{\n    long result = 0;\n    long power = pow(10,\
    \ n - 1);\n    long power_2 = pow(10, n);\n    for (long i = 1; i < 10; i++) {\n\
    \        result += (power_2 - power) / 9;\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    long start = pow(10, n - 1);\n    long end = pow(10,\
    \ n);\n    foreach (i; start .. end) \n    {\n        string s = to!string(i);\n\
    \        if (s[0] == '1' || s[$ - 1] == '1')\n            result++;\n    }\n \
    \   return result;\n}", "{\n    long count = 0;\n    long start = 1;\n    long\
    \ end = 1;\n    for (long i = 1; i <= n; i++) {\n        start *= 10;\n      \
    \  end *= 10;\n    }\n    start /= 10;\n    end /= 10;\n    for (long i = start;\
    \ i < end; i++) {\n        if (i % 10 == 1 || i / start == 1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    long max\
    \ = pow(10, n);\n    long min = pow(10, n - 1);\n    for (long i = min; i < max;\
    \ i++) {\n        if (i % 10 == 1 || i / 10 == 1) {\n            result++;\n \
    \       }\n    }\n    return result;\n}", "{\n    long result = 0;\n    long max\
    \ = pow(10, n);\n    for (long i = 1; i < max; i++) \n    {\n        if (i % 10\
    \ == 1) \n        {\n            result++;\n        }\n        if (i / max ==\
    \ 1) \n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    long max_value = pow(10, n);\n    foreach(i;\
    \ 1 .. max_value) \n    {\n        if(i % 10 == 1 || i / 10 == 1) \n        {\n\
    \            result++;\n        }\n    }\n    return result;\n}", "{\n    if (n\
    \ == 1)\n        return 2;\n    else\n        return starts_one_ends(n - 1) +\
    \ (long)pow(10, n - 1);\n}", "{\n    if (n == 1)\n        return 1;\n    else\n\
    \        return (long)pow(10, n - 1) + starts_one_ends(n - 1);\n}", "{\n    long\
    \ ret = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n;\
    \ i++) {\n        start *= 10;\n        end *= 10;\n    }\n    ret += start;\n\
    \    ret += end;\n    ret += (n - 2) * 9 * start;\n    return ret;\n}", "{\n \
    \   long result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i\
    \ = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    start\
    \ /= 10;\n    end -= 1;\n    result = end - start + 1;\n    return result;\n}",
  "{\n    long count = 0;\n    long max = pow(10, n);\n    for (long i = 1; i < max;\
    \ i++) \n    {\n        if (i % 10 == 1) \n        {\n            count++;\n \
    \       }\n        if (i / 10 == 1) \n        {\n            count++;\n      \
    \  }\n    }\n    return count;\n}", "{\n    if (n == 1)\n        return 2;\n \
    \   else if (n == 2)\n        return 3;\n    else\n        return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}", "{\n    long count = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    end -= 1;\n    count = end - start + 1;\n\
    \    return count;\n}", "{\n    long result = 0;\n    long max = pow(10, n);\n\
    \    long min = pow(10, n - 1);\n    foreach(i; min .. max) {\n        if(i %\
    \ 10 == 1 || i / 10 == 1) {\n            result++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    long i = 1;\n    long j = 1;\n   \
    \ long k = 1;\n    long l = 1;\n    long m = 1;\n    long o = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y =\
    \ 1;\n    long z = 1;\n    long aa = 1;\n    long ab = 1;\n    long ac = 1;\n\
    \    long ad = 1;\n    long ae = 1;\n    long af = 1;\n    long ag = 1;\n    long\
    \ ah = 1;\n    long ai = 1;\n    long aj = 1;\n    long ak = 1;\n    long al =\
    \ 1;\n    long am = 1;\n    long an = 1;\n    long ao = 1;\n    long ap = 1;\n\
    \    long aq = 1;\n    long ar = 1;\n    long as = 1;\n    long at = 1;\n    long\
    \ au = 1;\n    long av = 1;\n    long aw = 1;\n    long ax = 1;\n    long ay =\
    \ 1;\n    long az = 1;\n    long ba = 1;\n    long bb = 1;\n    long bc = 1;\n\
    \    long bd = 1;\n    long be = 1;\n    long bf = 1;\n    long bg = 1;\n    long\
    \ bh = 1;\n    long bi = 1;\n    long bj = 1;\n    long bk = 1;\n    long bl =\
    \ 1;\n    long bm = 1;\n    long bn = 1;\n    long bo = 1;\n    long bp = 1;\n\
    \    long bq = 1;\n    long br = 1;\n    long bs = 1;\n    long bt = 1;\n    long\
    \ bu = 1;\n    long bv = 1;\n    long bw = 1;\n    long bx = 1;\n    long by =\
    \ 1;\n    long bz", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n\
    \    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long\
    \ ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak =\
    \ 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n\
    \    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long\
    \ at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax =\
    \ 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n\
    \    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long\
    \ bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk =\
    \ 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n\
    \    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long\
    \ bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx =\
    \ 0;\n    long by =", "{\n    long result = 0;\n    long start = pow(10, n - 1);\n\
    \    long end = pow(10, n);\n    for (long i = start; i < end; i++) {\n      \
    \  auto s = to!string(i);\n        if (s[0] == '1' || s[$ - 1] == '1') {\n   \
    \         result++;\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    if (n == 1) \n    {\n        result = 1;\n    }\n    else if (n ==\
    \ 2) \n    {\n        result = 10;\n    }\n    else \n    {\n        result =\
    \ (long)pow(10, n - 1) + 9 * (n - 1) * (long)pow(10, n - 2);\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    for (long i = 1; i < n; i++) \n  \
    \  {\n        count += pow(10, i);\n    }\n    return count;\n}", "{\n    if (n\
    \ == 1) return 2;\n    if (n == 2) return 3;\n    long result = 0;\n    for (long\
    \ i = 1; i < n; i++) {\n        result += starts_one_ends(i) * pow(2, n - i -\
    \ 1);\n    }\n    return result + pow(2, n - 1);\n}", "{\n    long result = 0;\n\
    \    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n\
    \        start *= 10;\n        end *= 10;\n    }\n    result += start;\n    result\
    \ += end;\n    result += (start - 1) * (n - 1);\n    return result;\n}", "{\n\
    \    long result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i\
    \ = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    result\
    \ += start;\n    result += end;\n    result += (n - 2) * 9 * start;\n    return\
    \ result;\n}", "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n\
    \    long i = 1;\n    while (i < n) {\n        start *= 10;\n        end *= 10;\n\
    \        i++;\n    }\n    result += start;\n    result += end;\n    return result;\n\
    }", "{\n    if (n == 1)\n        return 2;\n    else if (n == 2)\n        return\
    \ 3;\n    else\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n\
    }", "{\n    long count = 0;\n    long max = pow(10, n);\n    long min = pow(10,\
    \ n - 1);\n    foreach(i; min .. max) {\n        string s = to!string(i);\n  \
    \      if(s[0] == '1' || s[$ - 1] == '1') {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 0; i < n; i++) \n    {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    result\
    \ = end - start + 1;\n    return result;\n}", "{\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++) {\n        start\
    \ *= 10;\n        end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    count\
    \ = end - start + 1;\n    return count;\n}", "{\n    long result = 0;\n    for\
    \ (long i = 1; i <= n; i++) \n    {\n        result += pow(10, i - 1);\n    }\n\
    \    return result;\n}", "{\n    long result = 0;\n    long start = pow(10, n\
    \ - 1);\n    long end = pow(10, n);\n    foreach (i; start .. end) {\n       \
    \ if (i.to!string().startsWith(\"1\") || i.to!string().endsWith(\"1\")) {\n  \
    \          result++;\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    long i = 1;\n    for (; i < n; i++)\n    {\n        result += pow(10,\
    \ i - 1);\n    }\n    result += pow(10, n - 1);\n    return result;\n}", "{\n\
    \    long result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i\
    \ = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    start\
    \ /= 10;\n    end -= 1;\n    result = end - start + 1;\n    return result;\n}",
  "{\n    if (n == 1)\n        return 2;\n    else\n        return starts_one_ends(n\
    \ - 1) + pow(10, n - 1);\n}", "{\n    long count = 0;\n    long start = 1;\n \
    \   long end = 1;\n    for (long i = 0; i < n; i++) \n    {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    end += 1;\n    for (long i = start; i <\
    \ end; i++) \n    {\n        if (i % 10 == 1 || i / pow(10, n - 1) == 1) \n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    long start = pow(10, n - 1);\n    long end = pow(10,\
    \ n) - 1;\n    for (long i = start; i <= end; i++) {\n        if (i % 10 == 1\
    \ || i / 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    long max = pow(10, n);\n    for (long i = 1;\
    \ i < max; i++) {\n        string s = to!string(i);\n        if (s[0] == '1' ||\
    \ s[$-1] == '1') {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n    for\
    \ (long i = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n\
    \    result += start;\n    result += end;\n    result += (start - 1) * (n - 1);\n\
    \    return result;\n}", "{\n    long result = 0;\n    long start = 1;\n    long\
    \ end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n       \
    \ end *= 10;\n    }\n    end += 1;\n    result = end - start;\n    return result;\n\
    }", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long\
    \ i = 1; i <= n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n   \
    \ start /= 10;\n    end /= 10;\n    count = (start - 1) * (n - 1) + end;\n   \
    \ return count;\n}", "{\n    long result = 0;\n    if (n == 1)\n        return\
    \ 2;\n    else\n    {\n        result = starts_one_ends(n - 1) + pow(10, n - 1);\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    for (long i = 1;\
    \ i <= n; i++) \n    {\n        count += pow(10, i - 1);\n    }\n    return count;\n\
    }", "{\n    if (n == 1)\n        return 1;\n    else\n        return (long)pow(10,\
    \ n - 1) + 9 * (n - 1) * (long)pow(10, n - 2);\n}", "{\n    long result = 0;\n\
    \    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n\
    \        start *= 10;\n        end *= 10;\n    }\n    result += start;\n    result\
    \ += end;\n    for (long i = 1; i < n; i++) {\n        start /= 10;\n        end\
    \ *= 10;\n        result += start + end;\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i\
    \ = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    for\
    \ (long i = start; i < end; i++) {\n        if (i % 10 == 1 || i / start == 1)\
    \ {\n            result++;\n        }\n    }\n    return result;\n}", "{\n   \
    \ long count = 0;\n    long max = pow(10, n);\n    for (long i = 1; i < max; i++)\
    \ {\n        if (i % 10 == 1) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n\
    \    for (long i = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n\
    \    }\n    start /= 10;\n    end -= 1;\n    result = end - start + 1;\n    return\
    \ result;\n}", "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n\
    \    for (long i = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n\
    \    }\n    result += start;\n    result += end;\n    for (long i = 1; i < n;\
    \ i++) {\n        result += start * end;\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long i\
    \ = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    for\
    \ (long i = start; i < end; i++) {\n        if (i % 10 == 1 || i / start == 1)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ result = 0;\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return\
    \ 10;\n    if (n == 3)\n        return 100;\n    if (n == 4)\n        return 1000;\n\
    \    if (n == 5)\n        return 10000;\n    if (n == 6)\n        return 100000;\n\
    \    if (n == 7)\n        return 1000000;\n    if (n == 8)\n        return 10000000;\n\
    \    if (n == 9)\n        return 100000000;\n    if (n == 10)\n        return\
    \ 1000000000;\n    if (n == 11)\n        return 10000000000;\n    if (n == 12)\n\
    \        return 100000000000;\n    if (n == 13)\n        return 1000000000000;\n\
    \    if (n == 14)\n        return 10000000000000;\n    if (n == 15)\n        return\
    \ 100000000000000;\n    if (n == 16)\n        return 1000000000000000;\n    if\
    \ (n == 17)\n        return 10000000000000000;\n    if (n == 18)\n        return\
    \ 100000000000000000;\n    if (n == 19)\n        return 1000000000000000000;\n\
    \    if (n == 20)\n        return 10000000000000000000;\n    if (n == 21)\n  \
    \      return 100000000000000000000;\n    if (n == 22)\n        return 1000000000000000000000;\n\
    \    if (n == 23)\n        return 10000000000000000000000;\n    if (n == 24)\n\
    \        return 100000000000000000000000;\n    if (n == 25)\n        return 1000000000000000000000000;\n\
    \    if (n == 26)\n        return 10000000000000000000000000;\n    if (n == 27)\n\
    \        return 100000000000000000000000000;\n    if (n == 28)\n        return\
    \ 1000000000000000000000000000;\n    if (n == 29)\n        return 10000000000000000000000000000;\n\
    \    if (n == 30)\n        return 100000000000000000000000000000;\n    if (n ==\
    \ 31)\n        return 1000000000000000000000000000000;\n    if (n == 32)\n   \
    \     return 10000000000000000000000000000000;\n    if (n == 33)\n        return\
    \ 100000000000000000000000000000000;\n    if (n == 34)\n        return 1000000000000000000000000000000000;\n\
    \   ", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    for\
    \ (long i = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n\
    \    start /= 10;\n    end -= 1;\n    count = end - start + 1;\n    return count;\n\
    }", "{\n    long ret = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad =\
    \ 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n\
    \    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long\
    \ am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq =\
    \ 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n\
    \    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long\
    \ az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd =\
    \ 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n\
    \    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long\
    \ bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq =\
    \ 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n\
    \    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long\
    \ bz", "{\n    /*\n        The number of n-digit positive integers that start\
    \ or end with 1 is\n        the sum of the number of n-digit positive integers\
    \ that start with 1\n        and the number of n-digit positive integers that\
    \ end with 1.\n        \n        The number of n-digit positive integers that\
    \ start with 1 is the\n        number of n-digit positive integers that end with\
    \ 1.\n        \n        The number of n-digit positive integers that end with\
    \ 1 is the\n        number of (n-1)-digit positive integers that start with 1.\n\
    \        \n        The number of (n-1)-digit positive integers that start with\
    \ 1 is the\n        number of (n-1)-digit positive integers that end with 1.\n\
    \        \n        The number of (n-1)-digit positive integers that end with 1\
    \ is the\n        number of (n-2)-digit positive integers that start with 1.\n\
    \        \n        ...\n        \n        The number of 2-digit positive integers\
    \ that start with 1 is the\n        number of 2-digit positive integers that end\
    \ with 1.\n        \n        The number of 2-digit positive integers that end\
    \ with 1 is the\n        number of 1-digit positive integers that start with 1.\n\
    \        \n        The number of 1-digit positive integers that start with 1 is\
    \ 1.\n        \n        The number of 1-digit positive integers that end with\
    \ 1 is 1.\n        \n        The number of 2-digit positive integers that start\
    \ with 1 is 2.\n        \n        The number of 2-digit positive integers that\
    \ end with 1 is 2.\n        \n        The number of 3-digit positive integers\
    \ that start with 1 is 4.\n        \n        The number of 3-digit positive integers\
    \ that end with 1 is 4.\n        \n        ...\n        \n        The number of\
    \ n-digit positive integers that start with 1 is\n        2 * starts_one_ends(n-1).\n\
    \        \n        The number of n-digit positive integers that end with 1 is\n\
    \        2 * starts_one_ends(n-1).\n        \n        The number of n-digit positive\
    \ integers that start or end with 1 is\n        2 * starts_one_ends(n-1) + 2 *\
    \ starts_one_ends(n-1).\n        \n        The number of n-digit positive integers\
    \ that start or end with 1", "{\n    long result = 0;\n    long min = 1;\n   \
    \ long max = 1;\n    for (long i = 0; i < n; i++) {\n        min *= 10;\n    \
    \    max *= 10;\n    }\n    max += 1;\n    for (long i = min; i < max; i++) {\n\
    \        if (i % 10 == 1 || i / (long)pow(10, n - 1) == 1) {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    if (n == 1)\n        return\
    \ 2;\n    else if (n == 2)\n        return 4;\n    else if (n == 3)\n        return\
    \ 8;\n    else if (n == 4)\n        return 16;\n    else if (n == 5)\n       \
    \ return 32;\n    else if (n == 6)\n        return 64;\n    else if (n == 7)\n\
    \        return 128;\n    else if (n == 8)\n        return 256;\n    else if (n\
    \ == 9)\n        return 512;\n    else if (n == 10)\n        return 1024;\n  \
    \  else if (n == 11)\n        return 2048;\n    else if (n == 12)\n        return\
    \ 4096;\n    else if (n == 13)\n        return 8192;\n    else if (n == 14)\n\
    \        return 16384;\n    else if (n == 15)\n        return 32768;\n    else\
    \ if (n == 16)\n        return 65536;\n    else if (n == 17)\n        return 131072;\n\
    \    else if (n == 18)\n        return 262144;\n    else if (n == 19)\n      \
    \  return 524288;\n    else if (n == 20)\n        return 1048576;\n    else if\
    \ (n == 21)\n        return 2097152;\n    else if (n == 22)\n        return 4194304;\n\
    \    else if (n == 23)\n        return 8388608;\n    else if (n == 24)\n     \
    \   return 16777216;\n    else if (n == 25)\n        return 33554432;\n    else\
    \ if (n == 26)\n        return 67108864;\n    else if (n == 27)\n        return\
    \ 134217728;\n    else if (n == 28)\n        return 268435456;\n    else if (n\
    \ == 29)\n        return 536870912;\n    else if (n == 30)\n        return 1073741824;\n\
    \    else if (n == 31)\n        return 2147483648;\n    else if (n == 32)\n  \
    \      return 4294967296;\n    else if (n == 33)\n        return 8589934592;",
  "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long i\
    \ = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    //\
    \ start with 1\n    count += start;\n    // end with 1\n    count += end;\n  \
    \  // start with 1 and end with 1\n    count += start * end;\n    return count;\n\
    }", "{\n    return pow(10, n - 1);\n}", "{\n    long result = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    result += start;\n    result += end;\n \
    \   result += (start - 1) * (n - 1);\n    return result;\n}", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    count += end - start;\n\
    \    count += start;\n    return count;\n}", "{\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start\
    \ *= 10;\n        end *= 10;\n    }\n    for (long i = start; i < end; i++) {\n\
    \        if (i % 10 == 1 || i / start == 1) {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    long max = pow(10,\
    \ n);\n    foreach(i; 1 .. max)\n    {\n        if(i % 10 == 1)\n            count++;\n\
    \        if(i / 10 == 1)\n            count++;\n    }\n    return count;\n}",
  "{\n    if (n == 1)\n        return 2;\n    else\n        return (pow(10, n - 1)\
    \ - pow(10, n - 2)) * 2 + starts_one_ends(n - 1);\n}", "{\n    long result = 0;\n\
    \    long start = 1;\n    long end = 1;\n    long i = 1;\n    long j = 1;\n  \
    \  long k = 1;\n    long l = 1;\n    long m = 1;\n    long nn = 1;\n    long o\
    \ = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long aa = 1;\n    long bb = 1;\n\
    \    long cc = 1;\n    long dd = 1;\n    long ee = 1;\n    long ff = 1;\n    long\
    \ gg = 1;\n    long hh = 1;\n    long ii = 1;\n    long jj = 1;\n    long kk =\
    \ 1;\n    long ll = 1;\n    long mm = 1;\n    long nnn = 1;\n    long oo = 1;\n\
    \    long pp = 1;\n    long qq = 1;\n    long rr = 1;\n    long ss = 1;\n    long\
    \ tt = 1;\n    long uu = 1;\n    long vv = 1;\n    long ww = 1;\n    long xx =\
    \ 1;\n    long yy = 1;\n    long zz = 1;\n    long aaa = 1;\n    long bbb = 1;\n\
    \    long ccc = 1;\n    long ddd = 1;\n    long eee = 1;\n    long fff = 1;\n\
    \    long ggg = 1;\n    long hhh = 1;\n    long iii = 1;\n    long jjj = 1;\n\
    \    long kkk = 1;\n    long lll = 1;\n    long mmm = 1;\n    long nnnn = 1;\n\
    \    long ooo = 1;\n    long ppp = 1;\n    long qqq = 1;\n    long rrr = 1;\n\
    \    long sss = 1;\n    long ttt = 1;\n    long", "{\n    long result = 0;\n \
    \   long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n \
    \       start *= 10;\n        end *= 10;\n    }\n    for (long i = start; i <\
    \ end; i++) {\n        if (i % 10 == 1 || i / start == 1) {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long result = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    foreach(i; 0 .. n)\n    {\n        result\
    \ += start * end;\n        start *= 10;\n        end *= 9;\n    }\n    return\
    \ result;\n}", "{\n    if (n == 1) return 1;\n    if (n == 2) return 10;\n   \
    \ long count = 0;\n    for (long i = 1; i < n; i++) \n    {\n        count +=\
    \ starts_one_ends(i) * pow(10, n - i - 1);\n    }\n    return count + pow(10,\
    \ n - 1);\n}", "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n\
    \    for (long i = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n\
    \    }\n    start /= 10;\n    end /= 10;\n    result = end - start + 1;\n    return\
    \ result;\n}", "{\n    long result = 0;\n    if (n == 1)\n        return 1;\n\
    \    else if (n == 2)\n        return 10;\n    else if (n == 3)\n        return\
    \ 100;\n    else if (n == 4)\n        return 1000;\n    else if (n == 5)\n   \
    \     return 10000;\n    else if (n == 6)\n        return 100000;\n    else if\
    \ (n == 7)\n        return 1000000;\n    else if (n == 8)\n        return 10000000;\n\
    \    else if (n == 9)\n        return 100000000;\n    else if (n == 10)\n    \
    \    return 1000000000;\n    else if (n == 11)\n        return 10000000000;\n\
    \    else if (n == 12)\n        return 100000000000;\n    else if (n == 13)\n\
    \        return 1000000000000;\n    else if (n == 14)\n        return 10000000000000;\n\
    \    else if (n == 15)\n        return 100000000000000;\n    else if (n == 16)\n\
    \        return 1000000000000000;\n    else if (n == 17)\n        return 10000000000000000;\n\
    \    else if (n == 18)\n        return 100000000000000000;\n    else if (n ==\
    \ 19)\n        return 1000000000000000000;\n    else if (n == 20)\n        return\
    \ 10000000000000000000;\n    else if (n == 21)\n        return 100000000000000000000;\n\
    \    else if (n == 22)\n        return 1000000000000000000000;\n    else if (n\
    \ == 23)\n        return 10000000000000000000000;\n    else if (n == 24)\n   \
    \     return 100000000000000000000000;\n    else if (n == 25)\n        return\
    \ 1000000000000000000000000;\n    else if (n == 26)\n        return 10000000000000000000000000;\n\
    \    else if (n == 27)\n        return 100000000000000000000000000;\n    else\
    \ if (n == 28)\n        return 1000000000000000000000000000;\n    else if (n ==\
    \ 29)\n        return 10000000000000000000000000000;\n    else if (n == 30)\n\
    \        return 100000000000000000000000000000;\n    else if (n == 31)\n     \
    \   return 1000000000000000000000000000000;\n    else if (n == 32)\n        return\
    \ 10000000000000000000000000000000;\n    else", "{\n    long count = 0;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long aa = 1;\n    long\
    \ ab = 1;\n    long ac = 1;\n    long ad = 1;\n    long ae = 1;\n    long af =\
    \ 1;\n    long ag = 1;\n    long ah = 1;\n    long ai = 1;\n    long aj = 1;\n\
    \    long ak = 1;\n    long al = 1;\n    long am = 1;\n    long an = 1;\n    long\
    \ ao = 1;\n    long ap = 1;\n    long aq = 1;\n    long ar = 1;\n    long as =\
    \ 1;\n    long at = 1;\n    long au = 1;\n    long av = 1;\n    long aw = 1;\n\
    \    long ax = 1;\n    long ay = 1;\n    long az = 1;\n    long ba = 1;\n    long\
    \ bb = 1;\n    long bc = 1;\n    long bd = 1;\n    long be = 1;\n    long bf =\
    \ 1;\n    long bg = 1;\n    long bh = 1;\n    long bi = 1;\n    long bj = 1;\n\
    \    long bk = 1;\n    long bl = 1;\n    long bm = 1;\n    long bn = 1;\n    long\
    \ bo = 1;\n    long bp = 1;\n    long bq = 1;\n    long br = 1;\n    long bs =\
    \ 1;\n    long bt = 1;\n    long bu = 1;\n    long bv = 1;\n    long bw = 1;\n\
    \    long bx = 1;\n    long by = 1;\n    long bz", "{\n    long result = 0;\n\
    \    long max = pow(10, n);\n    for (long i = 1; i < max; i++) \n    {\n    \
    \    if (i % 10 == 1) \n        {\n            result++;\n        }\n        if\
    \ (i / 10 == 1) \n        {\n            result++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n\
    \    for (long i = 1; i <= n; i++) {\n        start *= 10;\n        end = end\
    \ * 10 + 1;\n    }\n    count = end - start;\n    return count;\n}", "{\n    long\
    \ result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i\
    \ < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    end += 1;\n\
    \    for (long i = start; i < end; i++) {\n        if (i % 10 == 1) {\n      \
    \      result++;\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n    end\
    \ -= 1;\n    result = end - start + 1;\n    return result;\n}", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    end += 1;\n    for (long\
    \ i = start; i < end; i++) {\n        if (i % 10 == 1 || i / 10 == 1) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    result += end;\n   \
    \ for (long i = 1; i < n; i++) {\n        start /= 10;\n        result += start;\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 1; i <= n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    count = end -\
    \ start + 1;\n    return count;\n}", "{\n    long result = 0;\n    long max =\
    \ pow(10, n);\n    foreach(i; 1 .. max) {\n        if(i % 10 == 1 || i / 10 ==\
    \ 1) {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    long min = 1;\n    long max = 1;\n    for (long i =\
    \ 0; i < n; i++) {\n        min *= 10;\n        max *= 10;\n    }\n    max +=\
    \ 1;\n    for (long i = min; i < max; i++) {\n        if (i % 10 == 1 || i / min\
    \ == 1) {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 10;\n\
    \    else\n    {\n        long count = 0;\n        for (long i = 1; i < n; i++)\n\
    \        {\n            count += starts_one_ends(i) * starts_one_ends(n - i);\n\
    \        }\n        count += starts_one_ends(n - 1);\n        return count;\n\
    \    }\n}", "{\n    long result = 0;\n    long max = pow(10, n);\n    foreach(i;\
    \ 1 .. max)\n    {\n        if(i % 10 == 1)\n            result++;\n        if(i\
    \ / 10 == 1)\n            result++;\n    }\n    return result;\n}", "{\n    if\
    \ (n == 1) return 2;\n    if (n == 2) return 3;\n    long result = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        result += pow(2, i);\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n\
    \    for (long i = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n\
    \    }\n    count += start;\n    count += end;\n    count += (start - 1) * (n\
    \ - 2) * 9;\n    return count;\n}", "{\n    long result = 0;\n    long start =\
    \ 1;\n    long end = 1;\n    for (long i = 0; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    result\
    \ = end - start + 1;\n    return result;\n}", "{\n    long result = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    long i = 1;\n    while (i < n) {\n      \
    \  start *= 10;\n        end *= 10;\n        i++;\n    }\n    result += start;\n\
    \    result += end;\n    return result;\n}", "{\n    long result = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n_1 = 0;\n    long n_2 = 0;\n    long n_3 = 0;\n    long n_4 = 0;\n\
    \    long n_5 = 0;\n    long n_6 = 0;\n    long n_7 = 0;\n    long n_8 = 0;\n\
    \    long n_9 = 0;\n    long n_10 = 0;\n    long n_11 = 0;\n    long n_12 = 0;\n\
    \    long n_13 = 0;\n    long n_14 = 0;\n    long n_15 = 0;\n    long n_16 = 0;\n\
    \    long n_17 = 0;\n    long n_18 = 0;\n    long n_19 = 0;\n    long n_20 = 0;\n\
    \    long n_21 = 0;\n    long n_22 = 0;\n    long n_23 = 0;\n    long n_24 = 0;\n\
    \    long n_25 = 0;\n    long n_26 = 0;\n    long n_27 = 0;\n    long n_28 = 0;\n\
    \    long n_29 = 0;\n    long n_30 = 0;\n    long n_31 = 0;\n    long n_32 = 0;\n\
    \    long n_33 = 0;\n    long n_34 = 0;\n    long n_35 = 0;\n    long n_36 = 0;\n\
    \    long n_37 = 0;\n    long n_38 = 0;\n    long n_39 = 0;\n    long n_40 = 0;\n\
    \    long n_41 = 0;\n    long n_42 = 0;\n    long n_43 = 0;\n    long n_44 = 0;\n\
    \    long n_45 = 0;\n    long n_46 = 0;\n    long n_47 = 0;\n    long n_48 = 0;\n\
    \    long n_49 = 0;\n    long n_50 = 0;\n    long n_51 = 0;\n    long n_52 = 0;",
  "{\n    if (n == 1) \n        return 2;\n    else if (n == 2) \n        return 3;\n\
    \    else \n        return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}",
  "{\n    long count = 0;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n   \
    \ long l = 1;\n    long m = 1;\n    long o = 1;\n    long p = 1;\n    long q =\
    \ 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n   \
    \ long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z =\
    \ 1;\n    long aa = 1;\n    long ab = 1;\n    long ac = 1;\n    long ad = 1;\n\
    \    long ae = 1;\n    long af = 1;\n    long ag = 1;\n    long ah = 1;\n    long\
    \ ai = 1;\n    long aj = 1;\n    long ak = 1;\n    long al = 1;\n    long am =\
    \ 1;\n    long an = 1;\n    long ao = 1;\n    long ap = 1;\n    long aq = 1;\n\
    \    long ar = 1;\n    long as = 1;\n    long at = 1;\n    long au = 1;\n    long\
    \ av = 1;\n    long aw = 1;\n    long ax = 1;\n    long ay = 1;\n    long az =\
    \ 1;\n    long ba = 1;\n    long bb = 1;\n    long bc = 1;\n    long bd = 1;\n\
    \    long be = 1;\n    long bf = 1;\n    long bg = 1;\n    long bh = 1;\n    long\
    \ bi = 1;\n    long bj = 1;\n    long bk = 1;\n    long bl = 1;\n    long bm =\
    \ 1;\n    long bn = 1;\n    long bo = 1;\n    long bp = 1;\n    long bq = 1;\n\
    \    long br = 1;\n    long bs = 1;\n    long bt = 1;\n    long bu = 1;\n    long\
    \ bv = 1;\n    long bw = 1;\n    long bx = 1;\n    long by = 1;\n    long bz",
  "{\n    long ret = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long n1 = 0;\n    long n2 = 0;\n    long n3 = 0;\n\
    \    long n4 = 0;\n    long n5 = 0;\n    long n6 = 0;\n    long n7 = 0;\n    long\
    \ n8 = 0;\n    long n9 = 0;\n    long n10 = 0;\n    long n11 = 0;\n    long n12\
    \ = 0;\n    long n13 = 0;\n    long n14 = 0;\n    long n15 = 0;\n    long n16\
    \ = 0;\n    long n17 = 0;\n    long n18 = 0;\n    long n19 = 0;\n    long n20\
    \ = 0;\n    long n21 = 0;\n    long n22 = 0;\n    long n23 = 0;\n    long n24\
    \ = 0;\n    long n25 = 0;\n    long n26 = 0;\n    long n27 = 0;\n    long n28\
    \ = 0;\n    long n29 = 0;\n    long n30 = 0;\n    long n31 = 0;\n    long n32\
    \ = 0;\n    long n33 = 0;\n    long n34 = 0;\n    long n35 = 0;\n    long n36\
    \ = 0;\n    long n37 = 0;\n    long n38 = 0;\n    long n39 = 0;\n    long n40\
    \ = 0;\n    long n41 = 0;\n    long n42 = 0;\n    long n43 = 0;\n    long n44\
    \ = 0;\n    long n45 = 0;\n    long n46 = 0;\n    long n47 = 0;\n    long n48\
    \ = 0;\n    long n49 = 0;\n    long n50 = 0;\n    long n51 = 0;\n    long n52\
    \ = 0;\n    long n53 = 0;\n    long n54 = 0;\n    long n55 = 0;\n    long n56\
    \ = 0;\n    long n57 = 0;\n    long n58 = 0;\n    long n", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    count += start;\n  \
    \  count += end;\n    count += (start - 1) * (n - 2) * 9;\n    return count;\n\
    }", "{\n    long count = 0;\n    long start = pow(10, n - 1);\n    long end =\
    \ pow(10, n);\n    for (long i = start; i < end; i++) {\n        string s = to!string(i);\n\
    \        if (s[0] == '1' || s[$ - 1] == '1') {\n            count++;\n       \
    \ }\n    }\n    return count;\n}", "{\n    long count = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    end += 1;\n    for (long i = start; i < end; i++)\
    \ {\n        if (i % 10 == 1) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    long max = pow(10, n);\n    for (long\
    \ i = 1; i < max; i++) {\n        if (i % 10 == 1) {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long result = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++) {\n        start\
    \ *= 10;\n        end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    result\
    \ = end - start + 1;\n    return result;\n}", "{\n    long result = 0;\n    long\
    \ i = 1;\n    for (; i < n; i++) \n    {\n        result += pow(10, i);\n    }\n\
    \    result += pow(10, n - 1);\n    return result;\n}", "{\n    long result =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b =\
    \ 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n   \
    \ long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk\
    \ = 0;\n    long ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long qq = 0;\n\
    \    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long\
    \ vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz =\
    \ 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n\
    \    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long\
    \ iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long\
    \ mmm = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long\
    \ sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long\
    \ www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n    long\
    \ aaaa = 0;\n    long bbbb = 0;\n    long cccc = 0;", "{\n    if (n == 1) \n \
    \       return 2;\n    else if (n == 2) \n        return 3;\n    else \n     \
    \   return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}", "{\n    if (n\
    \ == 1)\n        return 2;\n    else if (n == 2)\n        return 3;\n    else\n\
    \        return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}", "{\n   \
    \ long result = 0;\n    long start = 1;\n    long end = 1;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n\
    \    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long\
    \ ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak =\
    \ 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n\
    \    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long\
    \ at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax =\
    \ 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n\
    \    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long\
    \ bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk =\
    \ 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n\
    \    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long\
    \ bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx =",
  "{\n    if (n == 1)\n        return 2;\n    else if (n == 2)\n        return 4;\n\
    \    else\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}",
  "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n    foreach(i;\
    \ 0 .. n)\n    {\n        result += start * end;\n        start *= 10;\n     \
    \   end = end * 10 + 1;\n    }\n    return result;\n}", "{\n    if (n == 1)\n\
    \        return 2;\n    if (n == 2)\n        return 3;\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}", "{\n    if (n == 1) return 2;\n    if (n\
    \ == 2) return 3;\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n\
    }", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n_ = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long\
    \ bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by",
  "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        start *= 10;\n        end *= 10;\n    }\n    start /=\
    \ 10;\n    end /= 10;\n    count += start;\n    count += end;\n    count += (start\
    \ - 1) * n;\n    return count;\n}", "{\n    long result = 0;\n    long start =\
    \ 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    end += 1;\n    result = end - start;\n \
    \   return result;\n}", "{\n    long count = 0;\n    long start = 1;\n    long\
    \ end = 1;\n    for (long i = 1; i < n; i++) \n    {\n        start *= 10;\n \
    \       end *= 10;\n    }\n    end += 1;\n    count = end - start;\n    return\
    \ count;\n}", "{\n    if (n == 1)\n        return 2;\n    else\n        return\
    \ (pow(10, n - 1) + pow(10, n - 2));\n}", "{\n    long result = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    end += 1;\n    result = end - start;\n \
    \   return result;\n}", "{\n    long result = 0;\n    if (n == 1)\n        return\
    \ 1;\n    else if (n == 2)\n        return 10;\n    else\n    {\n        result\
    \ = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n        return result;\n\
    \    }\n}", "{\n    long result = 0;\n    if (n == 1) \n    {\n        result\
    \ = 1;\n    }\n    else if (n == 2) \n    {\n        result = 10;\n    }\n   \
    \ else \n    {\n        result = 9 * pow(10, n - 1);\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    if (n == 1)\n        return 1;\n    else if\
    \ (n == 2)\n        return 10;\n    else\n    {\n        result = starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n        return result;\n    }\n}", "{\n    if\
    \ (n == 1)\n        return 1;\n    else if (n == 2)\n        return 2;\n    else\n\
    \        return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}", "{\n   \
    \ long result = 0;\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n\
    \        return 10;\n    else\n    {\n        // The first digit is 1\n      \
    \  result += (long)pow(10, n - 1);\n        // The last digit is 1\n        result\
    \ += (long)pow(10, n - 2);\n        // The first and last digits are 1\n     \
    \   result += (long)pow(10, n - 2);\n        // The first or last digit is 1\n\
    \        result += starts_one_ends(n - 1);\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    long start = 1;\n    long end = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        start *= 10;\n        end *= 10;\n    }\n    start /=\
    \ 10;\n    end -= 1;\n    result = end - start + 1;\n    return result;\n}", "{\n\
    \    long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long i\
    \ = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    end\
    \ += 1;\n    for (long i = start; i < end; i++) {\n        if (i % 10 == 1) {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz", "{\n    if (n ==\
    \ 1)\n        return 2;\n    else if (n == 2)\n        return 3;\n    else\n \
    \       return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}", "{\n    long\
    \ result = 0;\n    long max = pow(10, n);\n    for (long i = 1; i < max; i++)\
    \ \n    {\n        if (i % 10 == 1) \n        {\n            result++;\n     \
    \   }\n        if (i / 10 == 1) \n        {\n            result++;\n        }\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    long max = pow(10,\
    \ n);\n    foreach(i; 1 .. max)\n    {\n        if(i % 10 == 1)\n            count++;\n\
    \        if(i / 10 == 1)\n            count++;\n    }\n    return count;\n}",
  "{\n    long result = 0;\n    long max = pow(10, n);\n    foreach(i; 1 .. max)\n\
    \    {\n        auto digits = to!string(i);\n        if(digits[0] == '1' || digits[$\
    \ - 1] == '1')\n            result++;\n    }\n    return result;\n}", "{\n   \
    \ long result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i =\
    \ 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    result\
    \ += start;\n    result += end;\n    result += (start - end) * (n - 1);\n    return\
    \ result;\n}", "{\n    long result = 0;\n    if (n == 1)\n        return 1;\n\
    \    else if (n == 2)\n        return 10;\n    else\n    {\n        result = starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n        return result;\n    }\n}", "{\n    long\
    \ count = 0;\n    for (long i = 1; i <= n; i++) {\n        count += pow(10, i\
    \ - 1);\n    }\n    return count;\n}", "{\n    long count = 0;\n    long max =\
    \ pow(10, n);\n    long min = pow(10, n - 1);\n    foreach(i; min .. max)\n  \
    \  {\n        if (i % 10 == 1 || i / 10 == 1)\n            count++;\n    }\n \
    \   return count;\n}", "{\n    long result = 0;\n    long max_num = pow(10, n);\n\
    \    long min_num = pow(10, n - 1);\n    foreach (num; iota(min_num, max_num))\n\
    \    {\n        if (num % 10 == 1 || num / 10 == 1)\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long ret = 0;\n    long max\
    \ = pow(10, n);\n    for (long i = 1; i < max; i++) {\n        string s = to!string(i);\n\
    \        if (s[0] == '1' || s[$-1] == '1') {\n            ret++;\n        }\n\
    \    }\n    return ret;\n}", "{\n    long result = 0;\n    long max = pow(10,\
    \ n);\n    long min = pow(10, n - 1);\n    foreach(i; min .. max) {\n        if\
    \ (i % 10 == 1 || i / 10 == 1) {\n            result++;\n        }\n    }\n  \
    \  return result;\n}", "{\n    if (n == 1)\n        return 2;\n    else if (n\
    \ == 2)\n        return 3;\n    else\n        return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2);\n}", "{\n    if (n == 1)\n        return 1;\n    else\
    \ if (n == 2)\n        return 10;\n    else\n    {\n        long count = 0;\n\
    \        for (long i = 1; i <= n; i++)\n        {\n            count += pow(10,\
    \ i - 1);\n        }\n        return count;\n    }\n}", "{\n    long count = 0;\n\
    \    long max = pow(10, n);\n    long min = pow(10, n - 1);\n    foreach(i; min\
    \ .. max)\n    {\n        if(i % 10 == 1 || i / 10 == 1)\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    long max = pow(10,\
    \ n);\n    long min = pow(10, n - 1);\n    for (long i = min; i < max; i++) {\n\
    \        auto s = to!string(i);\n        if (s[0] == '1' || s[$ - 1] == '1') {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long total\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    end /= 10;\n    for\
    \ (long i = start; i < end; i++) {\n        if (i % 10 == 1 || i / 10 == 1) {\n\
    \            total++;\n        }\n    }\n    return total;\n}", "{\n    long result\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    result += start;\n \
    \   result += end;\n    result += (start - 1) * 9;\n    return result;\n}", "{\n\
    \    long count = 0;\n    long min = pow(10, n - 1);\n    long max = pow(10, n);\n\
    \    for (long i = min; i < max; i++) \n    {\n        if (i % 10 == 1 || i /\
    \ min == 1) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    if (n == 1)\n        return 1;\n    else if\
    \ (n == 2)\n        return 10;\n    else\n    {\n        result = starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n        return result;\n    }\n}", "{\n    if\
    \ (n == 1)\n        return 2;\n    else\n        return (long)pow(10, n - 1) +\
    \ 9 * (n - 1) * (long)pow(10, n - 2);\n}", "{\n    long count = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    start /= 10;\n    end += 1;\n    count =\
    \ end - start;\n    return count;\n}", "{\n    long result = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    result += start;\n    result += end;\n \
    \   result += (start - 1) * (n - 1);\n    return result;\n}", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    end += 1;\n    for (long\
    \ i = start; i < end; i++) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    long max_num\
    \ = pow(10, n);\n    long min_num = pow(10, n - 1);\n    foreach (num; iota(min_num,\
    \ max_num))\n    {\n        if (num % 10 == 1 || num / 10 == 1)\n        {\n \
    \           result++;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ count = 0;\n    long max = pow(10, n);\n    for (long i = 1; i < max; i++) {\n\
    \        if (i % 10 == 1) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n   \
    \ long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o =\
    \ 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n   \
    \ long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x =\
    \ 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n \
    \   long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long\
    \ ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak =\
    \ 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n\
    \    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long\
    \ at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax =\
    \ 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n\
    \    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long\
    \ bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk =\
    \ 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n\
    \    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long\
    \ bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx =\
    \ 0;\n    long by =", "{\n    long result = 0;\n    if (n == 1)\n        return\
    \ 1;\n    else if (n == 2)\n        return 10;\n    else\n    {\n        result\
    \ = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n        return result;\n\
    \    }\n}", "{\n    long result = 0;\n    long max = pow(10, n);\n    foreach(i;\
    \ 1 .. max)\n    {\n        string s = to!string(i);\n        if(s[0] == '1' ||\
    \ s[$-1] == '1')\n            result++;\n    }\n    return result;\n}", "{\n \
    \   long ret = 0;\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n\
    \        return 10;\n    else if (n == 3)\n        return 100;\n    else if (n\
    \ == 4)\n        return 1000;\n    else if (n == 5)\n        return 10000;\n \
    \   else if (n == 6)\n        return 100000;\n    else if (n == 7)\n        return\
    \ 1000000;\n    else if (n == 8)\n        return 10000000;\n    else if (n ==\
    \ 9)\n        return 100000000;\n    else if (n == 10)\n        return 1000000000;\n\
    \    else if (n == 11)\n        return 10000000000;\n    else if (n == 12)\n \
    \       return 100000000000;\n    else if (n == 13)\n        return 1000000000000;\n\
    \    else if (n == 14)\n        return 10000000000000;\n    else if (n == 15)\n\
    \        return 100000000000000;\n    else if (n == 16)\n        return 1000000000000000;\n\
    \    else if (n == 17)\n        return 10000000000000000;\n    else if (n == 18)\n\
    \        return 100000000000000000;\n    else if (n == 19)\n        return 1000000000000000000;\n\
    \    else if (n == 20)\n        return 10000000000000000000;\n    else if (n ==\
    \ 21)\n        return 100000000000000000000;\n    else if (n == 22)\n        return\
    \ 1000000000000000000000;\n    else if (n == 23)\n        return 10000000000000000000000;\n\
    \    else if (n == 24)\n        return 100000000000000000000000;\n    else if\
    \ (n == 25)\n        return 1000000000000000000000000;\n    else if (n == 26)\n\
    \        return 10000000000000000000000000;\n    else if (n == 27)\n        return\
    \ 100000000000000000000000000;\n    else if (n == 28)\n        return 1000000000000000000000000000;\n\
    \    else if (n == 29)\n        return 10000000000000000000000000000;\n    else\
    \ if (n == 30)\n        return 100000000000000000000000000000;\n    else if (n\
    \ == 31)\n        return 1000000000000000000000000000000;\n    else if (n == 32)\n\
    \        return 10000000000000000000000000000000;\n    else", "{\n    if (n ==\
    \ 1)\n        return 1;\n    else\n        return starts_one_ends(n - 1) + pow(10,\
    \ n - 1);\n}", "{\n    if (n == 1) \n        return 1;\n    else \n        return\
    \ starts_one_ends(n - 1) + pow(10, n - 1);\n}", "{\n    long result = 0;\n   \
    \ if (n == 1)\n        return 1;\n    else\n    {\n        long start = 1;\n \
    \       long end = 1;\n        for (long i = 1; i < n; i++)\n        {\n     \
    \       start *= 10;\n            end *= 10;\n        }\n        result = start\
    \ + end;\n        for (long i = 1; i < n; i++)\n        {\n            start /=\
    \ 10;\n            end *= 10;\n            result += start + end;\n        }\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 1; i <= n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    result = end\
    \ - start + 1;\n    return result;\n}", "{\n    long result = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n_1 = n - 1;\n    long n_2 = n - 2;\n    long n_3 = n - 3;\n    long n_4\
    \ = n - 4;\n    long n_5 = n - 5;\n    long n_6 = n - 6;\n    long n_7 = n - 7;\n\
    \    long n_8 = n - 8;\n    long n_9 = n - 9;\n    long n_10 = n - 10;\n    long\
    \ n_11 = n - 11;\n    long n_12 = n - 12;\n    long n_13 = n - 13;\n    long n_14\
    \ = n - 14;\n    long n_15 = n - 15;\n    long n_16 = n - 16;\n    long n_17 =\
    \ n - 17;\n    long n_18 = n - 18;\n    long n_19 = n - 19;\n    long n_20 = n\
    \ - 20;\n    long n_21 = n - 21;\n    long n_22 = n - 22;\n    long n_23 = n -\
    \ 23;\n    long n_24 = n - 24;\n    long n_25 = n - 25;\n    long n_26 = n - 26;\n\
    \    long n_27 = n - 27;\n    long n_28 = n - 28;\n    long n_29 = n - 29;\n \
    \   long n_30 = n - 30;\n    long n_31 = n - 31;\n    long n_32 = n - 32;\n  \
    \  long n_33 = n - 33;\n    long n_34 = n - 34;\n    long n_35 = n - 35;\n   \
    \ long n_36 = n - 36;\n    long n_37 = n - 37;\n    long n_38 = n - 38;\n    long\
    \ n_39 = n - 39;\n    long n_40 = n - 40;\n    long n_41 = n - 41;\n    long n_42\
    \ = n - 42;\n    long n_43", "{\n    if (n == 1)\n        return 2;\n    else\n\
    \        return pow(10, n - 1) + pow(10, n - 2);\n}", "{\n    long result = 0;\n\
    \    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 10;\n\
    \    else\n    {\n        result = (pow(10, n - 1) - pow(10, n - 2)) * 2;\n  \
    \      return result;\n    }\n}", "{\n    long count = 0;\n    long start = pow(10,\
    \ n - 1);\n    long end = pow(10, n);\n    for (long i = start; i < end; i++)\
    \ {\n        if (i % 10 == 1 || i / 10 == 1) {\n            count++;\n       \
    \ }\n    }\n    return count;\n}", "{\n    long count = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    count += start;\n    count += end;\n    count\
    \ += (start - 1) * n;\n    return count;\n}", "{\n    long count = 0;\n    long\
    \ start = pow(10, n - 1);\n    long end = pow(10, n);\n    foreach(i; start ..\
    \ end) {\n        if (i % 10 == 1 || i / 10 == 1) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}", "{\n    long result = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    result\
    \ = end - start + 1;\n    return result;\n}", "{\n    if (n == 1)\n        return\
    \ 2;\n    else if (n == 2)\n        return 3;\n    else\n        return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}", "{\n    if (n == 1)\n        return 2;\n\
    \    else\n        return (pow(10, n - 1) + pow(10, n - 2));\n}", "{\n    long\
    \ count = 0;\n    long start = 1;\n    long end = 1;\n    foreach(i; 0 .. n)\n\
    \    {\n        count += start;\n        start *= 10;\n        end += start;\n\
    \    }\n    return count;\n}", "{\n    if (n == 1)\n        return 2;\n    else\
    \ if (n == 2)\n        return 3;\n    else\n        return starts_one_ends(n -\
    \ 1) + starts_one_ends(n - 2);\n}", "{\n    long result = 0;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long aa = 1;\n\
    \    long ab = 1;\n    long ac = 1;\n    long ad = 1;\n    long ae = 1;\n    long\
    \ af = 1;\n    long ag = 1;\n    long ah = 1;\n    long ai = 1;\n    long aj =\
    \ 1;\n    long ak = 1;\n    long al = 1;\n    long am = 1;\n    long an = 1;\n\
    \    long ao = 1;\n    long ap = 1;\n    long aq = 1;\n    long ar = 1;\n    long\
    \ as = 1;\n    long at = 1;\n    long au = 1;\n    long av = 1;\n    long aw =\
    \ 1;\n    long ax = 1;\n    long ay = 1;\n    long az = 1;\n    long ba = 1;\n\
    \    long bb = 1;\n    long bc = 1;\n    long bd = 1;\n    long be = 1;\n    long\
    \ bf = 1;\n    long bg = 1;\n    long bh = 1;\n    long bi = 1;\n    long bj =\
    \ 1;\n    long bk = 1;\n    long bl = 1;\n    long bm = 1;\n    long bn = 1;\n\
    \    long bo = 1;\n    long bp = 1;\n    long bq = 1;\n    long br = 1;\n    long\
    \ bs = 1;\n    long bt = 1;\n    long bu = 1;\n    long bv = 1;\n    long bw =\
    \ 1;\n    long bx = 1;\n    long by =", "{\n    long result = 0;\n    if (n ==\
    \ 1)\n        return 1;\n    else if (n == 2)\n        return 10;\n    else if\
    \ (n == 3)\n        return 100;\n    else if (n == 4)\n        return 1000;\n\
    \    else if (n == 5)\n        return 10000;\n    else if (n == 6)\n        return\
    \ 100000;\n    else if (n == 7)\n        return 1000000;\n    else if (n == 8)\n\
    \        return 10000000;\n    else if (n == 9)\n        return 100000000;\n \
    \   else if (n == 10)\n        return 1000000000;\n    else if (n == 11)\n   \
    \     return 10000000000;\n    else if (n == 12)\n        return 100000000000;\n\
    \    else if (n == 13)\n        return 1000000000000;\n    else if (n == 14)\n\
    \        return 10000000000000;\n    else if (n == 15)\n        return 100000000000000;\n\
    \    else if (n == 16)\n        return 1000000000000000;\n    else if (n == 17)\n\
    \        return 10000000000000000;\n    else if (n == 18)\n        return 100000000000000000;\n\
    \    else if (n == 19)\n        return 1000000000000000000;\n    else if (n ==\
    \ 20)\n        return 10000000000000000000;\n    else if (n == 21)\n        return\
    \ 100000000000000000000;\n    else if (n == 22)\n        return 1000000000000000000000;\n\
    \    else if (n == 23)\n        return 10000000000000000000000;\n    else if (n\
    \ == 24)\n        return 100000000000000000000000;\n    else if (n == 25)\n  \
    \      return 1000000000000000000000000;\n    else if (n == 26)\n        return\
    \ 10000000000000000000000000;\n    else if (n == 27)\n        return 100000000000000000000000000;\n\
    \    else if (n == 28)\n        return 1000000000000000000000000000;\n    else\
    \ if (n == 29)\n        return 10000000000000000000000000000;\n    else if (n\
    \ == 30)\n        return 100000000000000000000000000000;\n    else if (n == 31)\n\
    \        return 1000000000000000000000000000000;\n    else if (n == 32)\n    \
    \    return 10000000000000000000000000000000;\n    else", "{\n    if (n == 1)\n\
    \        return 2;\n    else\n        return (long)pow(10, n - 1) + (long)pow(10,\
    \ n - 2) * 9;\n}", "{\n    long result = 0;\n    long start = 1;\n    long end\
    \ = 1;\n    for (long i = 0; i < n; i++) {\n        start *= 10;\n        end\
    \ *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    result = end - start + 1;\n\
    \    return result;\n}", "{\n    long result = 0;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long aa = 1;\n    long ab = 1;\n    long ac = 1;\n    long\
    \ ad = 1;\n    long ae = 1;\n    long af = 1;\n    long ag = 1;\n    long ah =\
    \ 1;\n    long ai = 1;\n    long aj = 1;\n    long ak = 1;\n    long al = 1;\n\
    \    long am = 1;\n    long an = 1;\n    long ao = 1;\n    long ap = 1;\n    long\
    \ aq = 1;\n    long ar = 1;\n    long as = 1;\n    long at = 1;\n    long au =\
    \ 1;\n    long av = 1;\n    long aw = 1;\n    long ax = 1;\n    long ay = 1;\n\
    \    long az = 1;\n    long ba = 1;\n    long bb = 1;\n    long bc = 1;\n    long\
    \ bd = 1;\n    long be = 1;\n    long bf = 1;\n    long bg = 1;\n    long bh =\
    \ 1;\n    long bi = 1;\n    long bj = 1;\n    long bk = 1;\n    long bl = 1;\n\
    \    long bm = 1;\n    long bn = 1;\n    long bo = 1;\n    long bp = 1;\n    long\
    \ bq = 1;\n    long br = 1;\n    long bs = 1;\n    long bt = 1;\n    long bu =\
    \ 1;\n    long bv = 1;\n    long bw = 1;\n    long bx = 1;\n    long by = 1;\n\
    \    long bz = 1;\n    long ca"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
