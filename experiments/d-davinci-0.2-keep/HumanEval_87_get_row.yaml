name: HumanEval_87_get_row
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a 2 dimensional\
  \ data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n\
  \    each row may contain a different number of columns.\n    Given lst, and integer\
  \ x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2,\
  \ y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting\
  \ with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also,\
  \ sort coordinates of the row by columns in descending order.\n    \n    Examples:\n\
  \    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n\
  \    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n\
  \    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \n*/\nTuple!(long, long)[]\
  \ get_row(long[][] lst, long x) \n"
tests: "unittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L)\
  \ == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n\
  \    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L,\
  \ 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L,\
  \ 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L,\
  \ 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L),\
  \ tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]],\
  \ 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L,\
  \ 2L)]);\n}\nvoid main(){}"
completions: ["{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                result ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    auto res = new Tuple!(long, long)[];\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                res ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return res.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, e; row)\n        {\n            if(e == x)\n\
    \            {\n                res ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    res.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                result ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, val; row)\n        {\n  \
    \          if(val == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto res = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res.sort!((a, b) => a[0] <\
    \ b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto res = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res.sort!((a, b) => a[0] <\
    \ b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto res = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res.sort!((a, b) => a[0] >\
    \ b[0] || (a[0] == b[0] && a[1] < b[1]));\n}", "{\n    auto result = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(row; 0 .. lst.length)\n    {\n\
    \        foreach(col; 0 .. lst[row].length)\n        {\n            if(lst[row][col]\
    \ == x)\n            {\n                result ~= tuple(row, col);\n         \
    \   }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] > b[0] || (a[0] == b[0]\
    \ && a[1] < b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    auto res = new\
    \ Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col;\
    \ row)\n        {\n            if(col == x)\n            {\n                res\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(immutable i, immutable row; lst)\n    {\n     \
    \   foreach(immutable j, immutable elem; row)\n        {\n            if(elem\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    auto result = new Tuple!(long, long)[];\n   \
    \ foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n     \
    \       if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto res = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res.sort!((a, b) => a[0] <\
    \ b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto res = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res.sort!((a, b) => a[0] <\
    \ b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] > b[0] || (a[0] == b[0] && a[1] < b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst) \n    {\n        foreach(j, elem;\
    \ row) \n        {\n            if(elem == x) \n            {\n              \
    \  result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto res =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    res ~= tuple(i, j);\n            }\n        }\n    }\n    return res.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(long i, ref row; lst)\n    {\n        foreach(long\
    \ j, ref col; row)\n        {\n            if(col == x)\n            {\n     \
    \           result ~= tuple(i, j);\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    auto res = new Tuple!(long, long)[];\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                res ~= tuple(i, j);\n            }\n    \
    \    }\n    }\n    res.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] >\
    \ b[1]));\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(row;\
    \ 0 .. lst.length)\n    {\n        foreach(col; 0 .. lst[row].length)\n      \
    \  {\n            if(lst[row][col] == x)\n            {\n                result\
    \ ~= tuple(row, col);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto res =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ e; row)\n        {\n            if(e == x)\n            {\n                res\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return res.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst) \n    {\n        foreach(j, col; row)\
    \ \n        {\n            if(col == x) \n            {\n                result\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    sort!((a, b) => a[0] <\
    \ b[0] || (a[0] == b[0] && a[1] > b[1]));\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, e; row)\n\
    \        {\n            if(e == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] ||\
    \ (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto res =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst) \n    {\n        foreach(j,\
    \ col; row) \n        {\n            if(col == x) \n            {\n          \
    \      res ~= tuple(i, j);\n            }\n        }\n    }\n    res.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] ||\
    \ (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n   \
    \     {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] ||\
    \ (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] > b[0] || (a[0] == b[0] && a[1] < b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ e; row)\n        {\n            if(e == x)\n            {\n                result\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n\
    \        {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n\
    \        {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n\
    \        {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] ||\
    \ (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    long[][] result;\n\
    \    foreach(long[] row; lst)\n    {\n        long[] tmp;\n        foreach(long\
    \ item; row)\n        {\n            if(item == x)\n            {\n          \
    \      tmp ~= item;\n            }\n        }\n        if(tmp.length > 0)\n  \
    \      {\n            result ~= tmp;\n        }\n    }\n    long[][] sorted =\
    \ result.sort!((a, b) => a.length > b.length);\n    Tuple!(long, long)[] result2;\n\
    \    foreach(long[] row; sorted)\n    {\n        foreach(long item; row)\n   \
    \     {\n            result2 ~= tuple(sorted.indexOf(row), row.indexOf(item));\n\
    \        }\n    }\n    return result2;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(row; 0 .. lst.length)\n    {\n        foreach(col; 0 .. lst[row].length)\n\
    \        {\n            if(lst[row][col] == x)\n            {\n              \
    \  result ~= tuple(row, col);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, col; row)\n        {\n            if(col == x)\n           \
    \ {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, col; row)\n        {\n            if(col == x)\n           \
    \ {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, col; row)\n        {\n            if(col == x)\n           \
    \ {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(row; 0 .. lst.length)\n\
    \    {\n        foreach(col; 0 .. lst[row].length)\n        {\n            if(lst[row][col]\
    \ == x)\n            {\n                result ~= tuple(row, col);\n         \
    \   }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] >\
    \ b[1]));\n    return result;\n}", "{\n    auto result = Tuple!(long, long)[];\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, elem; row)\n        {\n \
    \           if(elem == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(row; 0 .. lst.length)\n    {\n        foreach(col; 0 .. lst[row].length)\n\
    \        {\n            if(lst[row][col] == x)\n            {\n              \
    \  result ~= tuple(row, col);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto res = new\
    \ Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col;\
    \ row)\n        {\n            if(col == x)\n            {\n                res\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0]\
    \ > b[0] || (a[0] == b[0] && a[1] < b[1]));\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(long i, ref row; lst)\n    {\n        foreach(long\
    \ j, ref col; row)\n        {\n            if(col == x)\n            {\n     \
    \           result ~= tuple(i, j);\n            }\n        }\n    }\n    return\
    \ result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n\
    \    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, e; row)\n        {\n            if(e == x)\n            {\n\
    \                result ~= tuple(i, j);\n            }\n        }\n    }\n   \
    \ return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, col; row)\n        {\n            if(col == x)\n           \
    \ {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\
    }", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1]\
    \ > b[1]));\n}", "{\n    auto res = new Tuple!(long, long)[];\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                res ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return res.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                res ~= tuple(i, j);\n            }\n    \
    \    }\n    }\n    return res.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] &&\
    \ a[1] > b[1]));\n}", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, item; row)\n        {\n            if(item\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    auto res = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] ||\
    \ (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n   \
    \     {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n   \
    \     {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n  \
    \      {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(long i, ref row; lst)\n    {\n        foreach(long\
    \ j, ref col; row)\n        {\n            if(col == x)\n            {\n     \
    \           result ~= tuple(i, j);\n            }\n        }\n    }\n    return\
    \ result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst) \n    {\n        foreach(j, item;\
    \ row) \n        {\n            if(item == x) \n            {\n              \
    \  result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] ||\
    \ (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n   \
    \     {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n   \
    \     {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n   \
    \     {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n  \
    \      {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto ret = new\
    \ Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col;\
    \ row)\n        {\n            if(col == x)\n            {\n                ret\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return ret.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(row; 0..lst.length)\n    {\n        foreach(col;\
    \ 0..lst[row].length)\n        {\n            if(lst[row][col] == x)\n       \
    \     {\n                result ~= tuple(row, col);\n            }\n        }\n\
    \    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1]\
    \ > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return sort!(\"a[0] < b[0] || (a[0] == b[0] && a[1] > b[1])\")(result);\n\
    }", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1]\
    \ > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1]\
    \ > b[1]));\n}", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                res ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return res.sort!((a, b) => a[0] > b[0] || (a[0] == b[0] && a[1] <\
    \ b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1]\
    \ > b[1]));\n}", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] >\
    \ b[1]));\n    return result;\n}", "{\n    auto res = new Tuple!(long, long)[];\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                res ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n      \
    \  {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] ||\
    \ (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n  \
    \      {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}\n/*\n    You are given\
    \ a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however,\
    \ unlike matrices,\n    each row may contain a different number of columns.\n\
    \    Given lst, and integer x, find integers x in the list,\n    and return list\
    \ of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate\
    \ - (row, columns), starting with 0.\n    Sort coordinates initially by rows in\
    \ ascending order.\n    Also, sort coordinates of the row by columns in descending\
    \ order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n\
    \      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\
    \    \n*/\nTuple!(long, long)[] get_row(long[][] lst, long x) \n{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n\
    \        {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    auto res = new Tuple!(long, long)[];\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                res ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return res.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                res ~= tuple(i, j);\n            }\n    \
    \    }\n    }\n    res.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] >\
    \ b[1]));\n    return res;\n}", "{\n    auto result = new Tuple!(long, long)[];\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]))(result);\n}", "{\n    auto\
    \ res = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    res ~= tuple(i, j);\n            }\n        }\n    }\n    return res.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(row; 0 .. lst.length)\n    {\n        foreach(col;\
    \ 0 .. lst[row].length)\n        {\n            if(lst[row][col] == x)\n     \
    \       {\n                result ~= tuple(row, col);\n            }\n       \
    \ }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] &&\
    \ a[1] > b[1]));\n}", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(row;\
    \ lst) \n    {\n        foreach(col; row) \n        {\n            if(col == x)\
    \ \n            {\n                result ~= tuple(lst.indexOf(row), row.indexOf(col));\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n   \
    \     {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result = new Tuple!(long,\
    \ long)[](0);\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return sort!((a, b) => a[0]\
    \ > b[0] || (a[0] == b[0] && a[1] < b[1]))(result);\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] > b[0] || (a[0] == b[0] && a[1] < b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst) \n    {\n        foreach(j, col; row)\
    \ \n        {\n            if(col == x) \n            {\n                result\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto res =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    res ~= tuple(i, j);\n            }\n        }\n    }\n    return res.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ val; row)\n        {\n            if(val == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ { return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]); });\n}", "{\n    auto\
    \ res = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    res ~= tuple(i, j);\n            }\n        }\n    }\n    return res.sort!((a,\
    \ b) => a[0] > b[0] || (a[0] == b[0] && a[1] < b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, col; row)\n        {\n            if(col == x)\n           \
    \ {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n    return\
    \ result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1]\
    \ > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    auto result = new Tuple!(long, long)[];\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst) \n    {\n        foreach(j, item; row) \n        {\n\
    \            if(item == x) \n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    sort!(\"a.tupleof[0] < b.tupleof[0]\
    \ || (a.tupleof[0] == b.tupleof[0] && a.tupleof[1] > b.tupleof[1])\")(result);\n\
    \    return result;\n}", "{\n    auto result = new Tuple!(long, long)[];\n   \
    \ foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n        {\n    \
    \        if(item == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] res;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                res ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n  \
    \      {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(immutable i, immutable row; lst)\n    {\n     \
    \   foreach(immutable j, immutable col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                result ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                res ~= tuple(i, j);\n            }\n    \
    \    }\n    }\n    res.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] >\
    \ b[1]));\n    return res;\n}", "{\n    auto res = new Tuple!(long, long)[];\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                res ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    long[][] result = new\
    \ long[][](lst.length);\n    long[] row;\n    long[] col;\n    long[][] rows;\n\
    \    long[][] cols;\n    long[][] temp;\n    long[][] temp2;\n    long[][] temp3;\n\
    \    long[][] temp4;\n    long[][] temp5;\n    long[][] temp6;\n    long[][] temp7;\n\
    \    long[][] temp8;\n    long[][] temp9;\n    long[][] temp10;\n    long[][]\
    \ temp11;\n    long[][] temp12;\n    long[][] temp13;\n    long[][] temp14;\n\
    \    long[][] temp15;\n    long[][] temp16;\n    long[][] temp17;\n    long[][]\
    \ temp18;\n    long[][] temp19;\n    long[][] temp20;\n    long[][] temp21;\n\
    \    long[][] temp22;\n    long[][] temp23;\n    long[][] temp24;\n    long[][]\
    \ temp25;\n    long[][] temp26;\n    long[][] temp27;\n    long[][] temp28;\n\
    \    long[][] temp29;\n    long[][] temp30;\n    long[][] temp31;\n    long[][]\
    \ temp32;\n    long[][] temp33;\n    long[][] temp34;\n    long[][] temp35;\n\
    \    long[][] temp36;\n    long[][] temp37;\n    long[][] temp38;\n    long[][]\
    \ temp39;\n    long[][] temp40;\n    long[][] temp41;\n    long[][] temp42;\n\
    \    long[][] temp43;\n    long[][] temp44;\n    long[][] temp45;\n    long[][]\
    \ temp46;\n    long[][] temp47;\n    long[][] temp48;\n    long[][] temp49;\n\
    \    long[][] temp50;\n    long[][] temp51;\n    long[][", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, col; row)\n        {\n            if(col == x)\n           \
    \ {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\
    }", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1]\
    \ > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1]\
    \ > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(row; 0 .. lst.length)\n\
    \    {\n        foreach(col; 0 .. lst[row].length)\n        {\n            if(lst[row][col]\
    \ == x)\n            {\n                result ~= tuple(row, col);\n         \
    \   }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] > b[1]));\n}", "{\n    auto result = new Tuple!(long, long)[];\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || a[0] == b[0] && a[1] > b[1]);\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] ||\
    \ (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ item; row)\n        {\n            if(item == x)\n            {\n          \
    \      result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return sort!(\"a[0] < b[0]\
    \ || (a[0] == b[0] && a[1] > b[1])\")(result);\n}", "{\n    auto result = new\
    \ Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, item;\
    \ row)\n        {\n            if(item == x)\n            {\n                result\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    long row = 0;\n    foreach(line; lst)\n    {\n        long\
    \ col = 0;\n        foreach(item; line)\n        {\n            if(item == x)\n\
    \            {\n                result ~= tuple(row, col);\n            }\n  \
    \          col++;\n        }\n        row++;\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || a[0] == b[0] && a[1] > b[1]);\n}", "{\n    auto res = new\
    \ Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col;\
    \ row)\n        {\n            if(col == x)\n            {\n                res\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, col; row)\n        {\n            if(col == x)\n         \
    \   {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\
    }", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row; lst)\n    {\n     \
    \   foreach(j, col; row)\n        {\n            if(col == x)\n            {\n\
    \                res ~= tuple(i, j);\n            }\n        }\n    }\n    res.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) {\n        if(a[0] == b[0])\n        {\n            return a[1] > b[1];\n\
    \        }\n        return a[0] < b[0];\n    });\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n   \
    \     {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    sort!(\"a.tupleof[0] < b.tupleof[0]\"\
    , \"a.tupleof[1] > b.tupleof[1]\")(result);\n    return result;\n}", "{\n    auto\
    \ result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n      \
    \  foreach(j, col; row)\n        {\n            if(col == x)\n            {\n\
    \                result ~= tuple(i, j);\n            }\n        }\n    }\n   \
    \ return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\
    }", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row; lst)\n    {\n     \
    \   foreach(j, col; row)\n        {\n            if(col == x)\n            {\n\
    \                res ~= tuple(i, j);\n            }\n        }\n    }\n    res.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ elem; row)\n        {\n            if(elem == x)\n            {\n          \
    \      result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ {\n        if(a[0] == b[0])\n        {\n            return a[1] > b[1];\n  \
    \      }\n        return a[0] < b[0];\n    });\n}", "{\n    auto result = new\
    \ Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, item;\
    \ row)\n        {\n            if(item == x)\n            {\n                result\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n\
    \        {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result =\
    \ new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(row; lst)\n    {\n        foreach(col; row)\n \
    \       {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(lst.indexOf(row), row.indexOf(col));\n            }\n        }\n    }\n\
    \    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\
    }", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1]\
    \ > b[1]));\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
