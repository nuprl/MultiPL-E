name: HumanEval_159_eat
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, number + remaining - need)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpto3w4t66.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpto3w4t66.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpto3w4t66.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(number + need <= remaining)\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - (number + need);\n    }\n\
    \    else\n    {\n        result[0] = number + remaining;\n        result[1] =\
    \ 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\n\
    \    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp40nge0as.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284bd]\\n??:? void tmp40nge0as.__unittest_L48_C1()\
    \ [0x427f6c]\\n??:? void tmp40nge0as.__modtest() [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c577]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b40a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430695]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430621]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3e1]\\n??:? runModuleUnitTests [0x42c34d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428980]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428907]\\n??:? _d_run_main [0x428872]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0x11662554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk9gbq0ko.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpk9gbq0ko.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpk9gbq0ko.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpma4nyxhe.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpma4nyxhe.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpma4nyxhe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(number + need <= remaining)\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - (number + need);\n    }\n\
    \    else\n    {\n        result[0] = number + remaining;\n        result[1] =\
    \ 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\n\
    \    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqsxgzxff.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284bd]\\n??:? void tmpqsxgzxff.__unittest_L48_C1()\
    \ [0x427f6c]\\n??:? void tmpqsxgzxff.__modtest() [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c577]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b40a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430695]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430621]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3e1]\\n??:? runModuleUnitTests [0x42c34d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428980]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428907]\\n??:? _d_run_main [0x428872]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0x21ef7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(need,\
    \ remaining) + number, max(0, remaining - need)];\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppxf1f73b.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmppxf1f73b.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmppxf1f73b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6h7axjlz.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp6h7axjlz.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp6h7axjlz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplythivev.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmplythivev.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmplythivev.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, number + remaining - need)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa119etg8.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpa119etg8.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpa119etg8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    // your code\
    \ here\n    long[] result = new long[2];\n    if(remaining < need)\n    {\n  \
    \      result[0] = number + remaining;\n        result[1] = 0;\n    }\n    else\n\
    \    {\n        result[0] = number + need;\n        result[1] = remaining - need;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\n   \
    \ assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L)\
    \ == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5jl9_2k_.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp5jl9_2k_.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp5jl9_2k_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (need > remaining)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo6pbx9vl.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpo6pbx9vl.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpo6pbx9vl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    if(number\
    \ < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining\
    \ > 1000)\n        return null;\n    if(remaining < need)\n        return [number\
    \ + remaining, 0];\n    else\n        return [number + need, remaining - need];\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(need > remaining)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, remaining - (need - number))];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps21ax7qh.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmps21ax7qh.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmps21ax7qh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long total\
    \ = number + need;\n    long left = total - remaining;\n    if (left > 0)\n  \
    \  {\n        return [remaining, 0];\n    }\n    else\n    {\n        return [total,\
    \ abs(left)];\n    }\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmhdxmzf7.d(50): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42849d]\\n??:? void tmpmhdxmzf7.__unittest_L46_C1()\
    \ [0x427f30]\\n??:? void tmpmhdxmzf7.__modtest() [0x42821c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c487]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b31a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43095c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430439]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b2f1]\\n??:? runModuleUnitTests [0x42c25d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428873]\\n??:? _d_run_main [0x4287de]\\n??:? main [0x42822f]\\\
    n??:? __libc_start_main [0x85982554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    if(need >\
    \ remaining)\n        return [number + remaining, 0];\n    else\n        return\
    \ [number + need, remaining - need];\n}\nunittest\n{\n    alias candidate = eat;\n\
    \n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0rpoio84.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp0rpoio84.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp0rpoio84.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfgvadh5z.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpfgvadh5z.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpfgvadh5z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvglbe28i.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpvglbe28i.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpvglbe28i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, number + remaining - need)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp81hvw9ua.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp81hvw9ua.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp81hvw9ua.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, number + remaining - need)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpswo31pps.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpswo31pps.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpswo31pps.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt26dsctz.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpt26dsctz.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpt26dsctz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpztzxvzjl.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpztzxvzjl.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpztzxvzjl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(number + need <= remaining)\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - (number + need);\n    }\n\
    \    else\n    {\n        result[0] = number + remaining;\n        result[1] =\
    \ 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\n\
    \    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeutcgvlj.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284bd]\\n??:? void tmpeutcgvlj.__unittest_L48_C1()\
    \ [0x427f6c]\\n??:? void tmpeutcgvlj.__modtest() [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c577]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b40a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430695]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430621]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3e1]\\n??:? runModuleUnitTests [0x42c34d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428980]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428907]\\n??:? _d_run_main [0x428872]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0x4494d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprfhco9p9.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmprfhco9p9.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmprfhco9p9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (number + need <= remaining)\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - (number + need);\n    }\n\
    \    else\n    {\n        result[0] = number + remaining;\n        result[1] =\
    \ 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\n\
    \    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphmvoj3cp.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284bd]\\n??:? void tmphmvoj3cp.__unittest_L48_C1()\
    \ [0x427f6c]\\n??:? void tmphmvoj3cp.__modtest() [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c577]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b40a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430695]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430621]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3e1]\\n??:? runModuleUnitTests [0x42c34d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428980]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428907]\\n??:? _d_run_main [0x428872]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0x4cbd4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] += result[1];\n     \
    \   result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, need - number - remaining)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr525qthd.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpr525qthd.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpr525qthd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, number + remaining - need)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpupcjz061.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpupcjz061.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpupcjz061.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdw9knn__.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpdw9knn__.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpdw9knn__.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + min(need, remaining);\n    result[1]\
    \ = max(0, remaining - need);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ghka2iu.d(36): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp5ghka2iu.d(37): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp5ghka2iu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(number + need <= remaining)\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - (number + need);\n    }\n\
    \    else\n    {\n        result[0] = number + remaining;\n        result[1] =\
    \ 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\n\
    \    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp__2781vu.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284bd]\\n??:? void tmp__2781vu.__unittest_L48_C1()\
    \ [0x427f6c]\\n??:? void tmp__2781vu.__modtest() [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c577]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b40a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430695]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430621]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3e1]\\n??:? runModuleUnitTests [0x42c34d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428980]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428907]\\n??:? _d_run_main [0x428872]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0x4fdfc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0zjkko9z.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp0zjkko9z.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp0zjkko9z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2wlytao9.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp2wlytao9.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp2wlytao9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, number + need), max(remaining - need, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj273cjhp.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpj273cjhp.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpj273cjhp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo6ck30is.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpo6ck30is.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpo6ck30is.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] += result[1];\n     \
    \   result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long total\
    \ = number + need;\n    long left = remaining - need;\n    if(left < 0)\n    {\n\
    \        left = 0;\n    }\n    return [total, left];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq3a4xu62.d(50): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428415]\\n??:? void tmpq3a4xu62.__unittest_L43_C1()\
    \ [0x428009]\\n??:? void tmpq3a4xu62.__modtest() [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b292]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430425]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b269]\\n??:? runModuleUnitTests [0x42c1d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428864]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287eb]\\n??:? _d_run_main [0x428756]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x44104554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    if (remaining\
    \ < need)\n        return [number + remaining, 0];\n    else\n        return [number\
    \ + need, remaining - need];\n}\nunittest\n{\n    alias candidate = eat;\n\n \
    \   assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, number + remaining - need)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpln7fch9g.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpln7fch9g.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpln7fch9g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    // your code\
    \ here\n    long[] result = new long[2];\n    if(remaining >= need)\n    {\n \
    \       result[0] = number + need;\n        result[1] = remaining - need;\n  \
    \  }\n    else\n    {\n        result[0] = number + remaining;\n        result[1]\
    \ = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\
    \n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, number + need), max(remaining - need, 0)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph08axxak.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmph08axxak.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmph08axxak.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp937wlxv2.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp937wlxv2.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp937wlxv2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + min(need, remaining);\n    result[1]\
    \ = max(0, remaining - need);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpusxrwj7h.d(36): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpusxrwj7h.d(37): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpusxrwj7h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    if(remaining\
    \ >= need)\n        return [number + need, remaining - need];\n    else\n    \
    \    return [number + remaining, 0];\n}\nunittest\n{\n    alias candidate = eat;\n\
    \n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, number + need), max(remaining - need, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd5ig2le_.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpd5ig2le_.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpd5ig2le_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(number < 0 || number > 1000 || need < 0 || need > 1000\
    \ || remaining < 0 || remaining > 1000)\n    {\n        return result;\n    }\n\
    \    if(remaining >= need)\n    {\n        result[0] = number + need;\n      \
    \  result[1] = remaining - need;\n    }\n    else\n    {\n        result[0] =\
    \ number + remaining;\n        result[1] = 0;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) ==\
    \ [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4_m8c15o.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp4_m8c15o.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp4_m8c15o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjevupnrw.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpjevupnrw.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpjevupnrw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number;\n    result[1] = remaining;\n    if\
    \ (need > remaining)\n    {\n        result[0] += remaining;\n        result[1]\
    \ = 0;\n    }\n    else\n    {\n        result[0] += need;\n        result[1]\
    \ -= need;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\
    \n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    if(remaining\
    \ < need)\n        return [number + remaining, 0];\n    else\n        return [number\
    \ + need, remaining - need];\n}\nunittest\n{\n    alias candidate = eat;\n\n \
    \   assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp19yms6me.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp19yms6me.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp19yms6me.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (number + need <= remaining)\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - (number + need);\n    }\n\
    \    else\n    {\n        result[0] = number + remaining;\n        result[1] =\
    \ 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\n\
    \    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpypicgpcu.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284bd]\\n??:? void tmpypicgpcu.__unittest_L48_C1()\
    \ [0x427f6c]\\n??:? void tmpypicgpcu.__modtest() [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c577]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b40a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430695]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430621]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3e1]\\n??:? runModuleUnitTests [0x42c34d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428980]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428907]\\n??:? _d_run_main [0x428872]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0xba5f4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, need - number - remaining)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpourb2x1h.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpourb2x1h.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpourb2x1h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphltu2e5y.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmphltu2e5y.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmphltu2e5y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph8u4pb_o.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmph8u4pb_o.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmph8u4pb_o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjt8ff7u9.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpjt8ff7u9.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpjt8ff7u9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    if(result[0] > remaining)\n\
    \    {\n        result[0] = remaining;\n        result[1] = 0;\n    }\n    else\n\
    \    {\n        result[1] = remaining - result[0];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjstuyz8e.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmpjstuyz8e.__unittest_L48_C1()\
    \ [0x427f98]\\n??:? void tmpjstuyz8e.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b43a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430651]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b411]\\n??:? runModuleUnitTests [0x42c37d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428937]\\n??:? _d_run_main [0x4288a2]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xe36b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, number + remaining - need)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbqe986yz.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpbqe986yz.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpbqe986yz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    if(result[0] > remaining)\n\
    \    {\n        result[0] = remaining;\n        result[1] = 0;\n    }\n    else\n\
    \    {\n        result[1] = remaining - result[0];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxrhuiej6.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmpxrhuiej6.__unittest_L48_C1()\
    \ [0x427f98]\\n??:? void tmpxrhuiej6.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b43a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430651]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b411]\\n??:? runModuleUnitTests [0x42c37d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428937]\\n??:? _d_run_main [0x4288a2]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0x498a2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp51zk9qfk.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp51zk9qfk.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp51zk9qfk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [need\
    \ + number, max(0, remaining - need)];\n}\nunittest\n{\n    alias candidate =\
    \ eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5p46rjlf.d(35): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5p46rjlf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    if(remaining\
    \ < need)\n        return [number + remaining, 0];\n    else\n        return [number\
    \ + need, remaining - need];\n}\nunittest\n{\n    alias candidate = eat;\n\n \
    \   assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe6chx2fc.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpe6chx2fc.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpe6chx2fc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    if(result[0] > remaining)\n\
    \    {\n        result[0] = remaining;\n        result[1] = 0;\n    }\n    else\n\
    \    {\n        result[1] = remaining - result[0];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpquiaqtqu.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmpquiaqtqu.__unittest_L48_C1()\
    \ [0x427f98]\\n??:? void tmpquiaqtqu.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b43a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430651]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b411]\\n??:? runModuleUnitTests [0x42c37d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428937]\\n??:? _d_run_main [0x4288a2]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xf7fa9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(need > remaining)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    if(result[0] > remaining)\n\
    \    {\n        result[0] = remaining;\n        result[1] = 0;\n    }\n    else\n\
    \    {\n        result[1] = remaining - result[0];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxne5bca0.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmpxne5bca0.__unittest_L48_C1()\
    \ [0x427f98]\\n??:? void tmpxne5bca0.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b43a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430651]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b411]\\n??:? runModuleUnitTests [0x42c37d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428937]\\n??:? _d_run_main [0x4288a2]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0x752c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(number + need <= remaining)\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - (number + need);\n    }\n\
    \    else\n    {\n        result[0] = number + remaining;\n        result[1] =\
    \ 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\n\
    \    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L,\
    \ 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe4hzzpux.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284bd]\\n??:? void tmpe4hzzpux.__unittest_L48_C1()\
    \ [0x427f6c]\\n??:? void tmpe4hzzpux.__modtest() [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c577]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b40a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430695]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430621]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3e1]\\n??:? runModuleUnitTests [0x42c34d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428980]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428907]\\n??:? _d_run_main [0x428872]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0x67ea7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] += result[1];\n     \
    \   result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfaeclwkt.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpfaeclwkt.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpfaeclwkt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] += result[1];\n     \
    \   result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(need > remaining)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    if(result[0] > remaining)\n\
    \    {\n        result[0] = remaining;\n        result[1] = 0;\n    }\n    else\n\
    \    {\n        result[1] = remaining - result[0];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3d7g1rc2.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmp3d7g1rc2.__unittest_L48_C1()\
    \ [0x427f98]\\n??:? void tmp3d7g1rc2.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b43a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430651]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b411]\\n??:? runModuleUnitTests [0x42c37d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428937]\\n??:? _d_run_main [0x4288a2]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0xc5339554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcbff9s9i.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpcbff9s9i.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpcbff9s9i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm9adat16.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpm9adat16.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpm9adat16.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(number + remaining - need, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_anvy53x.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp_anvy53x.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_anvy53x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqb0o3l2w.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpqb0o3l2w.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpqb0o3l2w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn4fwc5jy.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpn4fwc5jy.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpn4fwc5jy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, number + remaining - need)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt9gjuk2y.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpt9gjuk2y.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpt9gjuk2y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkvs4aih3.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpkvs4aih3.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpkvs4aih3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(need > remaining)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa1y95zbi.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpa1y95zbi.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpa1y95zbi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpphgb3c7v.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpphgb3c7v.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpphgb3c7v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjw_pzywg.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpjw_pzywg.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpjw_pzywg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2u4o5yet.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp2u4o5yet.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp2u4o5yet.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(need > remaining)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(need > remaining)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + min(need, remaining);\n    result[1]\
    \ = max(0, remaining - need);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt4p5vcxl.d(36): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpt4p5vcxl.d(37): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpt4p5vcxl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, number + remaining - need)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphfirh8s2.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmphfirh8s2.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmphfirh8s2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + min(need, remaining);\n    result[1]\
    \ = max(0, remaining - need);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplnnja3wg.d(36): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmplnnja3wg.d(37): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmplnnja3wg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + min(need, remaining);\n    result[1]\
    \ = max(0, remaining - need);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp43renn5s.d(36): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp43renn5s.d(37): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp43renn5s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + min(need, remaining);\n    result[1]\
    \ = max(0, remaining - need);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpify42y8v.d(36): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpify42y8v.d(37): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpify42y8v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(need > remaining)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining < need)\n    {\n        result[0] = number\
    \ + remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - need;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    if (number\
    \ + need <= remaining)\n        return [number + need, remaining - number - need];\n\
    \    else\n        return [remaining + number, 0];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3ffu5il1.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42844d]\\n??:? void tmp3ffu5il1.__unittest_L40_C1()\
    \ [0x427efc]\\n??:? void tmp3ffu5il1.__modtest() [0x4281d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c437]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43045d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43090c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b2a1]\\n??:? runModuleUnitTests [0x42c20d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42889c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428823]\\n??:? _d_run_main [0x42878e]\\n??:? main [0x4281e3]\\\
    n??:? __libc_start_main [0x61f10554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, number + remaining - need)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1_dubz9.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpc1_dubz9.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpc1_dubz9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4lvbq699.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp4lvbq699.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp4lvbq699.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo5s1inp4.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpo5s1inp4.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpo5s1inp4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, number + remaining - need)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg3gpxj95.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpg3gpxj95.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpg3gpxj95.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] += result[1];\n     \
    \   result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long eaten\
    \ = number + min(need, remaining);\n    long left = max(0, remaining - need);\n\
    \    return [eaten, left];\n}\nunittest\n{\n    alias candidate = eat;\n\n   \
    \ assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L)\
    \ == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbv7w3qs9.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpbv7w3qs9.d(36): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpbv7w3qs9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] += result[1];\n     \
    \   result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)];\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnyflsl8d.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpnyflsl8d.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpnyflsl8d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    if(result[0] > remaining)\n\
    \    {\n        result[0] = remaining;\n        result[1] = 0;\n    }\n    else\n\
    \    {\n        result[1] = remaining - result[0];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp14upfsun.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmp14upfsun.__unittest_L48_C1()\
    \ [0x427f98]\\n??:? void tmp14upfsun.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b43a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430651]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b411]\\n??:? runModuleUnitTests [0x42c37d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428937]\\n??:? _d_run_main [0x4288a2]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0x643e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr0zyce1q.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpr0zyce1q.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpr0zyce1q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - (need - number), 0L)];\n}\nunittest\n{\n\
    \    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwy4fmrb9.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpwy4fmrb9.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpwy4fmrb9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, number + need), max(remaining - need, 0)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz7f507px.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpz7f507px.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpz7f507px.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + min(need, remaining);\n    result[1]\
    \ = max(0, remaining - need);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw6lnyeji.d(36): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpw6lnyeji.d(37): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpw6lnyeji.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(remaining - need + number, 0L)];\n}\nunittest\n{\n \
    \   alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzvhnx0s.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpzzvhnx0s.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpzzvhnx0s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    if(result[0] > remaining)\n\
    \    {\n        result[0] = remaining;\n        result[1] = 0;\n    }\n    else\n\
    \    {\n        result[1] = remaining - result[0];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
    \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
    \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n\
    \    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L,\
    \ 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptmyze46_.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ed]\\n??:? void tmptmyze46_.__unittest_L48_C1()\
    \ [0x427f98]\\n??:? void tmptmyze46_.__modtest() [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b43a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430651]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b411]\\n??:? runModuleUnitTests [0x42c37d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428937]\\n??:? _d_run_main [0x4288a2]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0x66034554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + min(need, remaining);\n    result[1]\
    \ = max(0, remaining - need);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu7rl4dsx.d(36): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpu7rl4dsx.d(37): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpu7rl4dsx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if (number >= need)\n    {\n        result[0] = number;\n\
    \        result[1] = remaining;\n    }\n    else\n    {\n        if (remaining\
    \ >= need - number)\n        {\n            result[0] = need;\n            result[1]\
    \ = remaining - (need - number);\n        }\n        else\n        {\n       \
    \     result[0] = number + remaining;\n            result[1] = 0;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\n   \
    \ assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L)\
    \ == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7o_r3r4f.d(60): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42851d]\\n??:? void tmp7o_r3r4f.__unittest_L56_C1()\
    \ [0x427fcc]\\n??:? void tmp7o_r3r4f.__modtest() [0x4282a0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5d7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b46a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430681]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b441]\\n??:? runModuleUnitTests [0x42c3ad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428967]\\n??:? _d_run_main [0x4288d2]\\n??:? main [0x4282b3]\\\
    n??:? __libc_start_main [0x5dd22554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long eaten\
    \ = number + min(need, remaining);\n    long left = max(0, remaining - need);\n\
    \    return [eaten, left];\n}\nunittest\n{\n    alias candidate = eat;\n\n   \
    \ assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L)\
    \ == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk9e5706e.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpk9e5706e.d(36): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpk9e5706e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0)\n    {\n        result[0] = number + remaining;\n\
    \        result[1] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L,\
    \ 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n\
    \    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L,\
    \ 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(remaining >= need)\n    {\n        result[0] = number\
    \ + need;\n        result[1] = remaining - need;\n    }\n    else\n    {\n   \
    \     result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L,\
    \ 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n \
    \   assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L,\
    \ 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L,\
    \ 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    return [min(number\
    \ + remaining, need), max(0, need - number - remaining)];\n}\nunittest\n{\n  \
    \  alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n\
    \    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L,\
    \ 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L,\
    \ 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpehnha4b4.d(35): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpehnha4b4.d(35): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpehnha4b4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
    \ and you already have eaten a certain number of carrots,\n    but now you need\
    \ to eat more carrots to complete the day's meals.\n    you should return an array\
    \ of [ total number of eaten carrots after your meals,\n                     \
    \               the number of carrots left after your meals ]\n    if there are\
    \ not enough remaining carrots, you will eat all remaining carrots, but will still\
    \ be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4,\
    \ 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7,\
    \ 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots\
    \ that you have eaten.\n    @need : integer\n        the number of carrots that\
    \ you need to eat.\n    @remaining : integer\n        the number of remaining\
    \ carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n\
    \    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n  \
    \  \n*/\nlong[] eat(long number, long need, long remaining) \n{\n    long[] result\
    \ = new long[2];\n    if(number >= need)\n    {\n        result[0] = number;\n\
    \        result[1] = remaining;\n    }\n    else\n    {\n        if(remaining\
    \ >= need - number)\n        {\n            result[0] = need;\n            result[1]\
    \ = remaining - (need - number);\n        }\n        else\n        {\n       \
    \     result[0] = number + remaining;\n            result[1] = 0;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = eat;\n\n   \
    \ assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L)\
    \ == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L,\
    \ 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n   \
    \ assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl49nrf8h.d(60): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42851d]\\n??:? void tmpl49nrf8h.__unittest_L56_C1()\
    \ [0x427fcc]\\n??:? void tmpl49nrf8h.__modtest() [0x4282a0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5d7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b46a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430681]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b441]\\n??:? runModuleUnitTests [0x42c3ad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428967]\\n??:? _d_run_main [0x4288d2]\\n??:? main [0x4282b3]\\\
    n??:? __libc_start_main [0xfb9ab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
