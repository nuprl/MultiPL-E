name: HumanEval_76_is_simple_power
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, (int)log(x) / (int)log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmeim381a.d(18): Error: C style cast illegal, use `cast(int)log(x)`\\\
    n/tmp/tmpmeim381a.d(18): Error: C style cast illegal, use `cast(int)log(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmeim381a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt7ikxk63.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmpt7ikxk63.__unittest_L20_C1()\
    \ [0x427d9d]\\n??:? void tmpt7ikxk63.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0x38dab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (n == 0) return false;\n    if (x == 0) return\
    \ false;\n    if (x < 0) return false;\n    if (n < 0) return false;\n    if (x\
    \ % n != 0) return false;\n    if (x == n * n) return true;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (n == 0)\n        return\
    \ false;\n    if (x == 0)\n        return false;\n    if (x < 0)\n        return\
    \ false;\n    if (n < 0)\n        return false;\n    if (x == 2)\n        return\
    \ true;\n    if (n == 2)\n        return true;\n    if (x == 3)\n        return\
    \ false;\n    if (n == 3)\n        return false;\n    if (x == 4)\n        return\
    \ true;\n    if (n == 4)\n        return true;\n    if (x == 5)\n        return\
    \ false;\n    if (n == 5)\n        return false;\n    if (x == 6)\n        return\
    \ false;\n    if (n == 6)\n        return false;\n    if (x == 7)\n        return\
    \ false;\n    if (n == 7)\n        return false;\n    if (x == 8)\n        return\
    \ true;\n    if (n == 8)\n        return true;\n    if (x == 9)\n        return\
    \ true;\n    if (n == 9)\n        return true;\n    if (x == 10)\n        return\
    \ false;\n    if (n == 10)\n        return false;\n    if (x == 11)\n        return\
    \ false;\n    if (n == 11)\n        return false;\n    if (x == 12)\n        return\
    \ false;\n    if (n == 12)\n        return false;\n    if (x == 13)\n        return\
    \ false;\n    if (n == 13)\n        return false;\n    if (x == 14)\n        return\
    \ false;\n    if (n == 14)\n        return false;\n    if (x == 15)\n        return\
    \ false;\n    if (n == 15)\n        return false;\n    if (x == 16)\n        return\
    \ true;\n    if (n == 16)\n        return true;\n    if (x == 17)\n        return\
    \ false;\n    if (n == 17)\n        return false;\n    if\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyndofp0u.d(97): Error: found `unittest` when expecting `(`\\\
    n/tmp/tmpyndofp0u.d(112): Error: found `void` when expecting `)`\\n/tmp/tmpyndofp0u.d(112):\
    \ Error: found `{` when expecting `;` following statement\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyndofp0u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || x % n == 0 && is_simple_power(x / n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptmi8qtax.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e35]\\n??:? void tmptmi8qtax.__unittest_L20_C1()\
    \ [0x427ba3]\\n??:? void tmptmi8qtax.__modtest() [0x427bb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9c5]\\n??:? runModuleUnitTests [0x42b931]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428284]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42820b]\\n??:? _d_run_main [0x428176]\\n??:? main [0x427bcb]\\\
    n??:? __libc_start_main [0xab35d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprq5vjn2o.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmprq5vjn2o.__unittest_L20_C1()\
    \ [0x427d9d]\\n??:? void tmprq5vjn2o.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0x1292a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    long i = 0;\n    while (pow(n, i) <= x)\n    {\n        if (pow(n,\
    \ i) == x)\n            return true;\n        i++;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (n == 0) return false;\n    if (x == 0) return\
    \ false;\n    if (x < 0) return false;\n    if (n < 0) return false;\n    if (x\
    \ == 2) return n == 2;\n    if (x == 3) return n == 3;\n    if (x == 4) return\
    \ n == 2;\n    if (x == 5) return n == 5;\n    if (x == 6) return n == 2 || n\
    \ == 3;\n    if (x == 7) return n == 7;\n    if (x == 8) return n == 2;\n    if\
    \ (x == 9) return n == 3;\n    if (x == 10) return n == 2 || n == 5;\n    if (x\
    \ == 11) return n == 11;\n    if (x == 12) return n == 2 || n == 3;\n    if (x\
    \ == 13) return n == 13;\n    if (x == 14) return n == 2 || n == 7;\n    if (x\
    \ == 15) return n == 3 || n == 5;\n    if (x == 16) return n == 2;\n    if (x\
    \ == 17) return n == 17;\n    if (x == 18) return n == 2 || n == 3;\n    if (x\
    \ == 19) return n == 19;\n    if (x == 20) return n == 2 || n == 5;\n    if (x\
    \ == 21) return n == 3 || n == 7;\n    if (x == 22) return n == 2 || n == 11;\n\
    \    if (x == 23) return n == 23;\n    if (x == 24) return n == 2 || n == 3;\n\
    \    if (x == 25) return n == 5;\n    if (x == 26) return n == 2 || n == 13;\n\
    \    if (x == 27) return n == 3;\n    if (x == 28) return n == 2 || n == 7;\n\
    \    if (x == 29) return n == 29;\n    if (x == 30) return n == 2 || n == 3 ||\
    \ n == 5;\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvuzoo484.d(54): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvuzoo484.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n       \
    \ return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn2eyl8u5.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmpn2eyl8u5.__unittest_L24_C1()\
    \ [0x427b29]\\n??:? void tmpn2eyl8u5.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0x3c0d0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (n == 0)\n    {\n        return false;\n    }\n    if (x == 0)\n\
    \    {\n        return true;\n    }\n    if (x == 1)\n    {\n        return true;\n\
    \    }\n    if (n == 1)\n    {\n        return false;\n    }\n    if (n == x)\n\
    \    {\n        return true;\n    }\n    if (n == -1)\n    {\n        return false;\n\
    \    }\n    if (n == -x)\n    {\n        return true;\n    }\n    if (x < 0)\n\
    \    {\n        return false;\n    }\n    if (n < 0)\n    {\n        return false;\n\
    \    }\n    if (x == n)\n    {\n        return true;\n    }\n    if (x == n *\
    \ n)\n    {\n        return true;\n    }\n    if (x == n * n * n)\n    {\n   \
    \     return true;\n    }\n    if (x == n * n * n * n)\n    {\n        return\
    \ true;\n    }\n    if (x == n * n * n * n * n)\n    {\n        return true;\n\
    \    }\n    if (x == n * n * n * n * n * n)\n    {\n        return true;\n   \
    \ }\n    if (x == n * n * n * n * n * n * n)\n    {\n        return true;\n  \
    \  }\n    if (x == n * n * n * n * n * n * n * n)\n    {\n        return true;\n\
    \    }\n    if (x == n * n * n * n * n * n * n * n * n)\n    {\n        return\
    \ true;\n    }\n    if (x == n * n * n * n * n * n * n * n * n * n)\n    {\n \
    \       return true;\n    }\n    if (x == n * n * n * n * n * n * n * n * n *\
    \ n * n)\n    {\n        return true;\n    }\n    if (x == n * n * n * n * n *\
    \ n *\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp761y9knl.d(99): Error: expression expected, not `unittest`\\\
    n/tmp/tmp761y9knl.d(100): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp761y9knl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || x == n*n || x == n*n*n;\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpopo3f1qc.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e35]\\n??:? void tmpopo3f1qc.__unittest_L20_C1()\
    \ [0x427a61]\\n??:? void tmpopo3f1qc.__modtest() [0x427bb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9c5]\\n??:? runModuleUnitTests [0x42b931]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428284]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42820b]\\n??:? _d_run_main [0x428176]\\n??:? main [0x427bcb]\\\
    n??:? __libc_start_main [0xf0042554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || x == n*n || x == n*n*n || x == n*n*n*n || x ==\
    \ n*n*n*n*n || x == n*n*n*n*n*n || x == n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n\
    \ || x == n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n\
    \ || x == n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n*n*n\
    \ || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n ||\
    \ x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\
    \ || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\
    \ || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ymiwdzt.d(19): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmp4ymiwdzt.d(34): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4ymiwdzt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    auto result = log(x) / log(n);\n    return x == pow(n, result);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6rldyluz.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a85]\\n??:? void tmp6rldyluz.__unittest_L21_C1()\
    \ [0x427e4d]\\n??:? void tmp6rldyluz.__modtest() [0x428808]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c867]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43088d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d3c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430819]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d1]\\n??:? runModuleUnitTests [0x42c63d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ed4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e5b]\\n??:? _d_run_main [0x428dc6]\\n??:? main [0x42881b]\\\
    n??:? __libc_start_main [0x76b0f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    else if (n == 1)\n      \
    \  return false;\n    else if (x == n)\n        return true;\n    else if (x <\
    \ n)\n        return false;\n    else if (x % n != 0)\n        return false;\n\
    \    else\n        return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    //return is_simple_power(x\
    \ / n, n);\n    return x % n == 0 && is_simple_power(x / n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    if (x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgx7y77wt.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmpgx7y77wt.__unittest_L20_C1()\
    \ [0x427d9d]\\n??:? void tmpgx7y77wt.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0xc5fd6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    if (x == n * n)\n  \
    \      return true;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n \
    \   alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprq7th6u_.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmprq7th6u_.__unittest_L24_C1()\
    \ [0x427b29]\\n??:? void tmprq7th6u_.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0x99422554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    return is_simple_power(x/n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq_sbx_rn.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmpq_sbx_rn.__unittest_L28_C1()\
    \ [0x427b29]\\n??:? void tmpq_sbx_rn.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0xd3db7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaiqfd534.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmpaiqfd534.__unittest_L20_C1()\
    \ [0x427d9d]\\n??:? void tmpaiqfd534.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0x86b7f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    // your code here\n    if(x == 1) return true;\n    if(n == 1) return\
    \ false;\n    if(x == n) return true;\n    if(x % n != 0) return false;\n    return\
    \ is_simple_power(x/n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0138qkbr.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmp0138qkbr.__unittest_L20_C1()\
    \ [0x427d9d]\\n??:? void tmp0138qkbr.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0xc5ea3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, (int)log(x) / (int)log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx0y8nqi4.d(18): Error: C style cast illegal, use `cast(int)log(x)`\\\
    n/tmp/tmpx0y8nqi4.d(18): Error: C style cast illegal, use `cast(int)log(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0y8nqi4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || x % n == 0 && is_simple_power(x / n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpduxkwc8k.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e35]\\n??:? void tmpduxkwc8k.__unittest_L20_C1()\
    \ [0x427ba3]\\n??:? void tmpduxkwc8k.__modtest() [0x427bb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9c5]\\n??:? runModuleUnitTests [0x42b931]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428284]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42820b]\\n??:? _d_run_main [0x428176]\\n??:? main [0x427bcb]\\\
    n??:? __libc_start_main [0x66283554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, (int)log(x) / (int)log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6vtktgv9.d(18): Error: C style cast illegal, use `cast(int)log(x)`\\\
    n/tmp/tmp6vtktgv9.d(18): Error: C style cast illegal, use `cast(int)log(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6vtktgv9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1 && n == 1)\n        return true;\n    if (x == 1 && n\
    \ != 1)\n        return false;\n    if (x == n)\n        return true;\n    if\
    \ (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9f56930f.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmp9f56930f.__unittest_L28_C1()\
    \ [0x427bc7]\\n??:? void tmp9f56930f.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0xe45e3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || x == n * n || x == n * n * n;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu50n6e3b.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e35]\\n??:? void tmpu50n6e3b.__unittest_L20_C1()\
    \ [0x427a61]\\n??:? void tmpu50n6e3b.__modtest() [0x427bb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9c5]\\n??:? runModuleUnitTests [0x42b931]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428284]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42820b]\\n??:? _d_run_main [0x428176]\\n??:? main [0x427bcb]\\\
    n??:? __libc_start_main [0x3e541554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || x == n*n || x == n*n*n || x == n*n*n*n || x ==\
    \ n*n*n*n*n || x == n*n*n*n*n*n || x == n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n\
    \ || x == n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n\
    \ || x == n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n*n*n\
    \ || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n ||\
    \ x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\
    \ || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\
    \ || x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n || x == n*n*n*n*n*n*n*n*n*n*n\n\
    unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6zy_z5do.d(19): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmp6zy_z5do.d(34): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6zy_z5do.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == 1 ? true : x % n == 0 ? is_simple_power(x / n, n) :\
    \ false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || (x > n && x % n == 0 && is_simple_power(x / n,\
    \ n));\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd2mlrlml.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpd2mlrlml.__unittest_L20_C1()\
    \ [0x427ba7]\\n??:? void tmpd2mlrlml.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0xf1a52554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, (int)log(x) / (int)log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_qvj419i.d(18): Error: C style cast illegal, use `cast(int)log(x)`\\\
    n/tmp/tmp_qvj419i.d(18): Error: C style cast illegal, use `cast(int)log(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qvj419i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || x % n == 0 && is_simple_power(x / n, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxhjpzhao.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e35]\\n??:? void tmpxhjpzhao.__unittest_L20_C1()\
    \ [0x427ba3]\\n??:? void tmpxhjpzhao.__modtest() [0x427bb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9c5]\\n??:? runModuleUnitTests [0x42b931]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428284]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42820b]\\n??:? _d_run_main [0x428176]\\n??:? main [0x427bcb]\\\
    n??:? __libc_start_main [0x1fce3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n       \
    \ return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || x == n * n || x == n * n * n;\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkra_jnps.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e35]\\n??:? void tmpkra_jnps.__unittest_L20_C1()\
    \ [0x427a61]\\n??:? void tmpkra_jnps.__modtest() [0x427bb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9c5]\\n??:? runModuleUnitTests [0x42b931]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428284]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42820b]\\n??:? _d_run_main [0x428176]\\n??:? main [0x427bcb]\\\
    n??:? __libc_start_main [0xc59c1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == 1 ? true : x % n == 0 ? is_simple_power(x / n, n) :\
    \ false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4x7oovkh.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmp4x7oovkh.__unittest_L24_C1()\
    \ [0x427b29]\\n??:? void tmp4x7oovkh.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0x1ded2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return\
    \ true;\n    if (n == 1)\n        return false;\n    if (n == 0)\n        return\
    \ false;\n    if (x == 0)\n        return false;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n       \
    \ return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    double result = log(x) / log(n);\n    return result == (int)result;\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4d5k6mbm.d(19): Error: C style cast illegal, use `cast(int)result`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d5k6mbm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || (x > n && x % n == 0 && is_simple_power(x / n,\
    \ n));\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc_y2ydqc.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpc_y2ydqc.__unittest_L20_C1()\
    \ [0x427ba7]\\n??:? void tmpc_y2ydqc.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0xf4cf0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpusm9_ecp.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmpusm9_ecp.__unittest_L24_C1()\
    \ [0x427b29]\\n??:? void tmpusm9_ecp.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0x62c02554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n       \
    \ return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1 && n == 1) return true;\n    if (x == 1 && n != 1) return\
    \ false;\n    if (x == n) return true;\n    if (x < n) return false;\n    if (x\
    \ % n != 0) return false;\n    if (x % n == 0) return is_simple_power(x / n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptyj8rvv1.d(16): Error: function `tmptyj8rvv1.is_simple_power`\
    \ no `return exp;` or `assert(0);` at end of function\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptyj8rvv1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (n == 0) return\
    \ false;\n    if (n == 2) return is_even(x);\n    if (n == 3) return is_cubic(x);\n\
    \    if (n == 4) return is_fourth(x);\n    if (n == 5) return is_fifth(x);\n \
    \   if (n == 6) return is_sixth(x);\n    if (n == 7) return is_seventh(x);\n \
    \   if (n == 8) return is_eighth(x);\n    if (n == 9) return is_ninth(x);\n  \
    \  if (n == 10) return is_tenth(x);\n    if (n == 11) return is_eleventh(x);\n\
    \    if (n == 12) return is_twelfth(x);\n    if (n == 13) return is_thirteenth(x);\n\
    \    if (n == 14) return is_fourteenth(x);\n    if (n == 15) return is_fifteenth(x);\n\
    \    if (n == 16) return is_sixteenth(x);\n    if (n == 17) return is_seventeenth(x);\n\
    \    if (n == 18) return is_eighteenth(x);\n    if (n == 19) return is_nineteenth(x);\n\
    \    if (n == 20) return is_twentieth(x);\n    if (n == 21) return is_twentyfirst(x);\n\
    \    if (n == 22) return is_twentysecond(x);\n    if (n == 23) return is_twentythird(x);\n\
    \    if (n == 24) return is_twentyfourth(x);\n    if (n == 25) return is_twentyfifth(x);\n\
    \    if (n == 26) return is_twentysixth(x);\n    if (n == 27) return is_twentyseventh(x);\n\
    \    if (n == 28) return is_twentyeighth(x);\n    if (n == 29) return is\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbjph3fiw.d(51): Error: `type identifier : specialization` expected\
    \ following `is`\\n/tmp/tmpbjph3fiw.d(52): Error: found `{` when expecting `;`\
    \ following `return` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpbjph3fiw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (n == x) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    else if (n == 1)\n      \
    \  return false;\n    else if (x % n != 0)\n        return false;\n    else\n\
    \        return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n       \
    \ return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == 1 ? true : x == n ? true : x % n == 0 ? is_simple_power(x\
    \ / n, n) : false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    if (x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (n == 0) return false;\n    if (x == 0) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    double result = log(x) / log(n);\n\
    \    return result == (int)result;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaa99rqwm.d(25): Error: C style cast illegal, use `cast(int)result`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaa99rqwm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, (int)log(x) / (int)log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpys19fuyl.d(18): Error: C style cast illegal, use `cast(int)log(x)`\\\
    n/tmp/tmpys19fuyl.d(18): Error: C style cast illegal, use `cast(int)log(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpys19fuyl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == 1 ? true : (x % n == 0 ? is_simple_power(x / n, n) :\
    \ false);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x < n)\n        return false;\n    if (x == n)\n        return\
    \ true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1 && n == 1)\n        return true;\n    if (x == 1 && n\
    \ != 1)\n        return false;\n    if (x != 1 && n == 1)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    if (x == n)\n        return true;\n\
    \    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate =\
    \ is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4_2johqz.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmp4_2johqz.__unittest_L30_C1()\
    \ [0x427bd7]\\n??:? void tmp4_2johqz.__modtest() [0x427bec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427bff]\\\
    n??:? __libc_start_main [0x74807554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || (x > n && x % n == 0 && is_simple_power(x / n,\
    \ n));\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpug40d6x8.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpug40d6x8.__unittest_L20_C1()\
    \ [0x427ba7]\\n??:? void tmpug40d6x8.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0xfa7f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptkdvbb9s.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmptkdvbb9s.__unittest_L28_C1()\
    \ [0x427b29]\\n??:? void tmptkdvbb9s.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0xb103f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    long i = 2;\n    while\
    \ (i < x)\n    {\n        if (pow(n, i) == x) return true;\n        i++;\n   \
    \ }\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == n || x == n*n || x == n*n*n || x == n*n*n*n;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy0fymiov.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmpy0fymiov.__unittest_L20_C1()\
    \ [0x427bbb]\\n??:? void tmpy0fymiov.__modtest() [0x427bd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427be3]\\\
    n??:? __libc_start_main [0x58445554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    long i = 1;\n    while\
    \ (pow(n, i) <= x)\n    {\n        if (pow(n, i) == x) return true;\n        i++;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (n == 0) return false;\n    if (x == 0) return\
    \ false;\n    if (n == 2) return (x & (x - 1)) == 0;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x < n) return false;\n    if (x == n) return true;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n       \
    \ return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, (int)log(x)/log(n));\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9l09axnh.d(18): Error: C style cast illegal, use `cast(int)log(x)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9l09axnh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == 1 || (n > 1 && x > 1 && x % n == 0 && is_simple_power(x\
    \ / n, n));\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x == 0) return false;\n    if (n == 0) return\
    \ false;\n    if (x < 0) return false;\n    if (n < 0) return false;\n    if (x\
    \ % n != 0) return false;\n    if (x == n * n) return true;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    auto res = log(x) /\
    \ log(n);\n    return res == cast(long)res;\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvya29z6b.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmpvya29z6b.__unittest_L28_C1()\
    \ [0x427b29]\\n??:? void tmpvya29z6b.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0x2c72b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (n == 0) return false;\n    if (x == 0) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0wm8fpxy.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmp0wm8fpxy.__unittest_L28_C1()\
    \ [0x427b29]\\n??:? void tmp0wm8fpxy.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0x24331554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, cast(int)log(x) / log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxl9w1vkk.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmpxl9w1vkk.__unittest_L20_C1()\
    \ [0x427d9d]\\n??:? void tmpxl9w1vkk.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0x45a05554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x == n*n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x/n, n);\n\
    }\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, cast(int)log(x)/log(n));\n}\nunittest\n{\n  \
    \  alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6o13spp9.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmp6o13spp9.__unittest_L20_C1()\
    \ [0x427d9d]\\n??:? void tmp6o13spp9.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b702]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430895]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430821]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d9]\\n??:? runModuleUnitTests [0x42c645]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0x84daf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, (int)log(x)/log(n));\n}\nunittest\n{\n    alias\
    \ candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n  \
    \  assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphd726tui.d(18): Error: C style cast illegal, use `cast(int)log(x)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd726tui.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return\
    \ true;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n    {\n        return true;\n    }\n    else if (x\
    \ == n)\n    {\n        return true;\n    }\n    else if (x % n != 0)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        return is_simple_power(x\
    \ / n, n);\n    }\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    if (x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    long i = 2;\n    while (i < x)\n    {\n        if (pow(n, i) ==\
    \ x)\n            return true;\n        i++;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    return x == pow(n, (int)log(x) / (int)log(n));\n}\nunittest\n{\n\
    \    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n\
    \    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) ==\
    \ true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L)\
    \ == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqaxmqp6_.d(18): Error: C style cast illegal, use `cast(int)log(x)`\\\
    n/tmp/tmpqaxmqp6_.d(18): Error: C style cast illegal, use `cast(int)log(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqaxmqp6_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (n == 1)\n        return x == 1;\n    if (x == 1)\n        return\
    \ n == 1;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
    \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj9zmzykx.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e65]\\n??:? void tmpj9zmzykx.__unittest_L30_C1()\
    \ [0x427bd3]\\n??:? void tmpj9zmzykx.__modtest() [0x427be8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9f5]\\n??:? runModuleUnitTests [0x42b961]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282b4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42823b]\\n??:? _d_run_main [0x4281a6]\\n??:? main [0x427bfb]\\\
    n??:? __libc_start_main [0x6b65d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    double d = log(x) /\
    \ log(n);\n    return d == floor(d);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\
    \n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L)\
    \ == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate\
    \ = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L,\
    \ 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L,\
    \ 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if\
    \ (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    long y = x / n;\n    return is_simple_power(y, n);\n}\nunittest\n\
    {\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) ==\
    \ true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
    \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
    \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
    \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
    \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
    \ that returns true if a number x is a simple\n    power of n and false in other\
    \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \n*/\nbool is_simple_power(long x, long\
    \ n) \n{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    long i = 1;\n    while (pow(n, i) < x)\n        i++;\n    return\
    \ pow(n, i) == x;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n\
    \    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) ==\
    \ false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L)\
    \ == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L,\
    \ 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L,\
    \ 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L,\
    \ 12L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
