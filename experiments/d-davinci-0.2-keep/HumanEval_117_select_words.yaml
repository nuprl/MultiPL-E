name: HumanEval_117_select_words
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
  \ number n, you have been tasked to implement \n    a function that returns a list\
  \ of all words from string s that contain exactly \n    n consonants, in order these\
  \ words appear in the string s.\n    If the string s is empty then the function\
  \ should return an empty list.\n    Note: you may assume the input string contains\
  \ only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little\
  \ lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==>\
  \ [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n   \
  \ select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\"\
  , 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n"
tests: "unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
  Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
  \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
  \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"\
  ]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
  \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
  d\", \"f\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] words = s.split(\" \");\n    string[] result = new\
    \ string[0];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n\
    \        if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split;\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        long count = 0;\n        foreach(letter;\
    \ word)\n        {\n            if(letter.isLetter)\n            {\n         \
    \       if(letter.isVowel)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n        if(count == n)\n       \
    \ {\n            result ~= word;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] words = split(s);\n    string[] result = [];\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[0];\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n\
    \        if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s, \"\
    \ \");\n    string[] result = new string[0];\n    foreach(word; words)\n    {\n\
    \        long count = 0;\n        foreach(c; word)\n        {\n            if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            {\n   \
    \             count++;\n            }\n        }\n        if(count == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = new string[];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        if(count_consonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.length\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s, \" \");\n    string[] result = new string[];\n\
    \    foreach(string word; words)\n    {\n        if(count_consonants(word) ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split();\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(c; word)\n        {\n\
    \            if(c.isAlpha && !c.isVowel)\n                count++;\n        }\n\
    \        if(count == n)\n            result ~= word;\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[];\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s, \" \");\n    string[] result = new string[0];\n    foreach(string word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[0];\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = new string[];\n    foreach(word; words)\n \
    \   {\n        long count = 0;\n        foreach(c; word)\n        {\n        \
    \    if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n          \
    \  {\n                count++;\n            }\n        }\n        if(count ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s, \" \");\n    string[] result = [];\n   \
    \ foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n     \
    \   {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = new string[];\n    foreach(word; words)\n    {\n\
    \        if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = new string[];\n    foreach(word; words)\n    {\n      \
    \  if(word.countConsonants == n)\n        {\n            result ~= word;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n \
    \   string[] result = new string[];\n    foreach(word; words)\n    {\n       \
    \ if(count_consonants(word) == n)\n        {\n            result ~= word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s, \" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = new string[0];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result\
    \ = [];\n    foreach(word; words)\n    {\n        if(count_consonants(word) ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s, \" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(letter; word)\n    \
    \    {\n            if(!isVowel(letter))\n                count++;\n        }\n\
    \        if(count == n)\n            result ~= word;\n    }\n    return result;\n\
    }", "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s, \"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.length\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result\
    \ = new string[0];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        long count = 0;\n        foreach(c; word)\n        {\n          \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            {\n\
    \                count++;\n            }\n        }\n        if(count == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = new string[];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[];\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = s.split;\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        long count = 0;\n        foreach(letter; word)\n        {\n     \
    \       if(letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u')\n            {\n                count++;\n            }\n   \
    \     }\n        if(count == n)\n        {\n            result ~= word;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = new string[];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s, \" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s, \" \");\n    string[] result = new string[0];\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result = [];\n    string[] words = split(s);\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.count_consonants == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split(\" \");\n    string[] result = new string[];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] res;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n            res ~= word;\n    }\n    return res;\n}", "{\n    string[]\
    \ words = split(s, \" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = s.split;\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(letter; word)\n    \
    \    {\n            if(letter.isAlpha)\n            {\n                if(!letter.isVowel)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = s.split(\" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(consonants(word) == n)\n        {\n\
    \            result ~= word;\n        }\n    }\n    return result;\n}", "{\n \
    \   string[] words = split(s);\n    string[] result = new string[];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        long count = 0;\n        foreach(letter;\
    \ word)\n        {\n            if(letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u')\n            {\n                count++;\n\
    \            }\n        }\n        if(count == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s, \" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n\
    \        if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        long count\
    \ = 0;\n        foreach(letter; word)\n        {\n            if(letter.isAlpha)\n\
    \            {\n                if(letter.toLower.isConsonant)\n             \
    \   {\n                    count++;\n                }\n            }\n      \
    \  }\n        if(count == n)\n        {\n            result ~= word;\n       \
    \ }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n    string[]\
    \ result = new string[];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    string[] words = split(s, \" \");\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split;\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result\
    \ = [];\n    foreach(word; words)\n    {\n        if(count_consonants(word) ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[];\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.count_consonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result\
    \ = [];\n    foreach(word; words)\n    {\n        if(word.length == n)\n     \
    \   {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s, \" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split();\n    string[] result = [];\n    foreach(word; words)\n  \
    \  {\n        if(word.countConsonants() == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s, \" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n\
    \        if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split(\" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s, \" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n\
    \        if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s, \"\
    \ \");\n    string[] result = new string[];\n    foreach(word; words)\n    {\n\
    \        if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    auto words = split(s);\n  \
    \  string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n            result ~= word;\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = new string[];\n    foreach(word; words)\n \
    \   {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(i, word; words)\n    {\n        if(count_consonants(word) == n)\n\
    \            result ~= word;\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[0];\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n\
    \        if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        long count\
    \ = 0;\n        foreach(c; word)\n        {\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            {\n                count++;\n\
    \            }\n        }\n        if(count == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = new string[];\n    foreach(word; words)\n \
    \   {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split();\n    string[] result = [];\n    foreach(word; words)\n    {\n   \
    \     long count = 0;\n        foreach(c; word)\n        {\n            if(c.isAlpha\
    \ && !c.isVowel)\n                count++;\n        }\n        if(count == n)\n\
    \            result ~= word;\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[];\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] res;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n            res ~= word;\n    }\n    return res;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] res = new string[];\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n            res ~= word;\n  \
    \  }\n    return res;\n}", "{\n    string[] words = s.split;\n    string[] result\
    \ = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s, \" \");\n    string[] result = [];\n   \
    \ foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n     \
    \   {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[];\n    foreach(word; words)\n\
    \    {\n        long count = 0;\n        foreach(ch; word)\n        {\n      \
    \      if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n   \
    \         {\n                count++;\n            }\n        }\n        if(count\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result\
    \ = new string[0];\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.length == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = new string[];\n    foreach(word; words)\n    {\n      \
    \  if(word.length == n)\n        {\n            result ~= word;\n        }\n \
    \   }\n    return result;\n}", "{\n    string[] words = split(s);\n    string[]\
    \ result = new string[];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split;\n    string[] result = [];\n    foreach(word; words)\n    {\n\
    \        if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s, \"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}\nlong countConsonants(string\
    \ word)\n{\n    long count = 0;\n    foreach(char; word)\n    {\n        if(isConsonant(char))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s, \"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nlong countConsonants(string s)\n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    string[] words = split(s);\n    string[] result = new string[];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n\
    \        if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nlong count_consonants(string s)\n{\n    long count = 0;\n    foreach(c; s)\n\
    \    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    string[] words = s.split;\n    string[] result;\n    foreach(string word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split();\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        if(count_consonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        if(count_consonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split;\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        if(count_consonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(string\
    \ word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ auto words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(word.count_if!(a => a.isConsonant) == n)\n        {\n     \
    \       result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = [];\n    foreach(word; words)\n   \
    \ {\n        if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ new string[];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s, \" \");\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = new string[];\n    foreach(word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result = new string[0];\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result = [];\n    foreach(word; words)\n    {\n    \
    \    if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] result = [];\n    foreach(word; words)\n    {\n        long count\
    \ = 0;\n        foreach(c; word)\n        {\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            {\n                count++;\n\
    \            }\n        }\n        if(count == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s, \" \");\n    string[] result = [];\n    foreach(word; words)\n    {\n\
    \        long count = 0;\n        foreach(c; word)\n        {\n            if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            {\n   \
    \             count++;\n            }\n        }\n        if(count == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s, \" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        long count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(isConsonant(c))\n                count++;\n\
    \        }\n        if(count == n)\n            result ~= word;\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result = [];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split(\" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result = new string[0];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s, \" \");\n    string[] result = new string[];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
