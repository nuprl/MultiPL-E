name: HumanEval_57_monotonic
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
  \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
  \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1,\
  \ 0, -10])\n    True\n    \n*/\nbool monotonic(long[] l) \n"
tests: "unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
  \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n \
  \   assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
  \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L,\
  \ 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
  \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
completions: ["{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i,\
    \ j; zip(l[0..$-1], l[1..$]))\n    {\n        increasing &= i < j;\n        decreasing\
    \ &= i > j;\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1])\n            increasing = false;\n\
    \        if (l[i] < l[i + 1])\n            decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4,\
    \ 1, 0, -10])\n    False\n*/", "{\n    if (l.length == 0)\n        return true;\n\
    \    long prev = l[0];\n    bool increasing = true;\n    foreach (i; l[1..$])\n\
    \    {\n        if (i == prev)\n            continue;\n        if (increasing)\n\
    \        {\n            if (i < prev)\n            {\n                increasing\
    \ = false;\n                prev = i;\n            }\n        }\n        else\n\
    \        {\n            if (i > prev)\n                return false;\n       \
    \ }\n    }\n    return true;\n}", "{\n    if (l.length < 2) return true;\n   \
    \ bool increasing = l[0] < l[1];\n    foreach (i, e; l) \n    {\n        if (i\
    \ == 0) continue;\n        if (increasing && e < l[i-1]) return false;\n     \
    \   if (!increasing && e > l[i-1]) return false;\n    }\n    return true;\n}",
  "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, v; l)\n    {\n        if (i == 0)\n        {\n\
    \            continue;\n        }\n        if (increasing && v < l[i - 1])\n \
    \       {\n            return false;\n        }\n        if (!increasing && v\
    \ > l[i - 1])\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length\
    \ - 1; i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0;\
    \ i < l.length - 1; i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n   \
    \         increasing = false;\n        }\n        if (l[i] < l[i + 1])\n     \
    \   {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[1] > l[0];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n\
    \            continue;\n        if (increasing && e < l[i - 1])\n            return\
    \ false;\n        if (!increasing && e > l[i - 1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    long prev = l[0];\n    bool increasing = true;\n    foreach (i; 1..l.length)\n\
    \    {\n        if (prev == l[i])\n            continue;\n        if (increasing)\n\
    \        {\n            if (prev > l[i])\n            {\n                increasing\
    \ = false;\n                prev = l[i];\n            }\n            else\n  \
    \              prev = l[i];\n        }\n        else\n        {\n            if\
    \ (prev < l[i])\n                return false;\n            else\n           \
    \     prev = l[i];\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ == 0) return true;\n    long prev = l[0];\n    bool increasing = true;\n   \
    \ foreach (i; 1..l.length) {\n        if (l[i] == prev) continue;\n        if\
    \ (increasing) {\n            if (l[i] < prev) {\n                increasing =\
    \ false;\n                prev = l[i];\n            }\n        } else {\n    \
    \        if (l[i] > prev) return false;\n        }\n    }\n    return true;\n}",
  "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, v; l)\n    {\n        if (i == 0)\n        {\n\
    \            continue;\n        }\n        if (increasing && v < l[i - 1])\n \
    \       {\n            return false;\n        }\n        if (!increasing && v\
    \ > l[i - 1])\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n  \
    \  for (int i = 0; i < l.length - 1; i++) \n    {\n        if (l[i] > l[i + 1])\
    \ \n        {\n            increasing = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) \n        {\n            decreasing = false;\n        }\n    }\n \
    \   return increasing || decreasing;\n}", "{\n    long[] l2 = l.dup;\n    l2.sort;\n\
    \    return l == l2 || l == l2.reverse;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 0; i < l.length - 1; i++) \n  \
    \  {\n        if (l[i] > l[i + 1]) \n        {\n            increasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n   \
    \ bool increasing = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[1..$],\
    \ l[0..$-1]))\n    {\n        increasing &= i > j;\n        decreasing &= i <\
    \ j;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length ==\
    \ 0)\n        return true;\n    long prev = l[0];\n    bool increasing = true;\n\
    \    foreach (i; l[1..$])\n    {\n        if (i == prev)\n            continue;\n\
    \        if (increasing)\n        {\n            if (i < prev)\n            {\n\
    \                increasing = false;\n                prev = i;\n            }\n\
    \        }\n        else\n        {\n            if (i > prev)\n             \
    \   return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, v; l) \n    {\n        if (i > 0) \n        {\n            if\
    \ (increasing && v < l[i - 1]) \n            {\n                return false;\n\
    \            }\n            if (!increasing && v > l[i - 1]) \n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \n*/", "{\n    if\
    \ (l.length < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n \
    \   foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    if (l.length < 2)\n        return true;\n    long diff =\
    \ l[1] - l[0];\n    for (long i = 2; i < l.length; i++)\n    {\n        if (diff\
    \ * (l[i] - l[i - 1]) < 0)\n            return false;\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1],\
    \ l[1..$]))\n    {\n        increasing &= i < j;\n        decreasing &= i > j;\n\
    \    }\n    return increasing || decreasing;\n}", "{\n    if (l.length < 2)\n\
    \        return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n    \
    \        return false;\n        if (!increasing && l[i] > l[i - 1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2) return\
    \ true;\n    bool increasing = l[0] < l[1];\n    foreach (i, v; l) \n    {\n \
    \       if (i == 0) continue;\n        if (increasing && v < l[i-1]) return false;\n\
    \        if (!increasing && v > l[i-1]) return false;\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n*/", "{\n    long[]\
    \ d = l[1..$] - l[0..$-1];\n    return d.all!(x => x == 0 || x == d[0]);\n}\n\
    /*\nReturn True if list elements are monotonically increasing.\n    >>> increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> increasing([1, 20, 4, 10])\n    False\n    >>>\
    \ increasing([4, 1, 0, -10])\n    False\n*/", "{\n    if (l.length < 2)\n    \
    \    return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i <\
    \ l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n        \
    \    return false;\n        if (!increasing && l[i] > l[i - 1])\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[1] > l[0];\n    foreach (i, v; l) \n    {\n \
    \       if (i > 0) \n        {\n            if (increasing && v < l[i - 1])\n\
    \                return false;\n            if (!increasing && v > l[i - 1])\n\
    \                return false;\n        }\n    }\n    return true;\n}", "{\n \
    \   if (l.length == 0)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l)\n    {\n        if (i == 0)\n            continue;\n  \
    \      if (increasing)\n        {\n            if (e < l[i - 1])\n           \
    \     return false;\n        }\n        else\n        {\n            if (e > l[i\
    \ - 1])\n                return false;\n        }\n    }\n    return true;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i, j;\
    \ zip(l[0..$-1], l[1..$]))\n    {\n        increasing &= i < j;\n        decreasing\
    \ &= i > j;\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 0; i < l.length - 1; i++)\n    {\n        if (l[i]\
    \ > l[i + 1])\n        {\n            increasing = false;\n        }\n       \
    \ if (l[i] < l[i + 1])\n        {\n            decreasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;\n}", "{\n    if (l.length <= 1)\n\
    \        return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e;\
    \ l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing)\n\
    \        {\n            if (e < l[i - 1])\n                return false;\n   \
    \     }\n        else\n        {\n            if (e > l[i - 1])\n            \
    \    return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ == 0) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n\
    \    {\n        if (i > 0)\n        {\n            if (increasing)\n         \
    \   {\n                if (e < l[i-1]) return false;\n            }\n        \
    \    else\n            {\n                if (e > l[i-1]) return false;\n    \
    \        }\n        }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\
    \ \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n \
    \   foreach (i, v; l) \n    {\n        if (i > 0) \n        {\n            if\
    \ (increasing) \n            {\n                if (v < l[i - 1]) \n         \
    \       {\n                    return false;\n                }\n            }\
    \ \n            else \n            {\n                if (v > l[i - 1]) \n   \
    \             {\n                    return false;\n                }\n      \
    \      }\n        }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n   \
    \ {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> increasing([1, 2, 4, 20])\n    True\n    >>> increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> increasing([4, 1, 0, -10])\n    False\n    \n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 0; i < l.length - 1; i++)\n    {\n        if (l[i] > l[i + 1])\n       \
    \ {\n            increasing = false;\n        }\n        if (l[i] < l[i + 1])\n\
    \        {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 0; i < l.length - 1; i++) \n    {\n        if (l[i] > l[i +\
    \ 1]) \n        {\n            increasing = false;\n        }\n        if (l[i]\
    \ < l[i + 1]) \n        {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n \
    \   bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++) \n    {\n\
    \        if (l[i] < l[i - 1]) \n        {\n            increasing = false;\n \
    \       }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n   \
    \ bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i\
    \ < l.length - 1; i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n   \
    \         increasing = false;\n        }\n        if (l[i] < l[i + 1]) \n    \
    \    {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[1] > l[0];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n\
    \            continue;\n        if (increasing && e < l[i - 1])\n            return\
    \ false;\n        if (!increasing && e > l[i - 1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2) return true;\n    bool\
    \ increasing = l[0] < l[1];\n    for (size_t i = 1; i < l.length - 1; i++) \n\
    \    {\n        if (increasing) \n        {\n            if (l[i] > l[i + 1])\
    \ return false;\n        } \n        else \n        {\n            if (l[i] <\
    \ l[i + 1]) return false;\n        }\n    }\n    return true;\n}", "{\n    if\
    \ (l.length < 2)\n        return true;\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if\
    \ (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i] > l[i -\
    \ 1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing &&\
    \ l[i] > l[i + 1]) return false;\n        if (!increasing && l[i] < l[i + 1])\
    \ return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n    \
    \    return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 2; i <\
    \ l.length; i++)\n    {\n        if (increasing)\n        {\n            if (l[i]\
    \ < l[i - 1])\n                return false;\n        }\n        else\n      \
    \  {\n            if (l[i] > l[i - 1])\n                return false;\n      \
    \  }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[1] > l[0];\n    foreach (i, e; l)\n    {\n        if\
    \ (i == 0)\n            continue;\n        if (increasing && e < l[i - 1])\n \
    \           return false;\n        if (!increasing && e > l[i - 1])\n        \
    \    return false;\n    }\n    return true;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4,\
    \ 1, 0, -10])\n    False\n*/", "{\n    long[] l2 = l[1..$];\n    return l2.all!((a,\
    \ b) => a > b || a < b)(l[0]);\n}", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l)\n    {\n  \
    \      if (i == 0)\n            continue;\n        if (increasing)\n        {\n\
    \            if (e < l[i - 1])\n                return false;\n        }\n   \
    \     else\n        {\n            if (e > l[i - 1])\n                return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n   \
    \ bool decreasing = true;\n    for (int i = 0; i < l.length - 1; i++)\n    {\n\
    \        if (l[i] > l[i + 1])\n        {\n            increasing = false;\n  \
    \      }\n        if (l[i] < l[i + 1])\n        {\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n\
    \        return true;\n    bool increasing = l[1] > l[0];\n    foreach (i, e;\
    \ l)\n    {\n        if (i > 0)\n        {\n            if (increasing && e <\
    \ l[i - 1])\n                return false;\n            if (!increasing && e >\
    \ l[i - 1])\n                return false;\n        }\n    }\n    return true;\n\
    }", "{\n    if (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] > l[i + 1]) return false;\n        }\n      \
    \  else\n        {\n            if (l[i] < l[i + 1]) return false;\n        }\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n        return\
    \ true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$])\
    \ \n    {\n        if (increasing) \n        {\n            if (e < l[i - 1])\
    \ \n            {\n                return false;\n            }\n        } \n\
    \        else \n        {\n            if (e > l[i - 1]) \n            {\n   \
    \             return false;\n            }\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length\
    \ - 1; i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < l[i - 1]) \n        {\n            increasing =\
    \ false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if the list is sorted in ascending order.\n    >>> is_sorted([1, 2, 4,\
    \ 20])\n    True\n    >>> is_sorted([1, 20, 4, 10])\n    False\n    >>> is_sorted([4,\
    \ 1, 0, -10])\n    False\n*/", "{\n    if (l.length < 2) \n    {\n        return\
    \ true;\n    }\n    else \n    {\n        bool increasing = l[0] < l[1];\n   \
    \     foreach (i, elem; l) \n        {\n            if (i > 0) \n            {\n\
    \                if (increasing) \n                {\n                    if (elem\
    \ < l[i - 1]) \n                    {\n                        return false;\n\
    \                    }\n                }\n                else \n           \
    \     {\n                    if (elem > l[i - 1]) \n                    {\n  \
    \                      return false;\n                    }\n                }\n\
    \            }\n        }\n        return true;\n    }\n}", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    auto first = l[0];\n    auto\
    \ second = l[1];\n    if (first == second) \n    {\n        return monotonic(l[1..$]);\n\
    \    }\n    auto inc = first < second;\n    foreach (i, e; l[1..$]) \n    {\n\
    \        if (inc && e < i) \n        {\n            return false;\n        }\n\
    \        if (!inc && e > i) \n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "{\n    int direction = 0;\n    foreach(i, j; zip(l[0..$-1],\
    \ l[1..$]))\n    {\n        if (i > j)\n        {\n            if (direction ==\
    \ 1)\n                return false;\n            direction = -1;\n        }\n\
    \        else if (i < j)\n        {\n            if (direction == -1)\n      \
    \          return false;\n            direction = 1;\n        }\n    }\n    return\
    \ true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n  \
    \  for (int i = 0; i < l.length - 1; i++) \n    {\n        if (l[i] > l[i + 1])\
    \ \n        {\n            increasing = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) \n        {\n            decreasing = false;\n        }\n    }\n \
    \   return increasing || decreasing;\n}", "{\n    bool increasing = true;\n  \
    \  bool decreasing = true;\n    for (int i = 0; i < l.length - 1; i++)\n    {\n\
    \        if (l[i] > l[i + 1])\n        {\n            increasing = false;\n  \
    \      }\n        if (l[i] < l[i + 1])\n        {\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] > l[i + 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    True\n    \n*/", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 0; i < l.length - 1; i++) \n  \
    \  {\n        if (l[i] > l[i + 1])\n            increasing = false;\n        if\
    \ (l[i] < l[i + 1])\n            decreasing = false;\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    if (l.length <= 1)\n        return true;\n    bool\
    \ increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n\
    \            continue;\n        if (increasing)\n        {\n            if (e\
    \ < l[i - 1])\n                return false;\n        }\n        else\n      \
    \  {\n            if (e > l[i - 1])\n                return false;\n        }\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n        return\
    \ true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$])\
    \ \n    {\n        if (increasing) \n        {\n            if (e < l[i - 1])\
    \ \n            {\n                return false;\n            }\n        } \n\
    \        else \n        {\n            if (e > l[i - 1]) \n            {\n   \
    \             return false;\n            }\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n \
    \   if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 2; i < l.length; i++) \n    {\n        if (increasing)\
    \ \n        {\n            if (l[i] < l[i - 1]) \n            {\n            \
    \    return false;\n            }\n        } \n        else \n        {\n    \
    \        if (l[i] > l[i - 1]) \n            {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4,\
    \ 1, 0, -10])\n    False\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n    {\n        increasing\
    \ &= i < j;\n        decreasing &= i > j;\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> increasing([1, 20, 4, 10])\n    False\n    >>>\
    \ increasing([4, 1, 0, -10])\n    False\n*/", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 0; i < l.length - 1; i++)\n   \
    \ {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n        if\
    \ (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 0; i < l.length - 1; i++) \n    {\n        if (l[i] > l[i +\
    \ 1]) \n        {\n            increasing = false;\n        }\n        if (l[i]\
    \ < l[i + 1]) \n        {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}", "{\n    if (l.length < 2)\n       \
    \ return true;\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l)\n  \
    \  {\n        if (i > 0)\n        {\n            if (increasing && e < l[i - 1])\n\
    \                return false;\n            if (!increasing && e > l[i - 1])\n\
    \                return false;\n        }\n    }\n    return true;\n}", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1],\
    \ l[1..$]))\n    {\n        increasing &= i < j;\n        decreasing &= i > j;\n\
    \    }\n    return increasing || decreasing;\n}", "{\n    if (l.length <= 1) \n\
    \    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n            if\
    \ (e < l[i - 1]) \n            {\n                return false;\n            }\n\
    \        } \n        else \n        {\n            if (e > l[i - 1]) \n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (size_t i = 1; i < l.length - 1; i++)\n    {\n     \
    \   if (increasing)\n        {\n            if (l[i] > l[i + 1]) return false;\n\
    \        }\n        else\n        {\n            if (l[i] < l[i + 1]) return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n        return\
    \ true;\n    bool increasing = l[1] > l[0];\n    for (int i = 2; i < l.length;\
    \ i++) \n    {\n        if (increasing && l[i] < l[i - 1]) \n            return\
    \ false;\n        if (!increasing && l[i] > l[i - 1]) \n            return false;\n\
    \    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 0; i < l.length - 1; i++) \n    {\n        if (l[i]\
    \ < l[i + 1]) \n        {\n            decreasing = false;\n        }\n      \
    \  if (l[i] > l[i + 1]) \n        {\n            increasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length ==\
    \ 0) \n    {\n        return true;\n    }\n    long[] diff = l[1 .. $] - l[0 ..\
    \ $ - 1];\n    return diff.all!(a => a == 0 || a == diff[0]);\n}", "{\n    return\
    \ l.length < 2 || (l[0] < l[1] ? l[0..$-1].zip(l[1..$]).all!(a => a[0] <= a[1])\
    \ : l[0..$-1].zip(l[1..$]).all!(a => a[0] >= a[1]));\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\
    \ \n    {\n        if (i == 0) continue;\n        if (increasing && e < l[i-1])\
    \ return false;\n        if (!increasing && e > l[i-1]) return false;\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n   \
    \ {\n        if (increasing) \n        {\n            if (e < l[i - 1]) \n   \
    \         {\n                return false;\n            }\n        } \n      \
    \  else \n        {\n            if (e > l[i - 1]) \n            {\n         \
    \       return false;\n            }\n        }\n    }\n    return true;\n}",
  "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    long[] diffs\
    \ = l[1 .. $] - l[0 .. $ - 1];\n    return all!(a => a == 0 || a == 1 || a ==\
    \ -1)(diffs);\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n\
    */", "{\n    if (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l) {\n        if (i == 0) continue;\n        if (increasing\
    \ && e < l[i-1]) return false;\n        if (!increasing && e > l[i-1]) return\
    \ false;\n    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n    {\n    \
    \    increasing &= i < j;\n        decreasing &= i > j;\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n \
    \       if (increasing && l[i] < l[i - 1])\n            return false;\n      \
    \  if (!increasing && l[i] > l[i - 1])\n            return false;\n    }\n   \
    \ return true;\n}\n/*\nReturn True if the list is sorted.\n    >>> sorted([1,\
    \ 2, 4, 20])\n    True\n    >>> sorted([1, 20, 4, 10])\n    False\n    >>> sorted([4,\
    \ 1, 0, -10])\n    False\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n    {\n        increasing\
    \ &= i < j;\n        decreasing &= i > j;\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length <= 1) return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l) {\n        if (i == 0) continue;\n        if (increasing\
    \ && e < l[i-1]) return false;\n        if (!increasing && e > l[i-1]) return\
    \ false;\n    }\n    return true;\n}", "{\n    if (l.length < 2) return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing)\n        {\n            if (l[i] > l[i + 1]) return\
    \ false;\n        }\n        else\n        {\n            if (l[i] < l[i + 1])\
    \ return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ <= 1)\n        return true;\n    long prev = l[0];\n    bool increasing = l[1]\
    \ > prev;\n    foreach (i, v; l[1..$])\n    {\n        if (increasing)\n     \
    \   {\n            if (v < prev)\n                return false;\n        }\n \
    \       else\n        {\n            if (v > prev)\n                return false;\n\
    \        }\n        prev = v;\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length\
    \ - 1; i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4,\
    \ 1, 0, -10])\n    False\n*/", "{\n    if (l.length < 2)\n    {\n        return\
    \ true;\n    }\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (increasing)\n        {\n            if (l[i] < l[i\
    \ - 1])\n            {\n                return false;\n            }\n       \
    \ }\n        else\n        {\n            if (l[i] > l[i - 1])\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \n*/", "{\n    if\
    \ (l.length < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n \
    \   foreach (i, e; l)\n    {\n        if (i == 0)\n            continue;\n   \
    \     if (increasing && e < l[i - 1])\n            return false;\n        if (!increasing\
    \ && e > l[i - 1])\n            return false;\n    }\n    return true;\n}", "{\n\
    \    if (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n    for\
    \ (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i] >\
    \ l[i + 1]) return false;\n        if (!increasing && l[i] < l[i + 1]) return\
    \ false;\n    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n*/", "{\n    if (l.length == 0)\n        return true;\n    long prev\
    \ = l[0];\n    bool increasing = true;\n    foreach (i; l[1..$])\n    {\n    \
    \    if (i == prev)\n            continue;\n        if (increasing && i < prev)\n\
    \            increasing = false;\n        else if (!increasing && i > prev)\n\
    \            return false;\n        prev = i;\n    }\n    return true;\n}", "{\n\
    \    if (l.length < 2) return true;\n    auto d = l[1] - l[0];\n    foreach (i,\
    \ e; l[1..$])\n    {\n        if (e - l[i] != d) return false;\n    }\n    return\
    \ true;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n\
    \    else \n    {\n        long[] diff = l[1 .. $] - l[0 .. $ - 1];\n        return\
    \ all!(a => a == 0)(diff) || all!(a => a == 0)(diff.map!(a => -a));\n    }\n}",
  "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] < l[i - 1])\n            {\n                return\
    \ false;\n            }\n        }\n        else\n        {\n            if (l[i]\
    \ > l[i - 1])\n            {\n                return false;\n            }\n \
    \       }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    for (int i = 0; i < l.length - 1; i++)\n    {\n    \
    \    if (l[i] > l[i + 1])\n        {\n            increasing = false;\n      \
    \  }\n        if (l[i] < l[i + 1])\n        {\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing)\n        {\n     \
    \       if (l[i] < l[i - 1])\n                return false;\n        }\n     \
    \   else\n        {\n            if (l[i] > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length == 0)\n\
    \        return true;\n    long prev = l[0];\n    bool increasing = true;\n  \
    \  foreach (i; l[1..$])\n    {\n        if (prev == i)\n            continue;\n\
    \        if (increasing)\n        {\n            if (prev > i)\n            {\n\
    \                increasing = false;\n                prev = i;\n            }\n\
    \        }\n        else\n        {\n            if (prev < i)\n             \
    \   return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n\
    */", "{\n    if (l.length == 0) return true;\n    bool increasing = true;\n  \
    \  bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n  \
    \      if (l[i] < l[i-1]) increasing = false;\n        if (l[i] > l[i-1]) decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ <= 1)\n        return true;\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i, j;\
    \ zip(l[0..$-1], l[1..$]))\n    {\n        increasing &= i < j;\n        decreasing\
    \ &= i > j;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 2; i < l.length; i++) \n    {\n        if (increasing && l[i]\
    \ < l[i - 1]) \n        {\n            return false;\n        }\n        if (!increasing\
    \ && l[i] > l[i - 1]) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \n\
    */", "{\n    long[] l2 = l.dup;\n    l2.sort;\n    return l == l2 || l == l2.reverse;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 0; i < l.length - 1; i++)\n    {\n        if (l[i] > l[i + 1])\n       \
    \ {\n            increasing = false;\n        }\n        if (l[i] < l[i + 1])\n\
    \        {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n   \
    \ {\n        if (increasing && e < l[i - 1]) \n        {\n            return false;\n\
    \        }\n        if (!increasing && e > l[i - 1]) \n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2,\
    \ 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n*/", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, x; l)\
    \ \n    {\n        if (i > 0) \n        {\n            if (increasing && l[i]\
    \ < l[i-1]) return false;\n            if (!increasing && l[i] > l[i-1]) return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 0; i < l.length - 1; i++) \n  \
    \  {\n        if (l[i] > l[i + 1]) \n        {\n            increasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n   \
    \ if (l.length < 2) return true;\n    long[] d = l[1..$] - l[0..$-1];\n    return\
    \ d.all!(x => x == 0 || x == d[0]);\n}", "{\n    if (l.length < 2) return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing && l[i] > l[i + 1]) return false;\n        if (!increasing\
    \ && l[i] < l[i + 1]) return false;\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\
    \ \n    {\n        if (i > 0) \n        {\n            if (increasing && e < l[i\
    \ - 1]) return false;\n            if (!increasing && e > l[i - 1]) return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[1] > l[0];\n    for (size_t i = 1; i < l.length;\
    \ i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n            return\
    \ false;\n        if (!increasing && l[i] > l[i - 1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (increasing && l[i] < l[i - 1])\n            return false;\n\
    \        if (!increasing && l[i] > l[i - 1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    for (int i = 0; i < l.length - 1; i++) \n    {\n        if (l[i]\
    \ > l[i + 1]) \n        {\n            increasing = false;\n        }\n      \
    \  if (l[i] < l[i + 1]) \n        {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\
    \ {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 0; i < l.length - 1; i++)\n    {\n        if (l[i]\
    \ < l[i + 1])\n            decreasing = false;\n        if (l[i] > l[i + 1])\n\
    \            increasing = false;\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn True if list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \n*/", "{\n    if\
    \ (l.length < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n \
    \   for (int i = 2; i < l.length; i++)\n    {\n        if (increasing)\n     \
    \   {\n            if (l[i] < l[i - 1])\n                return false;\n     \
    \   }\n        else\n        {\n            if (l[i] > l[i - 1])\n           \
    \     return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True if\
    \ list is sorted in ascending order.\n    >>> is_sorted([1, 2, 4, 20])\n    True\n\
    \    >>> is_sorted([1, 20, 4, 10])\n    False\n    >>> is_sorted([4, 1, 0, -10])\n\
    \    False\n*/", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n\
    \            if (increasing && e < l[i - 1])\n                return false;\n\
    \            if (!increasing && e > l[i - 1])\n                return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n \
    \       return true;\n    }\n    else \n    {\n        long[] diffs = l[1 .. $].map!(a\
    \ => a - l[$ - 1]);\n        return all!(a => a == 0 || a == 1 || a == -1)(diffs);\n\
    \    }\n}", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n        \
    \    continue;\n        if (increasing && e < l[i - 1])\n            return false;\n\
    \        if (!increasing && e > l[i - 1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    long\
    \ sign = sign(l[1] - l[0]);\n    foreach (i, v; l)\n    {\n        if (sign !=\
    \ sign(v - l[i - 1]))\n            return false;\n    }\n    return true;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (size_t i\
    \ = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n        {\n\
    \            increasing = false;\n        }\n        if (l[i] > l[i - 1]) \n \
    \       {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 0; i < l.length - 1; i++)\n    {\n        if (l[i] < l[i + 1])\n\
    \            decreasing = false;\n        if (l[i] > l[i + 1])\n            increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing = false;\n\
    \        if (l[i] > l[i + 1])\n            increasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 0; i < l.length - 1; i++) \n    {\n        if (l[i]\
    \ > l[i + 1]) \n        {\n            increasing = false;\n        }\n      \
    \  if (l[i] < l[i + 1]) \n        {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    long[] l2 = l[1..$];\n    foreach(i,\
    \ j; zip(l, l2)) {\n        if (i > j) {\n            increasing = false;\n  \
    \      }\n        if (i < j) {\n            decreasing = false;\n        }\n \
    \   }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++) \n   \
    \ {\n        if (l[i] < l[i - 1]) \n        {\n            increasing = false;\n\
    \        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n   \
    \ if (l.length < 2)\n        return true;\n    long sign = l[1] - l[0];\n    for\
    \ (int i = 1; i < l.length - 1; i++)\n    {\n        if (sign * (l[i + 1] - l[i])\
    \ < 0)\n            return false;\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++)\n    {\n        if (increasing)\n        {\n          \
    \  if (l[i] > l[i + 1]) return false;\n        }\n        else\n        {\n  \
    \          if (l[i] < l[i + 1]) return false;\n        }\n    }\n    return true;\n\
    }", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] < l[i - 1])\n                return false;\n\
    \        }\n        else\n        {\n            if (l[i] > l[i - 1])\n      \
    \          return false;\n        }\n    }\n    return true;\n}", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (size_t i = 1; i <\
    \ l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n        {\n         \
    \   increasing = false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0]\
    \ < l[1];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n            continue;\n\
    \        if (increasing)\n        {\n            if (e < l[i - 1])\n         \
    \       return false;\n        }\n        else\n        {\n            if (e >\
    \ l[i - 1])\n                return false;\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \n*/", "{\n    if\
    \ (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n \
    \   foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n\
    \    bool increasing = l[1] >= l[0];\n    for (int i = 1; i < l.length; i++) \n\
    \    {\n        if (increasing) \n        {\n            if (l[i] < l[i - 1])\
    \ \n            {\n                return false;\n            }\n        } \n\
    \        else \n        {\n            if (l[i] > l[i - 1]) \n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }", "{\n    if (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l) {\n        if (i == 0) continue;\n        if (increasing\
    \ && e < l[i-1]) return false;\n        if (!increasing && e > l[i-1]) return\
    \ false;\n    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$])) \n    {\n   \
    \     increasing &= i < j;\n        decreasing &= i > j;\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[1] > l[0];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n\
    \            continue;\n        if (increasing && e < l[i - 1])\n            return\
    \ false;\n        if (!increasing && e > l[i - 1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if\
    \ (i > 0)\n        {\n            if (increasing && e < l[i - 1])\n          \
    \      return false;\n            if (!increasing && e > l[i - 1])\n         \
    \       return false;\n        }\n    }\n    return true;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.length - 1;\
    \ i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    True\n    \n*/", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 0; i < l.length - 1; i++)\n   \
    \ {\n        if (l[i] > l[i + 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n   \
    \ if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing =\
    \ l[1] > l[0];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n        {\n\
    \            continue;\n        }\n        if (increasing)\n        {\n      \
    \      if (e < l[i - 1])\n            {\n                return false;\n     \
    \       }\n        }\n        else\n        {\n            if (e > l[i - 1])\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \n\
    */", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    foreach (i, v; l)\n    {\n        if (i == 0)\n            continue;\n\
    \        if (increasing)\n        {\n            if (v < l[i - 1])\n         \
    \       return false;\n        }\n        else\n        {\n            if (v >\
    \ l[i - 1])\n                return false;\n        }\n    }\n    return true;\n\
    }", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n            continue;\n\
    \        if (increasing && e < l[i - 1])\n            return false;\n        if\
    \ (!increasing && e > l[i - 1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n  \
    \  for (int i = 0; i < l.length - 1; i++) \n    {\n        if (l[i] > l[i + 1])\
    \ \n        {\n            increasing = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) \n        {\n            decreasing = false;\n        }\n    }\n \
    \   return increasing || decreasing;\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n   \
    \ True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4,\
    \ 1, 0, -10])\n    False\n*/", "{\n    if (l.length == 0)\n        return true;\n\
    \    long prev = l[0];\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach (i; l[1..$])\n    {\n        if (i > prev)\n            decreasing\
    \ = false;\n        if (i < prev)\n            increasing = false;\n        prev\
    \ = i;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (e < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (e > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n       \
    \ return true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i, e;\
    \ l[1..$]) \n    {\n        if (increasing) \n        {\n            if (e < l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  } \n        else \n        {\n            if (e > l[i - 1]) \n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < l[i - 1]) \n        {\n            increasing =\
    \ false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n \
    \   if (l.length <= 1)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing &&\
    \ l[i] > l[i + 1])\n            return false;\n        if (!increasing && l[i]\
    \ < l[i + 1])\n            return false;\n    }\n    return true;\n}", "{\n  \
    \  if (l.length < 2) return true;\n    long[] diffs = l[1..$] - l[0..$-1];\n \
    \   return diffs.all!(x => x == diffs[0]);\n}", "{\n    if (l.length == 0) return\
    \ true;\n    long prev = l[0];\n    bool increasing = true;\n    foreach (i; l[1..$])\
    \ {\n        if (i == prev) continue;\n        if (increasing) {\n           \
    \ if (i < prev) increasing = false;\n        } else {\n            if (i > prev)\
    \ return false;\n        }\n        prev = i;\n    }\n    return true;\n}", "{\n\
    \    if (l.length < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l) \n    {\n        if (i == 0)\n            continue;\n \
    \       if (increasing && e < l[i - 1])\n            return false;\n        if\
    \ (!increasing && e > l[i - 1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n  \
    \  for (int i = 0; i < l.length - 1; i++) \n    {\n        if (l[i] > l[i + 1])\
    \ \n        {\n            increasing = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) \n        {\n            decreasing = false;\n        }\n    }\n \
    \   return increasing || decreasing;\n}", "{\n    if (l.length < 2) \n    {\n\
    \        return true;\n    }\n    else \n    {\n        bool increasing = l[0]\
    \ < l[1];\n        foreach (i, e; l) \n        {\n            if (i > 0) \n  \
    \          {\n                if (increasing) \n                {\n          \
    \          if (e < l[i - 1]) \n                    {\n                       \
    \ return false;\n                    }\n                }\n                else\
    \ \n                {\n                    if (e > l[i - 1]) \n              \
    \      {\n                        return false;\n                    }\n     \
    \           }\n            }\n        }\n        return true;\n    }\n}", "{\n\
    \    if (l.length < 2) \n    {\n        return true;\n    }\n    long[] diffs\
    \ = l[1 .. $].map!(a => a - l[$ - 1]);\n    return diffs.all!(a => a == diffs[0])\
    \ && diffs[0] != 0;\n}\n/*\nReturn True if list is sorted.\n    >>> sorted([1,\
    \ 2, 4, 20])\n    True\n    >>> sorted([1, 20, 4, 10])\n    False\n    >>> sorted([4,\
    \ 1, 0, -10])\n    False\n*/", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (increasing)\n        {\n            if (l[i] < l[i - 1])\n\
    \                return false;\n        }\n        else\n        {\n         \
    \   if (l[i] > l[i - 1])\n                return false;\n        }\n    }\n  \
    \  return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 0; i < l.length - 1; i++)\n    {\n        if (l[i] > l[i + 1])\n\
    \        {\n            increasing = false;\n        }\n        if (l[i] < l[i\
    \ + 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length < 2) \n    {\n        return\
    \ true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i, v; l) \n \
    \   {\n        if (i == 0) \n        {\n            continue;\n        }\n   \
    \     if (increasing != (v > l[i - 1])) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> strictly_increasing([1, 2, 4, 20])\n    True\n    >>> strictly_increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> strictly_increasing([4, 1, 0, -10])\n    False\n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 0; i < l.length - 1; i++)\n    {\n        if (l[i] > l[i + 1])\n       \
    \ {\n            increasing = false;\n        }\n        if (l[i] < l[i + 1])\n\
    \        {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach(i, j; zip(l[0..$-1], l[1..$])) \n    {\n        increasing &= i <\
    \ j;\n        decreasing &= i > j;\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n            continue;\n\
    \        if (increasing && e < l[i - 1])\n            return false;\n        if\
    \ (!increasing && e > l[i - 1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n  \
    \  for (int i = 0; i < l.length - 1; i++)\n    {\n        if (l[i] < l[i + 1])\n\
    \            decreasing = false;\n        if (l[i] > l[i + 1])\n            increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] < l[i - 1])\n                return false;\n\
    \        }\n        else\n        {\n            if (l[i] > l[i - 1])\n      \
    \          return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\
    \ return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l) \n \
    \   {\n        if (i == 0) continue;\n        if (increasing) \n        {\n  \
    \          if (e < l[i - 1]) return false;\n        } \n        else \n      \
    \  {\n            if (e > l[i - 1]) return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n\
    \    bool increasing = l[1] > l[0];\n    foreach (i, v; l) \n    {\n        if\
    \ (i > 0) \n        {\n            if (increasing && v < l[i - 1]) \n        \
    \    {\n                return false;\n            }\n            if (!increasing\
    \ && v > l[i - 1]) \n            {\n                return false;\n          \
    \  }\n        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n   \
    \     return true;\n    long diff = l[1] - l[0];\n    foreach (i, e; l[1..$])\
    \ \n    {\n        if (e - l[i] != diff) \n            return false;\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[1] > l[0];\n    foreach (i, v; l)\n    {\n        if (i > 0)\n\
    \        {\n            if (increasing && v < l[i - 1])\n                return\
    \ false;\n            if (!increasing && v > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 0; i < l.length - 1; i++)\n   \
    \ {\n        if (l[i] > l[i + 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] < l[i + 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n\tif\
    \ (l.length < 2) \n\t{\n\t\treturn true;\n\t}\n\tbool increasing = l[1] > l[0];\n\
    \tforeach (i, v; l) \n\t{\n\t\tif (i > 0) \n\t\t{\n\t\t\tif (increasing) \n\t\t\
    \t{\n\t\t\t\tif (v < l[i - 1]) \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t\
    }\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (v > l[i - 1]) \n\t\t\t\t{\n\t\t\
    \t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}", "{\n\
    \    if (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n    for\
    \ (int i = 1; i < l.length - 1; i++) \n    {\n        if (increasing && l[i] >\
    \ l[i + 1]) return false;\n        if (!increasing && l[i] < l[i + 1]) return\
    \ false;\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n   \
    \     return true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i,\
    \ e; l[1..$]) \n    {\n        if (increasing && e < l[i - 1]) \n        {\n \
    \           return false;\n        }\n        if (!increasing && e > l[i - 1])\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    for (int i = 2; i < l.length; i++)\n    {\n        if (increasing\
    \ && l[i] < l[i - 1])\n            return false;\n        if (!increasing && l[i]\
    \ > l[i - 1])\n            return false;\n    }\n    return true;\n}", "{\n  \
    \  bool increasing = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1],\
    \ l[1..$]))\n    {\n        increasing &= i < j;\n        decreasing &= i > j;\n\
    \    }\n    return increasing || decreasing;\n}", "{\n    if (l.length < 2)\n\
    \        return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n    \
    \        return false;\n        if (!increasing && l[i] > l[i - 1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n \
    \       return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (increasing)\n        {\n            if\
    \ (l[i] < l[i - 1])\n                return false;\n        }\n        else\n\
    \        {\n            if (l[i] > l[i - 1])\n                return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l)\n    {\n  \
    \      if (i == 0)\n            continue;\n        if (increasing && e < l[i -\
    \ 1])\n            return false;\n        if (!increasing && e > l[i - 1])\n \
    \           return false;\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n    >>> monotonic_increasing([1, 2,\
    \ 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n\
    \    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n    \n*/", "{\n    if\
    \ (l.length < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n \
    \   foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n\
    \    \n*/", "{\n    if (l.length < 2)\n        return true;\n    long prev = l[0];\n\
    \    bool increasing = l[1] > prev;\n    foreach (i; 1..l.length)\n    {\n   \
    \     if (l[i] == prev)\n            continue;\n        if (l[i] > prev != increasing)\n\
    \            return false;\n        prev = l[i];\n    }\n    return true;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0;\
    \ i < l.length - 1; i++) \n    {\n        if (l[i] > l[i + 1]) \n        {\n \
    \           increasing = false;\n        }\n        if (l[i] < l[i + 1]) \n  \
    \      {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1,\
    \ 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    False\n\
    */", "{\n    if (l.length == 0)\n        return true;\n    long prev = l[0];\n\
    \    bool increasing = true;\n    for (long i = 1; i < l.length; i++)\n    {\n\
    \        if (prev == l[i])\n            continue;\n        if (increasing && prev\
    \ > l[i])\n        {\n            increasing = false;\n            prev = l[i];\n\
    \            continue;\n        }\n        if (!increasing && prev < l[i])\n \
    \           return false;\n        prev = l[i];\n    }\n    return true;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0;\
    \ i < l.length - 1; i++)\n    {\n        if (l[i] < l[i + 1])\n            decreasing\
    \ = false;\n        if (l[i] > l[i + 1])\n            increasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}", "{\n    if (l.length < 2) return\
    \ true;\n    bool increasing = l[0] < l[1];\n    foreach (i, v; l)\n    {\n  \
    \      if (i == 0) continue;\n        if (increasing && v < l[i-1]) return false;\n\
    \        if (!increasing && v > l[i-1]) return false;\n    }\n    return true;\n\
    }", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    for (int i = 2; i < l.length; i++)\n    {\n        if (increasing\
    \ && l[i] < l[i - 1])\n            return false;\n        if (!increasing && l[i]\
    \ > l[i - 1])\n            return false;\n    }\n    return true;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    True\n    \n*/", "{\n    if (l.length == 0) return\
    \ true;\n    long prev = l[0];\n    bool increasing = true;\n    foreach (i; 1..l.length)\
    \ {\n        if (prev == l[i]) continue;\n        if (increasing && l[i] < prev)\
    \ increasing = false;\n        if (!increasing && l[i] > prev) return false;\n\
    \        prev = l[i];\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n\
    \        return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n    \
    \        return false;\n        if (!increasing && l[i] > l[i - 1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n\
    \    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n            if\
    \ (e < l[i - 1]) \n            {\n                return false;\n            }\n\
    \        } \n        else \n        {\n            if (e > l[i - 1]) \n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 0; i < l.length - 1; i++) \n    {\n        if (l[i] > l[i +\
    \ 1]) \n        {\n            increasing = false;\n        }\n        if (l[i]\
    \ < l[i + 1]) \n        {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}", "{\n    if (l.length <= 1)\n      \
    \  return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n \
    \   {\n        if (i == 0)\n            continue;\n        if (increasing && l[i\
    \ - 1] > e)\n            return false;\n        if (!increasing && l[i - 1] <\
    \ e)\n            return false;\n    }\n    return true;\n}", "{\n    if (l.length\
    \ <= 1)\n        return true;\n    if (l[0] < l[1])\n    {\n        for (size_t\
    \ i = 1; i < l.length; i++)\n        {\n            if (l[i] < l[i-1])\n     \
    \           return false;\n        }\n    }\n    else\n    {\n        for (size_t\
    \ i = 1; i < l.length; i++)\n        {\n            if (l[i] > l[i-1])\n     \
    \           return false;\n        }\n    }\n    return true;\n}", "{\n    if\
    \ (l.length <= 1)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l)\n    {\n        if (i == 0)\n            continue;\n  \
    \      if (increasing != (e > l[i - 1]))\n            return false;\n    }\n \
    \   return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 0; i < l.length - 1; i++) \n    {\n        if (l[i] > l[i +\
    \ 1]) \n        {\n            increasing = false;\n        }\n        if (l[i]\
    \ < l[i + 1]) \n        {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}", "{\n    if (l.length <= 1) \n    {\n\
    \        return true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n            if\
    \ (e < l[i - 1]) \n            {\n                return false;\n            }\n\
    \        } \n        else \n        {\n            if (e > l[i - 1]) \n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}", "{\n    if (l.length == 0)\n    {\n        return true;\n\
    \    }\n    if (l.length == 1)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if\
    \ (increasing && l[i] > l[i + 1])\n        {\n            return false;\n    \
    \    }\n        if (!increasing && l[i] < l[i + 1])\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n\
    \        return true;\n    bool increasing = l[1] > l[0];\n    foreach (i, e;\
    \ l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}", "{\n    if\
    \ (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l) {\n        if (i == 0) continue;\n        if (increasing && e < l[i-1])\
    \ return false;\n        if (!increasing && e > l[i-1]) return false;\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n \
    \       if (increasing && l[i] < l[i - 1])\n            return false;\n      \
    \  if (!increasing && l[i] > l[i - 1])\n            return false;\n    }\n   \
    \ return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 0; i < l.length - 1; i++)\n    {\n        if (l[i] < l[i + 1])\n\
    \            decreasing = false;\n        if (l[i] > l[i + 1])\n            increasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}", "{\n    bool increasing = true;\n   \
    \ bool decreasing = true;\n    for (int i = 0; i < l.length - 1; i++) \n    {\n\
    \        if (l[i] > l[i + 1]) \n        {\n            increasing = false;\n \
    \       }\n        if (l[i] < l[i + 1]) \n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
