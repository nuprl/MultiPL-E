name: HumanEval_136_largest_smallest_integers
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
  \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and\
  \ 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative\
  \ or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2,\
  \ 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n\
  \    largest_smallest_integers([0]) == (None, None)\n    \n*/\nTuple!(Nullable!(long),\
  \ Nullable!(long)) largest_smallest_integers(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n     \
  \   auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
  \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
  \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
  \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n\
  \        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto\
  \ result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
  }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
  \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n  \
    \  Nullable!(long) smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull ||\
    \ i > largestNegative.get)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull\
    \ || i < smallestPositive.get)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(l; lst)\n    {\n     \
    \   if(l < 0)\n        {\n            if(largestNegative.isNull || l > largestNegative.get)\n\
    \            {\n                largestNegative = l;\n            }\n        }\n\
    \        else if(l > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ l < smallestPositive.get)\n            {\n                smallestPositive =\
    \ l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largestNegative is null || num > largestNegative) \n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else if(num > 0) \n        {\n            if(smallestPositive is null || num\
    \ < smallestPositive) \n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos = null;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest_neg\
    \ is null || i > largest_neg)\n            {\n                largest_neg = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallest_pos\
    \ is null || i < smallest_pos)\n            {\n                smallest_pos =\
    \ i;\n            }\n        }\n    }\n    return tuple(largest_neg, smallest_pos);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(n; lst)\n    {\n     \
    \   if(n < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = n;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, n);\n  \
    \          }\n        }\n        else if(n > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = n;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ n);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(val; lst)\n    {\n        if(val > 0)\n        {\n            if(smallest\
    \ is null || val < smallest)\n            {\n                smallest = val;\n\
    \            }\n        }\n        else if(val < 0)\n        {\n            if(largest\
    \ is null || val > largest)\n            {\n                largest = val;\n \
    \           }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(el; lst)\n    {\n        if(el < 0)\n        {\n      \
    \      if(largestNegative is null || el > largestNegative)\n            {\n  \
    \              largestNegative = el;\n            }\n        }\n        else if(el\
    \ > 0)\n        {\n            if(smallestPositive is null || el < smallestPositive)\n\
    \            {\n                smallestPositive = el;\n            }\n      \
    \  }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n  \
    \  Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative.isNull)\n            {\n                largestNegative\
    \ = num;\n            }\n            else\n            {\n                largestNegative\
    \ = max(largestNegative, num);\n            }\n        }\n        else if(num\
    \ > 0)\n        {\n            if(smallestPositive.isNull)\n            {\n  \
    \              smallestPositive = num;\n            }\n            else\n    \
    \        {\n                smallestPositive = min(smallestPositive, num);\n \
    \           }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largestNegative is null || largestNegative < num) \n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else if(num > 0) \n        {\n            if(smallestPositive is null || smallestPositive\
    \ > num) \n            {\n                smallestPositive = num;\n          \
    \  }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative is null || l > largest_negative)\n            {\n   \
    \             largest_negative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallest_positive is null || l < smallest_positive)\n\
    \            {\n                smallest_positive = l;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(!largestNegative.isNull)\n          \
    \  {\n                if(i > largestNegative.get)\n                {\n       \
    \             largestNegative.set(i);\n                }\n            }\n    \
    \        else\n            {\n                largestNegative.set(i);\n      \
    \      }\n        }\n        else if(i > 0)\n        {\n            if(!smallestPositive.isNull)\n\
    \            {\n                if(i < smallestPositive.get)\n               \
    \ {\n                    smallestPositive.set(i);\n                }\n       \
    \     }\n            else\n            {\n                smallestPositive.set(i);\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(item; lst)\n    {\n        if(item < 0)\n        {\n  \
    \          if(largestNegative is null || item > largestNegative)\n           \
    \ {\n                largestNegative = item;\n            }\n        }\n     \
    \   else if(item > 0)\n        {\n            if(smallestPositive is null || item\
    \ < smallestPositive)\n            {\n                smallestPositive = item;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i <\
    \ 0)\n        {\n            if(!largest.isNull)\n            {\n            \
    \    if(i > largest.get)\n                {\n                    largest.set(i);\n\
    \                }\n            }\n            else\n            {\n         \
    \       largest.set(i);\n            }\n        }\n        else if(i > 0)\n  \
    \      {\n            if(!smallest.isNull)\n            {\n                if(i\
    \ < smallest.get)\n                {\n                    smallest.set(i);\n \
    \               }\n            }\n            else\n            {\n          \
    \      smallest.set(i);\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long)\
    \ smallestPositive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n  \
    \      {\n            if(largestNegative is null || i > largestNegative)\n   \
    \         {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive is null ||\
    \ i < smallestPositive)\n            {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull)\n       \
    \     {\n                largestNegative = num;\n            }\n            else\n\
    \            {\n                largestNegative = max(largestNegative, num);\n\
    \            }\n        }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \       else\n            {\n                smallestPositive = min(smallestPositive,\
    \ num);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(item; lst)\n    {\n        if(item < 0)\n        {\n  \
    \          if(largestNegative is null || largestNegative < item)\n           \
    \ {\n                largestNegative = item;\n            }\n        }\n     \
    \   else if(item > 0)\n        {\n            if(smallestPositive is null || smallestPositive\
    \ > item)\n            {\n                smallestPositive = item;\n         \
    \   }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) max_neg = Nullable!(long).init;\n    Nullable!(long)\
    \ min_pos = Nullable!(long).init;\n    foreach(e; lst)\n    {\n        if(e <\
    \ 0)\n        {\n            if(max_neg.isNull || e > max_neg.get)\n         \
    \   {\n                max_neg = e;\n            }\n        }\n        else if(e\
    \ > 0)\n        {\n            if(min_pos.isNull || e < min_pos.get)\n       \
    \     {\n                min_pos = e;\n            }\n        }\n    }\n    return\
    \ tuple(max_neg, min_pos);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n    {\n \
    \       if(i < 0)\n        {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(!largestNegative.isNull)\n          \
    \  {\n                if(i > largestNegative.get)\n                {\n       \
    \             largestNegative.set(i);\n                }\n            }\n    \
    \        else\n            {\n                largestNegative.set(i);\n      \
    \      }\n        }\n        else if(i > 0)\n        {\n            if(!smallestPositive.isNull)\n\
    \            {\n                if(i < smallestPositive.get)\n               \
    \ {\n                    smallestPositive.set(i);\n                }\n       \
    \     }\n            else\n            {\n                smallestPositive.set(i);\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(long i; lst)\n    {\n        if(i < 0)\n        {\n   \
    \         if(largestNegative is null || i > largestNegative)\n               \
    \ largestNegative = i;\n        }\n        else if(i > 0)\n        {\n       \
    \     if(smallestPositive is null || i < smallestPositive)\n                smallestPositive\
    \ = i;\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n  \
    \  foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n                largest = i;\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest is null || i < smallest)\n   \
    \             smallest = i;\n        }\n    }\n    return tuple(largest, smallest);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largestNegative is null || i > largestNegative) \n            {\n  \
    \              largestNegative = i;\n            }\n        } \n        else if(i\
    \ > 0) \n        {\n            if(smallestPositive is null || i < smallestPositive)\
    \ \n            {\n                smallestPositive = i;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i > 0)\n        {\n        \
    \    if(smallestPositive is null)\n            {\n                smallestPositive\
    \ = i;\n            }\n            else\n            {\n                smallestPositive\
    \ = min(smallestPositive, i);\n            }\n        }\n        else if(i < 0)\n\
    \        {\n            if(largestNegative is null)\n            {\n         \
    \       largestNegative = i;\n            }\n            else\n            {\n\
    \                largestNegative = max(largestNegative, i);\n            }\n \
    \       }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largestNegative is null || i > largestNegative) \n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0) \n        {\n            if(smallestPositive is null || i < smallestPositive)\
    \ \n            {\n                smallestPositive = i;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative.isNull || num > largestNegative.get)\n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else if(num > 0)\n        {\n            if(smallestPositive.isNull || num\
    \ < smallestPositive.get)\n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n            if(largest\
    \ is null || l > largest)\n            {\n                largest = l;\n     \
    \       }\n        }\n        else if(l > 0)\n        {\n            if(smallest\
    \ is null || l < smallest)\n            {\n                smallest = l;\n   \
    \         }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largestNegative is null || elem > largestNegative)\n           \
    \ {\n                largestNegative = elem;\n            }\n        }\n     \
    \   else if(elem > 0)\n        {\n            if(smallestPositive is null || elem\
    \ < smallestPositive)\n            {\n                smallestPositive = elem;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   auto largest = Nullable!(long)();\n    auto smallest = Nullable!(long)();\n\
    \    foreach(i; lst)\n    {\n        if(i > 0)\n        {\n            if(smallest.isNull\
    \ || i < smallest.get)\n            {\n                smallest = i;\n       \
    \     }\n        }\n        else if(i < 0)\n        {\n            if(largest.isNull\
    \ || i > largest.get)\n            {\n                largest = i;\n         \
    \   }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(long\
    \ i; lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative\
    \ is null || i > largestNegative)\n                largestNegative = i;\n    \
    \    }\n        else if(i > 0)\n        {\n            if(smallestPositive is\
    \ null || i < smallestPositive)\n                smallestPositive = i;\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest.isNull || num > largest.get)\n            {\n\
    \                largest = num;\n            }\n        }\n        else if(num\
    \ > 0)\n        {\n            if(smallest.isNull || num < smallest.get)\n   \
    \         {\n                smallest = num;\n            }\n        }\n    }\n\
    \    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull)\n\
    \            {\n                largestNegative = i;\n            }\n        \
    \    else\n            {\n                largestNegative = max(largestNegative,\
    \ i);\n            }\n        }\n        else if(i > 0)\n        {\n         \
    \   if(smallestPositive.isNull)\n            {\n                smallestPositive\
    \ = i;\n            }\n            else\n            {\n                smallestPositive\
    \ = min(smallestPositive, i);\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}", "{\n    Nullable!(long) largestNegative = null;\n  \
    \  Nullable!(long) smallestPositive = null;\n    foreach(l; lst)\n    {\n    \
    \    if(l < 0)\n        {\n            if(largestNegative is null || l > largestNegative)\n\
    \            {\n                largestNegative = l;\n            }\n        }\n\
    \        else if(l > 0)\n        {\n            if(smallestPositive is null ||\
    \ l < smallestPositive)\n            {\n                smallestPositive = l;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(largest.isNull)\n            {\n                largest\
    \ = i;\n            }\n            else\n            {\n                largest\
    \ = max(largest, i);\n            }\n        }\n        else if(i > 0)\n     \
    \   {\n            if(smallest.isNull)\n            {\n                smallest\
    \ = i;\n            }\n            else\n            {\n                smallest\
    \ = min(smallest, i);\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n \
    \       {\n            if(largest_negative is null || l > largest_negative)\n\
    \            {\n                largest_negative = l;\n            }\n       \
    \ }\n        else if(l > 0)\n        {\n            if(smallest_positive is null\
    \ || l < smallest_positive)\n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(long i; lst)\n    {\n        if(i < 0)\n        {\n   \
    \         if(largestNegative is null || i > largestNegative)\n               \
    \ largestNegative = i;\n        }\n        else if(i > 0)\n        {\n       \
    \     if(smallestPositive is null || i < smallestPositive)\n                smallestPositive\
    \ = i;\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largest_negative is null || elem > largest_negative)\n         \
    \   {\n                largest_negative = elem;\n            }\n        }\n  \
    \      else if(elem > 0)\n        {\n            if(smallest_positive is null\
    \ || elem < smallest_positive)\n            {\n                smallest_positive\
    \ = elem;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largestNegative = null;\n \
    \   Nullable!(long) smallestPositive = null;\n    foreach(item; lst) \n    {\n\
    \        if(item < 0) \n        {\n            if(largestNegative.isNull || item\
    \ > largestNegative.get) \n            {\n                largestNegative = item;\n\
    \            }\n        }\n        else if(item > 0) \n        {\n           \
    \ if(smallestPositive.isNull || item < smallestPositive.get) \n            {\n\
    \                smallestPositive = item;\n            }\n        }\n    }\n \
    \   return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(num;\
    \ lst) \n    {\n        if(num < 0) \n        {\n            if(largestNegative\
    \ is null || num > largestNegative) \n            {\n                largestNegative\
    \ = num;\n            }\n        }\n        else if(num > 0) \n        {\n   \
    \         if(smallestPositive is null || num < smallestPositive) \n          \
    \  {\n                smallestPositive = num;\n            }\n        }\n    }\n\
    \    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative is\
    \ null || i > largestNegative)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive is null || i < smallestPositive)\n            {\n   \
    \             smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull ||\
    \ i > largestNegative.get)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull\
    \ || i < smallestPositive.get)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largest_negative.isNull || num > largest_negative) \n          \
    \  {\n                largest_negative = num;\n            }\n        }\n    \
    \    else if(num > 0) \n        {\n            if(smallest_positive.isNull ||\
    \ num < smallest_positive) \n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largestNegative = null;\n \
    \   Nullable!(long) smallestPositive = null;\n    foreach(elem; lst)\n    {\n\
    \        if(elem < 0)\n        {\n            if(largestNegative is null || elem\
    \ > largestNegative)\n            {\n                largestNegative = elem;\n\
    \            }\n        }\n        else if(elem > 0)\n        {\n            if(smallestPositive\
    \ is null || elem < smallestPositive)\n            {\n                smallestPositive\
    \ = elem;\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}", "{\n    Nullable!(long) largestNegative = null;\n  \
    \  Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n    {\n    \
    \    if(i < 0)\n        {\n            if(largestNegative is null || i > largestNegative)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive is null ||\
    \ i < smallestPositive)\n            {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(largest.isNull)\n            {\n                largest\
    \ = i;\n            }\n            else\n            {\n                largest\
    \ = max(largest, i);\n            }\n        }\n        else if(i > 0)\n     \
    \   {\n            if(smallest.isNull)\n            {\n                smallest\
    \ = i;\n            }\n            else\n            {\n                smallest\
    \ = min(smallest, i);\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n\
    \    Nullable!(long) smallestPositive = Nullable!(long).init;\n    foreach(l;\
    \ lst)\n    {\n        if(l < 0)\n        {\n            if(largestNegative.isNull\
    \ || l > largestNegative.get)\n            {\n                largestNegative\
    \ = l;\n            }\n        }\n        else if(l > 0)\n        {\n        \
    \    if(smallestPositive.isNull || l < smallestPositive.get)\n            {\n\
    \                smallestPositive = l;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst)\n    {\n        if(i > 0)\n        {\n            if(smallest\
    \ is null || i < smallest)\n            {\n                smallest = i;\n   \
    \         }\n        }\n        else if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n            {\n                largest = i;\n     \
    \       }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n  \
    \  Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(largest.isNull || i > largest.get)\n            {\n  \
    \              largest = i;\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest.isNull || i < smallest.get)\n            {\n\
    \                smallest = i;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long)\
    \ smallestPositive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largestNegative is null || i > largestNegative) \n            {\n  \
    \              largestNegative = i;\n            }\n        } \n        else if(i\
    \ > 0) \n        {\n            if(smallestPositive is null || i < smallestPositive)\
    \ \n            {\n                smallestPositive = i;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(long i; lst)\n    {\n        if(i < 0)\n        {\n   \
    \         if(largestNegative is null || i > largestNegative)\n               \
    \ largestNegative = i;\n        }\n        else if(i > 0)\n        {\n       \
    \     if(smallestPositive is null || i < smallestPositive)\n                smallestPositive\
    \ = i;\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative is null || l > largest_negative)\n            {\n   \
    \             largest_negative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallest_positive is null || l < smallest_positive)\n\
    \            {\n                smallest_positive = l;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n \
    \   foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largest\
    \ is null || num > largest)\n            {\n                largest = num;\n \
    \           }\n        }\n        else if(num > 0)\n        {\n            if(smallest\
    \ is null || num < smallest)\n            {\n                smallest = num;\n\
    \            }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(!largest.isNull)\n            {\n                if(i\
    \ > largest.get)\n                {\n                    largest.set(i);\n   \
    \             }\n            }\n            else\n            {\n            \
    \    largest.set(i);\n            }\n        }\n        else if(i > 0)\n     \
    \   {\n            if(!smallest.isNull)\n            {\n                if(i <\
    \ smallest.get)\n                {\n                    smallest.set(i);\n   \
    \             }\n            }\n            else\n            {\n            \
    \    smallest.set(i);\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largest = Nullable!(long).init;\n  \
    \  Nullable!(long) smallest = Nullable!(long).init;\n    foreach(num; lst)\n \
    \   {\n        if(num > 0)\n        {\n            if(smallest.isNull)\n     \
    \       {\n                smallest = num;\n            }\n            else\n\
    \            {\n                smallest = min(smallest, num);\n            }\n\
    \        }\n        else if(num < 0)\n        {\n            if(largest.isNull)\n\
    \            {\n                largest = num;\n            }\n            else\n\
    \            {\n                largest = max(largest, num);\n            }\n\
    \        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative is\
    \ null || i > largestNegative)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive is null || i < smallestPositive)\n            {\n   \
    \             smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largest\
    \ = Nullable!(long).init;\n    Nullable!(long) smallest = Nullable!(long).init;\n\
    \    foreach(e; lst)\n    {\n        if(e > 0)\n        {\n            if(smallest.isNull)\n\
    \            {\n                smallest = e;\n            }\n            else\n\
    \            {\n                smallest = min(smallest, e);\n            }\n\
    \        }\n        else if(e < 0)\n        {\n            if(largest.isNull)\n\
    \            {\n                largest = e;\n            }\n            else\n\
    \            {\n                largest = max(largest, e);\n            }\n  \
    \      }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(l;\
    \ lst)\n    {\n        if(l < 0)\n        {\n            if(largestNegative is\
    \ null || l > largestNegative)\n            {\n                largestNegative\
    \ = l;\n            }\n        }\n        else if(l > 0)\n        {\n        \
    \    if(smallestPositive is null || l < smallestPositive)\n            {\n   \
    \             smallestPositive = l;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(l; lst)\n    {\n     \
    \   if(l < 0)\n        {\n            if(largestNegative.isNull || l > largestNegative.get)\n\
    \            {\n                largestNegative = l;\n            }\n        }\n\
    \        else if(l > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ l < smallestPositive.get)\n            {\n                smallestPositive =\
    \ l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(num; lst)\n    {\n        if(num\
    \ < 0)\n        {\n            if(largest.isNull || num > largest.get)\n     \
    \       {\n                largest = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallest.isNull || num < smallest.get)\n\
    \            {\n                smallest = num;\n            }\n        }\n  \
    \  }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(e; lst)\n    {\n        if(e < 0)\n        {\n            if(largest\
    \ is null || e > largest)\n                largest = e;\n        }\n        else\
    \ if(e > 0)\n        {\n            if(smallest is null || e < smallest)\n   \
    \             smallest = e;\n        }\n    }\n    return tuple(largest, smallest);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n    foreach(e;\
    \ lst)\n    {\n        if(e > 0)\n        {\n            if(smallest is null)\n\
    \            {\n                smallest = e;\n            }\n            else\n\
    \            {\n                smallest = min(smallest, e);\n            }\n\
    \        }\n        else if(e < 0)\n        {\n            if(largest is null)\n\
    \            {\n                largest = e;\n            }\n            else\n\
    \            {\n                largest = max(largest, e);\n            }\n  \
    \      }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative is\
    \ null || i > largestNegative)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive is null || i < smallestPositive)\n            {\n   \
    \             smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) a = null;\n    Nullable!(long) b = null;\n    foreach(e;\
    \ lst)\n    {\n        if(e < 0)\n        {\n            if(a is null || e > a)\n\
    \                a = e;\n        }\n        else if(e > 0)\n        {\n      \
    \      if(b is null || e < b)\n                b = e;\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long)\
    \ smallestPositive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largestNegative is null || num > largestNegative)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive is\
    \ null || num < smallestPositive)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || largestNegative.get > i)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive.isNull || smallestPositive.get\
    \ < i)\n            {\n                smallestPositive = i;\n            }\n\
    \        }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n \
    \   foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n                largest = i;\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest is null || i < smallest)\n   \
    \             smallest = i;\n        }\n    }\n    return tuple(largest, smallest);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(e; lst) \n    {\n        if(e < 0) \n        {\n            if(largest\
    \ is null || e > largest) \n            {\n                largest = e;\n    \
    \        }\n        }\n        else if(e > 0) \n        {\n            if(smallest\
    \ is null || e < smallest) \n            {\n                smallest = e;\n  \
    \          }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull)\n       \
    \     {\n                largestNegative = num;\n            }\n            else\n\
    \            {\n                largestNegative = max(largestNegative, num);\n\
    \            }\n        }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \       else\n            {\n                smallestPositive = min(smallestPositive,\
    \ num);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos = null;\n\
    \    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largest_neg\
    \ is null || num > largest_neg)\n                largest_neg = num;\n        }\n\
    \        else if(num > 0)\n        {\n            if(smallest_pos is null || num\
    \ < smallest_pos)\n                smallest_pos = num;\n        }\n    }\n   \
    \ return tuple(largest_neg, smallest_pos);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull)\n            {\n                largestNegative\
    \ = i;\n            }\n            else\n            {\n                largestNegative\
    \ = max(largestNegative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallestPositive.isNull)\n            {\n         \
    \       smallestPositive = i;\n            }\n            else\n            {\n\
    \                smallestPositive = min(smallestPositive, i);\n            }\n\
    \        }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ long maxNeg = long.min;\n    long minPos = long.max;\n    foreach(i; lst)\n\
    \    {\n        if(i > 0)\n        {\n            minPos = min(minPos, i);\n \
    \       }\n        else if(i < 0)\n        {\n            maxNeg = max(maxNeg,\
    \ i);\n        }\n    }\n    return tuple(maxNeg == long.min ? null : maxNeg,\
    \ minPos == long.max ? null : minPos);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(n; lst)\n\
    \    {\n        if(n < 0)\n        {\n            if(largest_negative is null\
    \ || n > largest_negative)\n            {\n                largest_negative =\
    \ n;\n            }\n        }\n        else if(n > 0)\n        {\n          \
    \  if(smallest_positive is null || n < smallest_positive)\n            {\n   \
    \             smallest_positive = n;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(num; lst)\n\
    \    {\n        if(num < 0)\n        {\n            if(largestNegative is null\
    \ || num > largestNegative)\n            {\n                largestNegative =\
    \ num;\n            }\n        }\n        else if(num > 0)\n        {\n      \
    \      if(smallestPositive is null || num < smallestPositive)\n            {\n\
    \                smallestPositive = num;\n            }\n        }\n    }\n  \
    \  return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(l;\
    \ lst)\n    {\n        if(l < 0)\n        {\n            if(largestNegative is\
    \ null || l > largestNegative)\n            {\n                largestNegative\
    \ = l;\n            }\n        }\n        else if(l > 0)\n        {\n        \
    \    if(smallestPositive is null || l < smallestPositive)\n            {\n   \
    \             smallestPositive = l;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(l; lst)\n\
    \    {\n        if(l < 0)\n        {\n            if(largestNegative is null ||\
    \ l > largestNegative)\n            {\n                largestNegative = l;\n\
    \            }\n        }\n        else if(l > 0)\n        {\n            if(smallestPositive\
    \ is null || l < smallestPositive)\n            {\n                smallestPositive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative.isNull || num > largestNegative.get)\n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else if(num > 0)\n        {\n            if(smallestPositive.isNull || num\
    \ < smallestPositive.get)\n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) min = null;\n    Nullable!(long) max = null;\n    foreach(e;\
    \ lst)\n    {\n        if(e < 0)\n        {\n            if(max is null || e >\
    \ max)\n                max = e;\n        }\n        else if(e > 0)\n        {\n\
    \            if(min is null || e < min)\n                min = e;\n        }\n\
    \    }\n    return tuple(max, min);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n                largest = i;\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest is null || i < smallest)\n   \
    \             smallest = i;\n        }\n    }\n    return tuple(largest, smallest);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative is null || l > largest_negative)\n            {\n   \
    \             largest_negative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallest_positive is null || l < smallest_positive)\n\
    \            {\n                smallest_positive = l;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n \
    \   foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largest\
    \ is null || num > largest)\n            {\n                largest = num;\n \
    \           }\n        }\n        else if(num > 0)\n        {\n            if(smallest\
    \ is null || num < smallest)\n            {\n                smallest = num;\n\
    \            }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(item; lst)\n    {\n        if(item < 0)\n        {\n  \
    \          if(largestNegative is null || item > largestNegative)\n           \
    \ {\n                largestNegative = item;\n            }\n        }\n     \
    \   else if(item > 0)\n        {\n            if(smallestPositive is null || item\
    \ < smallestPositive)\n            {\n                smallestPositive = item;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largestNegative is null || i > largestNegative) \n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0) \n        {\n            if(smallestPositive is null || i < smallestPositive)\
    \ \n            {\n                smallestPositive = i;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   long largestNegative = long.min;\n    long smallestPositive = long.max;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            largestNegative\
    \ = max(largestNegative, i);\n        }\n        else if(i > 0)\n        {\n \
    \           smallestPositive = min(smallestPositive, i);\n        }\n    }\n \
    \   return tuple(largestNegative == long.min ? null : largestNegative, smallestPositive\
    \ == long.max ? null : smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = Nullable!(long).init;\n    Nullable!(long) smallestPositive = Nullable!(long).init;\n\
    \    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largestNegative.isNull\
    \ || num > largestNegative.get)\n            {\n                largestNegative\
    \ = num;\n            }\n        }\n        else if(num > 0)\n        {\n    \
    \        if(smallestPositive.isNull || num < smallestPositive.get)\n         \
    \   {\n                smallestPositive = num;\n            }\n        }\n   \
    \ }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative is\
    \ null || i > largestNegative)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive is null || i < smallestPositive)\n            {\n   \
    \             smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative is null\
    \ || i > largest_negative)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else if(i > 0)\n        {\n          \
    \  if(smallest_positive is null || i < smallest_positive)\n            {\n   \
    \             smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = Nullable!(long).init;\n    Nullable!(long) smallestPositive = Nullable!(long).init;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull\
    \ || i > largestNegative.get)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive.isNull || i < smallestPositive.get)\n            {\n\
    \                smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = Nullable!(long).init;\n    Nullable!(long) smallestPositive = Nullable!(long).init;\n\
    \    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largestNegative.isNull\
    \ || num > largestNegative.get)\n            {\n                largestNegative\
    \ = num;\n            }\n        }\n        else if(num > 0)\n        {\n    \
    \        if(smallestPositive.isNull || num < smallestPositive.get)\n         \
    \   {\n                smallestPositive = num;\n            }\n        }\n   \
    \ }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(num;\
    \ lst)\n    {\n        if(num < 0)\n        {\n            if(largestNegative\
    \ is null || num > largestNegative)\n            {\n                largestNegative\
    \ = num;\n            }\n        }\n        else if(num > 0)\n        {\n    \
    \        if(smallestPositive is null || num < smallestPositive)\n            {\n\
    \                smallestPositive = num;\n            }\n        }\n    }\n  \
    \  return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative is\
    \ null || i > largestNegative)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive is null || i < smallestPositive)\n            {\n   \
    \             smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = Nullable!(long).init;\n    Nullable!(long) smallestPositive = Nullable!(long).init;\n\
    \    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largestNegative.isNull\
    \ || num > largestNegative.get)\n            {\n                largestNegative\
    \ = num;\n            }\n        }\n        else if(num > 0)\n        {\n    \
    \        if(smallestPositive.isNull || num < smallestPositive.get)\n         \
    \   {\n                smallestPositive = num;\n            }\n        }\n   \
    \ }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull\
    \ || i > largestNegative.get)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive.isNull || i < smallestPositive.get)\n            {\n\
    \                smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull ||\
    \ i > largestNegative.get)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull\
    \ || i < smallestPositive.get)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos = null;\n\
    \    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largest_neg\
    \ is null || num > largest_neg)\n            {\n                largest_neg =\
    \ num;\n            }\n        }\n        else if(num > 0)\n        {\n      \
    \      if(smallest_pos is null || num < smallest_pos)\n            {\n       \
    \         smallest_pos = num;\n            }\n        }\n    }\n    return tuple(largest_neg,\
    \ smallest_pos);\n}", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long)\
    \ smallestPositive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largestNegative is null || num > largestNegative)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive is\
    \ null || num < smallestPositive)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_positive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n    \
    \    if(i < 0)\n        {\n            if(largest_negative.isNull || i > largest_negative.get)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largest is null ||\
    \ i > largest)\n                largest = i;\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest is null || i < smallest)\n               \
    \ smallest = i;\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long) smallest\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(!largest.isNull)\n            {\n                if(i\
    \ > largest.get)\n                {\n                    largest.set(i);\n   \
    \             }\n            }\n            else\n            {\n            \
    \    largest.set(i);\n            }\n        }\n        else if(i > 0)\n     \
    \   {\n            if(!smallest.isNull)\n            {\n                if(i <\
    \ smallest.get)\n                {\n                    smallest.set(i);\n   \
    \             }\n            }\n            else\n            {\n            \
    \    smallest.set(i);\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long)\
    \ smallestPositive = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n  \
    \      {\n            if(largestNegative is null || l > largestNegative)\n   \
    \         {\n                largestNegative = l;\n            }\n        }\n\
    \        else if(l > 0)\n        {\n            if(smallestPositive is null ||\
    \ l < smallestPositive)\n            {\n                smallestPositive = l;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n \
    \   foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n                largest = i;\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest is null || i < smallest)\n   \
    \             smallest = i;\n        }\n    }\n    return tuple(largest, smallest);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largest_negative is null || elem > largest_negative)\n         \
    \   {\n                largest_negative = elem;\n            }\n        }\n  \
    \      else if(elem > 0)\n        {\n            if(smallest_positive is null\
    \ || elem < smallest_positive)\n            {\n                smallest_positive\
    \ = elem;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largestNegative = null;\n \
    \   Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n    {\n   \
    \     if(i < 0)\n        {\n            if(largestNegative is null || i > largestNegative)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive is null ||\
    \ i < smallestPositive)\n            {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(e; lst)\n    {\n        if(e > 0)\n        {\n            if(smallest\
    \ is null)\n            {\n                smallest = e;\n            }\n    \
    \        else\n            {\n                smallest = min(smallest, e);\n \
    \           }\n        }\n        else if(e < 0)\n        {\n            if(largest\
    \ is null)\n            {\n                largest = e;\n            }\n     \
    \       else\n            {\n                largest = max(largest, e);\n    \
    \        }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largestNegative is null || elem > largestNegative)\n           \
    \ {\n                largestNegative = elem;\n            }\n        }\n     \
    \   else if(elem > 0)\n        {\n            if(smallestPositive is null || elem\
    \ < smallestPositive)\n            {\n                smallestPositive = elem;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative is null || num > largest_negative)\n            {\n\
    \                largest_negative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallest_positive is null || num < smallest_positive)\n\
    \            {\n                smallest_positive = num;\n            }\n    \
    \    }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n \
    \   foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest\
    \ is null || i > largest)\n                largest = i;\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest is null || i < smallest)\n   \
    \             smallest = i;\n        }\n    }\n    return tuple(largest, smallest);\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
