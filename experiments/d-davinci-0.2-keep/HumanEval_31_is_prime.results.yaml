name: HumanEval_31_is_prime
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    else\n    {\n        long i = 5;\n        while\
    \ (i * i <= n)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n \
    \               return false;\n            i += 6;\n        }\n        return\
    \ true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6zmc8r39.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6zmc8r39.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n \
    \           return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnizyy8m9.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpnizyy8m9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n        return false;\n\
    \    }\n    else if (n <= 3)\n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        for (int i = 5; i * i <= n; i += 6)\n        {\n            if\
    \ (n % i == 0 || n % (i + 2) == 0)\n            {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n    {\n        return false;\n\
    \    }\n    for (long i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n \
    \       {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n        return false;\n\
    \    }\n    else if (n <= 3) \n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n    }\n    long i\
    \ = 5;\n    while (i * i <= n) \n    {\n        if (n % i == 0 || n % (i + 2)\
    \ == 0) \n        {\n            return false;\n        }\n        i = i + 6;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_fy6ezl.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpq_fy6ezl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ms9ddx4.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5ms9ddx4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return\
    \ false;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n\
    \        {\n            if (n % i == 0)\n                return false;\n     \
    \       i += 2;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvo3q7ect.d(31): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvo3q7ect.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppvg3c3ak.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppvg3c3ak.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n \
    \           return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzpv_1asn.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzpv_1asn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9qv5ghl5.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9qv5ghl5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (int i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  for (long i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n        return false;\n\
    \    }\n    else if (n <= 3)\n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        for (long i = 5; i * i <= n; i += 6)\n        {\n            if\
    \ (n % i == 0 || n % (i + 2) == 0)\n            {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    int i = 5;\n    while (i * i <= n)\n    {\n \
    \       if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n     \
    \   i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (int i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7owth87v.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7owth87v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return\
    \ false;\n    else\n    {\n        for (long i = 3; i <= sqrt(n); i += 2)\n  \
    \      {\n            if (n % i == 0)\n                return false;\n       \
    \ }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ljicsse.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7ljicsse.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgqajt06j.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgqajt06j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyz1pi0jh.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpyz1pi0jh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcm7j1u0k.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcm7j1u0k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (int i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n        return false;\n\
    \    }\n    else if (n <= 3)\n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        for (int i = 5; i * i <= n; i += 6)\n        {\n            if\
    \ (n % i == 0 || n % (i + 2) == 0)\n            {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6) \n        if (n % i == 0 || n % (i + 2) == 0)\
    \ \n            return false; \n    return true; \n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n        return false;\n\
    \    if (n <= 3) \n        return true;\n    if (n % 2 == 0 || n % 3 == 0) \n\
    \        return false;\n    for (long i = 5; i * i <= n; i = i + 6) \n       \
    \ if (n % i == 0 || n % (i + 2) == 0) \n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvr8jsd2g.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvr8jsd2g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    int i = 5;\n    while (i * i <= n)\n    {\n \
    \       if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n     \
    \   i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    int i = 5;\n    while (i * i <= n) {\n      \
    \  if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <\
    \ sqrt(n) + 1; i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp9tfzitj.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpp9tfzitj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n        return false;\n\
    \    }\n    else if (n <= 3) \n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n    }\n    long i\
    \ = 5;\n    while (i * i <= n) \n    {\n        if (n % i == 0 || n % (i + 2)\
    \ == 0) \n        {\n            return false;\n        }\n        i = i + 6;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2psvifan.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2psvifan.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp00wkz0q9.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp00wkz0q9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i += 6) \n        if (n % i == 0 || n % (i + 2) == 0) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8zr7ttlj.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8zr7ttlj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    else\n    {\n        for (long i = 5; i * i <=\
    \ n; i += 6)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n   \
    \             return false;\n        }\n        return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    foreach (i; 2 .. sqrt(n)\
    \ + 1)\n    {\n        if (n % i == 0) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwd_gmy7f.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwd_gmy7f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpawahyism.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpawahyism.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn65sh8to.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpn65sh8to.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpysg_4m4o.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpysg_4m4o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    int i = 5;\n    while (i * i <= n) {\n      \
    \  if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm1ubw48k.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpm1ubw48k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i += 6) \n        if (n % i == 0 || n % (i + 2) == 0) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return\
    \ false;\n    else\n    {\n        for (long i = 3; i <= sqrt(n); i += 2)\n  \
    \      {\n            if (n % i == 0)\n                return false;\n       \
    \ }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcf1zjold.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcf1zjold.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9ekh5zef.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9ekh5zef.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_bv44ln.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmph_bv44ln.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n    {\n        return false;\n\
    \    }\n    else if (n == 2)\n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0)\n    {\n        return false;\n    }\n    else\n    {\n       \
    \ for (long i = 3; i < n; i += 2)\n        {\n            if (n % i == 0)\n  \
    \          {\n                return false;\n            }\n        }\n      \
    \  return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\n  \
    \  assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n   \
    \ assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n  \
    \  assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L)\
    \ == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n\
    \    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeovrci3u.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpeovrci3u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n    {\n        return false;\n\
    \    }\n    else if (n == 2)\n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0)\n    {\n        return false;\n    }\n    else\n    {\n       \
    \ for (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i ==\
    \ 0)\n            {\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_z88jivf.d(36): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_z88jivf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp511rkqq_.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp511rkqq_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbh90khtr.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpbh90khtr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    else\n    {\n        for (long i = 5; i * i <=\
    \ n; i += 6)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n   \
    \             return false;\n        }\n        return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpveymzep8.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpveymzep8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  for (long i = 2; i <= sqrt(n); i++)\n    {\n        if (n % i == 0)\n     \
    \       return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgks9g8b0.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgks9g8b0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    int i = 5;\n    while (i * i <= n)\n    {\n \
    \       if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n     \
    \   i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n        return false;\n\
    \    }\n    else if (n <= 3)\n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n    }\n    long i\
    \ = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) ==\
    \ 0)\n        {\n            return false;\n        }\n        i = i + 6;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n  \
    \  assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n   \
    \ assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n  \
    \  assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L)\
    \ == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n\
    \    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3pm87qj2.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp3pm87qj2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    int i = 5;\n    while (i * i <= n)\n    {\n \
    \       if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n     \
    \   i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n \
    \           return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwez9fl04.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwez9fl04.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n        return false;\n\
    \    }\n    else if (n <= 3) \n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n    }\n    long i\
    \ = 5;\n    while (i * i <= n) \n    {\n        if (n % i == 0 || n % (i + 2)\
    \ == 0) \n        {\n            return false;\n        }\n        i = i + 6;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    long i = 3;\n    while (i <= sqrt(n))\n    {\n        if (n % i == 0)\n \
    \           return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2dgecirc.d(29): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2dgecirc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (int i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    long m = sqrt(n);\n    for (long i = 3; i <= m; i += 2)\n        if (n %\
    \ i == 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj8evdcot.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpj8evdcot.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i += 6) \n        if (n % i == 0 || n % (i + 2) == 0) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbsempqjo.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpbsempqjo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    int i = 5;\n    while (i * i <= n) {\n      \
    \  if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (int i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    int i = 5;\n    while (i * i <= n)\n    {\n \
    \       if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n     \
    \   i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpavbqdjn4.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpavbqdjn4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n == 1) \n    {\n        return false;\n\
    \    }\n    if (n == 2) \n    {\n        return true;\n    }\n    if (n % 2 ==\
    \ 0) \n    {\n        return false;\n    }\n    for (long i = 3; i <= sqrt(n);\
    \ i += 2) \n    {\n        if (n % i == 0) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_z2yok0t.d(34): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_z2yok0t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (int i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps6df7j0u.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmps6df7j0u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_jlhy4wf.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_jlhy4wf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n \
    \           return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcr9fvq1_.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcr9fvq1_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzk7zh3hs.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzk7zh3hs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3z0aljul.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp3z0aljul.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    int i = 5;\n    while (i * i <= n)\n    {\n \
    \       if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n     \
    \   i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return\
    \ false;\n    else\n    {\n        for (long i = 3; i <= sqrt(n); i += 2)\n  \
    \      {\n            if (n % i == 0)\n                return false;\n       \
    \ }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_g0xpb9l.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_g0xpb9l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmundrmba.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpmundrmba.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6) \n        if (n % i == 0 || n % (i + 2) == 0)\
    \ \n            return false; \n    return true; \n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj674gdpl.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpj674gdpl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n        return false;\n\
    \    }\n    else if (n <= 3) \n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n    }\n    long i\
    \ = 5;\n    while (i * i <= n) \n    {\n        if (n % i == 0 || n % (i + 2)\
    \ == 0) \n        {\n            return false;\n        }\n        i = i + 6;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i += 6) \n        if (n % i == 0 || n % (i + 2) == 0) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    else\n    {\n        for (long i = 5; i * i <=\
    \ n; i += 6)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n   \
    \             return false;\n        }\n        return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2cjw1ibj.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2cjw1ibj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i + 2) == 0) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpew9vhr5t.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpew9vhr5t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n    {\n        return false;\n\
    \    }\n    else if (n == 2)\n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0)\n    {\n        return false;\n    }\n    else\n    {\n       \
    \ long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i\
    \ == 0)\n            {\n                return false;\n            }\n       \
    \     i += 2;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz3bzsjw7.d(37): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpz3bzsjw7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return\
    \ false;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n\
    \        {\n            if (n % i == 0)\n                return false;\n     \
    \       i += 2;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkh2rqdoy.d(31): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpkh2rqdoy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\n/*\nReturn the nth prime number.\n\
    \    >>> nth_prime(1)\n    2\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(3)\n\
    \    5\n    >>> nth_prime(4)\n    7\n    >>> nth_prime(5)\n    11\n    >>> nth_prime(6)\n\
    \    13\n    >>> nth_prime(7)\n    17\n    >>> nth_prime(8)\n    19\n    >>> nth_prime(9)\n\
    \    23\n    >>> nth_prime(10)\n    29\n    >>> nth_prime(11)\n    31\n    >>>\
    \ nth_prime(12)\n    37\n    >>> nth_prime(13)\n    41\n    >>> nth_prime(14)\n\
    \    43\n    >>> nth_prime(15)\n    47\n    >>> nth_prime(16)\n    53\n    >>>\
    \ nth_prime(17)\n    59\n    >>> nth_prime(18)\n    61\n    >>> nth_prime(19)\n\
    \    67\n    >>> nth_prime(20)\n    71\n    >>> nth_prime(21)\n    73\n    >>>\
    \ nth_prime(22)\n    79\n    >>> nth_prime(23)\n    83\n    >>> nth_prime(24)\n\
    \    89\n    >>> nth_prime(25)\n    97\n    >>> nth_prime(26)\n    101\n    >>>\
    \ nth_prime(27)\n    103\n    >>> nth_prime(28)\n    107\n    >>> nth_prime(29)\n\
    \    109\n    >>> nth_prime(30)\n\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp92dmekba.d(37): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92dmekba.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (int i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplqdikdtt.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmplqdikdtt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n == 1)\n        return false;\n \
    \   for (long i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n           \
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n        return false;\n\
    \    }\n    else if (n <= 3) \n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n    }\n    long i\
    \ = 5;\n    while (i * i <= n) \n    {\n        if (n % i == 0 || n % (i + 2)\
    \ == 0) \n        {\n            return false;\n        }\n        i = i + 6;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0lmo7wqi.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0lmo7wqi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n == 1)\n        return false;\n \
    \   if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp99oy4rbd.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp99oy4rbd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu1ux6sf0.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpu1ux6sf0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6f31387g.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6f31387g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy513fufc.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpy513fufc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpitthbaxq.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpitthbaxq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc5t31z9h.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpc5t31z9h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n        return false;\n\
    \    }\n    else if (n <= 3)\n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n    }\n    long i\
    \ = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) ==\
    \ 0)\n        {\n            return false;\n        }\n        i = i + 6;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n  \
    \  assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n   \
    \ assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n  \
    \  assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L)\
    \ == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n\
    \    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps4u96mtq.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmps4u96mtq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (int i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4jkkqie0.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4jkkqie0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfun6uu_3.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfun6uu_3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <\
    \ sqrt(n) + 1; i += 2) \n    {\n        if (n % i == 0) return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9s1jmutn.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9s1jmutn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n        return false;\n \
    \   if (n == 2) \n        return true;\n    if (n % 2 == 0) \n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) \n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvb6njcyo.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvb6njcyo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) \n        return false;\n \
    \   if (n == 2) \n        return true;\n    if (n % 2 == 0) \n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) \n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsmuec1zn.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpsmuec1zn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpltnto9or.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpltnto9or.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  for (long i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hpl5hv_.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4hpl5hv_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) \n    {\n        return false;\n\
    \    }\n    else if (n <= 3) \n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0) \n    {\n        return false;\n    }\n    else \n\
    \    {\n        for (long i = 5; i * i <= n; i += 6) \n        {\n           \
    \ if (n % i == 0 || n % (i + 2) == 0) \n            {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgu4xyxsq.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgu4xyxsq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6) \n        if (n % i == 0 || n % (i + 2) == 0)\
    \ \n            return false; \n    return true; \n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n    {\n        return false;\n\
    \    }\n    else if (n <= 3)\n    {\n        return true;\n    }\n    else if\
    \ (n % 2 == 0 || n % 3 == 0)\n    {\n        return false;\n    }\n    long i\
    \ = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) ==\
    \ 0)\n        {\n            return false;\n        }\n        i = i + 6;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n  \
    \  assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n   \
    \ assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n  \
    \  assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L)\
    \ == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n\
    \    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpli9f5pn0.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpli9f5pn0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n        i\
    \ = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp36txj3gp.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp36txj3gp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7uuhnnqr.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7uuhnnqr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n  \
    \  for (long i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    long i = 5;\n    while (i * i <= n)\n    {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    \
    \    i = i + 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <=\
    \ sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeugi53bn.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpeugi53bn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int\
    \ i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    foreach (i; 2 .. sqrt(n)\
    \ + 1)\n    {\n        if (n % i == 0) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpohsij7qn.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpohsij7qn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1)\n        return false;\n \
    \   if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n   \
    \     return false;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n\
    \ % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \n*/\nbool is_prime(long n) \n{\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long\
    \ i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
