name: HumanEval_82_prime_length
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes a\
  \ string and returns True if the string\n    length is a prime number or False otherwise\n\
  \    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') ==\
  \ True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n\
  \    \n*/\nbool prime_length(string string) \n"
tests: "unittest\n{\n    alias candidate = prime_length;\n\n    assert(candidate(\"\
  Hello\") == true);\n    assert(candidate(\"abcdcba\") == true);\n    assert(candidate(\"\
  kittens\") == true);\n    assert(candidate(\"orange\") == false);\n    assert(candidate(\"\
  wow\") == true);\n    assert(candidate(\"world\") == true);\n    assert(candidate(\"\
  MadaM\") == true);\n    assert(candidate(\"Wow\") == true);\n    assert(candidate(\"\
  \") == false);\n    assert(candidate(\"HI\") == true);\n    assert(candidate(\"\
  go\") == true);\n    assert(candidate(\"gogo\") == false);\n    assert(candidate(\"\
  aaaaaaaaaaaaaaa\") == false);\n    assert(candidate(\"Madam\") == true);\n    assert(candidate(\"\
  M\") == false);\n    assert(candidate(\"0\") == false);\n}\nvoid main(){}"
completions: ["{\n    int length = string.length;\n    return length.isPrime;\n}",
  "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int length = string.length;\n    if (length == 1)\n        return\
    \ false;\n    if (length == 2)\n        return true;\n    if (length % 2 == 0)\n\
    \        return false;\n    for (int i = 3; i < length; i += 2)\n    {\n     \
    \   if (length % i == 0)\n            return false;\n    }\n    return true;\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int length = string.length;\n    if (length == 1)\n        return\
    \ false;\n    if (length == 2)\n        return true;\n    for (int i = 2; i <\
    \ length; i++)\n    {\n        if (length % i == 0)\n            return false;\n\
    \    }\n    return true;\n}", "{\n    return isPrime(string.length);\n}", "{\n\
    \    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int length = string.length;\n    if (length == 1)\n        return\
    \ false;\n    else if (length == 2)\n        return true;\n    else\n    {\n \
    \       for (int i = 2; i < length; i++)\n        {\n            if (length %\
    \ i == 0)\n                return false;\n        }\n        return true;\n  \
    \  }\n}", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int length = string.length;\n    if (length == 1)\n        return\
    \ false;\n    for (int i = 2; i < length; i++)\n    {\n        if (length % i\
    \ == 0)\n            return false;\n    }\n    return true;\n}", "{\n    return\
    \ isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n}", "{\n\
    \    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    int length = string.length;\n\
    \    if (length == 2)\n        return true;\n    if (length % 2 == 0)\n      \
    \  return false;\n    for (int i = 3; i < length; i += 2)\n    {\n        if (length\
    \ % i == 0)\n            return false;\n    }\n    return true;\n}", "{\n    int\
    \ len = string.length;\n    bool isPrime = true;\n    for (int i = 2; i <= len/2;\
    \ i++)\n    {\n        if (len % i == 0)\n        {\n            isPrime = false;\n\
    \            break;\n        }\n    }\n    return isPrime;\n}", "{\n    return\
    \ isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n}", "{\n\
    \    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int length = string.length;\n    return isPrime(length);\n}", "{\n\
    \    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    auto length = string.length;\n\
    \    if (length <= 1)\n        return false;\n    else if (length == 2)\n    \
    \    return true;\n    else if (length % 2 == 0)\n        return false;\n    else\n\
    \    {\n        for (int i = 3; i <= sqrt(length); i += 2)\n        {\n      \
    \      if (length % i == 0)\n                return false;\n        }\n      \
    \  return true;\n    }\n}", "{\n    return isPrime(string.length);\n}", "{\n \
    \   return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    int length = string.length;\n\
    \    if (length == 1)\n        return false;\n    else if (length == 2)\n    \
    \    return true;\n    else\n    {\n        for (int i = 2; i < length; i++)\n\
    \        {\n            if (length % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int len = string.length;\n    if (len < 2) return false;\n    if (len\
    \ == 2) return true;\n    if (len % 2 == 0) return false;\n    for (int i = 3;\
    \ i <= sqrt(len); i += 2)\n    {\n        if (len % i == 0) return false;\n  \
    \  }\n    return true;\n}", "{\n    return isPrime(string.length);\n}", "{\n \
    \   int len = string.length;\n    if (len == 1) return false;\n    if (len ==\
    \ 2) return true;\n    if (len % 2 == 0) return false;\n    for (int i = 3; i\
    \ <= sqrt(len); i += 2) {\n        if (len % i == 0) return false;\n    }\n  \
    \  return true;\n}", "{\n    return isPrime(string.length);\n}", "{\n    return\
    \ isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n}", "{\n\
    \    int len = string.length;\n    if (len < 2)\n        return false;\n    if\
    \ (len == 2)\n        return true;\n    if (len % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i < len; i += 2)\n    {\n        if (len % i == 0)\n    \
    \        return false;\n    }\n    return true;\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    int length = string.length;\n\
    \    if (length == 1)\n        return false;\n    for (int i = 2; i < length;\
    \ i++)\n    {\n        if (length % i == 0)\n            return false;\n    }\n\
    \    return true;\n}", "{\n    return isPrime(string.length);\n}", "{\n    int\
    \ length = string.length;\n    if (length == 2)\n        return true;\n    if\
    \ (length % 2 == 0)\n        return false;\n    for (int i = 3; i < length; i\
    \ += 2)\n    {\n        if (length % i == 0)\n            return false;\n    }\n\
    \    return true;\n}", "{\n    int length = string.length;\n    if (length ==\
    \ 1)\n        return false;\n    else if (length == 2)\n        return true;\n\
    \    else\n    {\n        for (int i = 2; i < length; i++)\n        {\n      \
    \      if (length % i == 0)\n                return false;\n        }\n      \
    \  return true;\n    }\n}", "{\n    int length = string.length;\n    if (length\
    \ == 1)\n        return false;\n    else if (length == 2)\n        return true;\n\
    \    else\n    {\n        for (int i = 2; i <= sqrt(length); i++)\n        {\n\
    \            if (length % i == 0)\n                return false;\n        }\n\
    \        return true;\n    }\n}", "{\n    int length = string.length;\n    bool\
    \ isPrime = true;\n    for (int i = 2; i < length; i++)\n    {\n        if (length\
    \ % i == 0)\n        {\n            isPrime = false;\n            break;\n   \
    \     }\n    }\n    return isPrime;\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    int len = string.length;\n\
    \    if (len == 2)\n        return true;\n    if (len % 2 == 0)\n        return\
    \ false;\n    for (int i = 3; i < len; i += 2)\n    {\n        if (len % i ==\
    \ 0)\n            return false;\n    }\n    return true;\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int length = string.length;\n    if (length == 1 || length == 2)\n\
    \        return true;\n    for (int i = 2; i < length; i++)\n    {\n        if\
    \ (length % i == 0)\n            return false;\n    }\n    return true;\n}", "{\n\
    \    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int length = string.length;\n    if (length == 1)\n        return\
    \ false;\n    if (length == 2)\n        return true;\n    for (int i = 2; i <\
    \ length; i++)\n    {\n        if (length % i == 0)\n            return false;\n\
    \    }\n    return true;\n}", "{\n    return isPrime(string.length);\n}", "{\n\
    \    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    int length = string.length;\n\
    \    if (length <= 1)\n        return false;\n    if (length == 2)\n        return\
    \ true;\n    if (length % 2 == 0)\n        return false;\n    for (int i = 3;\
    \ i <= sqrt(length); i += 2)\n    {\n        if (length % i == 0)\n          \
    \  return false;\n    }\n    return true;\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int length = string.length;\n    if (length < 2)\n        return false;\n\
    \    for (int i = 2; i < length; i++)\n    {\n        if (length % i == 0)\n \
    \           return false;\n    }\n    return true;\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}\n/*\nWrite a function that takes\
    \ a string and returns a new string with the\n    first letter of each word capitalized.\n\
    \    Examples\n    capitalize('hello') == 'Hello'\n    capitalize('hello world')\
    \ == 'Hello World'\n    capitalize('hello world') == 'Hello World'\n    capitalize('hello\
    \ world, how are you?') == 'Hello World, How Are You?'\n*/\nstring capitalize(string\
    \ string) \n{\n    string[] words = string.split(\" \");\n    string result =\
    \ \"\";\n    foreach(word; words)\n    {\n        result ~= word[0].toUpper ~\
    \ word[1..$];\n        if(word != words[$-1])\n            result ~= \" \";\n\
    \    }\n    return result;\n}\n/*\nWrite a function that takes a string and returns\
    \ a new string with the\n    first letter of each word capitalized.\n    Examples\n\
    \    capitalize('hello') == 'Hello'\n    capitalize('hello world') == 'Hello World'\n\
    \    capitalize('hello world') == 'Hello World'\n    capitalize('hello world,\
    \ how are you?') == 'Hello World, How Are You?'\n*/\nstring capitalize(string\
    \ string) \n{\n    string[] words = string.split(\" \");\n    string result =\
    \ \"\";\n    foreach(word; words)\n    {\n        result ~= word[0].toUpper ~\
    \ word[1..$];\n        if(word != words[$-1])\n            result ~= \" \";\n\
    \    }\n    return result;\n}\n/*\nWrite a function that takes a string and returns\
    \ a new string with the\n    first letter of each word capitalized.\n    Examples\n\
    \    capitalize('hello') == 'Hello'\n    capitalize('hello world') == 'Hello World'\n\
    \    capitalize('hello world') == 'Hello World'\n    capitalize('hello world,\
    \ how are you?') == 'Hello World, How Are You?'\n*/\nstring capitalize(string\
    \ string) \n{\n    string[] words = string.split(\" \");\n    string result =\
    \ \"\";\n    foreach(word; words)\n    {\n        result ~= word[0].toUpper ~\
    \ word[1", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int length = string.length;\n    if (length == 1) return false;\n\
    \    if (length == 2) return true;\n    for (int i = 2; i < length; i++)\n   \
    \ {\n        if (length % i == 0)\n        {\n            return false;\n    \
    \    }\n    }\n    return true;\n}", "{\n    return isPrime(string.length);\n}",
  "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    bool result = true;\n\
    \    int length = string.length;\n    if (length == 1)\n    {\n        result\
    \ = false;\n    }\n    else\n    {\n        for (int i = 2; i < length; i++)\n\
    \        {\n            if (length % i == 0)\n            {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int length = string.length;\n    if (length == 1)\n        return\
    \ false;\n    if (length == 2)\n        return true;\n    for (int i = 2; i <\
    \ length; i++)\n    {\n        if (length % i == 0)\n            return false;\n\
    \    }\n    return true;\n}", "{\n    return isPrime(string.length);\n}", "{\n\
    \    return isPrime(string.length);\n}", "{\n    return isPrime(string.length);\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
