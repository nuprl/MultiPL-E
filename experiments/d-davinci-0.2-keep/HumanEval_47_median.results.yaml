name: HumanEval_47_median
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp23hqka5y.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23hqka5y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2733y0sf.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2733y0sf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup.sort;\n\
    \    long mid = sorted.length / 2;\n    if (sorted.length % 2 == 0)\n        return\
    \ (sorted[mid] + sorted[mid - 1]) / 2.0;\n    else\n        return sorted[mid];\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq2k1hxj_.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2k1hxj_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjciha78l.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjciha78l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp31laojp_.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31laojp_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) {\n        return sorted[sorted.length\
    \ / 2];\n    } else {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm421k_a5.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm421k_a5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n    \
    \    return 0;\n    else if (l.length == 1)\n        return l[0];\n    else if\
    \ (l.length == 2)\n        return (l[0] + l[1]) / 2.0;\n    else\n    {\n    \
    \    long[] sorted = l.dup;\n        sorted.sort;\n        if (sorted.length %\
    \ 2 == 0)\n            return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n        else\n            return sorted[sorted.length / 2];\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe88uz83a.d(21): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe88uz83a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup.sort;\n\
    \    long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpurya791p.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpurya791p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    return sorted[sorted.length / 2];\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps4wt70kw.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps4wt70kw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6jwa72zi.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jwa72zi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] l2 = l.dup;\n    l2.sort;\n\
    \    long len = l2.length;\n    if (len % 2 == 0) \n    {\n        return (l2[len\
    \ / 2 - 1] + l2[len / 2]) / 2.0;\n    } \n    else \n    {\n        return l2[len\
    \ / 2];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4do0mkp1.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4do0mkp1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0gif4s7c.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0gif4s7c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprzz0ztmp.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprzz0ztmp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) {\n  \
    \      return sorted[len / 2];\n    } else {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpumquaclu.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpumquaclu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) {\n        return sorted[sorted.length\
    \ / 2];\n    } else {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5cdlj34s.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cdlj34s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) {\n  \
    \      return sorted[len / 2];\n    } else {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp629qyb7y.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp629qyb7y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqs9u8o1x.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqs9u8o1x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] s = l.dup;\n    s.sort;\n\
    \    long n = s.length;\n    if (n % 2 == 1)\n        return s[n / 2];\n    else\n\
    \        return (s[n / 2 - 1] + s[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpla80yvb3.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpla80yvb3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvm9tiusw.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvm9tiusw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = sort(l);\n\
    \    long n = l.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7ovrmla.d(12): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7ovrmla.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1) \n    {\n        return\
    \ sorted[len / 2];\n    } \n    else \n    {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdgyv0gzk.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdgyv0gzk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1) {\n        return sorted[len\
    \ / 2];\n    } else {\n        return (sorted[len / 2 - 1] + sorted[len / 2])\
    \ / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaiwfgo0k.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaiwfgo0k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n\
    \        return sorted[n / 2];\n    } \n    else \n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyab5qovp.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyab5qovp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeg56999w.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeg56999w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else \n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyynjo7cc.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyynjo7cc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7hds1fq.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7hds1fq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n\
    \        return sorted[n / 2];\n    } \n    else \n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmgopzepx.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmgopzepx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else \n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb5wr_fdl.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb5wr_fdl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdni1v9f2.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdni1v9f2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0374l07u.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0374l07u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    return (sorted[sorted.length / 2] + sorted[(sorted.length\
    \ - 1) / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpii2p9u__.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpii2p9u__.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    long n = l.length;\n\
    \    if (n % 2 == 1) \n    {\n        return l[n / 2];\n    } \n    else \n  \
    \  {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvhps8uvl.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvhps8uvl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] s = l.sort();\n  \
    \  int n = s.length;\n    if (n % 2 == 0)\n        return (s[n/2] + s[n/2-1])\
    \ / 2.0;\n    else\n        return s[n/2];\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp01qld69a.d(12): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmp01qld69a.d(13): Error: cannot implicitly convert expression `s.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp01qld69a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ark1aew.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ark1aew.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcd51dbqe.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcd51dbqe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsxlfnep6.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsxlfnep6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    int len = sorted.length;\n    if (len % 2 == 0)\n    {\n\
    \        return (sorted[len / 2] + sorted[len / 2 - 1]) / 2.0;\n    }\n    else\n\
    \    {\n        return sorted[len / 2];\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1c71ik13.d(13): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmp1c71ik13.d(14): Error: cannot implicitly convert expression `sorted.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1c71ik13.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8vxr__e4.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vxr__e4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup.sort;\n\
    \    long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdnnmna0f.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdnnmna0f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptz8tpri6.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptz8tpri6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_ub4hst.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_ub4hst.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    } \n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8aiuro4i.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8aiuro4i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n        return sorted[n\
    \ / 2];\n    }\n    else \n    {\n        return (sorted[n / 2 - 1] + sorted[n\
    \ / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn0uctqqh.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0uctqqh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd2b35adu.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2b35adu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9073mhj5.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9073mhj5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1) {\n        return sorted[len\
    \ / 2];\n    } else {\n        return (sorted[len / 2 - 1] + sorted[len / 2])\
    \ / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpooapl5g8.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpooapl5g8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sort(sorted);\n    int n = l.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvtim2_cv.d(13): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpvtim2_cv.d(14): Error: cannot implicitly convert\
    \ expression `l.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvtim2_cv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbdq0os1g.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdq0os1g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    return sorted[sorted.length / 2];\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpepxzjycg.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpepxzjycg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp903z0fg0.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp903z0fg0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0hdddlip.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hdddlip.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptqfdhndp.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqfdhndp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) {\n  \
    \      return sorted[len / 2];\n    } else {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp82jc5qiv.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82jc5qiv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjme5zhsi.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjme5zhsi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] a = l.dup;\n    a.sort;\n\
    \    return a[a.length / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd8wfuiir.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd8wfuiir.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa1hjztpk.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1hjztpk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) {\n  \
    \      return sorted[len / 2];\n    } else {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpclusy4q9.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpclusy4q9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiqupcpm0.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqupcpm0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) {\n        return sorted[sorted.length\
    \ / 2];\n    } else {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpry_kiprd.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpry_kiprd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb8sv1s77.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb8sv1s77.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe9gliwnt.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe9gliwnt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpelyoqqzc.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpelyoqqzc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    return sorted[sorted.length / 2];\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpove0rxeg.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpove0rxeg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = sort(l);\n\
    \    long len = l.length;\n    if (len % 2 == 1)\n        return sorted[len /\
    \ 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdaq5hiam.d(12): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdaq5hiam.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp82c76pga.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82c76pga.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkaoklbn3.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkaoklbn3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1) {\n        return sorted[len\
    \ / 2];\n    } else {\n        return (sorted[len / 2 - 1] + sorted[len / 2])\
    \ / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprba4d4d8.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprba4d4d8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpguu9c4r5.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpguu9c4r5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6x0d376r.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6x0d376r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe302anxg.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe302anxg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    {\n\
    \        return sorted[len / 2];\n    }\n    else\n    {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphug2h48u.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphug2h48u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkyj6dywk.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyj6dywk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3r9upxi2.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3r9upxi2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphiffyywd.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphiffyywd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1) \n    {\n        return\
    \ sorted[len / 2];\n    } \n    else \n    {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsjn60l2c.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsjn60l2c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfiw6tva0.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiw6tva0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphtb37om3.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphtb37om3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc831dbtb.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc831dbtb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9x5lanpl.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x5lanpl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n    {\n \
    \       return sorted[n / 2];\n    }\n    else\n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps2yvcmjg.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2yvcmjg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long size = sorted.length;\n    if (size % 2 == 0)\n    {\n        return\
    \ (sorted[size / 2] + sorted[size / 2 - 1]) / 2.0;\n    }\n    else\n    {\n \
    \       return sorted[size / 2];\n    }\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzrimf7h1.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrimf7h1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long length = sorted.length;\n    if (length % 2 == 0)\
    \ \n    {\n        return (sorted[length / 2 - 1] + sorted[length / 2]) / 2.0;\n\
    \    } \n    else \n    {\n        return sorted[length / 2];\n    }\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptio8lbtp.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptio8lbtp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm6wk_ixl.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6wk_ixl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = sort(l);\n\
    \    int len = l.length;\n    if (len % 2 == 0)\n        return (sorted[len /\
    \ 2] + sorted[len / 2 - 1]) / 2.0;\n    else\n        return sorted[len / 2];\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_vw511o.d(12): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp1_vw511o.d(13): Error: cannot implicitly convert\
    \ expression `l.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1_vw511o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    {\n\
    \        return sorted[len / 2];\n    }\n    else\n    {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplan0bnd8.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplan0bnd8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    }\n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr5quacmr.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr5quacmr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n        return sorted[n\
    \ / 2];\n    }\n    else \n    {\n        return (sorted[n / 2 - 1] + sorted[n\
    \ / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfnydd47_.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfnydd47_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) {\n  \
    \      return sorted[len / 2];\n    } else {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzchqm2kg.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzchqm2kg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcs1vjvlg.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcs1vjvlg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbd1njs_c.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbd1njs_c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_y473q8.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_y473q8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    int n = sorted.length;\n    if (n % 2 == 1) \n    {\n \
    \       return sorted[n / 2];\n    }\n    else \n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\n/*\nReturn the mode of elements\
    \ in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>>\
    \ mode([-10, 4, 6, 1000, 10, 20])\n    [4, 6, 10, 20, 1000]\n*/\nlong[] mode(long[]\
    \ l) \n{\n    long[] sorted = l.dup;\n    sorted.sort;\n    long[] modes = [];\n\
    \    long max_count = 0;\n    long curr_count = 0;\n    long curr_num = sorted[0];\n\
    \    foreach (long num; sorted) \n    {\n        if (num == curr_num) \n     \
    \   {\n            curr_count++;\n        }\n        else \n        {\n      \
    \      if (curr_count > max_count) \n            {\n                modes = [curr_num];\n\
    \                max_count = curr_count;\n            }\n            else if (curr_count\
    \ == max_count) \n            {\n                modes ~= curr_num;\n        \
    \    }\n            curr_num = num;\n            curr_count = 1;\n        }\n\
    \    }\n    if (curr_count > max_count) \n    {\n        modes = [curr_num];\n\
    \        max_count = curr_count;\n    }\n    else if (curr_count == max_count)\
    \ \n    {\n        modes ~= curr_num;\n    }\n    return modes;\n}\n/*\nReturn\
    \ the range of elements in the list l.\n    >>> range([3, 1, 2, 4, 5])\n    4\n\
    \    >>> range([-10, 4, 6, 1000, 10, 20])\n    1010\n*/\nlong range(\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx5b0d0x7.d(79): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpx5b0d0x7.d(79): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx5b0d0x7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp88z0_2ei.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88z0_2ei.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp57tahg40.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57tahg40.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkq5asm64.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkq5asm64.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuuyvhpr8.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuuyvhpr8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup.sort;\n\
    \    int n = sorted.length;\n    if (n % 2 == 1) {\n        return sorted[n /\
    \ 2];\n    } else {\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw5_g3dt8.d(12): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpw5_g3dt8.d(13): Error: cannot implicitly convert expression `sorted.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpw5_g3dt8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr2fkgufm.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr2fkgufm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if\
    \ (n == 0) \n    {\n        return 0;\n    }\n    else if (n == 1) \n    {\n \
    \       return l[0];\n    }\n    else if (n == 2) \n    {\n        return (l[0]\
    \ + l[1]) / 2.0;\n    }\n    else \n    {\n        sort(l);\n        if (n % 2\
    \ == 0) \n        {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n   \
    \     }\n        else \n        {\n            return l[n / 2];\n        }\n \
    \   }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwwxvhjdk.d(12): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpwwxvhjdk.d(27): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpwwxvhjdk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    }\n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm7s2s9dj.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm7s2s9dj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7tvbb0gs.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7tvbb0gs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyji7o67l.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyji7o67l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpae0my45n.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpae0my45n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup.sort;\n\
    \    long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzlbxuji2.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzlbxuji2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    return sorted[sorted.length/2];\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt3_c19x5.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt3_c19x5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    int len = sorted.length;\n    if (len % 2 == 0)\n    {\n\
    \        return (sorted[len / 2] + sorted[len / 2 - 1]) / 2.0;\n    }\n    else\n\
    \    {\n        return sorted[len / 2];\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqum7m6cr.d(13): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpqum7m6cr.d(14): Error: cannot implicitly convert expression `sorted.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqum7m6cr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp47wy0pan.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47wy0pan.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) {\n        return sorted[sorted.length\
    \ / 2];\n    } else {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpffhkhola.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffhkhola.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup.sort;\n\
    \    int len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa3p1waei.d(12): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpa3p1waei.d(13): Error: cannot implicitly convert expression `sorted.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpa3p1waei.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n\
    \        return sorted[n / 2];\n    } \n    else \n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmz4ft92i.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz4ft92i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    long n = l.length;\n\
    \    if (n % 2 == 1)\n        return l[n / 2];\n    else\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa2ff_16z.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ff_16z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    int n = sorted.length;\n    if (n % 2 == 1) \n    {\n \
    \       return sorted[n / 2];\n    } \n    else \n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpinwz0srk.d(13): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpinwz0srk.d(14): Error: cannot implicitly convert expression `sorted.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpinwz0srk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n\
    \        return sorted[n / 2];\n    } \n    else \n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph8ego4q2.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph8ego4q2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm_5rrxbk.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_5rrxbk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbofurx_c.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbofurx_c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    {\n\
    \        return sorted[len / 2];\n    }\n    else\n    {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqhihy_2_.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqhihy_2_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp82543431.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82543431.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc654nvzu.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc654nvzu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp36swrfik.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp36swrfik.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaxkzg0ro.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxkzg0ro.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    return sorted[sorted.length / 2];\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpibsq8o11.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpibsq8o11.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3f04qedf.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3f04qedf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    return sorted[sorted.length / 2];\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph3hdvx_k.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3hdvx_k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx7kn8hm5.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7kn8hm5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2_m650tb.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_m650tb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps3yuke63.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3yuke63.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkvm60bwx.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvm60bwx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplztitdez.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplztitdez.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfaauf357.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfaauf357.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_nlcfeqa.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_nlcfeqa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkp0g62rd.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkp0g62rd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    int n = sorted.length;\n    if (n % 2 == 1) {\n       \
    \ return sorted[n / 2];\n    }\n    else {\n        return (sorted[n / 2 - 1]\
    \ + sorted[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplbymu5iv.d(13): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmplbymu5iv.d(14): Error: cannot implicitly convert expression `sorted.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmplbymu5iv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp3rflrbp.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp3rflrbp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    int len = sorted.length;\n    if (len % 2 == 0)\n    {\n\
    \        return (sorted[len / 2] + sorted[len / 2 - 1]) / 2.0;\n    }\n    else\n\
    \    {\n        return sorted[len / 2];\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfdog4rq3.d(13): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpfdog4rq3.d(14): Error: cannot implicitly convert expression `sorted.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfdog4rq3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1) {\n        return sorted[len\
    \ / 2];\n    } else {\n        return (sorted[len / 2 - 1] + sorted[len / 2])\
    \ / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9dpd88i4.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9dpd88i4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    } \n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3m_qyf08.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3m_qyf08.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    int mid = sorted.length / 2;\n    if (sorted.length % 2 == 0) \n    {\n \
    \       return (sorted[mid] + sorted[mid - 1]) / 2.0;\n    } \n    else \n   \
    \ {\n        return sorted[mid];\n    }\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbh4tu12i.d(12): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpbh4tu12i.d(13): Error: cannot implicitly convert expression `sorted.length\
    \ / 2LU` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpbh4tu12i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpre6_lsr7.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpre6_lsr7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnvdjyj4v.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvdjyj4v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    } \n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7e5xme2j.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e5xme2j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprhb4wio6.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhb4wio6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq4r9wtxp.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4r9wtxp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    } \n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpngjhlgm5.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngjhlgm5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1]\
    \ + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsv_juk81.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsv_juk81.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n%2 == 1)\n        return\
    \ sorted[n/2];\n    else\n        return (sorted[n/2-1] + sorted[n/2])/2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1nnms35u.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1nnms35u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy8dtpgzu.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8dtpgzu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    } \n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl5b6z8wo.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl5b6z8wo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n        return sorted[n\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[n / 2 - 1] + sorted[n\
    \ / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp729cg8j3.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp729cg8j3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    } \n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkqhkj3tj.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkqhkj3tj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    } \n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpee49166c.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpee49166c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt6txt41j.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6txt41j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmb2uzfr_.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmb2uzfr_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) {\n        return sorted[sorted.length\
    \ / 2];\n    }\n    else {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ni04mc4.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ni04mc4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxc1tm33q.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxc1tm33q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup.sort;\n\
    \    long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6hjznui6.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6hjznui6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup.sort;\n\
    \    long len = sorted.length;\n    if (len % 2 == 1) \n    {\n        return\
    \ sorted[len / 2];\n    } \n    else \n    {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3z8o7q14.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3z8o7q14.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoqopzzzg.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoqopzzzg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n    {\n \
    \       return sorted[n / 2];\n    }\n    else\n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprmuc2uja.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmuc2uja.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    } \n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ljriclf.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ljriclf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpijfqcagq.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijfqcagq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo94gntj4.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo94gntj4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] l2 = l.dup;\n    l2.sort;\n\
    \    long n = l2.length;\n    if (n % 2 == 1) \n    {\n        return l2[n / 2];\n\
    \    } \n    else \n    {\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcyvosq0m.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyvosq0m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    int length = sorted.length;\n    if (length % 2 == 0)\n    {\n        return\
    \ (sorted[length / 2] + sorted[length / 2 - 1]) / 2.0;\n    }\n    else\n    {\n\
    \        return sorted[length / 2];\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjmcmx_8b.d(12): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpjmcmx_8b.d(13): Error: cannot implicitly convert expression `sorted.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjmcmx_8b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwv4q03ai.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwv4q03ai.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long n = sorted.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n\
    \    else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptg3xq83l.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptg3xq83l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    }\n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp79uqgufr.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp79uqgufr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7m2cow7c.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7m2cow7c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) \n   \
    \ {\n        return sorted[len / 2];\n    }\n    else \n    {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbtbmx040.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbtbmx040.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqrvhusag.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqrvhusag.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf4paapjd.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4paapjd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1)\n        return\
    \ sorted[n / 2];\n    else\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkgl623pq.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgl623pq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2reqlqrx.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2reqlqrx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n\
    \        return sorted[n / 2];\n    } \n    else \n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwdwlcbxy.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdwlcbxy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpajx0qv7t.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpajx0qv7t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5h28t_3i.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5h28t_3i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpljtpirmv.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljtpirmv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl4dn4gjz.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl4dn4gjz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) {\n        return sorted[sorted.length\
    \ / 2];\n    } else {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpol4_gm8v.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpol4_gm8v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc5c00dpz.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc5c00dpz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup.sort;\n\
    \    if (sorted.length % 2 == 1)\n        return sorted[sorted.length / 2];\n\
    \    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3s8e6lr0.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3s8e6lr0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort;\n    if (l.length\
    \ % 2 == 0)\n    {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2.0;\n\
    \    }\n    else\n    {\n        return l[l.length / 2];\n    }\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpww92anc7.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpww92anc7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr9xzl4v7.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr9xzl4v7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1) {\n      \
    \  return sorted[n / 2];\n    } else {\n        return (sorted[n / 2 - 1] + sorted[n\
    \ / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu38xpcsu.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu38xpcsu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpug54_u75.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpug54_u75.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    int len = sorted.length;\n    if (len % 2 == 0)\n    {\n        return (sorted[len\
    \ / 2] + sorted[len / 2 - 1]) / 2.0;\n    }\n    else\n    {\n        return sorted[len\
    \ / 2];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9jbuiqmu.d(12): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmp9jbuiqmu.d(13): Error: cannot implicitly convert expression `sorted.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9jbuiqmu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp25mlx4uc.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25mlx4uc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1) {\n  \
    \      return sorted[len / 2];\n    } else {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk92zm33i.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk92zm33i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    return sorted[sorted.length/2];\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphn448xfa.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphn448xfa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n\
    \        return sorted[n / 2];\n    } \n    else \n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9gp1ezhn.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gp1ezhn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1)\n        return sorted[sorted.length\
    \ / 2];\n    else\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfa6ib1sj.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfa6ib1sj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuzhmp1yu.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzhmp1yu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long n = sorted.length;\n    if (n % 2 == 1) \n    {\n\
    \        return sorted[n / 2];\n    } \n    else \n    {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbqbwf3lp.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbqbwf3lp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) {\n        return sorted[sorted.length\
    \ / 2];\n    } else {\n        return (sorted[sorted.length / 2 - 1] + sorted[sorted.length\
    \ / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxrv5r65b.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxrv5r65b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long len = sorted.length;\n    if (len % 2 == 1)\n    \
    \    return sorted[len / 2];\n    else\n        return (sorted[len / 2 - 1] +\
    \ sorted[len / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu0b01wia.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0b01wia.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplda87_on.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplda87_on.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    int n = l.length;\n    if (n % 2 == 1)\n        return sorted[n / 2];\n \
    \   else\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq72fm5rt.d(12): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpq72fm5rt.d(13): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpq72fm5rt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    if (sorted.length % 2 == 1) \n    {\n        return sorted[sorted.length\
    \ / 2];\n    } \n    else \n    {\n        return (sorted[sorted.length / 2 -\
    \ 1] + sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0rj_pit0.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rj_pit0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.dup;\n\
    \    sorted.sort;\n    long length = sorted.length;\n    if (length % 2 == 0)\
    \ \n    {\n        return (sorted[length / 2 - 1] + sorted[length / 2]) / 2.0;\n\
    \    }\n    else \n    {\n        return sorted[length / 2];\n    }\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_up8zkkp.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_up8zkkp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = l.sort();\n\
    \    long len = sorted.length;\n    if (len % 2 == 1)\n        return sorted[len\
    \ / 2];\n    else\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgsav2vzo.d(12): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgsav2vzo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] l2 = l.dup;\n    l2.sort;\n\
    \    if (l2.length % 2 == 0)\n    {\n        return (l2[l2.length / 2] + l2[l2.length\
    \ / 2 - 1]) / 2.0;\n    }\n    else\n    {\n        return l2[l2.length / 2];\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdhsrh1y8.d(13): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhsrh1y8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
