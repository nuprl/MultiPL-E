name: HumanEval_79_decimal_to_binary
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl2n8t1kb.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2n8t1kb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp25ww398w.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp25ww398w.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp25ww398w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return result\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpijsww29j.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpijsww29j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzhfrtose.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpzhfrtose.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzhfrtose.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp7l_1awm.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpp7l_1awm.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpp7l_1awm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8fe26cas.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fe26cas.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    return \"db\" ~ to!string(decimal, 2) ~ \"db\";\n}\nunittest\n{\n \
    \   alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\"\
    );\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu_lq9evc.d(18): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpu_lq9evc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    long remainder = 0;\n    long quotient\
    \ = decimal;\n    while(quotient != 0)\n    {\n        remainder = quotient %\
    \ 2;\n        quotient = quotient / 2;\n        binary = format(\"%s%s\", binary,\
    \ remainder);\n    }\n    binary = format(\"%sdb\", binary);\n    return binary;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfivj95wl.d(25): Error: undefined identifier `format`\\n/tmp/tmpfivj95wl.d(27):\
    \ Error: undefined identifier `format`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfivj95wl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary.reverse ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsrmw47ct.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpsrmw47ct.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpsrmw47ct.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ihc7ebg.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ihc7ebg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpquy2aof9.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpquy2aof9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphlqcfaib.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmphlqcfaib.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphlqcfaib.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd_03nhov.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpd_03nhov.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpd_03nhov.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz8ou8doe.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpz8ou8doe.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8ou8doe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmxh2_qp4.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmxh2_qp4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp91aagzk3.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp91aagzk3.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp91aagzk3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvucbzsof.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpvucbzsof.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbu9k8yb1.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbu9k8yb1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbaw5vj7i.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpbaw5vj7i.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpbaw5vj7i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj_6uc3c5.d(21): Error: no property `to` for type `long`\\n/tmp/tmpj_6uc3c5.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_6uc3c5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps4kmgo9x.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps4kmgo9x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpola3v661.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpola3v661.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    if(decimal == 0)\n        return binary\
    \ + \"0\" + binary;\n    while(decimal != 0)\n    {\n        binary += to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary + binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt1bpe43f.d(20): Error: invalid array operation `binary + \"0\"\
    ` (possible missing [])\\n/tmp/tmpt1bpe43f.d(23): Error: template instance `to!string`\
    \ template `to` is not defined, did you mean No?\\n/tmp/tmpt1bpe43f.d(26): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1bpe43f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    long n = decimal;\n    while(n > 0)\n\
    \    {\n        binary ~= n % 2;\n        n /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk_3fgas0.d(22): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpk_3fgas0.d(26): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_3fgas0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2u2_dh4l.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2u2_dh4l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr8jr6fmb.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8jr6fmb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy7sjt965.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy7sjt965.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string ret = \"db\";\n    long temp = decimal;\n    while(temp > 0)\n\
    \    {\n        ret = (temp % 2 == 0 ? \"0\" : \"1\") ~ ret;\n        temp /=\
    \ 2;\n    }\n    return ret ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp21m1degp.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f4d]\\n??:? void tmp21m1degp.__unittest_L27_C1()\
    \ [0x427b5d]\\n??:? void tmp21m1degp.__modtest() [0x427cd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bd3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ac4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fba9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ac25]\\n??:? runModuleUnitTests [0x42bb15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42839c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428323]\\n??:? _d_run_main [0x42828e]\\n??:? main [0x427ce3]\\\
    n??:? __libc_start_main [0x393c8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6dbwwlll.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp6dbwwlll.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dbwwlll.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmputycbnto.d(21): Error: no property `to` for type `long`\\n/tmp/tmputycbnto.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmputycbnto.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    return \"db\" ~ to!string(decimal, 2) ~ \"db\";\n}\nunittest\n{\n \
    \   alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\"\
    );\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6d1ax440.d(18): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp6d1ax440.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    if(decimal == 0)\n        return binary\
    \ + \"0\" + binary;\n    while(decimal > 0)\n    {\n        binary += (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return binary + binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcxlmbumb.d(20): Error: invalid array operation `binary + \"0\"\
    ` (possible missing [])\\n/tmp/tmpcxlmbumb.d(23): Error: no property `to` for\
    \ type `long`\\n/tmp/tmpcxlmbumb.d(26): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(char[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcxlmbumb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45j9xtjd.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp45j9xtjd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp11g618h0.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp11g618h0.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp11g618h0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdexjxfv4.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdexjxfv4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptbeu0ooq.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmptbeu0ooq.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmptbeu0ooq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph1ks8__4.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1ks8__4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary;\n    while(decimal > 0)\n    {\n        binary ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary.reverse\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy33msgaw.d(21): Error: no property `to` for type `long`\\n/tmp/tmpy33msgaw.d(24):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpy33msgaw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph51b1zvl.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmph51b1zvl.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph51b1zvl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_iqopoc.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_iqopoc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpftmgnxvj.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpftmgnxvj.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpftmgnxvj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3lf3v7hx.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp3lf3v7hx.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lf3v7hx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkdpzgvw1.d(21): Error: no property `to` for type `long`\\n/tmp/tmpkdpzgvw1.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdpzgvw1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuajm7biu.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpuajm7biu.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpuajm7biu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_bfr5u_j.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp_bfr5u_j.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_bfr5u_j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7wjjle2e.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp7wjjle2e.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp7wjjle2e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string res = \"db\";\n    while(decimal > 0)\n    {\n        res ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    return res ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4fwdyn4l.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fwdyn4l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplb2z42bl.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmplb2z42bl.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplb2z42bl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal != 0)\n    {\n        result\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpafvvqxmv.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpafvvqxmv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary.reverse ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmy61hz2n.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpmy61hz2n.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmy61hz2n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx0vfep2g.d(21): Error: no property `to` for type `long`\\n/tmp/tmpx0vfep2g.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0vfep2g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpws_mzk_d.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpws_mzk_d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    int i = 0;\n    while(decimal != 0)\n\
    \    {\n        binary += decimal % 2;\n        decimal /= 2;\n    }\n    binary\
    \ += \"db\";\n    return binary;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_eh84dfe.d(22): Error: incompatible types for `(binary) += (decimal\
    \ % 2L)`: `string` and `long`\\n/tmp/tmp_eh84dfe.d(25): Error: slice `binary`\
    \ is not mutable\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_eh84dfe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgh72jrbg.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgh72jrbg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj87f5df6.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpj87f5df6.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpj87f5df6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz2hmo6bm.d(21): Error: no property `to` for type `long`\\n/tmp/tmpz2hmo6bm.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2hmo6bm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp75ifmxf9.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75ifmxf9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbdwwsrdh.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdwwsrdh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl8_tavk9.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpl8_tavk9.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpl8_tavk9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyquepand.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpyquepand.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpyquepand.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpee4tfyig.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpee4tfyig.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpee4tfyig.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyt2yezei.d(21): Error: no property `to` for type `long`\\n/tmp/tmpyt2yezei.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpyt2yezei.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpytgzpc79.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpytgzpc79.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxr7b5h3w.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxr7b5h3w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb8ct0li1.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb8ct0li1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu39ubv9a.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpu39ubv9a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptei8cjfj.d(21): Error: no property `to` for type `long`\\n/tmp/tmptei8cjfj.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmptei8cjfj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx1t2mq83.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx1t2mq83.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpce4s9764.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpce4s9764.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq84tcl19.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpq84tcl19.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa455st75.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpa455st75.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpa455st75.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return result\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplxaym9qc.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmplxaym9qc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary.reverse\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg3nzte5c.d(21): Error: no property `to` for type `long`\\n/tmp/tmpg3nzte5c.d(24):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3nzte5c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8okypksn.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp8okypksn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_1ldbrv.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_1ldbrv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2cscmypf.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp2cscmypf.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2cscmypf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary;\n    while(decimal != 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary.reverse ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzvptnaex.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpzvptnaex.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzvptnaex.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi9vnjbfj.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpi9vnjbfj.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9vnjbfj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxt5c98j8.d(21): Error: no property `to` for type `long`\\n/tmp/tmpxt5c98j8.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxt5c98j8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnj51nj9h.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpnj51nj9h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2vj5ppw7.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp2vj5ppw7.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2vj5ppw7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal != 0)\n    {\n        result\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result\
    \ ~ \"db\";\n}\n/*\nYou will be given a string in binary format and your task\
    \ is to convert it to decimal format.\n    The function should return a number.\n\
    unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmo2e0j5w.d(26): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmo2e0j5w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0w7ma3a.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0w7ma3a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp85fw2irh.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp85fw2irh.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp85fw2irh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    if(decimal == 0)\n        return binary\
    \ + \"0\" + binary;\n    while(decimal != 0)\n    {\n        binary += (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return binary + binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpehjeacs4.d(20): Error: invalid array operation `binary + \"0\"\
    ` (possible missing [])\\n/tmp/tmpehjeacs4.d(23): Error: no property `to` for\
    \ type `long`\\n/tmp/tmpehjeacs4.d(26): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(char[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpehjeacs4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxpo8l3jw.d(21): Error: no property `to` for type `long`\\n/tmp/tmpxpo8l3jw.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxpo8l3jw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw8iid8i1.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw8iid8i1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp36fri3en.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp36fri3en.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxg4a7bcj.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpxg4a7bcj.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxg4a7bcj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw2whokv5.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpw2whokv5.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2whokv5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcikii0mt.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpcikii0mt.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcikii0mt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxxw1gx30.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxxw1gx30.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjoplm4zv.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpjoplm4zv.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpjoplm4zv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcubg6lu1.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpcubg6lu1.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcubg6lu1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string ret = \"db\";\n    while(decimal > 0)\n    {\n        ret ~=\
    \ (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return ret ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzebflf8d.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzebflf8d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary.dup.reverse\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpirewctfi.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpirewctfi.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpirewctfi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpud1frrs9.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpud1frrs9.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpud1frrs9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvocl0c96.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpvocl0c96.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpvocl0c96.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0) {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\n\
    unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcukk_tjt.d(20): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcukk_tjt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0vkisz3a.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp0vkisz3a.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vkisz3a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp65sty3sv.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp65sty3sv.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp65sty3sv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6wgmt3lp.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp6wgmt3lp.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wgmt3lp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj0qy6qho.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0qy6qho.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9zc4f3xj.d(21): Error: no property `to` for type `long`\\n/tmp/tmp9zc4f3xj.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9zc4f3xj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2zyxrx58.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp2zyxrx58.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zyxrx58.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplxl6h63d.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmplxl6h63d.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplxl6h63d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph36moar0.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmph36moar0.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph36moar0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqj11gs_v.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpqj11gs_v.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqj11gs_v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string ret = \"db\";\n    while(decimal > 0)\n    {\n        ret ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    ret ~= \"db\";\n    return ret.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp46um6776.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp46um6776.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp46um6776.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    long temp = decimal;\n    while(temp !=\
    \ 0)\n    {\n        result = (temp % 2 == 0 ? \"0\" : \"1\") ~ result;\n    \
    \    temp /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n{\n    alias\
    \ candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n\
    \    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) ==\
    \ \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx_z3bguj.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f4d]\\n??:? void tmpx_z3bguj.__unittest_L27_C1()\
    \ [0x427b5d]\\n??:? void tmpx_z3bguj.__modtest() [0x427cd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bd3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ac4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fba9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ac25]\\n??:? runModuleUnitTests [0x42bb15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42839c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428323]\\n??:? _d_run_main [0x42828e]\\n??:? main [0x427ce3]\\\
    n??:? __libc_start_main [0x8c2e9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdzq73e5c.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzq73e5c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfi_jg0f0.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpfi_jg0f0.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfi_jg0f0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphrxn_6kw.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmphrxn_6kw.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphrxn_6kw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzmv55uc3.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpzmv55uc3.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzmv55uc3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9_4o6433.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp9_4o6433.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_4o6433.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmfno4xmx.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpmfno4xmx.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfno4xmx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7yr_7e77.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp7yr_7e77.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yr_7e77.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp982itneb.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp982itneb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5j9h6jzg.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5j9h6jzg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1t5ybeaq.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp1t5ybeaq.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1t5ybeaq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfup70oiv.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfup70oiv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4z3bn8m5.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp4z3bn8m5.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4z3bn8m5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpat4ahw_d.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpat4ahw_d.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpat4ahw_d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return result\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa3sr0fbg.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpa3sr0fbg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdbukce_g.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbukce_g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf8fimmt3.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpf8fimmt3.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8fimmt3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5jg5hyfq.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jg5hyfq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvopzd368.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvopzd368.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk9o17_x6.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk9o17_x6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary.dup.reverse\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb8pfk6sz.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpb8pfk6sz.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpb8pfk6sz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2yyp5gs6.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2yyp5gs6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3g60f5y0.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp3g60f5y0.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g60f5y0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1m04g30c.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1m04g30c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplki1gyz8.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplki1gyz8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppw0jdou4.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppw0jdou4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8mzsrt6j.d(21): Error: no property `to` for type `long`\\n/tmp/tmp8mzsrt6j.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8mzsrt6j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo13qjznl.d(21): Error: no property `to` for type `long`\\n/tmp/tmpo13qjznl.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpo13qjznl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9269mo7u.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp9269mo7u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0sfut022.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp0sfut022.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0sfut022.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwzr03urx.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwzr03urx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvwvynic8.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwvynic8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahlpz43y.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpahlpz43y.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpahlpz43y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2mvgjnn3.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2mvgjnn3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxyqbf60.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxyqbf60.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa8m9ooue.d(21): Error: no property `to` for type `long`\\n/tmp/tmpa8m9ooue.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpa8m9ooue.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp17inckop.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17inckop.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ = binary ~ (decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~\
    \ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9utregsx.d(21): Error: incompatible types for `(binary) ~ (decimal\
    \ % 2L)`: `string` and `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9utregsx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg8ekypdv.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpg8ekypdv.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpg8ekypdv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnc525ow9.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpnc525ow9.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpnc525ow9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal != 0)\n    {\n        result\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfbbjfusn.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfbbjfusn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal != 0)\n    {\n        result\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplm737_bp.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplm737_bp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph0h2tjc9.d(21): Error: no property `to` for type `long`\\n/tmp/tmph0h2tjc9.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph0h2tjc9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy9hnkig0.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpy9hnkig0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5eoj_hy_.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp5eoj_hy_.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp5eoj_hy_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppggecpvg.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppggecpvg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3clxg_ba.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3clxg_ba.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpst3qf1eo.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpst3qf1eo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf_hv8e7j.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpf_hv8e7j.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_hv8e7j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp50_5oaws.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp50_5oaws.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp50_5oaws.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        if(decimal\
    \ % 2 == 0)\n            binary ~= \"0\";\n        else\n            binary ~=\
    \ \"1\";\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf22gecs3.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f55]\\n??:? void tmpf22gecs3.__unittest_L29_C1()\
    \ [0x427b61]\\n??:? void tmpf22gecs3.__modtest() [0x427cd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c7e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fed1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430380]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fe5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6c9]\\n??:? runModuleUnitTests [0x42c5b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42832b]\\n??:? _d_run_main [0x428296]\\n??:? main [0x427ce7]\\\
    n??:? __libc_start_main [0xe7af9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9hsnue2h.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hsnue2h.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy95q4y60.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpy95q4y60.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpizawjvtj.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpizawjvtj.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpizawjvtj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6e2m3bd8.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6e2m3bd8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph2jf2cio.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmph2jf2cio.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph2jf2cio.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsdb0dy43.d(21): Error: no property `to` for type `long`\\n/tmp/tmpsdb0dy43.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdb0dy43.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary;\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary.reverse ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgkkos7bq.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpgkkos7bq.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkkos7bq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary;\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary.reverse ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6dj_uifr.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp6dj_uifr.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dj_uifr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"\
    db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp30cpnhu2.d(21): Error: no property `to` for type `long`\\n/tmp/tmp30cpnhu2.d(25):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp30cpnhu2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary.dup.reverse\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi8zzqj9n.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpi8zzqj9n.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpi8zzqj9n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqxrg93iz.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxrg93iz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgayhl6x5.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpgayhl6x5.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpgayhl6x5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return result\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzl6_20d.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpzzl6_20d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplmj6fk2b.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplmj6fk2b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp25i9itj.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp25i9itj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp56a8vwea.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp56a8vwea.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp72pmfl71.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72pmfl71.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplfdeax3j.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplfdeax3j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal != 0)\n    {\n        result\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplrcxbio9.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplrcxbio9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    if(decimal == 0)\n        return binary\
    \ + \"0\" + binary;\n    while(decimal != 0)\n    {\n        binary += to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary + \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp4e2vt2o.d(20): Error: invalid array operation `binary + \"0\"\
    ` (possible missing [])\\n/tmp/tmpp4e2vt2o.d(23): Error: template instance `to!string`\
    \ template `to` is not defined, did you mean No?\\n/tmp/tmpp4e2vt2o.d(26): Error:\
    \ invalid array operation `binary + \"db\"` (possible missing [])\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp4e2vt2o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal != 0)\n    {\n        result\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ug8j9sg.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ug8j9sg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsg0ktgdj.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsg0ktgdj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp27yf61bp.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27yf61bp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq85m69d8.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq85m69d8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return result\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfvn3zh9e.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpfvn3zh9e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7urjoani.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7urjoani.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp82ht5vlb.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp82ht5vlb.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp82ht5vlb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp1ocjs3d.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1ocjs3d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6r_a6q04.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp6r_a6q04.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6r_a6q04.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfs540svy.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs540svy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        result\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsx8n0udk.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsx8n0udk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkpz5kuk7.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmpkpz5kuk7.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpkpz5kuk7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal != 0)\n    {\n        result\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcptqx77v.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcptqx77v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwkpse7hj.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkpse7hj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkndjdqqn.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkndjdqqn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzyj88qi_.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpzyj88qi_.d(25): Error: template\
    \ `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzyj88qi_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3rnv1k3l.d(21): Error: cannot append type `long` to type `string`\\\
    n/tmp/tmp3rnv1k3l.d(25): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rnv1k3l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary\
    \ ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj0vcpck2.d(21): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0vcpck2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string result = \"db\";\n    while(decimal > 0)\n    {\n        if(decimal\
    \ % 2 == 0)\n            result ~= \"0\";\n        else\n            result ~=\
    \ \"1\";\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp115b1wn9.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f55]\\n??:? void tmp115b1wn9.__unittest_L29_C1()\
    \ [0x427b61]\\n??:? void tmp115b1wn9.__modtest() [0x427cd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c7e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fed1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430380]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fe5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6c9]\\n??:? runModuleUnitTests [0x42c5b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42832b]\\n??:? _d_run_main [0x428296]\\n??:? main [0x427ce7]\\\
    n??:? __libc_start_main [0x9a3e4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)\
    \   # returns \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal)\
    \ \n{\n    string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary\
    \ ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpept0sufg.d(21): Error: cannot append type `long` to type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpept0sufg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
