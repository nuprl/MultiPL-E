name: HumanEval_16_count_distinct_characters
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            if(c.isUpper)\n            {\n                c = c.toLower;\n\
    \            }\n            if(!c.isAlpha)\n            {\n                continue;\n\
    \            }\n            count++;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjl3cx287.d(16): Error: no property `isAlpha` for type `char`\\\
    n/tmp/tmpjl3cx287.d(18): Error: no property `isUpper` for type `char`\\n/tmp/tmpjl3cx287.d(20):\
    \ Error: no property `toLower` for type `char`\\n/tmp/tmpjl3cx287.d(22): Error:\
    \ no property `isAlpha` for type `char`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpjl3cx287.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc_5dchgl.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_5dchgl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(uniq(string.toLower()));\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyb783rv2.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpyb783rv2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpswsz3xyu.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswsz3xyu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv1v0lmq_.d(16): Error: no property `tolower` for type `char`\\\
    n/tmp/tmpv1v0lmq_.d(16): Error: no property `tolower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1v0lmq_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppsob9l1e.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppsob9l1e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz88hlhog.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz88hlhog.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            c = c.toLower;\n        }\n        if(!c.isAlpha)\n      \
    \  {\n            continue;\n        }\n        if(!count)\n        {\n      \
    \      count++;\n            continue;\n        }\n        bool is_duplicate =\
    \ false;\n        foreach(char c2; string[0..count])\n        {\n            if(c\
    \ == c2)\n            {\n                is_duplicate = true;\n              \
    \  break;\n            }\n        }\n        if(!is_duplicate)\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_fox7roc.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmp_fox7roc.d(18): Error: no property `toLower` for type `char`\\n/tmp/tmp_fox7roc.d(20):\
    \ Error: no property `isAlpha` for type `char`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_fox7roc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd7j9at7a.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7j9at7a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ei4prlm.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ei4prlm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmxx7nxf8.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpmxx7nxf8.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpmxx7nxf8.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0xe6400554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa391qcms.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa391qcms.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk7jlk547.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpk7jlk547.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ string.toLower().chars.distinct.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ulhptde.d(13): Error: no property `toLower` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ulhptde.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).unique.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphup0mv1f.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmphup0mv1f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() == c)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy0mn0hee.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0mn0hee.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    auto\
    \ result = new Set!char;\n    foreach(c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd4zooee6.d(13): Error: template instance `Set!char` template\
    \ `Set` is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V)\
    \ defaultValue)?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4zooee6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters2(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters3(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters4(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n   \nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpprqhoccz.d(83): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprqhoccz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(!c.isLetter)\n  \
    \          continue;\n        if(c.isUpper)\n            c = c.toLower;\n    \
    \    if(!string.contains(c))\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqgli9uwn.d(16): Error: no property `isLetter` for type `char`\\\
    n/tmp/tmpqgli9uwn.d(18): Error: no property `isUpper` for type `char`\\n/tmp/tmpqgli9uwn.d(19):\
    \ Error: no property `toLower` for type `char`\\n/tmp/tmpqgli9uwn.d(20): Error:\
    \ no property `contains` for type `string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpqgli9uwn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp52z_fk_6.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52z_fk_6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    //return\
    \ string.length;\n    //return string.length;\n    //return string.length;\n \
    \   //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfpvyly_h.d(77): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfpvyly_h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppj6eozc9.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppj6eozc9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(std.algorithm.uniq(string.toLower()).length);\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy2l_9jov.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpy2l_9jov.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in count)\n\
    \        {\n            count ~= c.tolower();\n        }\n    }\n    return count.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpswqm1l2c.d(16): Error: no property `tolower` for type `char`\\\
    n/tmp/tmpswqm1l2c.d(18): Error: no property `tolower` for type `char`\\n/tmp/tmpswqm1l2c.d(21):\
    \ Error: no property `length` for type `long`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpswqm1l2c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm7jffc00.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpm7jffc00.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9onuwjbn.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9onuwjbn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7cjipckh.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7cjipckh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx_98vv3e.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_98vv3e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4mp5m7ns.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mp5m7ns.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpildleviv.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpildleviv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe0adtx8f.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpe0adtx8f.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpe0adtx8f.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0x3d130554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n       \
    \ {\n            count++;\n        }\n        else\n        {\n            bool\
    \ found = false;\n            foreach(char c2; string[0..$-1])\n            {\n\
    \                if(c == c2)\n                {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if(!found)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpws5wxuq4.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpws5wxuq4.__unittest_L39_C1()\
    \ [0x427b5d]\\n??:? void tmpws5wxuq4.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc0f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaa2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc35]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbc1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa79]\\n??:? runModuleUnitTests [0x42b9e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428338]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282bf]\\n??:? _d_run_main [0x42822a]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x412fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz6k8nnks.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz6k8nnks.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuhh4met2.d(92): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpuhh4met2.d(92): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhh4met2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            count++;\n        }\n        else if(c.isLower)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplonq1knm.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmplonq1knm.d(20): Error: no property `isLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplonq1knm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxdnj3e07.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxdnj3e07.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp6pypq7f.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpp6pypq7f.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpp6pypq7f.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0xe8243554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjyjwlos6.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpjyjwlos6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkyi3kgx8.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyi3kgx8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in count)\n\
    \        {\n            count ~= c.tolower();\n        }\n    }\n    return count.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpajc7lvy0.d(16): Error: no property `tolower` for type `char`\\\
    n/tmp/tmpajc7lvy0.d(18): Error: no property `tolower` for type `char`\\n/tmp/tmpajc7lvy0.d(21):\
    \ Error: no property `length` for type `long`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpajc7lvy0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            count++;\n        }\n        else if(c.isLower)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp253i5z1_.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmp253i5z1_.d(20): Error: no property `isLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp253i5z1_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(!c.isAlpha)\n   \
    \         continue;\n        if(c.isUpper)\n            c = c.toLower;\n     \
    \   if(!c.isAlpha)\n            continue;\n        if(!string.indexOf(c))\n  \
    \          count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqfwnck2y.d(16): Error: no property `isAlpha` for type `char`\\\
    n/tmp/tmpqfwnck2y.d(18): Error: no property `isUpper` for type `char`\\n/tmp/tmpqfwnck2y.d(19):\
    \ Error: no property `toLower` for type `char`\\n/tmp/tmpqfwnck2y.d(20): Error:\
    \ no property `isAlpha` for type `char`\\n/tmp/tmpqfwnck2y.d(22): Error: no property\
    \ `indexOf` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqfwnck2y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ std.algorithm.uniq(string.toLower()).length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppa2q1x11.d(13): Error: undefined identifier `algorithm` in package\
    \ `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppa2q1x11.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2rehjajz.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rehjajz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnn2zgvop.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnn2zgvop.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1jekgqqd.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1jekgqqd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpin0n6omw.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpin0n6omw.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpin0n6omw.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0xbe020554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfodf44iu.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfodf44iu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp92gq62pr.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp92gq62pr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp89cfr1u5.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp89cfr1u5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqdujz8b6.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqdujz8b6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpytue2sqn.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpytue2sqn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        else\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph0dseyd7.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0dseyd7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpexfn93h2.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpexfn93h2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLowerCase).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLowerCase).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLowerCase).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqn872egx.d(75): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqn872egx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(toSet(string.toLower()).length);\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqn7qij45.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpqn7qij45.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpupb6tj6w.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpupb6tj6w.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgc8p2rur.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgc8p2rur.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(to!char[])(string).toLower().unique.length;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph9ou4w9l.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmph9ou4w9l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzdrrdzth.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdrrdzth.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).unique.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp97jb96cq.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp97jb96cq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2a09xsyp.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2a09xsyp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLower)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy9balgwd.d(16): Error: no property `isLower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9balgwd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwj83hgav.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpwj83hgav.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpwj83hgav.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0x69c50554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpygvpmfqj.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygvpmfqj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(uniq(string.toLower()));\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_yq6lvsu.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp_yq6lvsu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpshaj8c18.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpshaj8c18.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpshaj8c18.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0xd3f7b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjxi07f2.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjxi07f2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbsxx_4bv.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpbsxx_4bv.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpbsxx_4bv.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0x4069f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5m63x8m3.d(16): Error: no property `tolower` for type `char`\\\
    n/tmp/tmp5m63x8m3.d(16): Error: no property `tolower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5m63x8m3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ string.toLower().length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3qwrsmoj.d(13): Error: no property `toLower` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3qwrsmoj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_oiulpp0.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_oiulpp0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char; string)\n    {\n        if(count == 0)\n     \
    \   {\n            count++;\n        }\n        else\n        {\n            bool\
    \ found = false;\n            foreach(char2; string[0..count])\n            {\n\
    \                if(char == char2)\n                {\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if(!found)\n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyrb4560a.d(14): Error: no identifier for declarator `char`\\\
    n/tmp/tmpyrb4560a.d(25): Error: found `==` when expecting `.` following char\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrb4560a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpamajp3ub.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpamajp3ub.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ std.algorithm.uniq(string.toLower()).length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfsqtw0oe.d(13): Error: undefined identifier `algorithm` in package\
    \ `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfsqtw0oe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1931d5o.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1931d5o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ std.algorithm.uniq(string.toLower()).length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi7wdywta.d(13): Error: undefined identifier `algorithm` in package\
    \ `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi7wdywta.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp324sm9yc.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp324sm9yc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9j3gnvqi.d(16): Error: no property `tolower` for type `char`\\\
    n/tmp/tmp9j3gnvqi.d(16): Error: no property `tolower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9j3gnvqi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters2(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters3(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters4(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters5(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters6(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyfw5s0jo.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpyfw5s0jo.d(25): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpyfw5s0jo.d(37):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmpyfw5s0jo.d(49): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpyfw5s0jo.d(61): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpyfw5s0jo.d(73):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfw5s0jo.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_3lu8f1k.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp_3lu8f1k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_2(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_3(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_4(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_5(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_6(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkhyd1sv1.d(74): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmpkhyd1sv1.d(75): Error: found `{` when expecting `;` following\
    \ `return` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhyd1sv1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ result = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n   \
    \     {\n            result += 1;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_2(string string) \n{\n    long\
    \ result = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n   \
    \     {\n            result += 1;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_3(string string) \n{\n    long\
    \ result = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n   \
    \     {\n            result += 1;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_4(string string) \n{\n    long\
    \ result = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n   \
    \     {\n            result += 1;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1zi9yrz.d(92): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1zi9yrz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            count++;\n        }\n        else if(c.isLower)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3oe6q57p.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmp3oe6q57p.d(20): Error: no property `isLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3oe6q57p.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ distinct(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpggceo2gi.d(13): Error: undefined identifier `distinct`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpggceo2gi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() == c)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp239wr68w.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp239wr68w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnoh_agx5.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnoh_agx5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper) count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprld9v8bc.d(16): Error: no property `isUpper` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprld9v8bc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp97mfyy30.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp97mfyy30.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tforeach(char c; string)\n\t{\n\t\tif(c.isLetter)\n\t\t{\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9_4drrse.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_4drrse.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c == ' ')\n     \
    \       continue;\n        if(c >= 'A' && c <= 'Z')\n            c = tolower(c);\n\
    \        if(count == 0)\n        {\n            count++;\n            continue;\n\
    \        }\n        bool found = false;\n        foreach(char c2; string)\n  \
    \      {\n            if(c2 == ' ')\n                continue;\n            if(c2\
    \ >= 'A' && c2 <= 'Z')\n                c2 = tolower(c2);\n            if(c ==\
    \ c2)\n            {\n                found = true;\n                break;\n\
    \            }\n        }\n        if(!found)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzq1i6vk9.d(19): Error: undefined identifier `tolower`\\n/tmp/tmpzq1i6vk9.d(31):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpzq1i6vk9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            count++;\n        }\n        else if(c.isLower)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj1fm1aoa.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmpj1fm1aoa.d(20): Error: no property `isLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1fm1aoa.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj6667dox.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6667dox.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string) \n    {\n        if(c >= 'a' && c <=\
    \ 'z') \n        {\n            count++;\n        }\n        else if(c >= 'A'\
    \ && c <= 'Z') \n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjp9ukrq2.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpjp9ukrq2.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpjp9ukrq2.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0x13a41554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            c = c.toLower;\n        }\n        if(c.isLower)\n       \
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ot3y_2_.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmp1ot3y_2_.d(18): Error: no property `toLower` for type `char`\\n/tmp/tmp1ot3y_2_.d(20):\
    \ Error: no property `isLower` for type `char`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1ot3y_2_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    auto\
    \ char_set = set!char();\n    foreach(char c; string)\n    {\n        char_set.insert(c);\n\
    \    }\n    return char_set.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmmg_3fno.d(13): Error: template instance `set!char` template\
    \ `set` is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V)\
    \ defaultValue)?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmmg_3fno.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n       \
    \ {\n            count++;\n        }\n        else\n        {\n            foreach(char\
    \ c2; string)\n            {\n                if(c == c2)\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpidqeci3k.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e35]\\n??:? void tmpidqeci3k.__unittest_L33_C1()\
    \ [0x427b48]\\n??:? void tmpidqeci3k.__modtest() [0x427bb4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9c5]\\n??:? runModuleUnitTests [0x42b931]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428284]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42820b]\\n??:? _d_run_main [0x428176]\\n??:? main [0x427bc7]\\\
    n??:? __libc_start_main [0xd7984554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpji68ub3z.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpji68ub3z.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpji68ub3z.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0x2329554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1p0uvoo1.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1p0uvoo1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7nx1erki.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7nx1erki.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLowerCase).distinct.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxzmdro7w.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpxzmdro7w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpopkvma_i.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpopkvma_i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ result = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n  \
    \      {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprb8u_35r.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb8u_35r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ string.toLower().toHashSet().length;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyfxmrxen.d(13): Error: no property `toLower` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfxmrxen.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ string.toLower().toHashSet().length;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwhqewuwc.d(13): Error: no property `toLower` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhqewuwc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            count++;\n        }\n        else if(c.isLower)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpynkzriyw.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmpynkzriyw.d(20): Error: no property `isLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynkzriyw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpem1v6xk4.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpem1v6xk4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n       \
    \ {\n            count++;\n        }\n        else\n        {\n            bool\
    \ found = false;\n            foreach(char d; string[0..count])\n            {\n\
    \                if(c == d)\n                {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if(!found)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm9r52rjv.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpm9r52rjv.__unittest_L39_C1()\
    \ [0x427b80]\\n??:? void tmpm9r52rjv.__modtest() [0x427bec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc07]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa9a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc2d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa71]\\n??:? runModuleUnitTests [0x42b9dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428330]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b7]\\n??:? _d_run_main [0x428222]\\n??:? main [0x427bff]\\\
    n??:? __libc_start_main [0xf57d0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr3geky7d.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpr3geky7d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower()).length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLower()).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower()).length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLower()).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower()).length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLower()).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9q1gex6s.d(75): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9q1gex6s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ string.toLower().chars.uniq.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqsm1_iyd.d(13): Error: no property `toLower` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqsm1_iyd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).unique.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw6m6ectf.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpw6m6ectf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1nzid6pf.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1nzid6pf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(toSet(string.toLower()).length);\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn2n65u4q.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpn2n65u4q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjrq1ouko.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjrq1ouko.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n       \
    \ {\n            count++;\n        }\n        else\n        {\n            bool\
    \ found = false;\n            foreach(char c2; string[0..$-1])\n            {\n\
    \                if(c == c2)\n                {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if(!found)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqcatc4w6.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpqcatc4w6.__unittest_L39_C1()\
    \ [0x427b5d]\\n??:? void tmpqcatc4w6.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc0f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaa2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc35]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbc1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa79]\\n??:? runModuleUnitTests [0x42b9e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428338]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282bf]\\n??:? _d_run_main [0x42822a]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x26d6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp7hi_81p.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpp7hi_81p.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpp7hi_81p.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0x5d320554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ string.toLower().toSet().length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0zss3qn4.d(13): Error: no property `toLower` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zss3qn4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0neorurj.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmp0neorurj.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmp0neorurj.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0xe55b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp42ji1z3z.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42ji1z3z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdxajp6em.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxajp6em.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            c = c.toLower;\n        }\n        if(!c.isAlpha)\n      \
    \  {\n            continue;\n        }\n        if(!c.isLower)\n        {\n  \
    \          continue;\n        }\n        count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdfnt0h23.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmpdfnt0h23.d(18): Error: no property `toLower` for type `char`\\n/tmp/tmpdfnt0h23.d(20):\
    \ Error: no property `isAlpha` for type `char`\\n/tmp/tmpdfnt0h23.d(24): Error:\
    \ no property `isLower` for type `char`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpdfnt0h23.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in count)\n\
    \        {\n            count ~= c.tolower();\n        }\n    }\n    return count.length;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprp993yf7.d(16): Error: no property `tolower` for type `char`\\\
    n/tmp/tmprp993yf7.d(18): Error: no property `tolower` for type `char`\\n/tmp/tmprp993yf7.d(21):\
    \ Error: no property `length` for type `long`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprp993yf7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).byChunk(1).array.distinct.length;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp34y0e9_b.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp34y0e9_b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0b5vaue5.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmp0b5vaue5.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmp0b5vaue5.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0xbdd5b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ distinct(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp17fzrn4d.d(13): Error: undefined identifier `distinct`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17fzrn4d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ string.toLower().chars.distinct.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxakts3x2.d(13): Error: no property `toLower` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxakts3x2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp7h87ycv.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp7h87ycv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsqf8smc0.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpsqf8smc0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            c = c.toLower;\n        }\n        if(!count.counts!(c))\n\
    \        {\n            count[c] = 1;\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw2nz7yry.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmpw2nz7yry.d(18): Error: no property `toLower` for type `char`\\n/tmp/tmpw2nz7yry.d(20):\
    \ Error: no property `counts` for type `long`\\n/tmp/tmpw2nz7yry.d(22): Error:\
    \ only one index allowed to index `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpw2nz7yry.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(std.algorithm.uniq(string.toLower()).length);\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfszgg_30.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpfszgg_30.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph6d_szxl.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph6d_szxl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp88mz01_x.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88mz01_x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbhjxoub4.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbhjxoub4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char; string)\n    {\n        if(!count)\n        {\n\
    \            count++;\n        }\n        else\n        {\n            bool found\
    \ = false;\n            foreach(char2; string[0..$-1])\n            {\n      \
    \          if(char == char2)\n                {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if(!found)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe0y_2hsx.d(14): Error: no identifier for declarator `char`\\\
    n/tmp/tmpe0y_2hsx.d(25): Error: found `==` when expecting `.` following char\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe0y_2hsx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(std.algorithm.uniq(string.toLower()).length);\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnrexsg3_.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpnrexsg3_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjkrxfd_k.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkrxfd_k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbwqysvwo.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwqysvwo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbm3v7fsg.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpbm3v7fsg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n       \
    \ {\n            count++;\n        }\n        else\n        {\n            bool\
    \ found = false;\n            foreach(char c2; string[0..count])\n           \
    \ {\n                if(c == c2)\n                {\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if(!found)\n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn8v4k2ah.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpn8v4k2ah.__unittest_L39_C1()\
    \ [0x427b80]\\n??:? void tmpn8v4k2ah.__modtest() [0x427bec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc07]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa9a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc2d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa71]\\n??:? runModuleUnitTests [0x42b9dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428330]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b7]\\n??:? _d_run_main [0x428222]\\n??:? main [0x427bff]\\\
    n??:? __libc_start_main [0xe11f9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if (c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if (c >= 'A'\
    \ && c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg17vlnda.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpg17vlnda.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpg17vlnda.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0x415e1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpynb5gtd6.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpynb5gtd6.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmpynb5gtd6.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0xc879b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    auto\
    \ result = set!char();\n    foreach(char c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    auto result = set!char();\n    foreach(char c; string)\n  \
    \  {\n        result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    auto\
    \ result = set!char();\n    foreach(char c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    auto result = set!char();\n    foreach(char c; string)\n  \
    \  {\n        result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    auto\
    \ result = set!char();\n    foreach(char c; string)\n    {\n        result.insert(c);\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp60ki05m0.d(85): Error: found `unittest` instead of statement\\\
    n/tmp/tmp60ki05m0.d(95): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60ki05m0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpna0b74ub.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpna0b74ub.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            c = c.toLower;\n        }\n        if(!c.isAlpha)\n      \
    \  {\n            continue;\n        }\n        if(!count)\n        {\n      \
    \      count = 1;\n            continue;\n        }\n        foreach(char c2;\
    \ string[0..$-1])\n        {\n            if(c2.isUpper)\n            {\n    \
    \            c2 = c2.toLower;\n            }\n            if(c2 == c)\n      \
    \      {\n                break;\n            }\n            if(c2 == string[$-2])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmponw9qd9o.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmponw9qd9o.d(18): Error: no property `toLower` for type `char`\\n/tmp/tmponw9qd9o.d(20):\
    \ Error: no property `isAlpha` for type `char`\\n/tmp/tmponw9qd9o.d(31): Error:\
    \ no property `isUpper` for type `char`\\n/tmp/tmponw9qd9o.d(33): Error: no property\
    \ `toLower` for type `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmponw9qd9o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5zcrm31x.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5zcrm31x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(map!(toLower)(string.dup).sort.uniq.length);\n}\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ad7t6st.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp5ad7t6st.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).unique.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpteqps1ns.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpteqps1ns.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            count += 1;\n        }\n        else if(c.isLower)\n     \
    \   {\n            count += 1;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3svzbglu.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmp3svzbglu.d(20): Error: no property `isLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3svzbglu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppbfsusmj.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppbfsusmj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(uniq(string.toLower()));\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprgcxffjj.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmprgcxffjj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).byChunk(1).array.distinct.length;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_i66vy09.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp_i66vy09.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(std.algorithm.uniq(string.toLower()).length);\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4nsgwvx0.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp4nsgwvx0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw4rqr1oi.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpw4rqr1oi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp32maz5c4.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32maz5c4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgoxyri1l.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgoxyri1l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(string.toUpper().unique());\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxd6tpopu.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpxd6tpopu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmpsw4ig7.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmpsw4ig7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(std.algorithm.uniq(string.toLower()).length);\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpayilikka.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpayilikka.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpna9bkmoi.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpna9bkmoi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz51leul1.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz51leul1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm56t83w0.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm56t83w0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa85f23p0.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa85f23p0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    auto\
    \ result = set!char();\n    foreach(char c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxvk5qyqc.d(13): Error: template instance `set!char` template\
    \ `set` is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V)\
    \ defaultValue)?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvk5qyqc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            count += 1;\n        }\n        else if(c.isLower)\n     \
    \   {\n            count += 1;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9h3x72gm.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmp9h3x72gm.d(20): Error: no property `isLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9h3x72gm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd5cgo0m3.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd5cgo0m3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ string.toLower().toSet().length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx2xw00tl.d(13): Error: no property `toLower` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2xw00tl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp28018i6v.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmp28018i6v.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmp28018i6v.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0xab3b5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuccsxzkk.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuccsxzkk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).distinct.length;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbqgbktta.d(13): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpbqgbktta.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters2(string\
    \ string) \n{\n    return to!string(string.toLower()).length;\n}\n/*\n Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters3(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters4(string\
    \ string) \n{\n    return to!string(string.toLower()).length;\n}\n/*\n Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters5(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters6(string\
    \ string) \n{\n    return to!string(string.toLower()).length;\n}\n/*\n Given a\
    \ string, find out how many distinct characters\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaoqz5x8l.d(75): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaoqz5x8l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc5nnbd1z.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc5nnbd1z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ result = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n  \
    \      {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8xu4d340.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xu4d340.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ string.toLower().toSet().length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvjsfmn1n.d(13): Error: no property `toLower` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvjsfmn1n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ string.toLower().toSet().length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp300jenjx.d(13): Error: no property `toLower` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp300jenjx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkf99o6cn.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf99o6cn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj00csrez.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj00csrez.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in count)\n\
    \        {\n            count ~= c.tolower();\n        }\n    }\n    return count.length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n   \
    \ >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters2(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string)\n    {\n     \
    \   if(c.tolower() !in count)\n        {\n            count ~= c.tolower();\n\
    \        }\n    }\n    return count.length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters3(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in count)\n\
    \        {\n            count ~= c.tolower();\n        }\n    }\n    return count.length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n   \
    \ >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters4(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string)\n    {\n     \
    \   if(c.tolower() !in count)\n        {\n            count ~= c.tolower();\n\
    \        }\n    }\n    return count.length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7qow2nko.d(83): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qow2nko.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9cpt0ry2.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9cpt0ry2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            c = c.toLower;\n        }\n        if(!count.counts.contains(c))\n\
    \        {\n            count.counts[c] = 1;\n            count++;\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg3cg40fm.d(16): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmpg3cg40fm.d(18): Error: no property `toLower` for type `char`\\n/tmp/tmpg3cg40fm.d(20):\
    \ Error: no property `counts` for type `long`\\n/tmp/tmpg3cg40fm.d(22): Error:\
    \ no property `counts` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpg3cg40fm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp05uwjv8o.d(16): Error: no property `isLetter` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp05uwjv8o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmj_3xowi.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmj_3xowi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppk6an47k.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmppk6an47k.__unittest_L27_C1()\
    \ [0x427b20]\\n??:? void tmppk6an47k.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0x5b0d8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp91b9108.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp91b9108.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpllw556b0.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpllw556b0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg5p9blq_.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5p9blq_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppna9khoz.d(16): Error: no property `tolower` for type `char`\\\
    n/tmp/tmppna9khoz.d(16): Error: no property `tolower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppna9khoz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n       \
    \ {\n            count++;\n        }\n        else\n        {\n            foreach(char\
    \ d; string[0..count])\n            {\n                if(c == d)\n          \
    \      {\n                    break;\n                }\n                else\
    \ if(d == string[count-1])\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjtnmuuwr.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e85]\\n??:? void tmpjtnmuuwr.__unittest_L37_C1()\
    \ [0x427b98]\\n??:? void tmpjtnmuuwr.__modtest() [0x427c04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aab2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc45]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa89]\\n??:? runModuleUnitTests [0x42b9f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428348]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cf]\\n??:? _d_run_main [0x42823a]\\n??:? main [0x427c17]\\\
    n??:? __libc_start_main [0xf18a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string) \n    {\n        if (c.tolower() in\
    \ count) \n        {\n            count[c.tolower()]++;\n        } \n        else\
    \ \n        {\n            count[c.tolower()] = 1;\n        }\n    }\n    return\
    \ count.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn9_1k26u.d(16): Error: no property `tolower` for type `char`\\\
    n/tmp/tmpn9_1k26u.d(18): Error: only one index allowed to index `long`\\n/tmp/tmpn9_1k26u.d(22):\
    \ Error: only one index allowed to index `long`\\n/tmp/tmpn9_1k26u.d(25): Error:\
    \ no property `length` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpn9_1k26u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ distinct(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw8tq94hf.d(13): Error: undefined identifier `distinct`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw8tq94hf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0oxpmjsf.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0oxpmjsf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower()).length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptdi9t6i8.d(13): Error: undefined identifier `set`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptdi9t6i8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n   \nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hc89u6x.d(94): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hc89u6x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6v7_dckn.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6v7_dckn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw0kw6trr.d(16): Error: no property `isAlpha` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0kw6trr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char ch; string)\n    {\n        if(!ch.isAlpha)\n \
    \           continue;\n        if(!count)\n            count++;\n        else\n\
    \        {\n            bool found = false;\n            foreach(char c; string[0..$-1])\n\
    \            {\n                if(ch.tolower == c.tolower)\n                {\n\
    \                    found = true;\n                    break;\n             \
    \   }\n            }\n            if(!found)\n                count++;\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9rrcho5d.d(16): Error: no property `isAlpha` for type `char`\\\
    n/tmp/tmp9rrcho5d.d(25): Error: no property `tolower` for type `char`\\n/tmp/tmp9rrcho5d.d(25):\
    \ Error: no property `tolower` for type `char`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9rrcho5d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(string.toUpper().toSet().length);\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpadq1tck_.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpadq1tck_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    auto\
    \ result = new HashSet!char;\n    foreach(c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfo7dy8wd.d(13): Error: template instance `HashSet!char` template\
    \ `HashSet` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfo7dy8wd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ to!(long)(uniq(string.toLower()));\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcoygclt9.d(13): Error: template instance `to!long` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpcoygclt9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in string)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpncd1ifrv.d(16): Error: no property `tolower` for type `char`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpncd1ifrv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
