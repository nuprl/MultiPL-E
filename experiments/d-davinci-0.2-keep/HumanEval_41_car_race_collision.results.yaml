name: HumanEval_41_car_race_collision
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n    long\
    \ ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n\
    \    long am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n    long\
    \ ar;\n    long as;\n    long at;\n    long au;\n    long av;\n    long aw;\n\
    \    long ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n    long\
    \ bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n\
    \    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long\
    \ bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n\
    \    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long\
    \ by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n\
    \    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long\
    \ cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n\
    \    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long\
    \ cu;\n    long cv;\n    long cw;\n    long cx;\n    long cy;\n   \nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphbpkc_fq.d(113): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbpkc_fq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4qcsqtrm.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp4qcsqtrm.__unittest_L30_C1()\
    \ [0x427a8c]\\n??:? void tmp4qcsqtrm.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x3dec8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result = 0;\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0;\
    \ j < n; j++)\n        {\n            for (k = 0; k < n; k++)\n            {\n\
    \                for (l = 0; l < n; l++)\n                {\n                \
    \    for (m = 0; m < n; m++)\n                    {\n                        for\
    \ (o = 0; o < n; o++)\n                        {\n                           \
    \ for (p = 0; p < n; p++)\n                            {\n                   \
    \             for (q = 0; q < n; q++)\n                                {\n   \
    \                                 for (r = 0; r < n; r++)\n                  \
    \                  {\n                                        for (s = 0; s <\
    \ n; s++)\n                                        {\n                       \
    \                     for (t = 0; t < n; t++)\n                              \
    \              {\n                                                for (u = 0;\
    \ u < n; u++)\n                                                {\n           \
    \                                         for (v = 0; v < n; v++)\n          \
    \                                          {\n                               \
    \                         for (w = 0; w < n; w++)\n                          \
    \                              {\n                                           \
    \                 for (x = 0; x < n; x++)\n                                  \
    \                          {\n                                               \
    \                 for (y = 0; y < n; y++)\n                                  \
    \                              {\n                                           \
    \                         for (z = 0; z < n; z++)\n                          \
    \                                          {\n                               \
    \                                         for (a = 0; a < n; a++)\n          \
    \                                                              {\n           \
    \                                                                 for (b = 0;\
    \ b < n; b++)\n                                                              \
    \              {\n                                                           \
    \                     for (c = 0; c < n; c++)\n                              \
    \                                                  {\n                       \
    \                                                             for (d = 0; d <\
    \ n; d++)\n                                                                  \
    \                  {\n                                                       \
    \                                 for (e = 0; e < n; e++)\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkeohd2h9.d(63): Error: found `unittest` instead of statement\\\
    n/tmp/tmpkeohd2h9.d(73): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpkeohd2h9.d(73): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpkeohd2h9.d(73): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpkeohd2h9.d(73):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpkeohd2h9.d(73): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpkeohd2h9.d(73): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpkeohd2h9.d(73): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpkeohd2h9.d(73):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpkeohd2h9.d(73): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpkeohd2h9.d(73): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpkeohd2h9.d(73): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpkeohd2h9.d(73):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpkeohd2h9.d(73): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpkeohd2h9.d(73): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpkeohd2h9.d(73): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpkeohd2h9.d(73):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpkeohd2h9.d(73): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpkeohd2h9.d(73): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpkeohd2h9.d(73): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkeohd2h9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf2f17sew.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpf2f17sew.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmpf2f17sew.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xcb1a3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpout_k54m.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpout_k54m.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpout_k54m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpse7g11h9.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpse7g11h9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left = new long[n];\n    long[] right = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        left[i] = i;\n        right[i] = n - i\
    \ - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (left[i] > right[j]) {\n                count++;\n       \
    \     }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_b014gz4.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp_b014gz4.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmp_b014gz4.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xc0573554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                result += 1;\n            }\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt9bvr0hi.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpt9bvr0hi.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmpt9bvr0hi.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xe6998554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    while (i < n) \n    {\n        j =\
    \ 0;\n        while (j < n) \n        {\n            if (i == j) \n          \
    \  {\n                j = j + 1;\n                continue;\n            }\n \
    \           if (i > j) \n            {\n                count = count + 1;\n \
    \           }\n            j = j + 1;\n        }\n        i = i + 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdas5bp5u.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dcd]\\n??:? void tmpdas5bp5u.__unittest_L40_C1()\
    \ [0x427ab4]\\n??:? void tmpdas5bp5u.__modtest() [0x427b4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a986]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a95d]\\n??:? runModuleUnitTests [0x42b8c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42821c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a3]\\n??:? _d_run_main [0x42810e]\\n??:? main [0x427b5f]\\\
    n??:? __libc_start_main [0x84d9e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long aa, bb, cc, dd, ee, ff,\
    \ gg, hh, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy,\
    \ zz;\n    long aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk, lll, mmm,\
    \ nnn, ooo, ppp, qqq, rrr, sss, ttt, uuu, vvv, www, xxx, yyy, zzz;\n    long aaaa,\
    \ bbbb, cccc, dddd, eeee, ffff, gggg, hhhh, iiii, jjjj, kkkk, llll, mmmm, nnnn,\
    \ oooo, pppp, qqqq, rrrr, ssss, tttt, uuuu, vvvv, wwww, xxxx, yyyy, zzzz;\n  \
    \  long aaaaa, bbbbb, ccccc, ddddd, eeeee, fffff, ggggg, hhhhh, iiiii, jjjjj,\
    \ kkkkk, lllll, mmmmm, nnnnn, ooooo, ppppp, qqqqq, rrrrr, sssss, ttttt, uuuuu,\
    \ vvvvv, wwwww, xxxxx, yyyyy, zzzzz;\n    long aaaaaa, bbbbbb, cccccc, dddddd,\
    \ eeeeee, ffffff, gggggg, hhhhhh, iiiiii, jjjjjj, kkkkkk, llllll, mmmmmm, nnnnnn,\
    \ oooooo, pppppp, qqqqqq, rrrrrr, ssssss, tttttt, uuuuuu, vvvvvv, wwwwww, xxxxxx,\
    \ yyyyyy, zzzzzz;\n    long\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9w2dne70.d(24): Error: no identifier for declarator `long`\\\
    n/tmp/tmp9w2dne70.d(24): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9w2dne70.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long bb;\n    long cc;\n    long dd;\n    long ee;\n    long ff;\n    long\
    \ gg;\n    long hh;\n    long ii;\n    long jj;\n    long kk;\n    long ll;\n\
    \    long mm;\n    long nn;\n    long oo;\n    long pp;\n    long qq;\n    long\
    \ rr;\n    long ss;\n    long tt;\n    long uu;\n    long vv;\n    long ww;\n\
    \    long xx;\n    long yy;\n    long zz;\n    long aaa;\n    long bbb;\n    long\
    \ ccc;\n    long ddd;\n    long eee;\n    long fff;\n    long ggg;\n    long hhh;\n\
    \    long iii;\n    long jjj;\n    long kkk;\n    long lll;\n    long mmm;\n \
    \   long nnn;\n    long ooo;\n    long ppp;\n    long qqq;\n    long rrr;\n  \
    \  long sss;\n    long ttt;\n    long uuu;\n    long vvv;\n    long www;\n   \
    \ long xxx;\n    long yyy;\n    long zzz;\n    long aaaa;\n    long bbbb;\n  \
    \  long cccc;\n    long dddd;\n    long eeee;\n    long ffff;\n    long gggg;\n\
    \    long hhhh;\n    long iiii;\n    long jjjj;\n    long kkkk;\n    long llll;\n\
    \    long mmmm;\n    long nnnn;\n    long oooo;\n    long pppp;\n    long qqqq;\n\
    \    long rrrr;\nunittest\n{\n    alias candidate = car_race_collision;\n\n  \
    \  assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwrxey4eq.d(105): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrxey4eq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long count;\n    long[] left;\n    long[] right;\n\
    \    long[] left_sorted;\n    long[] right_sorted;\n    long[] left_sorted_index;\n\
    \    long[] right_sorted_index;\n    long[] left_sorted_index_sorted;\n    long[]\
    \ right_sorted_index_sorted;\n    long[] left_sorted_index_sorted_index;\n   \
    \ long[] right_sorted_index_sorted_index;\n    long[] left_sorted_index_sorted_index_sorted;\n\
    \    long[] right_sorted_index_sorted_index_sorted;\n    long[] left_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index;\n    long[] left_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted;\n    long[] left_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted_index;\n    long[]\
    \ left_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n    long[]\
    \ right_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n    long[]\
    \ left_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n   \
    \ long[] right_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_sorted_index\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8k_b5tpu.d(46): Error: semicolon expected, not `unittest`\\n/tmp/tmp8k_b5tpu.d(46):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8k_b5tpu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result;\n    long left_to_right[n];\n    long right_to_left[n];\n  \
    \  long left_to_right_sorted[n];\n    long right_to_left_sorted[n];\n    long\
    \ left_to_right_sorted_index[n];\n    long right_to_left_sorted_index[n];\n  \
    \  long left_to_right_sorted_index_sorted[n];\n    long right_to_left_sorted_index_sorted[n];\n\
    \    long left_to_right_sorted_index_sorted_index[n];\n    long right_to_left_sorted_index_sorted_index[n];\n\
    \    long left_to_right_sorted_index_sorted_index_sorted[n];\n    long right_to_left_sorted_index_sorted_index_sorted[n];\n\
    \    long left_to_right_sorted_index_sorted_index_sorted_index[n];\n    long right_to_left_sorted_index_sorted_index_sorted_index[n];\n\
    \    long left_to_right_sorted_index_sorted_index_sorted_index_sorted[n];\n  \
    \  long right_to_left_sorted_index_sorted_index_sorted_index_sorted[n];\n    long\
    \ left_to_right_sorted_index_sorted_index_sorted_index_sorted_index[n];\n    long\
    \ right_to_left_sorted_index_sorted_index_sorted_index_sorted_index[n];\n    long\
    \ left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted[n];\n\
    \    long right_to_left_sorted_index_sorted_index_sorted_index_sorted_index_sorted[n\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm6pbq43h.d(20): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] left_to_right`\\n/tmp/tmpm6pbq43h.d(21): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[n] right_to_left`\\n/tmp/tmpm6pbq43h.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] left_to_right_sorted`\\\
    n/tmp/tmpm6pbq43h.d(23): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_sorted`\\n/tmp/tmpm6pbq43h.d(24): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[n] left_to_right_sorted_index`\\\
    n/tmp/tmpm6pbq43h.d(25): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_sorted_index`\\n/tmp/tmpm6pbq43h.d(26): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] left_to_right_sorted_index_sorted`\\\
    n/tmp/tmpm6pbq43h.d(27): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_sorted_index_sorted`\\n/tmp/tmpm6pbq43h.d(28): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] left_to_right_sorted_index_sorted_index`\\\
    n/tmp/tmpm6pbq43h.d(29): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_sorted_index_sorted_index`\\n/tmp/tmpm6pbq43h.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] left_to_right_sorted_index_sorted_index_sorted`\\\
    n/tmp/tmpm6pbq43h.d(31): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_sorted_index_sorted_index_sorted`\\n/tmp/tmpm6pbq43h.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] left_to_right_sorted_index_sorted_index_sorted_index`\\\
    n/tmp/tmpm6pbq43h.d(33): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_sorted_index_sorted_index_sorted_index`\\n/tmp/tmpm6pbq43h.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] left_to_right_sorted_index_sorted_index_sorted_index_sorted`\\\
    n/tmp/tmpm6pbq43h.d(35): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_lef"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    double[] left_to_right_positions = new double[n];\n\
    \    double[] right_to_left_positions = new double[n];\n    double[] left_to_right_speeds\
    \ = new double[n];\n    double[] right_to_left_speeds = new double[n];\n    double[]\
    \ left_to_right_times = new double[n];\n    double[] right_to_left_times = new\
    \ double[n];\n    double[] left_to_right_distances = new double[n];\n    double[]\
    \ right_to_left_distances = new double[n];\n    double[] left_to_right_distances_to_collision\
    \ = new double[n];\n    double[] right_to_left_distances_to_collision = new double[n];\n\
    \    double[] left_to_right_times_to_collision = new double[n];\n    double[]\
    \ right_to_left_times_to_collision = new double[n];\n    double[] left_to_right_collision_positions\
    \ = new double[n];\n    double[] right_to_left_collision_positions = new double[n];\n\
    \    double[] left_to_right_collision_speeds = new double[n];\n    double[] right_to_left_collision_speeds\
    \ = new double[n];\n    double[] left_to_right_collision_times = new double[n];\n\
    \    double[] right_to_left_collision_times = new double[n];\n    double[] left_to_right_collision_distances\
    \ = new double[n];\n    double[] right_to_left_collision_distances = new double[n];\n\
    \    double[] left_to_right_collision_distances_to_collision = new double[n];\n\
    \    double[] right_to_left_collision_distances_to_collision = new double[n];\n\
    \    double[] left_to_right_collision_times_to_collision = new double[n];\n  \
    \  double[] right_to_left_collision_times_to_collision\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2t2yrfq9.d(43): Error: semicolon expected, not `unittest`\\n/tmp/tmp2t2yrfq9.d(43):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2t2yrfq9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j < n;\
    \ j++) \n        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4iohaj08.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp4iohaj08.__unittest_L30_C1()\
    \ [0x427a84]\\n??:? void tmp4iohaj08.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x22bb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp64g9ej9m.d(87): Error: semicolon expected, not `unittest`\\n/tmp/tmp64g9ej9m.d(87):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp64g9ej9m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    while (i < n) {\n        while (j <\
    \ n) {\n            if (i == j) {\n                j++;\n                continue;\n\
    \            }\n            if (i > j) {\n                count++;\n         \
    \   }\n            j++;\n        }\n        i++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbprs30j6.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpbprs30j6.__unittest_L35_C1()\
    \ [0x427a90]\\n??:? void tmpbprs30j6.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0x2f65c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] a = new long[n];\n    long[] b = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        a[i] = i;\n        b[i] = n - i - 1;\n\
    \    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (a[i] == b[j]) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6rj8eqxs.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp6rj8eqxs.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmp6rj8eqxs.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x688cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmu40jdo2.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpmu40jdo2.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmpmu40jdo2.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x9abb8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw1095dl_.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpw1095dl_.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1095dl_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnu775hae.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpnu775hae.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnu775hae.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk4d_evte.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpk4d_evte.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpk4d_evte.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xe2f63554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    double x, y, z;\n    long collision = 0;\n    for (i = 0; i < n; i++) {\n\
    \        x = random();\n        for (j = 0; j < n; j++) {\n            y = random();\n\
    \            if (x > y) {\n                for (k = 0; k < n; k++) {\n       \
    \             z = random();\n                    if (y > z) {\n              \
    \          collision++;\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return collision;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiw0g_w1o.d(21): Error: undefined identifier `random`\\n/tmp/tmpiw0g_w1o.d(23):\
    \ Error: undefined identifier `random`\\n/tmp/tmpiw0g_w1o.d(26): Error: undefined\
    \ identifier `random`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiw0g_w1o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3975fuqh.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmp3975fuqh.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3975fuqh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) {\n        left[i] = i;\n\
    \        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            if (left[i] == right[j]) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv3ofutdj.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpv3ofutdj.__unittest_L35_C1()\
    \ [0x427e3c]\\n??:? void tmpv3ofutdj.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x6cecc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long aa, bb, cc, dd, ee, ff,\
    \ gg, hh, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy,\
    \ zz;\n    long aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk, lll, mmm,\
    \ nnn, ooo, ppp, qqq, rrr, sss, ttt, uuu, vvv, www, xxx, yyy, zzz;\n    long aaaa,\
    \ bbbb, cccc, dddd, eeee, ffff, gggg, hhhh, iiii, jjjj, kkkk, llll, mmmm, nnnn,\
    \ oooo, pppp, qqqq, rrrr, ssss, tttt, uuuu, vvvv, wwww, xxxx, yyyy, zzzz;\n  \
    \  long aaaaa, bbbbb, ccccc, ddddd, eeeee, fffff, ggggg, hhhhh, iiiii, jjjjj,\
    \ kkkkk, lllll, mmmmm, nnnnn, ooooo, ppppp, qqqqq, rrrrr, sssss, ttttt, uuuuu,\
    \ vvvvv, wwwww, xxxxx, yyyyy, zzzzz;\n    long aaaaaa, bbbbbb, cccccc, dddddd,\
    \ eeeeee, ffffff, gggggg, hhhhhh, iiiiii, jjjjjj, kkkkkk, llllll, mmmmmm, nnnnnn,\
    \ oooooo, pppppp, qqqqqq, rrrrrr, ssssss, tttttt, uuuuuu, vvvvvv, wwwwww, xxxxxx,\
    \ yyyyyy, zzzzzz;\n    long\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4nuftx9n.d(24): Error: no identifier for declarator `long`\\\
    n/tmp/tmp4nuftx9n.d(24): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4nuftx9n.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n    \
    \    left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n   \
    \ for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if\
    \ (left_to_right[i] == right_to_left[j]) {\n                count++;\n       \
    \     }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3kyhkzex.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp3kyhkzex.__unittest_L35_C1()\
    \ [0x427e3c]\\n??:? void tmp3kyhkzex.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xaeee2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) \n  \
    \  {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n \
    \           {\n                count = count + 1;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbw_n2qc_.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpbw_n2qc_.__unittest_L33_C1()\
    \ [0x427a98]\\n??:? void tmpbw_n2qc_.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x5837f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long aa, bb, cc, dd, ee, ff,\
    \ gg, hh, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy,\
    \ zz;\n    long aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk, lll, mmm,\
    \ nnn, ooo, ppp, qqq, rrr, sss, ttt, uuu, vvv, www, xxx, yyy, zzz;\n    long aaaa,\
    \ bbbb, cccc, dddd, eeee, ffff, gggg, hhhh, iiii, jjjj, kkkk, llll, mmmm, nnnn,\
    \ oooo, pppp, qqqq, rrrr, ssss, tttt, uuuu, vvvv, wwww, xxxx, yyyy, zzzz;\n  \
    \  long aaaaa, bbbbb, ccccc, ddddd, eeeee, fffff, ggggg, hhhhh, iiiii, jjjjj,\
    \ kkkkk, lllll, mmmmm, nnnnn, ooooo, ppppp, qqqqq, rrrrr, sssss, ttttt, uuuuu,\
    \ vvvvv, wwwww, xxxxx, yyyyy, zzzzz;\n    long aaaaaa, bbbbbb, cccccc, dddddd,\
    \ eeeeee, ffffff, gggggg, hhhhhh, iiiiii, jjjjjj, kkkkkk, llllll, mmmmmm, nnnnnn,\
    \ oooooo, pppppp, qqqqqq, rrrrrr, ssssss, tttttt, uuuuuu, vvvvvv, wwwwww, xxxxxx,\
    \ yyyyyy, zzzzzz;\n    long\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp09is7u_m.d(24): Error: no identifier for declarator `long`\\\
    n/tmp/tmp09is7u_m.d(24): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09is7u_m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, c;\n    float x, y, z;\n    float a[n], b[n];\n    float d[n];\n    float\
    \ e[n];\n    float f[n];\n    float g[n];\n    float h[n];\n    float v[n];\n\
    \    float w[n];\n    float p[n];\n    float q[n];\n    float r[n];\n    float\
    \ s[n];\n    float t[n];\n    float u[n];\n    float o[n];\n    float A[n];\n\
    \    float B[n];\n    float C[n];\n    float D[n];\n    float E[n];\n    float\
    \ F[n];\n    float G[n];\n    float H[n];\n    float I[n];\n    float J[n];\n\
    \    float K[n];\n    float L[n];\n    float M[n];\n    float N[n];\n    float\
    \ O[n];\n    float P[n];\n    float Q[n];\n    float R[n];\n    float S[n];\n\
    \    float T[n];\n    float U[n];\n    float V[n];\n    float W[n];\n    float\
    \ X[n];\n    float Y[n];\n    float Z[n];\n    float AA[n];\n    float BB[n];\n\
    \    float CC[n];\n    float DD[n];\n    float EE[n];\n    float FF[n];\n    float\
    \ GG[n];\n    float HH[n];\n    float II[n];\n    float JJ[n];\n    float KK[n];\n\
    \    float LL[n];\n    float MM[n];\n    float NN[n];\n    float OO[n];\n    float\
    \ PP[n];\n    float QQ[n];\n    float RR[n];\n    float SS[n];\n    float TT[n];\n\
    \    float UU[n];\n    float VV[n];\n    float WW[n];\n    float XX[n];\n    float\
    \ YY[n];\n    float ZZ[n];\n    float AAA[\nunittest\n{\n    alias candidate =\
    \ car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdf3hpw0m.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[n] a`\\n/tmp/tmpdf3hpw0m.d(19): Error: multiple declarations must\
    \ have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpdf3hpw0m.d(19):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] b`\\n/tmp/tmpdf3hpw0m.d(20):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] d`\\n/tmp/tmpdf3hpw0m.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] e`\\n/tmp/tmpdf3hpw0m.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] f`\\n/tmp/tmpdf3hpw0m.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] g`\\n/tmp/tmpdf3hpw0m.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] h`\\n/tmp/tmpdf3hpw0m.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] v`\\n/tmp/tmpdf3hpw0m.d(26):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] w`\\n/tmp/tmpdf3hpw0m.d(27):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] p`\\n/tmp/tmpdf3hpw0m.d(28):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] q`\\n/tmp/tmpdf3hpw0m.d(29):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] r`\\n/tmp/tmpdf3hpw0m.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] s`\\n/tmp/tmpdf3hpw0m.d(31):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] t`\\n/tmp/tmpdf3hpw0m.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] u`\\n/tmp/tmpdf3hpw0m.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] o`\\n/tmp/tmpdf3hpw0m.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] A`\\n/tmp/tmpdf3hpw0m.d(35):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] B`\\n/tmp/tmpdf3hpw0m.d(36):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] C`\\n/tmp/tmpdf3hpw0m.d(37):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] D"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvfzio51o.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpvfzio51o.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpvfzio51o.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x20ed4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long x, y;\n    long collisions;\n    collisions = 0;\n    for (i = 0; i\
    \ < n; i++) {\n        for (j = 0; j < n; j++) {\n            x = i;\n       \
    \     y = j;\n            for (k = 0; k < n; k++) {\n                if (x ==\
    \ y) {\n                    collisions++;\n                }\n               \
    \ x = x + 1;\n                y = y - 1;\n            }\n        }\n    }\n  \
    \  return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpndfmuskp.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ded]\\n??:? void tmpndfmuskp.__unittest_L36_C1()\
    \ [0x427ad8]\\n??:? void tmpndfmuskp.__modtest() [0x427b70]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a97d]\\n??:? runModuleUnitTests [0x42b8e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42823c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281c3]\\n??:? _d_run_main [0x42812e]\\n??:? main [0x427b83]\\\
    n??:? __libc_start_main [0x8bbde554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n) {\n        while (j\
    \ < n) {\n            if (i == j) {\n                collisions++;\n         \
    \   }\n            j++;\n        }\n        i++;\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpux_3xibq.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d95]\\n??:? void tmpux_3xibq.__unittest_L31_C1()\
    \ [0x427a80]\\n??:? void tmpux_3xibq.__modtest() [0x427b18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42babb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a94e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a925]\\n??:? runModuleUnitTests [0x42b891]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42816b]\\n??:? _d_run_main [0x4280d6]\\n??:? main [0x427b2b]\\\
    n??:? __libc_start_main [0x93577554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long count = 0;\n    long temp = 0;\n \
    \   long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcimcz8m3.d(82): Error: no identifier for declarator `long`\\\
    n/tmp/tmpcimcz8m3.d(82): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcimcz8m3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n    long\
    \ ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n\
    \    long am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n    long\
    \ ar;\n    long as;\n    long at;\n    long au;\n    long av;\n    long aw;\n\
    \    long ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n    long\
    \ bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n\
    \    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long\
    \ bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n\
    \    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long\
    \ by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n\
    \    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long\
    \ cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n\
    \    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long\
    \ cu;\n    long cv;\n    long cw;\n    long cx;\n    long cy;\n   \nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptourphbb.d(113): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptourphbb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++) \n    {\n\
    \        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n      \
    \      {\n                result++;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgo5u97bx.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpgo5u97bx.__unittest_L32_C1()\
    \ [0x427a8c]\\n??:? void tmpgo5u97bx.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0xbf4b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (j = 0; j < n; j++) {\n\
    \        for (k = 0; k < n; k++) {\n            if (left_to_right[j] == right_to_left[k])\
    \ {\n                result++;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5al8uiid.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp5al8uiid.__unittest_L35_C1()\
    \ [0x427e40]\\n??:? void tmp5al8uiid.__modtest() [0x427ed8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427eeb]\\\
    n??:? __libc_start_main [0x2835c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, collisions\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                collisions++;\n            }\n       \
    \ }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe52atqmf.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpe52atqmf.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmpe52atqmf.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x136a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgx155sg4.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpgx155sg4.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmpgx155sg4.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xf4095554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpifs_9v83.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpifs_9v83.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpifs_9v83.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3prvkaos.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3prvkaos.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphlx_kj4d.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphlx_kj4d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    while (i < n) \n    {\n        long j = 0;\n      \
    \  while (j < n) \n        {\n            if (i == j) \n            {\n      \
    \          j = j + 1;\n            }\n            else \n            {\n     \
    \           count = count + 1;\n                j = j + 1;\n            }\n  \
    \      }\n        i = i + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8_08n7vc.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dbd]\\n??:? void tmp8_08n7vc.__unittest_L38_C1()\
    \ [0x427aa4]\\n??:? void tmp8_08n7vc.__modtest() [0x427b3c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bae3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a976]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a94d]\\n??:? runModuleUnitTests [0x42b8b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42820c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428193]\\n??:? _d_run_main [0x4280fe]\\n??:? main [0x427b4f]\\\
    n??:? __libc_start_main [0x38496554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwk2cjhb0.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpwk2cjhb0.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwk2cjhb0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j < n;\
    \ j++) \n        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm113s8df.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpm113s8df.__unittest_L30_C1()\
    \ [0x427a84]\\n??:? void tmpm113s8df.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x2b22f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, cnt\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                cnt++;\n            }\n        }\n   \
    \ }\n    return cnt;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprkytmd5i.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmprkytmd5i.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmprkytmd5i.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0xd6a34554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i < j) {\n                count\
    \ = count + 1;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmztmpx47.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpmztmpx47.__unittest_L30_C1()\
    \ [0x427a98]\\n??:? void tmpmztmpx47.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x1347b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long count;\n    long[] left_to_right;\n    long[]\
    \ right_to_left;\n    long[] left_to_right_sorted;\n    long[] right_to_left_sorted;\n\
    \    left_to_right = new long[n];\n    right_to_left = new long[n];\n    left_to_right_sorted\
    \ = new long[n];\n    right_to_left_sorted = new long[n];\n    count = 0;\n  \
    \  for (i = 0; i < n; i++) \n    {\n        left_to_right[i] = rand() % 100;\n\
    \        right_to_left[i] = rand() % 100;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        left_to_right_sorted[i] = left_to_right[i];\n        right_to_left_sorted[i]\
    \ = right_to_left[i];\n    }\n    sort(left_to_right_sorted);\n    sort(right_to_left_sorted);\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right_sorted[i] == left_to_right[j]) \n       \
    \     {\n                for (k = 0; k < n; k++) \n                {\n       \
    \             if (right_to_left_sorted[k] == right_to_left[j]) \n            \
    \        {\n                        count++;\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbkmld3il.d(32): Error: undefined identifier `rand`, did you mean\
    \ function `round`?\\n/tmp/tmpbkmld3il.d(33): Error: undefined identifier `rand`,\
    \ did you mean function `round`?\\n/tmp/tmpbkmld3il.d(40): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\n/tmp/tmpbkmld3il.d(41): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpbkmld3il.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, x, y, z, count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n     \
    \   for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n       \
    \         for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++)\
    \ {\n                        for (x = 0; x < n; x++) {\n                     \
    \       for (y = 0; y < n; y++) {\n                                for (z = 0;\
    \ z < n; z++) {\n                                    if (i == j) {\n         \
    \                               count++;\n                                   \
    \ }\n                                    if (k == l) {\n                     \
    \                   count++;\n                                    }\n        \
    \                            if (m == x) {\n                                 \
    \       count++;\n                                    }\n                    \
    \                if (y == z) {\n                                        count++;\n\
    \                                    }\n                                    if\
    \ (i == k) {\n                                        count++;\n             \
    \                       }\n                                    if (j == l) {\n\
    \                                        count++;\n                          \
    \          }\n                                    if (m == y) {\n            \
    \                            count++;\n                                    }\n\
    \                                    if (x == z) {\n                         \
    \               count++;\n                                    }\n            \
    \                        if (i == m) {\n                                     \
    \   count++;\n                                    }\n                        \
    \            if (j == x) {\n                                        count++;\n\
    \                                    }\n                                    if\
    \ (k == y) {\n                                        count++;\n             \
    \                       }\n                                    if (l == z) {\n\
    \                                        count++;\n                          \
    \          }\n                                    if (i == y) {\n            \
    \                            count++;\n                                    }\n\
    \                                    if (j == z) {\n                         \
    \               count++;\n                                    }\n            \
    \                        if (k == m) {\n                                     \
    \   count++;\n                                    }\n                        \
    \            if (l == x) {\n                                        count++;\n\
    \                                    }\n                                    if\
    \ (i == z) {\n                                        count++;\n             \
    \                       }\n                                    if (j == y) {\n\
    \                                        count++;\n                          \
    \          }\n                                    if (k == x) {\n            \
    \                            count++;\n                                    }\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpewaqv_af.d(84): Error: found `unittest` instead of statement\\\
    n/tmp/tmpewaqv_af.d(94): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpewaqv_af.d(94): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpewaqv_af.d(94): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpewaqv_af.d(94):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpewaqv_af.d(94): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpewaqv_af.d(94): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpewaqv_af.d(94): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpewaqv_af.d(94):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewaqv_af.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            if (i == j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprs_56_o6.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmprs_56_o6.__unittest_L29_C1()\
    \ [0x427a8c]\\n??:? void tmprs_56_o6.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x6c4b0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i, j;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (i < j) {\n                num_collisions++;\n   \
    \         }\n        }\n    }\n    return num_collisions;\n}\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpee1ga7vn.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpee1ga7vn.__unittest_L28_C1()\
    \ [0x427a8c]\\n??:? void tmpee1ga7vn.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x4b24b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n     \
    \   for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n       \
    \         for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++)\
    \ {\n                        for (n = 0; n < n; n++) {\n                     \
    \       for (o = 0; o < n; o++) {\n                                for (p = 0;\
    \ p < n; p++) {\n                                    for (q = 0; q < n; q++) {\n\
    \                                        for (r = 0; r < n; r++) {\n         \
    \                                   for (s = 0; s < n; s++) {\n              \
    \                                  for (t = 0; t < n; t++) {\n               \
    \                                     for (u = 0; u < n; u++) {\n            \
    \                                            for (v = 0; v < n; v++) {\n     \
    \                                                       for (w = 0; w < n; w++)\
    \ {\n                                                                for (x =\
    \ 0; x < n; x++) {\n                                                         \
    \           for (y = 0; y < n; y++) {\n                                      \
    \                                  for (z = 0; z < n; z++) {\n               \
    \                                                             for (a = 0; a <\
    \ n; a++) {\n                                                                \
    \                for (b = 0; b < n; b++) {\n                                 \
    \                                                   for (c = 0; c < n; c++) {\n\
    \                                                                            \
    \            for (d = 0; d < n; d++) {\n                                     \
    \                                                       for (e = 0; e < n; e++)\
    \ {\n                                                                        \
    \                        for (f = 0; f < n; f++) {\n                         \
    \                                                                           for\
    \ (g = 0; g < n; g++) {\n                                                    \
    \                                                    for (h =\nunittest\n{\n \
    \   alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqnivx85y.d(47): Error: expression expected, not `unittest`\\\
    n/tmp/tmpqnivx85y.d(48): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmpqnivx85y.d(49): Error: expression expected, not `alias`\\n/tmp/tmpqnivx85y.d(49):\
    \ Error: found `candidate` when expecting `;` following `for` condition\\n/tmp/tmpqnivx85y.d(49):\
    \ Error: expression expected, not `=`\\n/tmp/tmpqnivx85y.d(49): Error: found `car_race_collision`\
    \ when expecting `)`\\n/tmp/tmpqnivx85y.d(49): Error: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmpqnivx85y.d(57): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpqnivx85y.d(57): Error: found `End\
    \ of File` when expecting `}` following compound statement\\n/tmp/tmpqnivx85y.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpqnivx85y.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpqnivx85y.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpqnivx85y.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpqnivx85y.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpqnivx85y.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpqnivx85y.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpqnivx85y.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpqnivx85y.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpqnivx85y.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpqnivx85y.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqnivx85y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbjyz8hgo.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpbjyz8hgo.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpbjyz8hgo.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xae4f1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    while (i < n && j < n) {\n        if\
    \ (i == j) {\n            count++;\n            i++;\n            j++;\n     \
    \   } else if (i < j) {\n            i++;\n        } else {\n            j++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwazebjyw.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpwazebjyw.__unittest_L33_C1()\
    \ [0x427a90]\\n??:? void tmpwazebjyw.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0xb09ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n \
    \   long e[n];\n    long f[n];\n    long g[n];\n    long h[n];\n    long i[n];\n\
    \    long j[n];\n    long k[n];\n    long l[n];\n    long m[n];\n    long n[n];\n\
    \    long o[n];\n    long p[n];\n    long q[n];\n    long r[n];\n    long s[n];\n\
    \    long t[n];\n    long u[n];\n    long v[n];\n    long w[n];\n    long x[n];\n\
    \    long y[n];\n    long z[n];\n    long aa[n];\n    long ab[n];\n    long ac[n];\n\
    \    long ad[n];\n    long ae[n];\n    long af[n];\n    long ag[n];\n    long\
    \ ah[n];\n    long ai[n];\n    long aj[n];\n    long ak[n];\n    long al[n];\n\
    \    long am[n];\n    long an[n];\n    long ao[n];\n    long ap[n];\n    long\
    \ aq[n];\n    long ar[n];\n    long as[n];\n    long at[n];\n    long au[n];\n\
    \    long av[n];\n    long aw[n];\n    long ax[n];\n    long ay[n];\n    long\
    \ az[n];\n    long ba[n];\n    long bb[n];\n    long bc[n];\n    long bd[n];\n\
    \    long be[n];\n    long bf[n];\n    long bg[n];\n    long bh[n];\n    long\
    \ bi[n];\n    long bj[n];\n    long bk[n];\n    long bl[n];\n    long bm[n];\n\
    \    long bn[n];\n    long bo[n];\n    long bp[n];\n    long\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp93v8uh1s.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmp93v8uh1s.d(19): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmp93v8uh1s.d(20): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] c`\\n/tmp/tmp93v8uh1s.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] d`\\n/tmp/tmp93v8uh1s.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] e`\\n/tmp/tmp93v8uh1s.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] f`\\n/tmp/tmp93v8uh1s.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] g`\\n/tmp/tmp93v8uh1s.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] h`\\n/tmp/tmp93v8uh1s.d(26):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] i`\\n/tmp/tmp93v8uh1s.d(27):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] j`\\n/tmp/tmp93v8uh1s.d(28):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] k`\\n/tmp/tmp93v8uh1s.d(29):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] l`\\n/tmp/tmp93v8uh1s.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] m`\\n/tmp/tmp93v8uh1s.d(31):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] n`\\n/tmp/tmp93v8uh1s.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] o`\\n/tmp/tmp93v8uh1s.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] p`\\n/tmp/tmp93v8uh1s.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] q`\\n/tmp/tmp93v8uh1s.d(35):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] r`\\n/tmp/tmp93v8uh1s.d(36):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] s`\\n/tmp/tmp93v8uh1s.d(37):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] t`\\n/tmp/tmp93v8uh1s.d(38):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] u`\\n/tmp/tmp93v8uh1s.d(39):\
    \ Deprec"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy0xye57t.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpy0xye57t.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmpy0xye57t.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x9bdf2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j < n;\
    \ j++) \n        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4mf15f1l.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp4mf15f1l.__unittest_L30_C1()\
    \ [0x427a84]\\n??:? void tmp4mf15f1l.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x88643554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5du1xcpw.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp5du1xcpw.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmp5du1xcpw.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xba910554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i < j) {\n                count\
    \ = count + 1;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz3wqanrk.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpz3wqanrk.__unittest_L30_C1()\
    \ [0x427a98]\\n??:? void tmpz3wqanrk.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x4365c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i < j) \n        {\n            collisions += j - i;\n          \
    \  i++;\n        }\n        else \n        {\n            j++;\n        }\n  \
    \  }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe0kaecz8.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpe0kaecz8.__unittest_L34_C1()\
    \ [0x427a84]\\n??:? void tmpe0kaecz8.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xcbe3f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j &&\
    \ j == k) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpipbc_tvf.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmpipbc_tvf.__unittest_L30_C1()\
    \ [0x427aac]\\n??:? void tmpipbc_tvf.__modtest() [0x427b44]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b57]\\\
    n??:? __libc_start_main [0xc6462554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n \
    \   long collisions = 0;\n    long* cars_left_to_right = new long[n];\n    long*\
    \ cars_right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n        cars_left_to_right[i]\
    \ = i;\n        cars_right_to_left[i] = n - i - 1;\n    }\n    for (j = 0; j <\
    \ n; j++) {\n        for (k = 0; k < n; k++) {\n            if (cars_left_to_right[j]\
    \ == cars_right_to_left[k]) {\n                collisions++;\n            }\n\
    \        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp934eb43o.d(20): Error: cannot implicitly convert expression `new\
    \ long[](cast(ulong)n)` of type `long[]` to `long*`\\n/tmp/tmp934eb43o.d(21):\
    \ Error: cannot implicitly convert expression `new long[](cast(ulong)n)` of type\
    \ `long[]` to `long*`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp934eb43o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n*(n-1)/2;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7xtba2sk.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp7xtba2sk.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp7xtba2sk.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xe86f9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    float left[n];\n    float right[n];\n    float left_speed[n];\n\
    \    float right_speed[n];\n    float left_pos[n];\n    float right_pos[n];\n\
    \    float left_time[n];\n    float right_time[n];\n    float left_time_min;\n\
    \    float right_time_min;\n    float left_time_min_pos;\n    float right_time_min_pos;\n\
    \    float left_time_min_speed;\n    float right_time_min_speed;\n    float left_time_min_index;\n\
    \    float right_time_min_index;\n    float left_time_min_pos_index;\n    float\
    \ right_time_min_pos_index;\n    float left_time_min_speed_index;\n    float right_time_min_speed_index;\n\
    \    float left_time_min_pos_speed_index;\n    float right_time_min_pos_speed_index;\n\
    \    float left_time_min_pos_speed;\n    float right_time_min_pos_speed;\n   \
    \ float left_time_min_pos_index_speed;\n    float right_time_min_pos_index_speed;\n\
    \    float left_time_min_pos_index_speed_index;\n    float right_time_min_pos_index_speed_index;\n\
    \    float left_time_min_pos_index_speed_index_index;\n    float right_time_min_pos_index_speed_index_index;\n\
    \    float left_time_min_pos_index_speed_index_index_index;\n    float right_time_min_pos_index_speed_index_index_index;\n\
    \    float left_time_min_pos_index_speed_index_index_index_index;\n    float right_time_min_pos_index_speed_index_index_index_index;\n\
    \    float left_time_min_pos_index_speed_index_index_index_index_index;\n    float\
    \ right_time_min_pos_index_speed_index_index_\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyrko_sgu.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[n] left`\\n/tmp/tmpyrko_sgu.d(20): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `float[n] right`\\n/tmp/tmpyrko_sgu.d(21): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `float[n] left_speed`\\n/tmp/tmpyrko_sgu.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] right_speed`\\\
    n/tmp/tmpyrko_sgu.d(23): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] left_pos`\\n/tmp/tmpyrko_sgu.d(24): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `float[n] right_pos`\\n/tmp/tmpyrko_sgu.d(25): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `float[n] left_time`\\n/tmp/tmpyrko_sgu.d(26):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] right_time`\\\
    n/tmp/tmpyrko_sgu.d(55): Error: semicolon expected, not `unittest`\\n/tmp/tmpyrko_sgu.d(55):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyrko_sgu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdbvwm5gd.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpdbvwm5gd.__unittest_L28_C1()\
    \ [0x427a90]\\n??:? void tmpdbvwm5gd.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0xd7190554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n    long\
    \ e[n];\n    long f[n];\n    long g[n];\n    long h[n];\n    long i1[n];\n   \
    \ long j1[n];\n    long k1[n];\n    long l1[n];\n    long m1[n];\n    long n1[n];\n\
    \    long o1[n];\n    long p1[n];\n    long q1[n];\n    long r1[n];\n    long\
    \ s1[n];\n    long t1[n];\n    long u1[n];\n    long v1[n];\n    long w1[n];\n\
    \    long x1[n];\n    long y1[n];\n    long z1[n];\n    long a2[n];\n    long\
    \ b2[n];\n    long c2[n];\n    long d2[n];\n    long e2[n];\n    long f2[n];\n\
    \    long g2[n];\n    long h2[n];\n    long i2[n];\n    long j2[n];\n    long\
    \ k2[n];\n    long l2[n];\n    long m2[n];\n    long n2[n];\n    long o2[n];\n\
    \    long p2[n];\n    long q2[n];\n    long r2[n];\n    long s2[n];\n    long\
    \ t2[n];\n    long u2[n];\n    long v2[n];\n    long w2[n];\n    long x2[n];\n\
    \    long y2[n];\n    long z2[n];\n    long a3[n];\n    long b3[n];\n    long\
    \ c3[n];\n    long d3[n];\n    long e3[n];\n    long f3[n];\n    long g3[n];\n\
    \    long h3[n];\n    long i3[n];\n    long j3[n];\n    long k3[n];\n    long\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu0on5ouh.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmpu0on5ouh.d(19): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmpu0on5ouh.d(20): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] c`\\n/tmp/tmpu0on5ouh.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] d`\\n/tmp/tmpu0on5ouh.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] e`\\n/tmp/tmpu0on5ouh.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] f`\\n/tmp/tmpu0on5ouh.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] g`\\n/tmp/tmpu0on5ouh.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] h`\\n/tmp/tmpu0on5ouh.d(26):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] i1`\\n/tmp/tmpu0on5ouh.d(27):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] j1`\\n/tmp/tmpu0on5ouh.d(28):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] k1`\\n/tmp/tmpu0on5ouh.d(29):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] l1`\\n/tmp/tmpu0on5ouh.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] m1`\\n/tmp/tmpu0on5ouh.d(31):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] n1`\\n/tmp/tmpu0on5ouh.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] o1`\\n/tmp/tmpu0on5ouh.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] p1`\\n/tmp/tmpu0on5ouh.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] q1`\\n/tmp/tmpu0on5ouh.d(35):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] r1`\\n/tmp/tmpu0on5ouh.d(36):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] s1`\\n/tmp/tmpu0on5ouh.d(37):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] t1`\\n/tmp/tmpu0on5ouh.d(38):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] u1`\\n/tmp/tmpu0on5ouh."
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3xva0sur.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp3xva0sur.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmp3xva0sur.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x6d00554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbuzgyrj7.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpbuzgyrj7.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpbuzgyrj7.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xdb7e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long result = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j)\
    \ {\n                    result += 1;\n                }\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] a = new long[n];\n    long[] b = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        a[i] = i;\n        b[i] = n - i\
    \ - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n;\
    \ j++) \n        {\n            if (a[i] == b[j]) \n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmr5dhscm.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpmr5dhscm.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpmr5dhscm.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x72ab0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    while (i < n) {\n        while (j\
    \ < n) {\n            if (i == j) {\n                count++;\n            }\n\
    \            j++;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6yl2_i03.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d95]\\n??:? void tmp6yl2_i03.__unittest_L31_C1()\
    \ [0x427a80]\\n??:? void tmp6yl2_i03.__modtest() [0x427b18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42babb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a94e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a925]\\n??:? runModuleUnitTests [0x42b891]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42816b]\\n??:? _d_run_main [0x4280d6]\\n??:? main [0x427b2b]\\\
    n??:? __libc_start_main [0x7e8f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk2xm33id.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpk2xm33id.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk2xm33id.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2wh1kv24.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wh1kv24.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxdl4bwmp.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpxdl4bwmp.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpxdl4bwmp.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x64a0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long result;\n    long x[n];\n    long y[n];\n\
    \    long z[n];\n    long w[n];\n    long v[n];\n    long u[n];\n    long t[n];\n\
    \    long s[n];\n    long r[n];\n    long q[n];\n    long p[n];\n    long o[n];\n\
    \    long m[n];\n    long l[n];\n    long k[n];\n    long j[n];\n    long i[n];\n\
    \    long h[n];\n    long g[n];\n    long f[n];\n    long e[n];\n    long d[n];\n\
    \    long c[n];\n    long b[n];\n    long a[n];\n    long result[n];\n    for\
    \ (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            for (k\
    \ = 0; k < n; k++) {\n                for (l = 0; l < n; l++) {\n            \
    \        for (m = 0; m < n; m++) {\n                        for (n = 0; n < n;\
    \ n++) {\n                            for (o = 0; o < n; o++) {\n            \
    \                    for (p = 0; p < n; p++) {\n                             \
    \       for (q = 0; q < n; q++) {\n                                        for\
    \ (r = 0; r < n; r++) {\n                                            for (s =\
    \ 0; s < n; s++) {\n                                                for (t = 0;\
    \ t < n; t++) {\n                                                    for (u =\
    \ 0; u < n; u++) {\n                                                        for\
    \ (v = 0; v < n; v++) {\n                                                    \
    \        for (w = 0; w < n; w++) {\n                                         \
    \                       for (x = 0; x < n; x++) {\n                          \
    \                                          for (\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp704do0pu.d(20): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] x`\\n/tmp/tmp704do0pu.d(21): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] y`\\n/tmp/tmp704do0pu.d(22): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] z`\\n/tmp/tmp704do0pu.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] w`\\n/tmp/tmp704do0pu.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] v`\\n/tmp/tmp704do0pu.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] u`\\n/tmp/tmp704do0pu.d(26):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] t`\\n/tmp/tmp704do0pu.d(27):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] s`\\n/tmp/tmp704do0pu.d(28):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] r`\\n/tmp/tmp704do0pu.d(29):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] q`\\n/tmp/tmp704do0pu.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] p`\\n/tmp/tmp704do0pu.d(31):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] o`\\n/tmp/tmp704do0pu.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] m`\\n/tmp/tmp704do0pu.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] l`\\n/tmp/tmp704do0pu.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] k`\\n/tmp/tmp704do0pu.d(35):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] j`\\n/tmp/tmp704do0pu.d(36):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] i`\\n/tmp/tmp704do0pu.d(37):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] h`\\n/tmp/tmp704do0pu.d(38):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] g`\\n/tmp/tmp704do0pu.d(39):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] f`\\n/tmp/tmp704do0pu.d(40):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] e`\\n/tmp/tmp704do0pu.d(41):\
    \ Deprec"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long count;\n    long[] left;\n    long[] right;\n\
    \    long[] left_sorted;\n    long[] right_sorted;\n    long[] left_sorted_index;\n\
    \    long[] right_sorted_index;\n    long[] left_sorted_index_sorted;\n    long[]\
    \ right_sorted_index_sorted;\n    long[] left_sorted_index_sorted_index;\n   \
    \ long[] right_sorted_index_sorted_index;\n    long[] left_sorted_index_sorted_index_sorted;\n\
    \    long[] right_sorted_index_sorted_index_sorted;\n    long[] left_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index;\n    long[] left_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted;\n    long[] left_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted_index;\n    long[]\
    \ left_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n    long[]\
    \ right_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n    long[]\
    \ left_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n   \
    \ long[] right_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_sorted_index\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpywf3nl0d.d(46): Error: semicolon expected, not `unittest`\\n/tmp/tmpywf3nl0d.d(46):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpywf3nl0d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    // The number\
    \ of collisions is the number of pairs of cars that are\n    // at the same position\
    \ at the same time.\n    //\n    // The cars that are moving left to right start\
    \ at position n and\n    // move at speed 1.  The cars that are moving right to\
    \ left start at\n    // position 0 and move at speed 1.\n    //\n    // So the\
    \ number of collisions is the number of pairs of cars that\n    // are at the\
    \ same position at the same time.\n    //\n    // The cars that are moving left\
    \ to right start at position n and\n    // move at speed 1.  The cars that are\
    \ moving right to left start at\n    // position 0 and move at speed 1.\n    //\n\
    \    // So the number of collisions is the number of pairs of cars that\n    //\
    \ are at the same position at the same time.\n    //\n    // The cars that are\
    \ moving left to right start at position n and\n    // move at speed 1.  The cars\
    \ that are moving right to left start at\n    // position 0 and move at speed\
    \ 1.\n    //\n    // So the number of collisions is the number of pairs of cars\
    \ that\n    // are at the same position at the same time.\n    //\n    // The\
    \ cars that are moving left to right start at position n and\n    // move at speed\
    \ 1.  The cars that are moving right to left start at\n    // position 0 and move\
    \ at speed 1.\n    //\n    // So the number of collisions is the number of pairs\
    \ of cars that\n    // are at the same position at the same time.\n    //\n  \
    \  // The cars that are moving left to right start at position n and\n    // move\
    \ at speed 1.  The cars that are moving right to left start at\n    // position\
    \ 0 and move at speed 1.\n    //\n    // So the number of collisions is the number\
    \ of pairs of cars that\n    // are at the same position at the same time.\n \
    \   //\n    // The cars that are moving left to right start at position n and\n\
    \    // move at speed 1.  The cars that are moving right to left start at\n  \
    \  // position 0 and move at speed 1.\n    //\n    // So the number of collisions\
    \ is the number of pairs of cars that\n    // are at the same position at\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_54yd8_4.d(61): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_54yd8_4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] left_to_right_cars = new long[n];\n    long[]\
    \ right_to_left_cars = new long[n];\n    for (i = 0; i < n; i++) \n    {\n   \
    \     left_to_right_cars[i] = i;\n        right_to_left_cars[i] = n - i - 1;\n\
    \    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (left_to_right_cars[i] == right_to_left_cars[j]) \n\
    \            {\n                collisions++;\n            }\n        }\n    }\n\
    \    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpskiltph3.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpskiltph3.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpskiltph3.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xfe42554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_xj6fw1s.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmp_xj6fw1s.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xj6fw1s.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    double x, y;\n    count = 0;\n    for (i = 0; i < n; i++) {\n        x =\
    \ random();\n        for (j = 0; j < n; j++) {\n            y = random();\n  \
    \          if (x > y) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn8r9ly4n.d(21): Error: undefined identifier `random`\\n/tmp/tmpn8r9ly4n.d(23):\
    \ Error: undefined identifier `random`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpn8r9ly4n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  result += 1;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgr15kvks.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpgr15kvks.__unittest_L30_C1()\
    \ [0x427a84]\\n??:? void tmpgr15kvks.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x8bd6c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long left_to_right[n];\n    long right_to_left[n];\n\
    \    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (left_to_right[i] == right_to_left[j]) {\n       \
    \         collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpltew8_8i.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] left_to_right`\\n/tmp/tmpltew8_8i.d(20): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[n] right_to_left`\\n/tmp/tmpltew8_8i.d(19):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmpltew8_8i.d(20):\
    \ Error: variable `n` cannot be read at compile time\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpltew8_8i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n\
    \    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long\
    \ ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak =\
    \ 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n\
    \    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long\
    \ at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax =\
    \ 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n\
    \    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long\
    \ bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk =\
    \ 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n\
    \    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long\
    \ bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx =\
    \ 0;\n    long by = 0;\n    long bz = 0;\n    long ca\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpefgtf2m5.d(87): Error: semicolon expected, not `unittest`\\n/tmp/tmpefgtf2m5.d(87):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpefgtf2m5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n) {\n        while (j\
    \ < n) {\n            if (i < j) {\n                result = result + 1;\n   \
    \         }\n            j = j + 1;\n        }\n        i = i + 1;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppmpdx_vs.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmppmpdx_vs.__unittest_L31_C1()\
    \ [0x427a94]\\n??:? void tmppmpdx_vs.__modtest() [0x427b2c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b3f]\\\
    n??:? __libc_start_main [0x92194554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long count = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (j = 0; j < n; j++)\
    \ \n    {\n        for (k = 0; k < n; k++) \n        {\n            if (left_to_right[j]\
    \ == right_to_left[k]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvpos2l51.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpvpos2l51.__unittest_L38_C1()\
    \ [0x427e40]\\n??:? void tmpvpos2l51.__modtest() [0x427ed8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427eeb]\\\
    n??:? __libc_start_main [0xcdae9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n \
    \   long e[n];\n    long f[n];\n    long g[n];\n    long h[n];\n    long x[n];\n\
    \    long y[n];\n    long z[n];\n    long w[n];\n    long p[n];\n    long q[n];\n\
    \    long r[n];\n    long s[n];\n    long t[n];\n    long u[n];\n    long v[n];\n\
    \    long o[n];\n    long collisions = 0;\n    for (i = 0; i < n; i++) {\n   \
    \     a[i] = i;\n        b[i] = i;\n        c[i] = i;\n        d[i] = i;\n   \
    \     e[i] = i;\n        f[i] = i;\n        g[i] = i;\n        h[i] = i;\n   \
    \     x[i] = i;\n        y[i] = i;\n        z[i] = i;\n        w[i] = i;\n   \
    \     p[i] = i;\n        q[i] = i;\n        r[i] = i;\n        s[i] = i;\n   \
    \     t[i] = i;\n        u[i] = i;\n        v[i] = i;\n        o[i] = i;\n   \
    \ }\n    for (j = 0; j < n; j++) {\n        a[j] = j;\n        b[j] = j;\n   \
    \     c[j] = j;\n        d[j] = j;\n        e[j] = j;\n        f[j] = j;\n   \
    \     g[j] = j;\n        h[j] = j;\n        x[j] = j;\n        y[j] = j;\n   \
    \     z[j] = j;\n        w[j] = j;\n        p[j] = j;\n        q[j] = j;\n   \
    \     r[j] = j;\nunittest\n{\n    alias candidate = car_race_collision;\n\n  \
    \  assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo5snu48d.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmpo5snu48d.d(19): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmpo5snu48d.d(20): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] c`\\n/tmp/tmpo5snu48d.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] d`\\n/tmp/tmpo5snu48d.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] e`\\n/tmp/tmpo5snu48d.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] f`\\n/tmp/tmpo5snu48d.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] g`\\n/tmp/tmpo5snu48d.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] h`\\n/tmp/tmpo5snu48d.d(26):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] x`\\n/tmp/tmpo5snu48d.d(27):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] y`\\n/tmp/tmpo5snu48d.d(28):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] z`\\n/tmp/tmpo5snu48d.d(29):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] w`\\n/tmp/tmpo5snu48d.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] p`\\n/tmp/tmpo5snu48d.d(31):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] q`\\n/tmp/tmpo5snu48d.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] r`\\n/tmp/tmpo5snu48d.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] s`\\n/tmp/tmpo5snu48d.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] t`\\n/tmp/tmpo5snu48d.d(35):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] u`\\n/tmp/tmpo5snu48d.d(36):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] v`\\n/tmp/tmpo5snu48d.d(37):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] o`\\n/tmp/tmpo5snu48d.d(77):\
    \ Error: found `unittest` instead of statement\\n/tmp/tmpo5snu48d.d(87): Error:\
    \ found `End of File` when "
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i < j) \n        {\n            collisions += j - i;\n          \
    \  i++;\n        } \n        else \n        {\n            j++;\n        }\n \
    \   }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfwvel_09.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpfwvel_09.__unittest_L34_C1()\
    \ [0x427a84]\\n??:? void tmpfwvel_09.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x4a52c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] a = new long[n];\n    long[] b = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        a[i] = i;\n        b[i] = n - i\
    \ - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n;\
    \ j++) \n        {\n            if (a[i] > b[j]) \n            {\n           \
    \     count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk6f0ubz2.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpk6f0ubz2.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpk6f0ubz2.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x4d0ec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpstlpc3zi.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpstlpc3zi.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpstlpc3zi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2j36bamn.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmp2j36bamn.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2j36bamn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions;\n    long[] left_to_right;\n   \
    \ long[] right_to_left;\n    long[] left_to_right_sorted;\n    long[] right_to_left_sorted;\n\
    \    collisions = 0;\n    left_to_right = new long[n];\n    right_to_left = new\
    \ long[n];\n    left_to_right_sorted = new long[n];\n    right_to_left_sorted\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = random(0,\
    \ 1000000);\n        right_to_left[i] = random(0, 1000000);\n    }\n    for (i\
    \ = 0; i < n; i++) {\n        left_to_right_sorted[i] = left_to_right[i];\n  \
    \      right_to_left_sorted[i] = right_to_left[i];\n    }\n    sort(left_to_right_sorted);\n\
    \    sort(right_to_left_sorted);\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < n; j++) {\n            if (left_to_right_sorted[i] == left_to_right[j])\
    \ {\n                for (k = 0; k < n; k++) {\n                    if (right_to_left_sorted[k]\
    \ == right_to_left[j]) {\n                        collisions = collisions + 1;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpljl55o0r.d(31): Error: undefined identifier `random`\\n/tmp/tmpljl55o0r.d(32):\
    \ Error: undefined identifier `random`\\n/tmp/tmpljl55o0r.d(38): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpljl55o0r.d(39): Error:\
    \ undefined identifier `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljl55o0r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1ewsgykw.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp1ewsgykw.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmp1ewsgykw.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0xd5cee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left = new long[n];\n    long[] right = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        left[i] = i;\n        right[i] = n - i\
    \ - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (left[i] == right[j]) {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc4_qkw6n.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpc4_qkw6n.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmpc4_qkw6n.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xf8f35554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long x[n], y[n];\n    long a[n], b[n];\n    long c[n], d[n];\n\
    \    long e[n], f[n];\n    long g[n], h[n];\n    long p[n], q[n];\n    long r[n],\
    \ s[n];\n    long t[n], u[n];\n    long v[n], w[n];\n    long z[n], zz[n];\n \
    \   long zzz[n], zzzz[n];\n    long zzzzz[n], zzzzzz[n];\n    long zzzzzzz[n],\
    \ zzzzzzzz[n];\n    long zzzzzzzzz[n], zzzzzzzzzz[n];\n    long zzzzzzzzzzz[n],\
    \ zzzzzzzzzzzz[n];\n    long zzzzzzzzzzzzz[n], zzzzzzzzzzzzzz[n];\n    long zzzzzzzzzzzzzzz[n],\
    \ zzzzzzzzzzzzzzzz[n];\n    long zzzzzzzzzzzzzzzzz[n], zzzzzzzzzzzzzzzzzz[n];\n\
    \    long zzzzzzzzzzzzzzzzzzz[n], zzzzzzzzzzzzzzzzzzzz[n];\n    long zzzzzzzzzzzzzzzzzzzzz[n],\
    \ zzzzzzzzzzzzzzzzzzzzzz[n];\n    long zzzzzzzzzzzzzzzzzzzzzzz[n], zzzzzzzzzzzzzzzzzzzzzzzz[n];\n\
    \    long zzzzzzzzzzzzzzzzzzzzzzzzz[n], zzzzzzzzzzzzzzzzzzzzzzzzzz[n];\n    long\
    \ zzzzzzzzzzzzzzzzzzzzzzzzzzz[n], zzzzzzzzzzzzzzzzzzzzzzzzzzzz[n];\n    long zzzzzzzzzzzzzzzzzzzzzzzzzzzzz[n],\
    \ zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz[n];\n    long zzzzz\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpce3gt5zy.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] x`\\n/tmp/tmpce3gt5zy.d(18): Error: multiple declarations must\
    \ have the same type, not `long[n]` and `long[n]`\\n/tmp/tmpce3gt5zy.d(18): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] y`\\n/tmp/tmpce3gt5zy.d(19):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] a`\\n/tmp/tmpce3gt5zy.d(19):\
    \ Error: multiple declarations must have the same type, not `long[n]` and `long[n]`\\\
    n/tmp/tmpce3gt5zy.d(19): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] b`\\n/tmp/tmpce3gt5zy.d(20): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `long[n] c`\\n/tmp/tmpce3gt5zy.d(20): Error: multiple declarations\
    \ must have the same type, not `long[n]` and `long[n]`\\n/tmp/tmpce3gt5zy.d(20):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] d`\\n/tmp/tmpce3gt5zy.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] e`\\n/tmp/tmpce3gt5zy.d(21):\
    \ Error: multiple declarations must have the same type, not `long[n]` and `long[n]`\\\
    n/tmp/tmpce3gt5zy.d(21): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] f`\\n/tmp/tmpce3gt5zy.d(22): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `long[n] g`\\n/tmp/tmpce3gt5zy.d(22): Error: multiple declarations\
    \ must have the same type, not `long[n]` and `long[n]`\\n/tmp/tmpce3gt5zy.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] h`\\n/tmp/tmpce3gt5zy.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] p`\\n/tmp/tmpce3gt5zy.d(23):\
    \ Error: multiple declarations must have the same type, not `long[n]` and `long[n]`\\\
    n/tmp/tmpce3gt5zy.d(23): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] q`\\n/tmp/tmpce3gt5zy.d(24): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `long[n] r`\\n/tmp/tmpce3gt5zy.d(24): Error: multiple declarations\
    \ must have the same type, not `long[n]` and `long[n]`\\n/tmp/tmpce3gt5zy.d(24):\
    \ Deprecation: instead of C"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9083m9ps.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmp9083m9ps.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9083m9ps.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long[] a = new long[n];\n    long[] b = new long[n];\n    long[] c = new\
    \ long[n];\n    long[] d = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        a[i] = i;\n        b[i] = n - i - 1;\n        c[i] = i;\n        d[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (a[i] > b[j]) \n            {\n    \
    \            k = a[i];\n                a[i] = b[j];\n                b[j] = k;\n\
    \            }\n        }\n    }\n    for (i = 0; i < n; i++) \n    {\n      \
    \  for (j = 0; j < n; j++) \n        {\n            if (c[i] > d[j]) \n      \
    \      {\n                k = c[i];\n                c[i] = d[j];\n          \
    \      d[j] = k;\n            }\n        }\n    }\n    long count = 0;\n    for\
    \ (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n \
    \           if (a[i] == c[j]) \n            {\n                count++;\n    \
    \        }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqwonvc20.d(71): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpqwonvc20.__unittest_L66_C1()\
    \ [0x428145]\\n??:? void tmpqwonvc20.__modtest() [0x4281bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c43b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430559]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a08]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b2a5]\\n??:? runModuleUnitTests [0x42c211]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428900]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428887]\\n??:? _d_run_main [0x4287f2]\\n??:? main [0x4281cf]\\\
    n??:? __libc_start_main [0xb6a32554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long result = 0;\n    long* left_to_right = new long[n];\n    long* right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                result++;\n          \
    \  }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp48nsnrij.d(19): Error: cannot implicitly convert expression `new\
    \ long[](cast(ulong)n)` of type `long[]` to `long*`\\n/tmp/tmp48nsnrij.d(20):\
    \ Error: cannot implicitly convert expression `new long[](cast(ulong)n)` of type\
    \ `long[]` to `long*`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48nsnrij.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long[] a = new long[n];\n    long[] b = new long[n];\n    long[] c = new\
    \ long[n];\n    long[] d = new long[n];\n    long[] e = new long[n];\n    long[]\
    \ f = new long[n];\n    long[] g = new long[n];\n    long[] h = new long[n];\n\
    \    long[] i1 = new long[n];\n    long[] j1 = new long[n];\n    long[] k1 = new\
    \ long[n];\n    long[] l = new long[n];\n    long[] m = new long[n];\n    long[]\
    \ n1 = new long[n];\n    long[] o = new long[n];\n    long[] p = new long[n];\n\
    \    long[] q = new long[n];\n    long[] r = new long[n];\n    long[] s = new\
    \ long[n];\n    long[] t = new long[n];\n    long[] u = new long[n];\n    long[]\
    \ v = new long[n];\n    long[] w = new long[n];\n    long[] x = new long[n];\n\
    \    long[] y = new long[n];\n    long[] z = new long[n];\n    long[] aa = new\
    \ long[n];\n    long[] bb = new long[n];\n    long[] cc = new long[n];\n    long[]\
    \ dd = new long[n];\n    long[] ee = new long[n];\n    long[] ff = new long[n];\n\
    \    long[] gg = new long[n];\n    long[] hh = new long[n];\n    long[] ii = new\
    \ long[n];\n    long[] jj = new long[n];\n    long[] kk = new long[n];\n    long[]\
    \ ll = new long[n];\n    long[] mm = new long[n];\n    long[] nn = new long[n];\n\
    \    long[] oo = new long[n];\n    long[] pp = new long[n];\n    long[] qq = new\
    \ long[n];\n    long[] rr = new long[n];\n   \nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmt_rru_c.d(63): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmt_rru_c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long[] left_to_right_cars\
    \ = new long[n];\n    long[] right_to_left_cars = new long[n];\n    for (long\
    \ i = 0; i < n; i++) \n    {\n        left_to_right_cars[i] = i;\n        right_to_left_cars[i]\
    \ = n - i - 1;\n    }\n    long collisions = 0;\n    for (long i = 0; i < n; i++)\
    \ \n    {\n        for (long j = 0; j < n; j++) \n        {\n            if (left_to_right_cars[i]\
    \ == right_to_left_cars[j]) \n            {\n                collisions++;\n \
    \           }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpppw3d_ej.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428145]\\n??:? void tmpppw3d_ej.__unittest_L37_C1()\
    \ [0x427e30]\\n??:? void tmpppw3d_ej.__modtest() [0x427ec8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c143]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afd6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afad]\\n??:? runModuleUnitTests [0x42bf19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428608]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42858f]\\n??:? _d_run_main [0x4284fa]\\n??:? main [0x427edb]\\\
    n??:? __libc_start_main [0x6376b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0hxuheey.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp0hxuheey.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp0hxuheey.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xeb3e3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuv878yf2.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuv878yf2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5thkwvhv.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmp5thkwvhv.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5thkwvhv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = (i + 1) * 100;\n        right_to_left[i] = (i + 1) * 100;\n    }\n    for\
    \ (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n \
    \           if (left_to_right[i] == right_to_left[j]) \n            {\n      \
    \          collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_wtzzauo.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42814d]\\n??:? void tmp_wtzzauo.__unittest_L38_C1()\
    \ [0x427e38]\\n??:? void tmp_wtzzauo.__modtest() [0x427ed0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c14b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afde]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb5]\\n??:? runModuleUnitTests [0x42bf21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428610]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428597]\\n??:? _d_run_main [0x428502]\\n??:? main [0x427ee3]\\\
    n??:? __libc_start_main [0x27027554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ cnt = 0;\n    float a[n], b[n];\n    float x, y;\n    float t;\n    float d;\n\
    \    float v;\n    float t1, t2;\n    float d1, d2;\n    float v1, v2;\n    float\
    \ t_min;\n    float d_min;\n    float v_min;\n    float t_max;\n    float d_max;\n\
    \    float v_max;\n    float t_min_1, t_min_2;\n    float d_min_1, d_min_2;\n\
    \    float v_min_1, v_min_2;\n    float t_max_1, t_max_2;\n    float d_max_1,\
    \ d_max_2;\n    float v_max_1, v_max_2;\n    float t_min_1_1, t_min_1_2;\n   \
    \ float d_min_1_1, d_min_1_2;\n    float v_min_1_1, v_min_1_2;\n    float t_max_1_1,\
    \ t_max_1_2;\n    float d_max_1_1, d_max_1_2;\n    float v_max_1_1, v_max_1_2;\n\
    \    float t_min_2_1, t_min_2_2;\n    float d_min_2_1, d_min_2_2;\n    float v_min_2_1,\
    \ v_min_2_2;\n    float t_max_2_1, t_max_2_2;\n    float d_max_2_1, d_max_2_2;\n\
    \    float v_max_2_1, v_max_2_2;\n    float t_min_1_1_1, t_min_1_1_2;\n    float\
    \ d_min_1_1_1, d_min_1_1_2;\n    float v_min_1_1_1, v_min_1_1_2;\n    float t_max_\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc4x0nx9i.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[n] a`\\n/tmp/tmpc4x0nx9i.d(18): Error: multiple declarations must\
    \ have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpc4x0nx9i.d(18):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] b`\\n/tmp/tmpc4x0nx9i.d(54):\
    \ Error: semicolon expected, not `unittest`\\n/tmp/tmpc4x0nx9i.d(54): Error: found\
    \ `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpc4x0nx9i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdhi8dwim.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpdhi8dwim.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpdhi8dwim.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x5a8e9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    while (i < n && j < n) \n    {\n  \
    \      if (i < j) \n        {\n            count++;\n            i++;\n      \
    \  } \n        else \n        {\n            j++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn3cvj_2j.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d8d]\\n??:? void tmpn3cvj_2j.__unittest_L34_C1()\
    \ [0x427a74]\\n??:? void tmpn3cvj_2j.__modtest() [0x427b0c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bab3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a946]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a91d]\\n??:? runModuleUnitTests [0x42b889]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428163]\\n??:? _d_run_main [0x4280ce]\\n??:? main [0x427b1f]\\\
    n??:? __libc_start_main [0xec291554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    while (i < n) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n        i = i + 1;\n    }\n   \
    \ while (j < n) {\n        if (left_to_right[j] == right_to_left[j]) {\n     \
    \       collisions = collisions + 1;\n        }\n        j = j + 1;\n    }\n \
    \   return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp29un5fcb.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42813d]\\n??:? void tmp29un5fcb.__unittest_L35_C1()\
    \ [0x427e24]\\n??:? void tmp29un5fcb.__modtest() [0x427ebc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c13b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afa5]\\n??:? runModuleUnitTests [0x42bf11]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428600]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428587]\\n??:? _d_run_main [0x4284f2]\\n??:? main [0x427ecf]\\\
    n??:? __libc_start_main [0x48f38554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n    \
    \    left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n   \
    \ i = 0;\n    j = 0;\n    while (i < n && j < n) {\n        if (left_to_right[i]\
    \ < right_to_left[j]) {\n            i++;\n        } else if (left_to_right[i]\
    \ > right_to_left[j]) {\n            j++;\n        } else {\n            collisions++;\n\
    \            i++;\n            j++;\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp80c0kdp6.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281ad]\\n??:? void tmp80c0kdp6.__unittest_L41_C1()\
    \ [0x427e98]\\n??:? void tmp80c0kdp6.__modtest() [0x427f30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b03e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430778]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430255]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b015]\\n??:? runModuleUnitTests [0x42bf81]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428670]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f7]\\n??:? _d_run_main [0x428562]\\n??:? main [0x427f43]\\\
    n??:? __libc_start_main [0x30996554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1stsqhmd.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp1stsqhmd.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp1stsqhmd.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x484de554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    double x1, x2;\n    for (i = 0; i < n; i++) {\n        x1 = i;\n \
    \       for (j = 0; j < n; j++) {\n            x2 = j;\n            if (x1 > x2)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbe38cvcq.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpbe38cvcq.__unittest_L30_C1()\
    \ [0x427ad0]\\n??:? void tmpbe38cvcq.__modtest() [0x427b68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b7b]\\\
    n??:? __libc_start_main [0x45723554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdnddawt2.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpdnddawt2.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpdnddawt2.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x969ae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                collisions++;\n            }\n\
    \        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7nccz0ky.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp7nccz0ky.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmp7nccz0ky.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x8a101554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result;\n    long[] left_to_right_cars;\n    long[] right_to_left_cars;\n\
    \    long[] left_to_right_cars_sorted;\n    long[] right_to_left_cars_sorted;\n\
    \    long[] left_to_right_cars_sorted_unique;\n    long[] right_to_left_cars_sorted_unique;\n\
    \    long[] left_to_right_cars_sorted_unique_counts;\n    long[] right_to_left_cars_sorted_unique_counts;\n\
    \    long[] left_to_right_cars_sorted_unique_counts_sorted;\n    long[] right_to_left_cars_sorted_unique_counts_sorted;\n\
    \    long[] left_to_right_cars_sorted_unique_counts_sorted_unique;\n    long[]\
    \ right_to_left_cars_sorted_unique_counts_sorted_unique;\n    long[] left_to_right_cars_sorted_unique_counts_sorted_unique_counts;\n\
    \    long[] right_to_left_cars_sorted_unique_counts_sorted_unique_counts;\n  \
    \  long[] left_to_right_cars_sorted_unique_counts_sorted_unique_counts_sorted;\n\
    \    long[] right_to_left_cars_sorted_unique_counts_sorted_unique_counts_sorted;\n\
    \    long[] left_to_right_cars_sorted_unique_counts_sorted_unique_counts_sorted_unique;\n\
    \    long[] right_to_left_cars_sorted_unique_counts_sorted_unique_counts_sorted_unique;\n\
    \    long[] left_to_right_cars_sorted_unique_counts_sorted_unique_counts_sorted_unique_counts;\n\
    \    long\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcdtargl1.d(40): Error: no identifier for declarator `long`\\\
    n/tmp/tmpcdtargl1.d(40): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcdtargl1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwj2gqdta.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpwj2gqdta.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmpwj2gqdta.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0xc4bc6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjyvknujw.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpjyvknujw.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmpjyvknujw.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xb7e4b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left = new long[n];\n    long[] right = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        left[i] = i;\n        right[i] =\
    \ n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left[i] == right[j]) \n           \
    \ {\n                count++;\n                for (k = j; k < n - 1; k++) \n\
    \                {\n                    right[k] = right[k + 1];\n           \
    \     }\n                n--;\n                break;\n            }\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkihs1i1h.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmpkihs1i1h.__unittest_L44_C1()\
    \ [0x427ebc]\\n??:? void tmpkihs1i1h.__modtest() [0x427f54]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1d3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b066]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43027d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b03d]\\n??:? runModuleUnitTests [0x42bfa9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f67]\\\
    n??:? __libc_start_main [0x48fd6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp28wjaics.d(87): Error: semicolon expected, not `unittest`\\n/tmp/tmp28wjaics.d(87):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp28wjaics.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            result += (i - j) * (i - j);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgas7vrox.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpgas7vrox.__unittest_L25_C1()\
    \ [0x427a88]\\n??:? void tmpgas7vrox.__modtest() [0x427b20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b33]\\\
    n??:? __libc_start_main [0x5edb5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long cnt = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j) {\n\
    \                    cnt++;\n                }\n            }\n        }\n   \
    \ }\n    return cnt;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long num_collisions = 0;\n    long num_cars_left_to_right = n;\n    long\
    \ num_cars_right_to_left = n;\n    long* cars_left_to_right = new long[n];\n \
    \   long* cars_right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n  \
    \  {\n        cars_left_to_right[i] = i;\n        cars_right_to_left[i] = i;\n\
    \    }\n    while (num_cars_left_to_right > 0 && num_cars_right_to_left > 0) \n\
    \    {\n        for (i = 0; i < num_cars_left_to_right; i++) \n        {\n   \
    \         for (j = 0; j < num_cars_right_to_left; j++) \n            {\n     \
    \           if (cars_left_to_right[i] == cars_right_to_left[j]) \n           \
    \     {\n                    num_collisions++;\n                    for (k = j;\
    \ k < num_cars_right_to_left - 1; k++) \n                    {\n             \
    \           cars_right_to_left[k] = cars_right_to_left[k + 1];\n             \
    \       }\n                    num_cars_right_to_left--;\n                   \
    \ break;\n                }\n            }\n            if (j < num_cars_right_to_left)\
    \ \n            {\n                for (k = i; k < num_cars_left_to_right - 1;\
    \ k++) \n                {\n                    cars_left_to_right[k] = cars_left_to_right[k\
    \ + 1];\n                }\n                num_cars_left_to_right--;\n      \
    \      }\n        }\n    }\n    return num_collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp64sjvkzl.d(21): Error: cannot implicitly convert expression `new\
    \ long[](cast(ulong)n)` of type `long[]` to `long*`\\n/tmp/tmp64sjvkzl.d(22):\
    \ Error: cannot implicitly convert expression `new long[](cast(ulong)n)` of type\
    \ `long[]` to `long*`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64sjvkzl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpejxe77k1.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpejxe77k1.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmpejxe77k1.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x5eda0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    long[] left_to_right_sorted = new long[n];\n\
    \    long[] right_to_left_sorted = new long[n];\n    long[] left_to_right_sorted_index\
    \ = new long[n];\n    long[] right_to_left_sorted_index = new long[n];\n    long[]\
    \ left_to_right_sorted_index_sorted = new long[n];\n    long[] right_to_left_sorted_index_sorted\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index = new long[n];\n\
    \    long[] right_to_left_sorted_index_sorted_index = new long[n];\n    long[]\
    \ left_to_right_sorted_index_sorted_index_sorted = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n   \nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxznly7_2.d(39): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxznly7_2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long ans;\n    ans = 0;\n    for (i = 0; i < n;\
    \ i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i <\
    \ j)\n            {\n                ans = ans + 1;\n            }\n        }\n\
    \    }\n    return ans;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ag8qum_.d(17): Error: variable `n` is shadowing variable `tmp0ag8qum_.car_race_collision.n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ag8qum_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long aa, bb, cc, dd, ee, ff,\
    \ gg, hh, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy,\
    \ zz;\n    long aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk, lll, mmm,\
    \ nnn, ooo, ppp, qqq, rrr, sss, ttt, uuu, vvv, www, xxx, yyy, zzz;\n    long aaaa,\
    \ bbbb, cccc, dddd, eeee, ffff, gggg, hhhh, iiii, jjjj, kkkk, llll, mmmm, nnnn,\
    \ oooo, pppp, qqqq, rrrr, ssss, tttt, uuuu, vvvv, wwww, xxxx, yyyy, zzzz;\n  \
    \  long aaaaa, bbbbb, ccccc, ddddd, eeeee, fffff, ggggg, hhhhh, iiiii, jjjjj,\
    \ kkkkk, lllll, mmmmm, nnnnn, ooooo, ppppp, qqqqq, rrrrr, sssss, ttttt, uuuuu,\
    \ vvvvv, wwwww, xxxxx, yyyyy, zzzzz;\n    long aaaaaa, bbbbbb, cccccc, dddddd,\
    \ eeeeee, ffffff, gggggg, hhhhhh, iiiiii, jjjjjj, kkkkkk, llllll, mmmmmm, nnnnnn,\
    \ oooooo, pppppp, qqqqqq, rrrrrr, ssssss, tttttt, uuuuuu, vvvvvv, wwwwww, xxxxxx,\
    \ yyyyyy, zzzzzz;\n    long\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgjqrdeap.d(24): Error: no identifier for declarator `long`\\\
    n/tmp/tmpgjqrdeap.d(24): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjqrdeap.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5865z4b_.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmp5865z4b_.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5865z4b_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    long[] left_to_right_copy = new long[n];\n    long[] right_to_left_copy\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        left_to_right_copy[i] = left_to_right[i];\n        right_to_left_copy[i]\
    \ = right_to_left[i];\n    }\n    for (i = 0; i < n; i++) \n    {\n        for\
    \ (j = 0; j < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                count++;\n                left_to_right[i]\
    \ = -1;\n                right_to_left[j] = -1;\n            }\n        }\n  \
    \  }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1sq5frm3.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282a5]\\n??:? void tmp1sq5frm3.__unittest_L47_C1()\
    \ [0x427f90]\\n??:? void tmp1sq5frm3.__modtest() [0x428028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2a3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b136]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303c1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430870]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43034d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b10d]\\n??:? runModuleUnitTests [0x42c079]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428768]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286ef]\\n??:? _d_run_main [0x42865a]\\n??:? main [0x42803b]\\\
    n??:? __libc_start_main [0xde59554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnenjpeyw.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpnenjpeyw.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpnenjpeyw.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x4bde554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long left_to_right[n];\n    long right_to_left[n];\n\
    \    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (left_to_right[i] == right_to_left[j]) {\n       \
    \         collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcz6n9dn6.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] left_to_right`\\n/tmp/tmpcz6n9dn6.d(20): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[n] right_to_left`\\n/tmp/tmpcz6n9dn6.d(19):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmpcz6n9dn6.d(20):\
    \ Error: variable `n` cannot be read at compile time\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcz6n9dn6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long num_collisions;\n    long left_to_right_car_positions[n];\n    long\
    \ right_to_left_car_positions[n];\n    long left_to_right_car_speeds[n];\n   \
    \ long right_to_left_car_speeds[n];\n    long left_to_right_car_positions_sorted[n];\n\
    \    long right_to_left_car_positions_sorted[n];\n    long left_to_right_car_speeds_sorted[n];\n\
    \    long right_to_left_car_speeds_sorted[n];\n    long left_to_right_car_positions_sorted_index[n];\n\
    \    long right_to_left_car_positions_sorted_index[n];\n    long left_to_right_car_speeds_sorted_index[n];\n\
    \    long right_to_left_car_speeds_sorted_index[n];\n    long left_to_right_car_positions_sorted_index_sorted[n];\n\
    \    long right_to_left_car_positions_sorted_index_sorted[n];\n    long left_to_right_car_speeds_sorted_index_sorted[n];\n\
    \    long right_to_left_car_speeds_sorted_index_sorted[n];\n    long left_to_right_car_positions_sorted_index_sorted_index[n];\n\
    \    long right_to_left_car_positions_sorted_index_sorted_index[n];\n    long\
    \ left_to_right_car_speeds_sorted_index_sorted_index[n];\n    long right_to_left_car_speeds_sorted_index_sorted_index[n];\n\
    \    long left_to_right_car_positions_sorted_index_sorted_index_sorted[n];\n \
    \   long right_to_left_car_positions_sorted_index_sorted_index_sorted[n];\n  \
    \  long left_to_right_car_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp24kdcpky.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] left_to_right_car_positions`\\n/tmp/tmp24kdcpky.d(20): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] right_to_left_car_positions`\\\
    n/tmp/tmp24kdcpky.d(21): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] left_to_right_car_speeds`\\n/tmp/tmp24kdcpky.d(22): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[n] right_to_left_car_speeds`\\n/tmp/tmp24kdcpky.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] left_to_right_car_positions_sorted`\\\
    n/tmp/tmp24kdcpky.d(24): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_car_positions_sorted`\\n/tmp/tmp24kdcpky.d(25): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] left_to_right_car_speeds_sorted`\\\
    n/tmp/tmp24kdcpky.d(26): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_car_speeds_sorted`\\n/tmp/tmp24kdcpky.d(27): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] left_to_right_car_positions_sorted_index`\\\
    n/tmp/tmp24kdcpky.d(28): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_car_positions_sorted_index`\\n/tmp/tmp24kdcpky.d(29):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] left_to_right_car_speeds_sorted_index`\\\
    n/tmp/tmp24kdcpky.d(30): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_car_speeds_sorted_index`\\n/tmp/tmp24kdcpky.d(31): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] left_to_right_car_positions_sorted_index_sorted`\\\
    n/tmp/tmp24kdcpky.d(32): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_car_positions_sorted_index_sorted`\\n/tmp/tmp24kdcpky.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] left_to_right_car_speeds_sorted_index_sorted`\\\
    n/tmp/tmp24kdcpky.d(34): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long count = 0;\n    long a[n];\n    long b[n];\n    for (i = 0; i <\
    \ n; i++)\n    {\n        a[i] = rand() % 100;\n        b[i] = rand() % 100;\n\
    \    }\n    for (j = 0; j < n; j++)\n    {\n        for (k = 0; k < n; k++)\n\
    \        {\n            if (a[j] == b[k])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb7nakl0o.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmpb7nakl0o.d(20): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmpb7nakl0o.d(19): Error: variable\
    \ `n` cannot be read at compile time\\n/tmp/tmpb7nakl0o.d(20): Error: variable\
    \ `n` cannot be read at compile time\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpb7nakl0o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj_vddv43.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpj_vddv43.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_vddv43.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) \n  \
    \  {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n \
    \           {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeue449ez.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpeue449ez.__unittest_L33_C1()\
    \ [0x427a90]\\n??:? void tmpeue449ez.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0x340ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxs_6mkj8.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpxs_6mkj8.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxs_6mkj8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long ret = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                ret++;\n            }\n        }\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppccnqcux.d(17): Error: variable `n` is shadowing variable `tmppccnqcux.car_race_collision.n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppccnqcux.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp92555dbv.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp92555dbv.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp92555dbv.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x8df6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                collisions++;\n      \
    \      }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfd1jolbr.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpfd1jolbr.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpfd1jolbr.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x6e24e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0;\
    \ j < n; j++)\n        {\n            for (k = 0; k < n; k++)\n            {\n\
    \                if (i == j && j == k)\n                {\n                  \
    \  count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9ld8bh3j.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmp9ld8bh3j.__unittest_L34_C1()\
    \ [0x427aac]\\n??:? void tmp9ld8bh3j.__modtest() [0x427b44]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b57]\\\
    n??:? __libc_start_main [0x5a545554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long qq =\
    \ 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n\
    \    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long\
    \ zz = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n\
    \    long mmm = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n\
    \    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n\
    \    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n\
    \    long aaaa = 0;\n    long bbbb = 0;\n    long cccc = 0;\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp41mbofg6.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp41mbofg6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw74zl7h1.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpw74zl7h1.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpw74zl7h1.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x3a1d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j < n;\
    \ j++) \n        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiuqncyb0.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpiuqncyb0.__unittest_L30_C1()\
    \ [0x427a84]\\n??:? void tmpiuqncyb0.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xc0f4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr5d5p1ce.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpr5d5p1ce.__unittest_L30_C1()\
    \ [0x427a84]\\n??:? void tmpr5d5p1ce.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xbe602554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv9jn_sb2.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpv9jn_sb2.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9jn_sb2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpit7n0b_m.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpit7n0b_m.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpit7n0b_m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n    \
    \    left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n   \
    \ for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if\
    \ (left_to_right[i] == right_to_left[j]) {\n                count++;\n       \
    \     }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzsp3jn_h.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpzsp3jn_h.__unittest_L35_C1()\
    \ [0x427e3c]\\n??:? void tmpzsp3jn_h.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xa67a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    while (i < n) \n    {\n        long j = 0;\n    \
    \    while (j < n) \n        {\n            if (i < j) \n            {\n     \
    \           result = result + 1;\n            }\n            j = j + 1;\n    \
    \    }\n        i = i + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdzaorrwl.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpdzaorrwl.__unittest_L34_C1()\
    \ [0x427a98]\\n??:? void tmpdzaorrwl.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x86c11554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    long[] left_to_right_sorted = new long[n];\n\
    \    long[] right_to_left_sorted = new long[n];\n    long[] left_to_right_sorted_index\
    \ = new long[n];\n    long[] right_to_left_sorted_index = new long[n];\n    long[]\
    \ left_to_right_sorted_index_sorted = new long[n];\n    long[] right_to_left_sorted_index_sorted\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index = new long[n];\n\
    \    long[] right_to_left_sorted_index_sorted_index = new long[n];\n    long[]\
    \ left_to_right_sorted_index_sorted_index_sorted = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n   \nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp23t70595.d(39): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23t70595.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left = new long[n];\n    long[] right = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        left[i] = i;\n        right[i] =\
    \ n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left[i] == right[j]) \n           \
    \ {\n                count++;\n                for (k = j; k < n - 1; k++) \n\
    \                {\n                    right[k] = right[k + 1];\n           \
    \     }\n                right[n - 1] = left[i];\n                break;\n   \
    \         }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmw3p1gau.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmpmw3p1gau.__unittest_L44_C1()\
    \ [0x427f0c]\\n??:? void tmpmw3p1gau.__modtest() [0x427fa4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c223]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430341]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b08d]\\n??:? runModuleUnitTests [0x42bff9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42866f]\\n??:? _d_run_main [0x4285da]\\n??:? main [0x427fb7]\\\
    n??:? __libc_start_main [0xcae62554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                collisions++;\n      \
    \      }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpngxaufp1.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpngxaufp1.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpngxaufp1.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x87126554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    while (i < n) {\n        long j = 0;\n        while\
    \ (j < n) {\n            if (i == j) {\n                j = j + 1;\n         \
    \   } else {\n                result = result + 1;\n                j = j + 1;\n\
    \            }\n        }\n        i = i + 1;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdrto5nxd.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dbd]\\n??:? void tmpdrto5nxd.__unittest_L33_C1()\
    \ [0x427aa4]\\n??:? void tmpdrto5nxd.__modtest() [0x427b3c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bae3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a976]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a94d]\\n??:? runModuleUnitTests [0x42b8b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42820c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428193]\\n??:? _d_run_main [0x4280fe]\\n??:? main [0x427b4f]\\\
    n??:? __libc_start_main [0x44a28554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long collisions = 0;\n    long cars_left_to_right[n];\n    long cars_right_to_left[n];\n\
    \    long cars_left_to_right_sorted[n];\n    long cars_right_to_left_sorted[n];\n\
    \    long cars_left_to_right_sorted_index[n];\n    long cars_right_to_left_sorted_index[n];\n\
    \    long cars_left_to_right_sorted_index_sorted[n];\n    long cars_right_to_left_sorted_index_sorted[n];\n\
    \    long cars_left_to_right_sorted_index_sorted_index[n];\n    long cars_right_to_left_sorted_index_sorted_index[n];\n\
    \    long cars_left_to_right_sorted_index_sorted_index_sorted[n];\n    long cars_right_to_left_sorted_index_sorted_index_sorted[n];\n\
    \    long cars_left_to_right_sorted_index_sorted_index_sorted_index[n];\n    long\
    \ cars_right_to_left_sorted_index_sorted_index_sorted_index[n];\n    long cars_left_to_right_sorted_index_sorted_index_sorted_index_sorted[n];\n\
    \    long cars_right_to_left_sorted_index_sorted_index_sorted_index_sorted[n];\n\
    \    long cars_left_to_right_sorted_index_sorted_index_sorted_index_sorted_index[n];\n\
    \    long cars_right_to_left_sorted_index_sorted_index_sorted_index_sorted_index[n];\n\
    \    long cars_left_to_right_sorted_index_sorted_index_sorted_index_s\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpueb5nrn3.d(20): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] cars_left_to_right`\\n/tmp/tmpueb5nrn3.d(21): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[n] cars_right_to_left`\\n/tmp/tmpueb5nrn3.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] cars_left_to_right_sorted`\\\
    n/tmp/tmpueb5nrn3.d(23): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] cars_right_to_left_sorted`\\n/tmp/tmpueb5nrn3.d(24): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[n] cars_left_to_right_sorted_index`\\\
    n/tmp/tmpueb5nrn3.d(25): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] cars_right_to_left_sorted_index`\\n/tmp/tmpueb5nrn3.d(26): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] cars_left_to_right_sorted_index_sorted`\\\
    n/tmp/tmpueb5nrn3.d(27): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] cars_right_to_left_sorted_index_sorted`\\n/tmp/tmpueb5nrn3.d(28): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] cars_left_to_right_sorted_index_sorted_index`\\\
    n/tmp/tmpueb5nrn3.d(29): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] cars_right_to_left_sorted_index_sorted_index`\\n/tmp/tmpueb5nrn3.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] cars_left_to_right_sorted_index_sorted_index_sorted`\\\
    n/tmp/tmpueb5nrn3.d(31): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] cars_right_to_left_sorted_index_sorted_index_sorted`\\n/tmp/tmpueb5nrn3.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] cars_left_to_right_sorted_index_sorted_index_sorted_index`\\\
    n/tmp/tmpueb5nrn3.d(33): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] cars_right_to_left_sorted_index_sorted_index_sorted_index`\\n/tmp/tmpueb5nrn3.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] cars_left_to_right_sorted_index_sorted_index_sorted_index_sorted`\\\
    n/tmp/tmpueb5nrn3.d(35): Depre"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    float x[n], y[n];\n    count = 0;\n    for (i = 0; i < n; i++) {\n      \
    \  x[i] = i;\n        y[i] = i;\n    }\n    for (i = 0; i < n; i++) {\n      \
    \  for (j = 0; j < n; j++) {\n            if (x[i] < y[j]) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcywbzrv8.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[n] x`\\n/tmp/tmpcywbzrv8.d(18): Error: multiple declarations must\
    \ have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpcywbzrv8.d(18):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] y`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcywbzrv8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_eqdnh71.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp_eqdnh71.__unittest_L30_C1()\
    \ [0x427a8c]\\n??:? void tmp_eqdnh71.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0xd045b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) \n  \
    \  {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n \
    \           {\n                count = count + 1;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_cwgye6s.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmp_cwgye6s.__unittest_L33_C1()\
    \ [0x427a98]\\n??:? void tmp_cwgye6s.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x904be554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n], b[n];\n    long c[n];\n    long d[n];\n    long e[n];\n\
    \    long f[n];\n    long g[n];\n    long h[n];\n    long i[n];\n    long j[n];\n\
    \    long k[n];\n    long l[n];\n    long m[n];\n    long n[n];\n    long o[n];\n\
    \    long p[n];\n    long q[n];\n    long r[n];\n    long s[n];\n    long t[n];\n\
    \    long u[n];\n    long v[n];\n    long w[n];\n    long x[n];\n    long y[n];\n\
    \    long z[n];\n    long aa[n];\n    long ab[n];\n    long ac[n];\n    long ad[n];\n\
    \    long ae[n];\n    long af[n];\n    long ag[n];\n    long ah[n];\n    long\
    \ ai[n];\n    long aj[n];\n    long ak[n];\n    long al[n];\n    long am[n];\n\
    \    long an[n];\n    long ao[n];\n    long ap[n];\n    long aq[n];\n    long\
    \ ar[n];\n    long as[n];\n    long at[n];\n    long au[n];\n    long av[n];\n\
    \    long aw[n];\n    long ax[n];\n    long ay[n];\n    long az[n];\n    long\
    \ ba[n];\n    long bb[n];\n    long bc[n];\n    long bd[n];\n    long be[n];\n\
    \    long bf[n];\n    long bg[n];\n    long bh[n];\n    long bi[n];\n    long\
    \ bj[n];\n    long bk[n];\n    long bl[n];\n    long bm[n];\n    long bn[n];\n\
    \    long bo[n];\n    long bp[n];\n    long bq[\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2m45enf4.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmp2m45enf4.d(18): Error: multiple declarations must\
    \ have the same type, not `long[n]` and `long[n]`\\n/tmp/tmp2m45enf4.d(18): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] b`\\n/tmp/tmp2m45enf4.d(19):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] c`\\n/tmp/tmp2m45enf4.d(20):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] d`\\n/tmp/tmp2m45enf4.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] e`\\n/tmp/tmp2m45enf4.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] f`\\n/tmp/tmp2m45enf4.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] g`\\n/tmp/tmp2m45enf4.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] h`\\n/tmp/tmp2m45enf4.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] i`\\n/tmp/tmp2m45enf4.d(26):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] j`\\n/tmp/tmp2m45enf4.d(27):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] k`\\n/tmp/tmp2m45enf4.d(28):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] l`\\n/tmp/tmp2m45enf4.d(29):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] m`\\n/tmp/tmp2m45enf4.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] n`\\n/tmp/tmp2m45enf4.d(31):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] o`\\n/tmp/tmp2m45enf4.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] p`\\n/tmp/tmp2m45enf4.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] q`\\n/tmp/tmp2m45enf4.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] r`\\n/tmp/tmp2m45enf4.d(35):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] s`\\n/tmp/tmp2m45enf4.d(36):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] t`\\n/tmp/tmp2m45enf4.d("
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] car_positions = new long[n];\n    long[]\
    \ car_speeds = new long[n];\n    long[] car_positions_2 = new long[n];\n    long[]\
    \ car_speeds_2 = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        car_positions[i]\
    \ = i;\n        car_speeds[i] = i + 1;\n        car_positions_2[i] = i;\n    \
    \    car_speeds_2[i] = i + 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n  \
    \      for (j = 0; j < n; j++) \n        {\n            if (car_positions[i] >\
    \ car_positions_2[j]) \n            {\n                collisions++;\n       \
    \     }\n        }\n        for (k = 0; k < n; k++) \n        {\n            car_positions[k]\
    \ += car_speeds[k];\n            car_positions_2[k] -= car_speeds_2[k];\n    \
    \    }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr1ecfb3m.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428295]\\n??:? void tmpr1ecfb3m.__unittest_L47_C1()\
    \ [0x427f7c]\\n??:? void tmpr1ecfb3m.__modtest() [0x428014]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c293]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b126]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430860]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43033d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0fd]\\n??:? runModuleUnitTests [0x42c069]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428758]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286df]\\n??:? _d_run_main [0x42864a]\\n??:? main [0x428027]\\\
    n??:? __libc_start_main [0xb711c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++) {\n    \
    \    for (j = 0; j < n; j++) {\n            if (i < j) {\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4_fmx986.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp4_fmx986.__unittest_L29_C1()\
    \ [0x427a8c]\\n??:? void tmp4_fmx986.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0xd36a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0m15d2_8.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp0m15d2_8.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp0m15d2_8.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xeb3ef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (j = 0; j < n; j++)\
    \ \n    {\n        for (k = 0; k < n; k++) \n        {\n            if (left_to_right[j]\
    \ == right_to_left[k]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6qvsn7c3.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp6qvsn7c3.__unittest_L38_C1()\
    \ [0x427e40]\\n??:? void tmp6qvsn7c3.__modtest() [0x427ed8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427eeb]\\\
    n??:? __libc_start_main [0x4b49a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                collisions++;\n      \
    \          for (k = j; k < n - 1; k++) \n                {\n                 \
    \   right_to_left[k] = right_to_left[k + 1];\n                }\n            \
    \    for (l = i; l < n - 1; l++) \n                {\n                    left_to_right[l]\
    \ = left_to_right[l + 1];\n                }\n                n--;\n         \
    \       break;\n            }\n        }\n    }\n    return collisions;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl8_bcycs.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42823d]\\n??:? void tmpl8_bcycs.__unittest_L48_C1()\
    \ [0x427f28]\\n??:? void tmpl8_bcycs.__modtest() [0x427fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430359]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430808]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428700]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428687]\\n??:? _d_run_main [0x4285f2]\\n??:? main [0x427fd3]\\\
    n??:? __libc_start_main [0x13aa9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvy6y18eq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpvy6y18eq.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmpvy6y18eq.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x4d7b5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpejpmzja5.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpejpmzja5.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpejpmzja5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left = new long[n];\n    long[] right = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        left[i] = i;\n        right[i] = n - i\
    \ - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (left[i] == right[j]) {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvjr4i2d7.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpvjr4i2d7.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmpvjr4i2d7.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x9e2a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i, j;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (i < j) {\n                collisions++;\n       \
    \     }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc12pd5a0.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpc12pd5a0.__unittest_L28_C1()\
    \ [0x427a8c]\\n??:? void tmpc12pd5a0.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0xedaac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i < j) {\n                count\
    \ = count + 1;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk9tvhjgv.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpk9tvhjgv.__unittest_L30_C1()\
    \ [0x427a98]\\n??:? void tmpk9tvhjgv.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x8b950554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n    long\
    \ ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n\
    \    long am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n    long\
    \ ar;\n    long as;\n    long at;\n    long au;\n    long av;\n    long aw;\n\
    \    long ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n    long\
    \ bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n\
    \    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long\
    \ bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n\
    \    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long\
    \ by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n\
    \    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long\
    \ cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n\
    \    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long\
    \ cu;\n    long cv;\n    long cw;\n    long cx;\n    long cy;\n   \nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg5vqx1eb.d(113): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5vqx1eb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            if (i == j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbz8oaoka.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpbz8oaoka.__unittest_L29_C1()\
    \ [0x427a8c]\\n??:? void tmpbz8oaoka.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x408ed554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long l;\n    long m;\n    long o;\n    long p;\n\
    \    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n\
    \    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n    long bb;\n\
    \    long cc;\n    long dd;\n    long ee;\n    long ff;\n    long gg;\n    long\
    \ hh;\n    long ii;\n    long jj;\n    long kk;\n    long ll;\n    long mm;\n\
    \    long oo;\n    long pp;\n    long qq;\n    long rr;\n    long ss;\n    long\
    \ tt;\n    long uu;\n    long vv;\n    long ww;\n    long xx;\n    long yy;\n\
    \    long zz;\n    long aaa;\n    long bbb;\n    long ccc;\n    long ddd;\n  \
    \  long eee;\n    long fff;\n    long ggg;\n    long hhh;\n    long iii;\n   \
    \ long jjj;\n    long kkk;\n    long lll;\n    long mmm;\n    long ooo;\n    long\
    \ ppp;\n    long qqq;\n    long rrr;\n    long sss;\n    long ttt;\n    long uuu;\n\
    \    long vvv;\n    long www;\n    long xxx;\n    long yyy;\n    long zzz;\n \
    \   long aaaa;\n    long bbbb;\n    long cccc;\n    long dddd;\n    long eeee;\n\
    \    long ffff;\n    long gggg;\n    long hhhh;\n    long iiii;\n    long jjjj;\n\
    \    long kkkk;\n    long llll;\n    long mmmm;\n    long oooo;\n    long pppp;\n\
    \    long qqqq;\n    long rrrr;\n    long ssss;\n    long tttt;\n    long uuuu;\n\
    \    long\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnl1zxx_a.d(105): Error: no identifier for declarator `long`\\\
    n/tmp/tmpnl1zxx_a.d(105): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnl1zxx_a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n    long\
    \ e[n];\n    long f[n];\n    long g[n];\n    long h[n];\n    long count = 0;\n\
    \    for (i = 0; i < n; i++) {\n        a[i] = i;\n        b[i] = i;\n       \
    \ c[i] = i;\n        d[i] = i;\n        e[i] = i;\n        f[i] = i;\n       \
    \ g[i] = i;\n        h[i] = i;\n    }\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n         \
    \       for (l = 0; l < n; l++) {\n                    if (a[i] < b[j]) {\n  \
    \                      count++;\n                    }\n                    if\
    \ (c[i] < d[j]) {\n                        count++;\n                    }\n \
    \                   if (e[i] < f[j]) {\n                        count++;\n   \
    \                 }\n                    if (g[i] < h[j]) {\n                \
    \        count++;\n                    }\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5s7delpp.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmp5s7delpp.d(19): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmp5s7delpp.d(20): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] c`\\n/tmp/tmp5s7delpp.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] d`\\n/tmp/tmp5s7delpp.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] e`\\n/tmp/tmp5s7delpp.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] f`\\n/tmp/tmp5s7delpp.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] g`\\n/tmp/tmp5s7delpp.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] h`\\n/tmp/tmp5s7delpp.d(18):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmp5s7delpp.d(19):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmp5s7delpp.d(20):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmp5s7delpp.d(21):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmp5s7delpp.d(22):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmp5s7delpp.d(23):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmp5s7delpp.d(24):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmp5s7delpp.d(25):\
    \ Error: variable `n` cannot be read at compile time\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5s7delpp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n \
    \       if (i < j) \n        {\n            count += j - i;\n            i++;\n\
    \        } \n        else \n        {\n            j++;\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4818jdqg.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp4818jdqg.__unittest_L34_C1()\
    \ [0x427a84]\\n??:? void tmp4818jdqg.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x8494c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long result;\n    long left_to_right_cars[n];\n\
    \    long right_to_left_cars[n];\n    long left_to_right_cars_position[n];\n \
    \   long right_to_left_cars_position[n];\n    long left_to_right_cars_speed[n];\n\
    \    long right_to_left_cars_speed[n];\n    long left_to_right_cars_collision_time[n];\n\
    \    long right_to_left_cars_collision_time[n];\n    long left_to_right_cars_collision_position[n];\n\
    \    long right_to_left_cars_collision_position[n];\n    long left_to_right_cars_collision_speed[n];\n\
    \    long right_to_left_cars_collision_speed[n];\n    long left_to_right_cars_collision_index[n];\n\
    \    long right_to_left_cars_collision_index[n];\n    long left_to_right_cars_collision_count;\n\
    \    long right_to_left_cars_collision_count;\n    long left_to_right_cars_collision_time_min;\n\
    \    long right_to_left_cars_collision_time_min;\n    long left_to_right_cars_collision_time_min_index;\n\
    \    long right_to_left_cars_collision_time_min_index;\n    long left_to_right_cars_collision_time_min_position;\n\
    \    long right_to_left_cars_collision_time_min_position;\n    long left_to_right_cars_collision_time_min_speed;\n\
    \    long right_to_left_cars_collision_time_min_speed;\n    long left_to_right_cars_collision_time_min_index_value;\n\
    \    long right_to_\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv3v_q7pv.d(20): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] left_to_right_cars`\\n/tmp/tmpv3v_q7pv.d(21): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[n] right_to_left_cars`\\n/tmp/tmpv3v_q7pv.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] left_to_right_cars_position`\\\
    n/tmp/tmpv3v_q7pv.d(23): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_cars_position`\\n/tmp/tmpv3v_q7pv.d(24): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] left_to_right_cars_speed`\\\
    n/tmp/tmpv3v_q7pv.d(25): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_cars_speed`\\n/tmp/tmpv3v_q7pv.d(26): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[n] left_to_right_cars_collision_time`\\\
    n/tmp/tmpv3v_q7pv.d(27): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_cars_collision_time`\\n/tmp/tmpv3v_q7pv.d(28): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] left_to_right_cars_collision_position`\\\
    n/tmp/tmpv3v_q7pv.d(29): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_cars_collision_position`\\n/tmp/tmpv3v_q7pv.d(30): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] left_to_right_cars_collision_speed`\\\
    n/tmp/tmpv3v_q7pv.d(31): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_cars_collision_speed`\\n/tmp/tmpv3v_q7pv.d(32): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] left_to_right_cars_collision_index`\\\
    n/tmp/tmpv3v_q7pv.d(33): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] right_to_left_cars_collision_index`\\n/tmp/tmpv3v_q7pv.d(46): Error:\
    \ semicolon expected, not `unittest`\\n/tmp/tmpv3v_q7pv.d(46): Error: found `unittest`\
    \ instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpv3v_q7pv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collisions = 0;\n    float x[n], y[n];\n    float x1[n], y1[n];\n\
    \    float x2[n], y2[n];\n    float x3[n], y3[n];\n    float x4[n], y4[n];\n \
    \   float x5[n], y5[n];\n    float x6[n], y6[n];\n    float x7[n], y7[n];\n  \
    \  float x8[n], y8[n];\n    float x9[n], y9[n];\n    float x10[n], y10[n];\n \
    \   float x11[n], y11[n];\n    float x12[n], y12[n];\n    float x13[n], y13[n];\n\
    \    float x14[n], y14[n];\n    float x15[n], y15[n];\n    float x16[n], y16[n];\n\
    \    float x17[n], y17[n];\n    float x18[n], y18[n];\n    float x19[n], y19[n];\n\
    \    float x20[n], y20[n];\n    float x21[n], y21[n];\n    float x22[n], y22[n];\n\
    \    float x23[n], y23[n];\n    float x24[n], y24[n];\n    float x25[n], y25[n];\n\
    \    float x26[n], y26[n];\n    float x27[n], y27[n];\n    float x28[n], y28[n];\n\
    \    float x29[n], y29[n];\n    float x30[n], y30[n];\n    float x31[n], y31[n];\n\
    \    float x32[n], y32[n];\n    float x33[n], y33[n];\n    float x34[n], y34[n];\n\
    \    float x35[n], y35[n];\n    float x36[n], y36[n];\n    float x37[n], y37[n];\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn0m54_b7.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[n] x`\\n/tmp/tmpn0m54_b7.d(19): Error: multiple declarations must\
    \ have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpn0m54_b7.d(19):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] y`\\n/tmp/tmpn0m54_b7.d(20):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] x1`\\n/tmp/tmpn0m54_b7.d(20):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpn0m54_b7.d(20): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] y1`\\n/tmp/tmpn0m54_b7.d(21): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] x2`\\n/tmp/tmpn0m54_b7.d(21): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpn0m54_b7.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] y2`\\n/tmp/tmpn0m54_b7.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] x3`\\n/tmp/tmpn0m54_b7.d(22):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpn0m54_b7.d(22): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] y3`\\n/tmp/tmpn0m54_b7.d(23): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] x4`\\n/tmp/tmpn0m54_b7.d(23): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpn0m54_b7.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] y4`\\n/tmp/tmpn0m54_b7.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] x5`\\n/tmp/tmpn0m54_b7.d(24):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpn0m54_b7.d(24): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] y5`\\n/tmp/tmpn0m54_b7.d(25): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] x6`\\n/tmp/tmpn0m54_b7.d(25): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpn0m"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ count = 0;\n    float x1, x2, y1, y2, x3, x4, y3, y4;\n    float x, y;\n   \
    \ float m1, m2;\n    float c1, c2;\n    float d;\n    float t1, t2;\n    float\
    \ a, b, c;\n    float t;\n    float tmin;\n    float tmax;\n    float tmin1, tmax1;\n\
    \    float tmin2, tmax2;\n    float tmin3, tmax3;\n    float tmin4, tmax4;\n \
    \   float tmin5, tmax5;\n    float tmin6, tmax6;\n    float tmin7, tmax7;\n  \
    \  float tmin8, tmax8;\n    float tmin9, tmax9;\n    float tmin10, tmax10;\n \
    \   float tmin11, tmax11;\n    float tmin12, tmax12;\n    float tmin13, tmax13;\n\
    \    float tmin14, tmax14;\n    float tmin15, tmax15;\n    float tmin16, tmax16;\n\
    \    float tmin17, tmax17;\n    float tmin18, tmax18;\n    float tmin19, tmax19;\n\
    \    float tmin20, tmax20;\n    float tmin21, tmax21;\n    float tmin22, tmax22;\n\
    \    float tmin23, tmax23;\n    float tmin24, tmax24;\n    float tmin25, tmax25;\n\
    \    float tmin26, tmax26;\n    float tmin27, tmax27;\n    float tmin28, tmax28;\n\
    \    float tmin29, tmax29;\n    float tmin30, tmax30;\n    float tmin31, tmax31;\n\
    \    float tmin32, tmax32;\n    float tmin33, tmax33;\n    float tmin34, tmax34;\n\
    \    float tmin35, tmax35;\n    float tmin36, tmax36;\n    float tmin37, tmax\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvci9cxpy.d(65): Error: semicolon expected, not `unittest`\\n/tmp/tmpvci9cxpy.d(65):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvci9cxpy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbiy6qrrw.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpbiy6qrrw.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbiy6qrrw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprt36yzn4.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprt36yzn4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n  \
    \  long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n  \
    \  long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n  \
    \  long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n    long\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5cdqqcu9.d(86): Error: no identifier for declarator `long`\\\
    n/tmp/tmp5cdqqcu9.d(86): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cdqqcu9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ count;\n    float x[n], y[n], z[n];\n    float a[n], b[n], c[n];\n    float\
    \ t[n], u[n], v[n];\n    float p[n], q[n], r[n];\n    float s[n], w[n], e[n];\n\
    \    float f[n], g[n], h[n];\n    float m[n], o[n], l[n];\n    float d[n], y1[n],\
    \ z1[n];\n    float a1[n], b1[n], c1[n];\n    float t1[n], u1[n], v1[n];\n   \
    \ float p1[n], q1[n], r1[n];\n    float s1[n], w1[n], e1[n];\n    float f1[n],\
    \ g1[n], h1[n];\n    float m1[n], o1[n], l1[n];\n    float d1[n], y2[n], z2[n];\n\
    \    float a2[n], b2[n], c2[n];\n    float t2[n], u2[n], v2[n];\n    float p2[n],\
    \ q2[n], r2[n];\n    float s2[n], w2[n], e2[n];\n    float f2[n], g2[n], h2[n];\n\
    \    float m2[n], o2[n], l2[n];\n    float d2[n], y3[n], z3[n];\n    float a3[n],\
    \ b3[n], c3[n];\n    float t3[n], u3[n], v3[n];\n    float p3[n], q3[n], r3[n];\n\
    \    float s3[n], w3[n], e3[n];\n    float f3[n], g3[n], h3[n];\n    float m3[n],\
    \ o3[n], l3[n];\n    float d3[n], y4[n], z4[n\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw7d7ryhi.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[n] x`\\n/tmp/tmpw7d7ryhi.d(18): Error: multiple declarations must\
    \ have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpw7d7ryhi.d(18):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] y`\\n/tmp/tmpw7d7ryhi.d(18):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpw7d7ryhi.d(18): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] z`\\n/tmp/tmpw7d7ryhi.d(19): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] a`\\n/tmp/tmpw7d7ryhi.d(19): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpw7d7ryhi.d(19):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] b`\\n/tmp/tmpw7d7ryhi.d(19):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpw7d7ryhi.d(19): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] c`\\n/tmp/tmpw7d7ryhi.d(20): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] t`\\n/tmp/tmpw7d7ryhi.d(20): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpw7d7ryhi.d(20):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] u`\\n/tmp/tmpw7d7ryhi.d(20):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpw7d7ryhi.d(20): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] v`\\n/tmp/tmpw7d7ryhi.d(21): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] p`\\n/tmp/tmpw7d7ryhi.d(21): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpw7d7ryhi.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] q`\\n/tmp/tmpw7d7ryhi.d(21):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpw7d7ryhi.d(21): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] r`\\n/tmp/tmpw7"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn5_3mz0x.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpn5_3mz0x.__unittest_L30_C1()\
    \ [0x427a84]\\n??:? void tmpn5_3mz0x.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x263ba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i == j) {\n               \
    \ count = count + 1;\n            }\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpim4jfvzh.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpim4jfvzh.__unittest_L30_C1()\
    \ [0x427a98]\\n??:? void tmpim4jfvzh.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x5d991554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                collisions++;\n      \
    \          for (k = j; k < n - 1; k++) \n                {\n                 \
    \   right_to_left[k] = right_to_left[k + 1];\n                }\n            \
    \    for (l = i; l < n - 1; l++) \n                {\n                    left_to_right[l]\
    \ = left_to_right[l + 1];\n                }\n                n--;\n         \
    \       break;\n            }\n        }\n    }\n    return collisions;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaaks46i6.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42823d]\\n??:? void tmpaaks46i6.__unittest_L48_C1()\
    \ [0x427f28]\\n??:? void tmpaaks46i6.__modtest() [0x427fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430359]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430808]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428700]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428687]\\n??:? _d_run_main [0x4285f2]\\n??:? main [0x427fd3]\\\
    n??:? __libc_start_main [0x1d78554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpve8x5n15.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpve8x5n15.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmpve8x5n15.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x4983d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_j9lycgz.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp_j9lycgz.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp_j9lycgz.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x24198554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                collisions++;\n      \
    \      }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeh6uy6__.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpeh6uy6__.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpeh6uy6__.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x943b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long num_collisions = 0;\n    long left_to_right[n];\n    long right_to_left[n];\n\
    \    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (left_to_right[i] == right_to_left[j]) {\n       \
    \         num_collisions++;\n            }\n        }\n    }\n    return num_collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptw4sz91a.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] left_to_right`\\n/tmp/tmptw4sz91a.d(20): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[n] right_to_left`\\n/tmp/tmptw4sz91a.d(19):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmptw4sz91a.d(20):\
    \ Error: variable `n` cannot be read at compile time\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptw4sz91a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                result++;\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpno36hn6v.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpno36hn6v.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmpno36hn6v.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xf0778554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions;\n    long[] left_to_right;\n   \
    \ long[] right_to_left;\n    long[] sorted_left_to_right;\n    long[] sorted_right_to_left;\n\
    \    collisions = 0;\n    left_to_right = new long[n];\n    right_to_left = new\
    \ long[n];\n    sorted_left_to_right = new long[n];\n    sorted_right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = random(0, 1000000000);\n        right_to_left[i] = random(0, 1000000000);\n\
    \    }\n    for (i = 0; i < n; i++) \n    {\n        sorted_left_to_right[i] =\
    \ left_to_right[i];\n        sorted_right_to_left[i] = right_to_left[i];\n   \
    \ }\n    std.sort.sort(sorted_left_to_right);\n    std.sort.sort(sorted_right_to_left);\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == sorted_left_to_right[j]) \n       \
    \     {\n                for (k = 0; k < n; k++) \n                {\n       \
    \             if (right_to_left[k] == sorted_right_to_left[n - 1 - j]) \n    \
    \                {\n                        collisions = collisions + 1;\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n \
    \   assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppzu_fvw6.d(32): Error: undefined identifier `random`\\n/tmp/tmppzu_fvw6.d(33):\
    \ Error: undefined identifier `random`\\n/tmp/tmppzu_fvw6.d(40): Error: undefined\
    \ identifier `sort` in package `std`\\n/tmp/tmppzu_fvw6.d(41): Error: undefined\
    \ identifier `sort` in package `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmppzu_fvw6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i == j) \n        {\n            collisions++;\n            i++;\n\
    \            j++;\n        } \n        else if (i < j) \n        {\n         \
    \   i++;\n        } \n        else \n        {\n            j++;\n        }\n\
    \    }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqdw86vsj.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpqdw86vsj.__unittest_L39_C1()\
    \ [0x427a90]\\n??:? void tmpqdw86vsj.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0x2b5d6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6svi9oby.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6svi9oby.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    while (i < n && j < n) \n    {\n  \
    \      if (i < j) \n        {\n            i++;\n        } \n        else if (i\
    \ > j) \n        {\n            j++;\n        } \n        else \n        {\n \
    \           i++;\n            j++;\n            count++;\n        }\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb5_zlafw.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpb5_zlafw.__unittest_L39_C1()\
    \ [0x427a90]\\n??:? void tmpb5_zlafw.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0x1f8dd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_v64qi17.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp_v64qi17.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp_v64qi17.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xfa205554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0dcdldl8.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp0dcdldl8.__unittest_L39_C1()\
    \ [0x427e3c]\\n??:? void tmp0dcdldl8.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xd63f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long[] left_to_right_cars_positions = new long[n];\n    long[] right_to_left_cars_positions\
    \ = new long[n];\n    for (long i = 0; i < n; i++) {\n        left_to_right_cars_positions[i]\
    \ = i;\n        right_to_left_cars_positions[i] = i;\n    }\n    for (long i =\
    \ 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (left_to_right_cars_positions[i]\
    \ == right_to_left_cars_positions[j]) {\n                collisions++;\n     \
    \       }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn8g4dpcb.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428145]\\n??:? void tmpn8g4dpcb.__unittest_L33_C1()\
    \ [0x427e2c]\\n??:? void tmpn8g4dpcb.__modtest() [0x427ec4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c143]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afd6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afad]\\n??:? runModuleUnitTests [0x42bf19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428608]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42858f]\\n??:? _d_run_main [0x4284fa]\\n??:? main [0x427ed7]\\\
    n??:? __libc_start_main [0x900ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    // your code\
    \ here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        for(long\
    \ j = 0; j < n; j++)\n        {\n            if(i == j)\n            {\n     \
    \           count++;\n            }\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_ap023yy.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp_ap023yy.__unittest_L31_C1()\
    \ [0x427a84]\\n??:? void tmp_ap023yy.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x96949554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn5reblc6.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpn5reblc6.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn5reblc6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long count = 0;\n    float x[n], y[n];\n    float a[n], b[n];\n    float\
    \ c[n], d[n];\n    float e[n], f[n];\n    float g[n], h[n];\n    float m[n], p[n];\n\
    \    float q[n], r[n];\n    float s[n], t[n];\n    float u[n], v[n];\n    float\
    \ w[n], z[n];\n    float A[n], B[n];\n    float C[n], D[n];\n    float E[n], F[n];\n\
    \    float G[n], H[n];\n    float I[n], J[n];\n    float K[n], L[n];\n    float\
    \ M[n], N[n];\n    float O[n], P[n];\n    float Q[n], R[n];\n    float S[n], T[n];\n\
    \    float U[n], V[n];\n    float W[n], Z[n];\n    float AA[n], BB[n];\n    float\
    \ CC[n], DD[n];\n    float EE[n], FF[n];\n    float GG[n], HH[n];\n    float II[n],\
    \ JJ[n];\n    float KK[n], LL[n];\n    float MM[n], NN[n];\n    float OO[n], PP[n];\n\
    \    float QQ[n], RR[n];\n    float SS[n], TT[n];\n    float UU[n], VV[n];\n \
    \   float WW[n], ZZ[n];\n    float AAA[n], BBB[n];\n    float CCC[n], DDD[n];\n\
    \    float EEE[n], FFF[n];\n    float GGG[n], HHH[n];\n    float III[n], JJJ[n];\n\
    \    float KKK[n], LLL[n];\n    float MMM[n], NNN[n];\n    float OOO[n], PPP[n];\n\
    \    float QQQ[n], R\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj93263tt.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[n] x`\\n/tmp/tmpj93263tt.d(19): Error: multiple declarations must\
    \ have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpj93263tt.d(19):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] y`\\n/tmp/tmpj93263tt.d(20):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] a`\\n/tmp/tmpj93263tt.d(20):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpj93263tt.d(20): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] b`\\n/tmp/tmpj93263tt.d(21): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] c`\\n/tmp/tmpj93263tt.d(21): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpj93263tt.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] d`\\n/tmp/tmpj93263tt.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] e`\\n/tmp/tmpj93263tt.d(22):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpj93263tt.d(22): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] f`\\n/tmp/tmpj93263tt.d(23): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] g`\\n/tmp/tmpj93263tt.d(23): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpj93263tt.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] h`\\n/tmp/tmpj93263tt.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] m`\\n/tmp/tmpj93263tt.d(24):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpj93263tt.d(24): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] p`\\n/tmp/tmpj93263tt.d(25): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] q`\\n/tmp/tmpj93263tt.d(25): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpj93263tt.d(25)"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu6djk7ow.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpu6djk7ow.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmpu6djk7ow.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x64184554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0;\
    \ j < n; j++) {\n            for (k = 0; k < n; k++) {\n                for (l\
    \ = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n        \
    \                for (n = 0; n < n; n++) {\n                            for (o\
    \ = 0; o < n; o++) {\n                                for (p = 0; p < n; p++)\
    \ {\n                                    for (q = 0; q < n; q++) {\n         \
    \                               for (r = 0; r < n; r++) {\n                  \
    \                          for (s = 0; s < n; s++) {\n                       \
    \                         for (t = 0; t < n; t++) {\n                        \
    \                            for (u = 0; u < n; u++) {\n                     \
    \                                   for (v = 0; v < n; v++) {\n              \
    \                                              for (w = 0; w < n; w++) {\n   \
    \                                                             for (x = 0; x <\
    \ n; x++) {\n                                                                \
    \    for (y = 0; y < n; y++) {\n                                             \
    \                           for (z = 0; z < n; z++) {\n                      \
    \                                                      for (a = 0; a < n; a++)\
    \ {\n                                                                        \
    \        for (b = 0; b < n; b++) {\n                                         \
    \                                           for (c = 0; c < n; c++) {\n      \
    \                                                                            \
    \      for (d = 0; d < n; d++) {\n                                           \
    \                                                 for (e = 0; e < n; e++) {\n\
    \                                                                            \
    \                    for (f = 0; f < n; f++) {\n                             \
    \                                                                       for (g\
    \ = 0; g < n; g++) {\n                                                       \
    \                                                 for (h = 0; h <\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpybep3x2s.d(46): Error: expression expected, not `unittest`\\\
    n/tmp/tmpybep3x2s.d(47): Error: found `{` when expecting `;` following `for` condition\\\
    n/tmp/tmpybep3x2s.d(48): Error: expression expected, not `alias`\\n/tmp/tmpybep3x2s.d(48):\
    \ Error: found `candidate` when expecting `)`\\n/tmp/tmpybep3x2s.d(48): Error:\
    \ found `=` instead of statement\\n/tmp/tmpybep3x2s.d(56): Error: found `End of\
    \ File` when expecting `}` following compound statement\\n/tmp/tmpybep3x2s.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpybep3x2s.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpybep3x2s.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpybep3x2s.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpybep3x2s.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpybep3x2s.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpybep3x2s.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpybep3x2s.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpybep3x2s.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpybep3x2s.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpybep3x2s.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpybep3x2s.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpybep3x2s.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpybep3x2s.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybep3x2s.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long count = 0;\n    double[] left_to_right = new double[n];\n    double[]\
    \ right_to_left = new double[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = i;\n    }\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (left_to_right[i] > right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp5q5rnp2.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42870d]\\n??:? void tmpp5q5rnp2.__unittest_L34_C1()\
    \ [0x4283f4]\\n??:? void tmpp5q5rnp2.__modtest() [0x42848c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c8a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b73a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430951]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b711]\\n??:? runModuleUnitTests [0x42c67d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428bd0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428b57]\\n??:? _d_run_main [0x428ac2]\\n??:? main [0x42849f]\\\
    n??:? __libc_start_main [0x39d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long collisions = 0;\n    long[] cars_left = new long[n];\n    long[] cars_right\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        cars_left[i] =\
    \ i;\n        cars_right[i] = n - i - 1;\n    }\n    for (j = 0; j < n; j++) \n\
    \    {\n        for (k = 0; k < n; k++) \n        {\n            if (cars_left[j]\
    \ == cars_right[k]) \n            {\n                collisions++;\n         \
    \   }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7zcjwuia.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp7zcjwuia.__unittest_L39_C1()\
    \ [0x427e40]\\n??:? void tmp7zcjwuia.__modtest() [0x427ed8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427eeb]\\\
    n??:? __libc_start_main [0x35925554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i < j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfo51jmev.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpfo51jmev.__unittest_L30_C1()\
    \ [0x427a90]\\n??:? void tmpfo51jmev.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0xbd11e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
