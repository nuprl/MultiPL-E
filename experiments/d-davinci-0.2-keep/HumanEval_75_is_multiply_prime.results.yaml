name: HumanEval_75_is_multiply_prime
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    foreach(i; 0..primes.length)\n    {\n        if(a % primes[i] == 0)\n   \
    \     {\n            is_multiply_prime = true;\n        }\n    }\n    return is_multiply_prime;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzfhz67qb.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42822d]\\n??:? void tmpzfhz67qb.__unittest_L25_C1()\
    \ [0x427e7e]\\n??:? void tmpzfhz67qb.__modtest() [0x427fac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c28b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b11e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430760]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43023d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0f5]\\n??:? runModuleUnitTests [0x42c061]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428677]\\n??:? _d_run_main [0x4285e2]\\n??:? main [0x427fbf]\\\
    n??:? __libc_start_main [0x789ba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int count = 0;\n    while (i <= a) \n    {\n        if (a\
    \ % i == 0) \n        {\n            a /= i;\n            count++;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return count\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int j = 2;\n    int k = 2;\n    int count = 0;\n    while(i\
    \ <= a)\n    {\n        if(a % i == 0)\n        {\n            while(j <= i)\n\
    \            {\n                if(i % j == 0)\n                {\n          \
    \          count++;\n                }\n                j++;\n            }\n\
    \            if(count == 2)\n            {\n                while(k <= a)\n  \
    \              {\n                    if(a % k == 0)\n                    {\n\
    \                        while(j <= k)\n                        {\n          \
    \                  if(k % j == 0)\n                            {\n           \
    \                     count++;\n                            }\n              \
    \              j++;\n                        }\n                        if(count\
    \ == 4)\n                        {\n                            while(j <= a)\n\
    \                            {\n                                if(a % j == 0)\n\
    \                                {\n                                    count++;\n\
    \                                }\n                                j++;\n   \
    \                         }\n                            if(count == 6)\n    \
    \                        {\n                                return true;\n   \
    \                         }\n                        }\n                    }\n\
    \                    k++;\n                }\n            }\n        }\n     \
    \   i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3e0crxcf.d(73): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ec5]\\n??:? void tmp3e0crxcf.__unittest_L68_C1()\
    \ [0x427b3b]\\n??:? void tmp3e0crxcf.__modtest() [0x427c48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa7e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa55]\\n??:? runModuleUnitTests [0x42b9c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428314]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42829b]\\n??:? _d_run_main [0x428206]\\n??:? main [0x427c5b]\\\
    n??:? __libc_start_main [0x1ee92554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a < 6) return false;\n\
    \    long i = 2;\n    while (i <= a)\n    {\n        if (is_prime(i) && a % i\
    \ == 0)\n        {\n            a /= i;\n            if (a == 1) return true;\n\
    \            i = 2;\n        }\n        else\n        {\n            i++;\n  \
    \      }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpequeinjm.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpequeinjm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a <= 1)\n            return false;\n\
    \        if (a == 2)\n            return true;\n        if (a % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(a); i += 2)\n     \
    \   {\n            if (a % i == 0)\n                return false;\n        }\n\
    \        return true;\n    }\n    long i = 2;\n    long j = 2;\n    long k = 2;\n\
    \    while (i * j * k != a)\n    {\n        if (i * j * k > a)\n        {\n  \
    \          if (j == 2)\n            {\n                i++;\n                j\
    \ = 2;\n                k = 2;\n            }\n            else if (k == 2)\n\
    \            {\n                j++;\n                k = 2;\n            }\n\
    \            else\n            {\n                k++;\n            }\n      \
    \  }\n        else\n        {\n            if (k == 2)\n            {\n      \
    \          j++;\n                k = 2;\n            }\n            else\n   \
    \         {\n                k++;\n            }\n        }\n    }\n    if (is_prime(i)\
    \ && is_prime(j) && is_prime(k))\n        return true;\n    return false;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbf4onmur.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpbf4onmur.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \       if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a <= 1)\n        return false;\n    if (a == 2)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <=\
    \ sqrt(a); i += 2)\n        if (a % i == 0)\n            return is_prime(i) &&\
    \ is_prime(a / i);\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsk7g6o7x.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpsk7g6o7x.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpsk7g6o7x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int j = 2;\n    int k = 2;\n    bool is_prime = true;\n \
    \   while (i < a)\n    {\n        while (j < a)\n        {\n            while\
    \ (k < a)\n            {\n                if (i * j * k == a)\n              \
    \  {\n                    return true;\n                }\n                k++;\n\
    \            }\n            j++;\n        }\n        i++;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpafuoonst.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpafuoonst.__unittest_L36_C1()\
    \ [0x427ab3]\\n??:? void tmpafuoonst.__modtest() [0x427bc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bd3]\\\
    n??:? __libc_start_main [0x2d9d1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if(a < 2)\n        return false;\n    if(a == 2)\n        return true;\n\
    \    if(a % 2 == 0)\n        return false;\n    for(long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if(a % i == 0)\n            return false;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45z15ovo.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp45z15ovo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwgyzwjmf.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmpwgyzwjmf.__unittest_L24_C1()\
    \ [0x427acf]\\n??:? void tmpwgyzwjmf.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0xf0824554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \       if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a < 6)\n        return false;\n    for (long i = 2; i <= a / 3;\
    \ i++)\n        if (is_prime(i) && is_prime(a / i) && is_prime(a / (i * (a / i))))\n\
    \            return true;\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkoqjm1mz.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpkoqjm1mz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    static long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n\
    \        if(a % i == 0)\n        {\n            a /= i;\n            if(a == 1)\n\
    \                return true;\n            else\n                return is_multiply_prime(a);\n\
    \        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjf4ocmd0.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ecd]\\n??:? void tmpjf4ocmd0.__unittest_L28_C1()\
    \ [0x427b22]\\n??:? void tmpjf4ocmd0.__modtest() [0x427c50]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa86]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa5d]\\n??:? runModuleUnitTests [0x42b9c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42831c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282a3]\\n??:? _d_run_main [0x42820e]\\n??:? main [0x427c63]\\\
    n??:? __libc_start_main [0x3c7ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        foreach\
    \ (i; 2 .. n)\n        {\n            if (n % i == 0) return false;\n        }\n\
    \        return true;\n    }\n    foreach (i; 2 .. a)\n    {\n        if (is_prime(i)\
    \ && a % i == 0)\n        {\n            long b = a / i;\n            foreach\
    \ (j; 2 .. b)\n            {\n                if (is_prime(j) && b % j == 0)\n\
    \                {\n                    long c = b / j;\n                    if\
    \ (is_prime(c))\n                    {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] result = [];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result ~= i;\n\
    \            a /= i;\n        }\n    }\n    return result.length == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv2a8vbzc.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpv2a8vbzc.__unittest_L26_C1()\
    \ [0x427f02]\\n??:? void tmpv2a8vbzc.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x6faee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \       if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a == 1)\n        return false;\n    if (a == 2)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <=\
    \ sqrt(a); i += 2)\n        if (a % i == 0)\n            if (is_prime(i) && is_prime(a\
    \ / i))\n                return true;\n    return false;\n}\nunittest\n{\n   \
    \ alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpshxely_w.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpshxely_w.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpshxely_w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    long i = 3;\n    while (i <= sqrt(a))\n    {\n       \
    \ if (a % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcfzv7ebd.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcfzv7ebd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnv85rr2r.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmpnv85rr2r.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpnv85rr2r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a < 2) return false;\n\
    \    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i == 0)\n        {\n  \
    \          if (is_prime(i) && is_prime(a / i))\n            {\n              \
    \  return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvkfq3ce1.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpvkfq3ce1.d(28): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvkfq3ce1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; 0..primes.length)\n\
    \    {\n        if(a % primes[i] == 0)\n        {\n            a /= primes[i];\n\
    \            if(a == 1)\n            {\n                return true;\n       \
    \     }\n            i = 0;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps9fpjqzz.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmps9fpjqzz.__unittest_L29_C1()\
    \ [0x427eca]\\n??:? void tmps9fpjqzz.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2d3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b166]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302f9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430285]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b13d]\\n??:? runModuleUnitTests [0x42c0a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428738]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286bf]\\n??:? _d_run_main [0x42862a]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0x39fe8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a < 2) return false;\n\
    \    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i == 0)\n        {\n  \
    \          if (is_prime(i) && is_prime(a / i))\n            {\n              \
    \  return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ezu_vgk.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp8ezu_vgk.d(28): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8ezu_vgk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 2;\n    long k = 2;\n    long tmp = a;\n    bool\
    \ is_prime = true;\n    bool is_multiply = false;\n    while (i <= a)\n    {\n\
    \        if (a % i == 0)\n        {\n            a = a / i;\n            while\
    \ (j <= i)\n            {\n                if (i % j == 0)\n                {\n\
    \                    is_prime = false;\n                    break;\n         \
    \       }\n                j++;\n            }\n            if (is_prime)\n  \
    \          {\n                while (k <= a)\n                {\n            \
    \        if (a % k == 0)\n                    {\n                        is_prime\
    \ = false;\n                        break;\n                    }\n          \
    \          k++;\n                }\n                if (is_prime)\n          \
    \      {\n                    is_multiply = true;\n                    break;\n\
    \                }\n            }\n        }\n        i++;\n    }\n    return\
    \ is_multiply;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n \
    \   assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n   \
    \ assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk7ecutla.d(61): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmpk7ecutla.__unittest_L56_C1()\
    \ [0x427b03]\\n??:? void tmpk7ecutla.__modtest() [0x427c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbb3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa1d]\\n??:? runModuleUnitTests [0x42b989]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428263]\\n??:? _d_run_main [0x4281ce]\\n??:? main [0x427c23]\\\
    n??:? __libc_start_main [0xe5403554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.stdio;\n    import std.range;\n    import std.algorithm;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.array;\n    import std.conv;\n\
    \    import std.string;\n    import std.stdio;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.range;\n    import std.typecons;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.stdio;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.typecons;\n    import std.math;\n \
    \   import std.algorithm;\n    import std.range;\n    import std.typecons;\n \
    \   import std.array;\n    import std.conv;\n    import std.string;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.stdio;\n    import std.range;\n    import std.algorithm;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.array;\n    import std.conv;\n\
    \    import std.string;\n    import std.stdio;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr192m1i9.d(83): Error: identifier expected following `import`\\\
    n/tmp/tmpr192m1i9.d(83): Error: `;` expected\\n/tmp/tmpr192m1i9.d(98): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr192m1i9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6f6gtmh7.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmp6f6gtmh7.__unittest_L24_C1()\
    \ [0x427e6e]\\n??:? void tmp6f6gtmh7.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x2f778554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        for\
    \ (long i = 2; i < n; i++)\n        {\n            if (n % i == 0) return false;\n\
    \        }\n        return true;\n    }\n    long i = 2;\n    long count = 0;\n\
    \    while (i <= a)\n    {\n        if (a % i == 0 && is_prime(i))\n        {\n\
    \            a /= i;\n            count++;\n        }\n        else\n        {\n\
    \            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptkqpukxr.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmptkqpukxr.__unittest_L24_C1()\
    \ [0x427acf]\\n??:? void tmptkqpukxr.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0x64950554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for\
    \ (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    if\
    \ (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return\
    \ false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i\
    \ == 0)\n        {\n            if (is_prime(i) && is_prime(a / i))\n        \
    \        return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz6cr36rd.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpz6cr36rd.d(29): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpz6cr36rd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        for (long i = 2; i <= sqrt(n); i++)\n            if (n % i == 0)\n  \
    \              return false;\n        return true;\n    }\n    if (a < 2)\n  \
    \      return false;\n    for (long i = 2; i <= sqrt(a); i++)\n        if (is_prime(i)\
    \ && a % i == 0)\n            return is_multiply_prime(a / i);\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ntqt47s.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp8ntqt47s.d(25): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8ntqt47s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a == 3)\n        return true;\n    if (a == 5)\n        return true;\n\
    \    if (a == 7)\n        return true;\n    if (a == 11)\n        return true;\n\
    \    if (a == 13)\n        return true;\n    if (a == 17)\n        return true;\n\
    \    if (a == 19)\n        return true;\n    if (a == 23)\n        return true;\n\
    \    if (a == 29)\n        return true;\n    if (a == 31)\n        return true;\n\
    \    if (a == 37)\n        return true;\n    if (a == 41)\n        return true;\n\
    \    if (a == 43)\n        return true;\n    if (a == 47)\n        return true;\n\
    \    if (a == 53)\n        return true;\n    if (a == 59)\n        return true;\n\
    \    if (a == 61)\n        return true;\n    if (a == 67)\n        return true;\n\
    \    if (a == 71)\n        return true;\n    if (a == 73)\n        return true;\n\
    \    if (a == 79)\n        return true;\n    if (a == 83)\n        return true;\n\
    \    if (a == 89)\n        return true;\n    if (a == 97)\n        return true;\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc4h1x_2j.d(72): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427edd]\\n??:? void tmpc4h1x_2j.__unittest_L68_C1()\
    \ [0x427b2e]\\n??:? void tmpc4h1x_2j.__modtest() [0x427c5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa6d]\\n??:? runModuleUnitTests [0x42b9d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42832c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b3]\\n??:? _d_run_main [0x42821e]\\n??:? main [0x427c6f]\\\
    n??:? __libc_start_main [0xf8177554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for\
    \ (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    if\
    \ (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return\
    \ false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i\
    \ == 0)\n        {\n            if (is_prime(i) && is_prime(a / i))\n        \
    \        return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl624modc.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpl624modc.d(29): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpl624modc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp992fz7yj.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmp992fz7yj.__unittest_L24_C1()\
    \ [0x427acf]\\n??:? void tmp992fz7yj.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0x88801554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm : all;\n    import std.range : iota;\n    import std.math\
    \ : isPrime;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.conv : to;\n    import std.range : take;\n    import std.range\
    \ : drop;\n    import std.range : empty;\n    import std.range : front;\n    import\
    \ std.range : back;\n    import std.range : zip;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n   \nunittest\n{\n    alias candidate = is_multiply_prime;\n\n   \
    \ assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L)\
    \ == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp04hxkkit.d(71): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04hxkkit.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb =\
    \ 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n   \
    \ int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk =\
    \ 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n   \
    \ int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt =\
    \ 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n   \
    \ int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int ccc\
    \ = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg = 0;\n\
    \    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int\
    \ lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp\
    \ = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n\
    \    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmyaec7mu.d(82): Error: no identifier for declarator `int`\\n/tmp/tmpmyaec7mu.d(82):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmyaec7mu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    if (a == 1)\n        return false;\n    if (a ==\
    \ 2)\n        return true;\n    if (a == 3)\n        return true;\n    if (a ==\
    \ 5)\n        return true;\n    if (a == 7)\n        return true;\n    if (a ==\
    \ 11)\n        return true;\n    if (a == 13)\n        return true;\n    if (a\
    \ == 17)\n        return true;\n    if (a == 19)\n        return true;\n    if\
    \ (a == 23)\n        return true;\n    if (a == 29)\n        return true;\n  \
    \  if (a == 31)\n        return true;\n    if (a == 37)\n        return true;\n\
    \    if (a == 41)\n        return true;\n    if (a == 43)\n        return true;\n\
    \    if (a == 47)\n        return true;\n    if (a == 53)\n        return true;\n\
    \    if (a == 59)\n        return true;\n    if (a == 61)\n        return true;\n\
    \    if (a == 67)\n        return true;\n    if (a == 71)\n        return true;\n\
    \    if (a == 73)\n        return true;\n    if (a == 79)\n        return true;\n\
    \    if (a == 83)\n        return true;\n    if (a == 89)\n        return true;\n\
    \    if (a == 97)\n        return true;\n    if (a == 6)\n        return false;\n\
    \    if (a == 10)\n        return false;\n    if (a == 14)\n        return false;\n\
    \    if (a == 15)\n        return false;\n    if (a == 21)\n        return false;\n\
    \    if (a == 22)\n        return false;\n    if (a == 33)\n        return false;\n\
    \    if (a == 34)\n        return false;\n    if (a == 35)\n        return false;\n\
    \    if (a == 38)\n        return false;\n    if (a == 39)\n        return false;\n\
    \    if (a == 46)\n        return false;\n    if (a == 51)\n\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfncliips.d(93): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfncliips.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a < 6) return false;\n\
    \    if (a == 6) return true;\n    if (a % 2 == 0)\n    {\n        if (is_prime(a\
    \ / 2)) return true;\n        if (is_prime(a / 3)) return true;\n        if (is_prime(a\
    \ / 5)) return true;\n    }\n    if (a % 3 == 0)\n    {\n        if (is_prime(a\
    \ / 3)) return true;\n        if (is_prime(a / 5)) return true;\n    }\n    if\
    \ (a % 5 == 0)\n    {\n        if (is_prime(a / 5)) return true;\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxngh8dcq.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxngh8dcq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int count = 0;\n    while (i <= a) \n    {\n        if (a\
    \ % i == 0) \n        {\n            a /= i;\n            count++;\n        }\n\
    \        else\n            i++;\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppff01ksg.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmppff01ksg.__unittest_L24_C1()\
    \ [0x427acf]\\n??:? void tmppff01ksg.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0xa06a8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int count = 0;\n    for (int i = 2; i <= a; i++) \n    {\n        if (a %\
    \ i == 0) \n        {\n            count++;\n            a /= i;\n           \
    \ i--;\n        }\n    }\n    return count == 3;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n == 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for\
    \ (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    bool is_multiply_prime(long\
    \ a)\n    {\n        if (a == 1) return false;\n        if (a == 2) return true;\n\
    \        if (a % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n        {\n            if (a % i == 0)\n            {\n           \
    \     if (is_prime(i) && is_prime(a / i)) return true;\n            }\n      \
    \  }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnx1t40nc.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpnx1t40nc.d(30): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpnx1t40nc.d(12): Error: function `tmpnx1t40nc.is_multiply_prime`\
    \ has no `return` statement, but is expected to return a value of type `bool`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnx1t40nc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcz59chj7.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmpcz59chj7.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcz59chj7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // your code here\n    if(a == 1)\n        return false;\n    if(a == 2)\n\
    \        return true;\n    if(a == 3)\n        return true;\n    if(a == 5)\n\
    \        return true;\n    if(a == 7)\n        return true;\n    if(a == 11)\n\
    \        return true;\n    if(a == 13)\n        return true;\n    if(a == 17)\n\
    \        return true;\n    if(a == 19)\n        return true;\n    if(a == 23)\n\
    \        return true;\n    if(a == 29)\n        return true;\n    if(a == 31)\n\
    \        return true;\n    if(a == 37)\n        return true;\n    if(a == 41)\n\
    \        return true;\n    if(a == 43)\n        return true;\n    if(a == 47)\n\
    \        return true;\n    if(a == 53)\n        return true;\n    if(a == 59)\n\
    \        return true;\n    if(a == 61)\n        return true;\n    if(a == 67)\n\
    \        return true;\n    if(a == 71)\n        return true;\n    if(a == 73)\n\
    \        return true;\n    if(a == 79)\n        return true;\n    if(a == 83)\n\
    \        return true;\n    if(a == 89)\n        return true;\n    if(a == 97)\n\
    \        return true;\n    if(a % 2 == 0)\n        return false;\n    if(a % 3\
    \ == 0)\n        return false;\n    if(a % 5 == 0)\n        return false;\n  \
    \  if(a % 7 == 0)\n        return false;\n    if(a % 11 == 0)\n        return\
    \ false;\n    if(a % 13 == 0)\n        return false;\n    if(a % 17 == 0)\n  \
    \      return false;\n    if(a % 19 == 0)\n        return false;\n    if(a % 23\
    \ == 0)\n        return false;\n    if(a % 29 == 0)\n        return false;\n \
    \   if(a % 31 == 0)\n        return false;\n\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1gel4dmg.d(90): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1gel4dmg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2) \n    {\n     \
    \   if (a % i == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfxit9lss.d(17): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfxit9lss.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int count = 0;\n    while (i <= a)\n    {\n        if (a\
    \ % i == 0)\n        {\n            a /= i;\n            count++;\n        }\n\
    \        else\n        {\n            i++;\n        }\n    }\n    return count\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_a7ui9k6.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmp_a7ui9k6.__unittest_L24_C1()\
    \ [0x427e6e]\\n??:? void tmp_a7ui9k6.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x13a56554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.functional;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.array;\n    import std.conv;\n    import std.string;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.functional;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.functional;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.range;\n    import std.algorithm;\n    import std.functional;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.array;\n    import std.conv;\n    import std.string;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.functional;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.functional;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.range;\n    import std.algorithm;\n    import std.functional;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.array;\n    import std.conv;\n    import std\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph30q1e7_.d(84): Error: `;` expected\\n/tmp/tmph30q1e7_.d(99):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph30q1e7_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkgdxpbbr.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmpkgdxpbbr.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkgdxpbbr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            long b = a /\
    \ i;\n            foreach(j; primes)\n            {\n                if(b % j\
    \ == 0)\n                {\n                    long c = b / j;\n            \
    \        foreach(k; primes)\n                    {\n                        if(c\
    \ % k == 0)\n                        {\n                            result = true;\n\
    \                            break;\n                        }\n             \
    \       }\n                    break;\n                }\n            }\n    \
    \        break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjcnz3rl7.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282fd]\\n??:? void tmpjcnz3rl7.__unittest_L42_C1()\
    \ [0x42800a]\\n??:? void tmpjcnz3rl7.__modtest() [0x42807c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b17a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43030d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307bc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430299]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b151]\\n??:? runModuleUnitTests [0x42c0bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42874c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286d3]\\n??:? _d_run_main [0x42863e]\\n??:? main [0x42808f]\\\
    n??:? __libc_start_main [0x81c7a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd_dy1cz0.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmpd_dy1cz0.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpd_dy1cz0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a < 2) return false;\n\
    \    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i == 0)\n        {\n  \
    \          if (is_prime(i) && is_prime(a / i))\n            {\n              \
    \  return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk2chwwh2.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpk2chwwh2.d(28): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpk2chwwh2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    int i = 0;\n    while (a > 1)\n\
    \    {\n        if (a % primes[i] == 0)\n        {\n            a /= primes[i];\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ i == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpey9xxs5_.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428255]\\n??:? void tmpey9xxs5_.__unittest_L29_C1()\
    \ [0x427ecb]\\n??:? void tmpey9xxs5_.__modtest() [0x427fd8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b146]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430788]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430265]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b11d]\\n??:? runModuleUnitTests [0x42c089]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428718]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42869f]\\n??:? _d_run_main [0x42860a]\\n??:? main [0x427feb]\\\
    n??:? __libc_start_main [0x696b5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime; primes)\n    {\n\
    \        if(a % prime == 0)\n        {\n            a /= prime;\n        }\n \
    \   }\n    return a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp98qnzijt.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmp98qnzijt.__unittest_L24_C1()\
    \ [0x427e6e]\\n??:? void tmp98qnzijt.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0xc1429554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 2;\n    long k = 2;\n    long count = 0;\n    long\
    \ temp = a;\n    while(i <= temp)\n    {\n        if(temp % i == 0)\n        {\n\
    \            temp /= i;\n            count++;\n        }\n        else\n     \
    \   {\n            i++;\n        }\n    }\n    if(count == 3)\n    {\n       \
    \ return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        else if (n <= 3)\n            return true;\n        else if (n % 2 ==\
    \ 0 || n % 3 == 0)\n            return false;\n        long i = 5;\n        while\
    \ (i * i <= n)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n \
    \               return false;\n            i = i + 6;\n        }\n        return\
    \ true;\n    }\n    long i = 2;\n    long j = 2;\n    long k = 2;\n    while (i\
    \ * j * k != a)\n    {\n        if (i * j * k > a)\n        {\n            if\
    \ (j * k > a)\n            {\n                if (k > a)\n                   \
    \ return false;\n                else\n                    k++;\n            }\n\
    \            else\n                j++;\n        }\n        else\n           \
    \ i++;\n    }\n    return is_prime(i) && is_prime(j) && is_prime(k);\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsgplivx0.d(58): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f85]\\n??:? void tmpsgplivx0.__unittest_L53_C1()\
    \ [0x427bfb]\\n??:? void tmpsgplivx0.__modtest() [0x427d08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bcab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab3e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430180]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab15]\\n??:? runModuleUnitTests [0x42ba81]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42835b]\\n??:? _d_run_main [0x4282c6]\\n??:? main [0x427d1b]\\\
    n??:? __libc_start_main [0x8ed40554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            result\
    \ = true;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp40wj5lq5.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp40wj5lq5.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmp40wj5lq5.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x890a6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 0) return false;\n    if (a == 1) return true;\n    if (a == 2)\
    \ return true;\n    if (a == 3) return true;\n    if (a == 5) return true;\n \
    \   if (a == 7) return true;\n    if (a == 11) return true;\n    if (a == 13)\
    \ return true;\n    if (a == 17) return true;\n    if (a == 19) return true;\n\
    \    if (a == 23) return true;\n    if (a == 29) return true;\n    if (a == 31)\
    \ return true;\n    if (a == 37) return true;\n    if (a == 41) return true;\n\
    \    if (a == 43) return true;\n    if (a == 47) return true;\n    if (a == 53)\
    \ return true;\n    if (a == 59) return true;\n    if (a == 61) return true;\n\
    \    if (a == 67) return true;\n    if (a == 71) return true;\n    if (a == 73)\
    \ return true;\n    if (a == 79) return true;\n    if (a == 83) return true;\n\
    \    if (a == 89) return true;\n    if (a == 97) return true;\n    if (a == 6)\
    \ return true;\n    if (a == 10) return true;\n    if (a == 14) return true;\n\
    \    if (a == 15) return true;\n    if (a == 21) return true;\n    if (a == 22)\
    \ return true;\n    if (a == 33) return true;\n    if (a == 34) return true;\n\
    \    if (a == 35) return true;\n    if (a == 38) return true;\n    if (a == 39)\
    \ return true;\n    if (a == 46) return true;\n    if (a == 51) return true;\n\
    \    if (a == 55) return true;\n    if (a == 57) return true;\n    if (a == 58)\
    \ return true;\n    if (a == 62) return true;\n    if (a == 65) return true;\n\
    \    if (a == 69) return true;\n    if (\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn1r84xft.d(61): Error: expression expected, not `unittest`\\\
    n/tmp/tmpn1r84xft.d(62): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn1r84xft.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    while (i < a)\n    {\n        if (a % i == 0)\n        {\n\
    \            if (isPrime(i) && isPrime(a / i))\n            {\n              \
    \  return true;\n            }\n        }\n        i++;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr08idzx6.d(19): Error: undefined identifier `isPrime`\\n/tmp/tmpr08idzx6.d(19):\
    \ Error: undefined identifier `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpr08idzx6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6) return false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach\
    \ (i; 0 .. primes.length)\n    {\n        if (a % primes[i] == 0)\n        {\n\
    \            a /= primes[i];\n            if (a == 1) return true;\n         \
    \   if (a % primes[i] == 0) return false;\n            i = -1;\n        }\n  \
    \  }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeymvfedm.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282c5]\\n??:? void tmpeymvfedm.__unittest_L28_C1()\
    \ [0x427f5a]\\n??:? void tmpeymvfedm.__modtest() [0x428048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c323]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430349]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307f8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b18d]\\n??:? runModuleUnitTests [0x42c0f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428788]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42870f]\\n??:? _d_run_main [0x42867a]\\n??:? main [0x42805b]\\\
    n??:? __libc_start_main [0x72fae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6) return false;\n    if (a % 2 == 0) return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0) return is_multiply_prime(a / 3);\n    if (a % 5 ==\
    \ 0) return is_multiply_prime(a / 5);\n    for (int i = 7; i < a; i += 2) {\n\
    \        if (a % i == 0) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3_w6udb3.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ea5]\\n??:? void tmp3_w6udb3.__unittest_L23_C1()\
    \ [0x427b17]\\n??:? void tmp3_w6udb3.__modtest() [0x427c24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbcb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa5e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa35]\\n??:? runModuleUnitTests [0x42b9a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42827b]\\n??:? _d_run_main [0x4281e6]\\n??:? main [0x427c37]\\\
    n??:? __libc_start_main [0x87e43554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i, j, k;\n    for (i = 2; i <= a / 2; i++) \n    {\n        if (a %\
    \ i == 0) \n        {\n            for (j = 2; j <= a / 2; j++) \n           \
    \ {\n                if (a % j == 0) \n                {\n                   \
    \ for (k = 2; k <= a / 2; k++) \n                    {\n                     \
    \   if (a % k == 0) \n                        {\n                            if\
    \ (a == i * j * k) \n                            {\n                         \
    \       return true;\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpilhr3dhh.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ebd]\\n??:? void tmpilhr3dhh.__unittest_L39_C1()\
    \ [0x427bca]\\n??:? void tmpilhr3dhh.__modtest() [0x427c3c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbe3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa76]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa4d]\\n??:? runModuleUnitTests [0x42b9b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42830c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428293]\\n??:? _d_run_main [0x4281fe]\\n??:? main [0x427c4f]\\\
    n??:? __libc_start_main [0xce66554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_8u4i6c3.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmp_8u4i6c3.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_8u4i6c3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long i; primes)\n    {\n\
    \        if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n  \
    \  return a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpespqs0t5.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpespqs0t5.__unittest_L24_C1()\
    \ [0x427e6e]\\n??:? void tmpespqs0t5.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x587b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a < 2)\n            return false;\n\
    \        for (long i = 2; i < a; i++)\n            if (a % i == 0)\n         \
    \       return false;\n        return true;\n    }\n    for (long i = 2; i < a;\
    \ i++)\n        if (is_prime(i) && a % i == 0)\n            for (long j = 2; j\
    \ < a; j++)\n                if (is_prime(j) && a % j == 0 && i * j < a)\n   \
    \                 for (long k = 2; k < a; k++)\n                        if (is_prime(k)\
    \ && a % k == 0 && i * j * k == a)\n                            return true;\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7_wwpctu.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmp7_wwpctu.__unittest_L24_C1()\
    \ [0x427acf]\\n??:? void tmp7_wwpctu.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0x644bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb =\
    \ 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n   \
    \ int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk =\
    \ 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n   \
    \ int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt =\
    \ 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n   \
    \ int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int ccc\
    \ = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg = 0;\n\
    \    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int\
    \ lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp\
    \ = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n\
    \    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwd1dx_vv.d(82): Error: no identifier for declarator `int`\\n/tmp/tmpwd1dx_vv.d(82):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwd1dx_vv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int count = 0;\n    while (i <= a)\n    {\n        if (a\
    \ % i == 0)\n        {\n            a /= i;\n            count++;\n        }\n\
    \        else\n        {\n            i++;\n        }\n    }\n    return count\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i, j, k;\n    for (i = 2; i < a; i++)\n    {\n        for (j = 2; j <\
    \ a; j++)\n        {\n            for (k = 2; k < a; k++)\n            {\n   \
    \             if (i * j * k == a)\n                {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphrqvs5yc.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmphrqvs5yc.__unittest_L30_C1()\
    \ [0x427b5e]\\n??:? void tmphrqvs5yc.__modtest() [0x427bd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427be3]\\\
    n??:? __libc_start_main [0x209ca554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if(a < 6)\n        return false;\n    if(a == 6)\n        return true;\n\
    \    if(a % 2 == 0)\n        return is_multiply_prime(a / 2);\n    if(a % 3 ==\
    \ 0)\n        return is_multiply_prime(a / 3);\n    if(a % 5 == 0)\n        return\
    \ is_multiply_prime(a / 5);\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3y_kvxm_.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e65]\\n??:? void tmp3y_kvxm_.__unittest_L26_C1()\
    \ [0x427adb]\\n??:? void tmp3y_kvxm_.__modtest() [0x427be8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9f5]\\n??:? runModuleUnitTests [0x42b961]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282b4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42823b]\\n??:? _d_run_main [0x4281a6]\\n??:? main [0x427bfb]\\\
    n??:? __libc_start_main [0xbc489554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1)\n        return false;\n    else if (a == 2)\n        return\
    \ true;\n    else if (a == 3)\n        return true;\n    else if (a == 5)\n  \
    \      return true;\n    else if (a == 7)\n        return true;\n    else if (a\
    \ == 11)\n        return true;\n    else if (a == 13)\n        return true;\n\
    \    else if (a == 17)\n        return true;\n    else if (a == 19)\n        return\
    \ true;\n    else if (a == 23)\n        return true;\n    else if (a == 29)\n\
    \        return true;\n    else if (a == 31)\n        return true;\n    else if\
    \ (a == 37)\n        return true;\n    else if (a == 41)\n        return true;\n\
    \    else if (a == 43)\n        return true;\n    else if (a == 47)\n        return\
    \ true;\n    else if (a == 53)\n        return true;\n    else if (a == 59)\n\
    \        return true;\n    else if (a == 61)\n        return true;\n    else if\
    \ (a == 67)\n        return true;\n    else if (a == 71)\n        return true;\n\
    \    else if (a == 73)\n        return true;\n    else if (a == 79)\n        return\
    \ true;\n    else if (a == 83)\n        return true;\n    else if (a == 89)\n\
    \        return true;\n    else if (a == 97)\n        return true;\n    else\n\
    \        return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_nwt89_u.d(73): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427edd]\\n??:? void tmp_nwt89_u.__unittest_L69_C1()\
    \ [0x427b2e]\\n??:? void tmp_nwt89_u.__modtest() [0x427c5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa6d]\\n??:? runModuleUnitTests [0x42b9d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42832c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b3]\\n??:? _d_run_main [0x42821e]\\n??:? main [0x427c6f]\\\
    n??:? __libc_start_main [0x3c734554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        foreach\
    \ (i; 2 .. (n / 2) + 1)\n        {\n            if (n % i == 0)\n            \
    \    return false;\n        }\n        return true;\n    }\n    foreach (i; 2\
    \ .. a / 2 + 1)\n    {\n        if (is_prime(i) && a % i == 0)\n        {\n  \
    \          foreach (j; 2 .. a / 2 + 1)\n            {\n                if (is_prime(j)\
    \ && a % j == 0 && i * j == a)\n                {\n                    foreach\
    \ (k; 2 .. a / 2 + 1)\n                    {\n                        if (is_prime(k)\
    \ && a % k == 0 && i * j * k == a)\n                        {\n              \
    \              return true;\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1nqzmtlk.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428015]\\n??:? void tmp1nqzmtlk.__unittest_L47_C1()\
    \ [0x427c87]\\n??:? void tmp1nqzmtlk.__modtest() [0x427d94]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bd3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42abce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fd61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430210]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fced]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aba5]\\n??:? runModuleUnitTests [0x42bb11]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428464]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283eb]\\n??:? _d_run_main [0x428356]\\n??:? main [0x427da7]\\\
    n??:? __libc_start_main [0x7c4b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpza1_w2cs.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmpza1_w2cs.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpza1_w2cs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a == 1) return false;\n       \
    \ if (a == 2) return true;\n        if (a % 2 == 0) return false;\n        for\
    \ (long i = 3; i < a; i += 2)\n        {\n            if (a % i == 0) return false;\n\
    \        }\n        return true;\n    }\n    long i = 2;\n    long j = 2;\n  \
    \  long k = 2;\n    while (i < a)\n    {\n        while (j < a)\n        {\n \
    \           while (k < a)\n            {\n                if (i * j * k == a)\n\
    \                {\n                    if (is_prime(i) && is_prime(j) && is_prime(k))\n\
    \                    {\n                        return true;\n               \
    \     }\n                }\n                k++;\n            }\n            j++;\n\
    \            k = 2;\n        }\n        i++;\n        j = 2;\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \       if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a < 6)\n        return false;\n    for (long i = 2; i <= a / 3;\
    \ i++)\n        if (is_prime(i) && is_prime(a / i) && is_prime(a / (i * (a / i))))\n\
    \            return true;\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp47wsiyx_.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp47wsiyx_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn4neo7yo.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmpn4neo7yo.__unittest_L24_C1()\
    \ [0x427acf]\\n??:? void tmpn4neo7yo.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0xce53554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool isPrime = true;\n    long b = a;\n    long c = a;\n    long d = a;\n\
    \    long e = a;\n    long f = a;\n    long g = a;\n    long h = a;\n    long\
    \ i = a;\n    long j = a;\n    long k = a;\n    long l = a;\n    long m = a;\n\
    \    long n = a;\n    long o = a;\n    long p = a;\n    long q = a;\n    long\
    \ r = a;\n    long s = a;\n    long t = a;\n    long u = a;\n    long v = a;\n\
    \    long w = a;\n    long x = a;\n    long y = a;\n    long z = a;\n    long\
    \ aa = a;\n    long ab = a;\n    long ac = a;\n    long ad = a;\n    long ae =\
    \ a;\n    long af = a;\n    long ag = a;\n    long ah = a;\n    long ai = a;\n\
    \    long aj = a;\n    long ak = a;\n    long al = a;\n    long am = a;\n    long\
    \ an = a;\n    long ao = a;\n    long ap = a;\n    long aq = a;\n    long ar =\
    \ a;\n    long as = a;\n    long at = a;\n    long au = a;\n    long av = a;\n\
    \    long aw = a;\n    long ax = a;\n    long ay = a;\n    long az = a;\n    long\
    \ ba = a;\n    long bb = a;\n    long bc = a;\n    long bd = a;\n    long be =\
    \ a;\n    long bf = a;\n    long bg = a;\n    long bh = a;\n    long bi = a;\n\
    \    long bj = a;\n    long bk = a;\n    long bl = a;\n    long bm = a;\n    long\
    \ bn = a;\n    long bo = a;\n    long bp = a;\n    long bq = a;\n    long br =\
    \ a;\n   \nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnvkjzk4l.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvkjzk4l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] result = [];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result ~= i;\n\
    \            a /= i;\n        }\n    }\n    return result.length == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_t8ba446.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmp_t8ba446.__unittest_L26_C1()\
    \ [0x427f02]\\n??:? void tmp_t8ba446.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x93aaa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = a;\n    while (i < j)\n    {\n        if (a % i\
    \ == 0)\n        {\n            j = a / i;\n            if (isPrime(i) && isPrime(j))\n\
    \            {\n                return true;\n            }\n        }\n     \
    \   i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjk1k7dv.d(21): Error: undefined identifier `isPrime`\\n/tmp/tmpxjk1k7dv.d(21):\
    \ Error: undefined identifier `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpxjk1k7dv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int count = 0;\n    while (a != 1)\n    {\n        if (a\
    \ % i == 0)\n        {\n            a /= i;\n            count++;\n        }\n\
    \        else\n        {\n            i++;\n        }\n    }\n    return count\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    bool is_multiply_prime = false;\n\
    \    foreach(i; primes)\n    {\n        if(a % i == 0)\n        {\n          \
    \  is_multiply_prime = true;\n            break;\n        }\n    }\n    return\
    \ is_multiply_prime;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3gr4d8r1.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp3gr4d8r1.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmp3gr4d8r1.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xca663554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo4ek4ivw.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpo4ek4ivw.__unittest_L24_C1()\
    \ [0x427e6e]\\n??:? void tmpo4ek4ivw.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0xe9aa0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(long\
    \ i; primes)\n    {\n        if(a % i == 0)\n        {\n            factors ~=\
    \ i;\n            a /= i;\n        }\n    }\n    if(factors.length == 3)\n   \
    \ {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4apx6jpv.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmp4apx6jpv.__unittest_L30_C1()\
    \ [0x427f0a]\\n??:? void tmp4apx6jpv.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430531]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304bd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bab5]\\n??:? runModuleUnitTests [0x42ca21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0x937a1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 2;\n    long k = 2;\n    while (i < a)\n    {\n\
    \        while (j < a)\n        {\n            while (k < a)\n            {\n\
    \                if (i * j * k == a)\n                {\n                    return\
    \ true;\n                }\n                k++;\n            }\n            j++;\n\
    \        }\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqqtsoywk.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e45]\\n??:? void tmpqqtsoywk.__unittest_L35_C1()\
    \ [0x427abb]\\n??:? void tmpqqtsoywk.__modtest() [0x427bc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9d5]\\n??:? runModuleUnitTests [0x42b941]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428294]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42821b]\\n??:? _d_run_main [0x428186]\\n??:? main [0x427bdb]\\\
    n??:? __libc_start_main [0x985b8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            factors ~= i;\n\
    \            a /= i;\n        }\n    }\n    if(factors.length == 3)\n    {\n \
    \       return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprefmxqag.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmprefmxqag.__unittest_L33_C1()\
    \ [0x427f0a]\\n??:? void tmprefmxqag.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430531]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304bd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bab5]\\n??:? runModuleUnitTests [0x42ca21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0xdd363554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if(a < 2) return false;\n    if(a == 2) return true;\n    if(a % 2 == 0)\
    \ return false;\n    for(long i = 3; i <= sqrt(a); i += 2)\n    {\n        if(a\
    \ % i == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5eekvl6z.d(17): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5eekvl6z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i;\n    int j;\n    int k;\n    bool is_prime;\n    for (i = 2; i < a;\
    \ i++)\n    {\n        for (j = 2; j < a; j++)\n        {\n            for (k\
    \ = 2; k < a; k++)\n            {\n                if (i * j * k == a)\n     \
    \           {\n                    is_prime = true;\n                    for (int\
    \ l = 2; l < i; l++)\n                    {\n                        if (i % l\
    \ == 0)\n                        {\n                            is_prime = false;\n\
    \                            break;\n                        }\n             \
    \       }\n                    if (is_prime)\n                    {\n        \
    \                for (int l = 2; l < j; l++)\n                        {\n    \
    \                        if (j % l == 0)\n                            {\n    \
    \                            is_prime = false;\n                             \
    \   break;\n                            }\n                        }\n       \
    \                 if (is_prime)\n                        {\n                 \
    \           for (int l = 2; l < k; l++)\n                            {\n     \
    \                           if (k % l == 0)\n                                {\n\
    \                                    is_prime = false;\n                     \
    \               break;\n                                }\n                  \
    \          }\n                            if (is_prime)\n                    \
    \        {\n                                return true;\n                   \
    \         }\n                        }\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n   \
    \ alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_zei1zmk.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmp_zei1zmk.__unittest_L24_C1()\
    \ [0x427acf]\\n??:? void tmp_zei1zmk.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0x2dd4f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    if (a == 1)\n        return result;\n    if (a\
    \ == 2)\n        return true;\n    if (a == 3)\n        return true;\n    if (a\
    \ == 5)\n        return true;\n    if (a == 7)\n        return true;\n    if (a\
    \ == 11)\n        return true;\n    if (a == 13)\n        return true;\n    if\
    \ (a == 17)\n        return true;\n    if (a == 19)\n        return true;\n  \
    \  if (a == 23)\n        return true;\n    if (a == 29)\n        return true;\n\
    \    if (a == 31)\n        return true;\n    if (a == 37)\n        return true;\n\
    \    if (a == 41)\n        return true;\n    if (a == 43)\n        return true;\n\
    \    if (a == 47)\n        return true;\n    if (a == 53)\n        return true;\n\
    \    if (a == 59)\n        return true;\n    if (a == 61)\n        return true;\n\
    \    if (a == 67)\n        return true;\n    if (a == 71)\n        return true;\n\
    \    if (a == 73)\n        return true;\n    if (a == 79)\n        return true;\n\
    \    if (a == 83)\n        return true;\n    if (a == 89)\n        return true;\n\
    \    if (a == 97)\n        return true;\n    if (a % 2 == 0)\n        return false;\n\
    \    if (a % 3 == 0)\n        return false;\n    if (a % 5 == 0)\n        return\
    \ false;\n    if (a % 7 == 0)\n        return false;\n    if (a % 11 == 0)\n \
    \       return false;\n    if (a % 13 == 0)\n        return false;\n    if (a\
    \ % 17 == 0)\n        return false;\n    if (a % 19 == 0)\n        return false;\n\
    \    if (a % 23 == 0)\n        return false;\n    if (a % 29 == 0)\n        return\
    \ false;\n    if (a % 31 == 0)\n        return false;\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa7mminow.d(89): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7mminow.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a < 6) return false;\n\
    \    for (long i = 2; i <= sqrt(a); i++)\n    {\n        if (is_prime(i) && a\
    \ % i == 0)\n        {\n            long b = a / i;\n            if (is_prime(b))\n\
    \            {\n                for (long j = 2; j <= sqrt(b); j++)\n        \
    \        {\n                    if (is_prime(j) && b % j == 0)\n             \
    \       {\n                        long c = b / j;\n                        if\
    \ (is_prime(c))\n                        {\n                            return\
    \ true;\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp15o9ta5j.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp15o9ta5j.d(26): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp15o9ta5j.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp15o9ta5j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \        for (long i = 5; i * i <= n; i += 6)\n            if (n % i == 0 || n\
    \ % (i + 2) == 0)\n                return false;\n        return true;\n    }\n\
    \    if (a <= 1) return false;\n    if (a <= 3) return true;\n    if (a % 2 ==\
    \ 0 || a % 3 == 0) return false;\n    for (long i = 5; i * i <= a; i += 6)\n \
    \       if (a % i == 0 || a % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo3us7r9h.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f7d]\\n??:? void tmpo3us7r9h.__unittest_L32_C1()\
    \ [0x427bd2]\\n??:? void tmpo3us7r9h.__modtest() [0x427d00]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430178]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab0d]\\n??:? runModuleUnitTests [0x42ba79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428353]\\n??:? _d_run_main [0x4282be]\\n??:? main [0x427d13]\\\
    n??:? __libc_start_main [0xd82a0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; 0..primes.length)\n\
    \    {\n        if(a % primes[i] == 0)\n        {\n            a /= primes[i];\n\
    \            i = 0;\n        }\n    }\n    return a == 1;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyif8osdk.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpyif8osdk.__unittest_L25_C1()\
    \ [0x427ec2]\\n??:? void tmpyif8osdk.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b15e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43027d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b135]\\n??:? runModuleUnitTests [0x42c0a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428730]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286b7]\\n??:? _d_run_main [0x428622]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x5fd97554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    long i = 3;\n    long sqrt_a\
    \ = sqrt(a);\n    while (i <= sqrt_a)\n    {\n        if (a % i == 0)\n      \
    \      return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsk1qn65i.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpsk1qn65i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        else if (n <= 3)\n            return true;\n        else if (n % 2 ==\
    \ 0 || n % 3 == 0)\n            return false;\n        long i = 5;\n        while\
    \ (i * i <= n)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n \
    \               return false;\n            i = i + 6;\n        }\n        return\
    \ true;\n    }\n    if (a <= 1)\n        return false;\n    else if (a <= 3)\n\
    \        return true;\n    else if (a % 2 == 0 || a % 3 == 0)\n        return\
    \ false;\n    long i = 5;\n    while (i * i <= a)\n    {\n        if (a % i ==\
    \ 0 || a % (i + 2) == 0)\n            return false;\n        i = i + 6;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpolmz6qtr.d(50): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f8d]\\n??:? void tmpolmz6qtr.__unittest_L46_C1()\
    \ [0x427be2]\\n??:? void tmpolmz6qtr.__modtest() [0x427d10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bcb3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcd9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430188]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab1d]\\n??:? runModuleUnitTests [0x42ba89]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428363]\\n??:? _d_run_main [0x4282ce]\\n??:? main [0x427d23]\\\
    n??:? __libc_start_main [0xb9ef8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp29i6rhbw.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp29i6rhbw.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmp29i6rhbw.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x4e953554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int count = 0;\n    while (i <= a)\n    {\n        if (a\
    \ % i == 0)\n        {\n            a /= i;\n            count++;\n        }\n\
    \        else\n        {\n            i++;\n        }\n    }\n    return count\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n      \
    \  if (a % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr3p90y19.d(17): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpr3p90y19.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    foreach(i; 0..25)\n    {\n        foreach(j; 0..25)\n        {\n        \
    \    foreach(k; 0..25)\n            {\n                if(primes[i] * primes[j]\
    \ * primes[k] == a)\n                {\n                    is_multiply_prime\
    \ = true;\n                }\n            }\n        }\n    }\n    return is_multiply_prime;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n) \n    {\n        if (n <= 1) \n            return false;\n\
    \        if (n <= 3) \n            return true;\n        if (n % 2 == 0 || n %\
    \ 3 == 0) \n            return false;\n        for (long i = 5; i * i <= n; i\
    \ = i + 6) \n            if (n % i == 0 || n % (i + 2) == 0) \n              \
    \  return false;\n        return true;\n    }\n    if (a <= 1) \n        return\
    \ false;\n    if (a <= 3) \n        return true;\n    if (a % 2 == 0 || a % 3\
    \ == 0) \n        return false;\n    for (long i = 5; i * i <= a; i = i + 6) \n\
    \        if (a % i == 0 || a % (i + 2) == 0) \n            return false;\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n \
    \   assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n   \
    \ assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps0u5y86e.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f8d]\\n??:? void tmps0u5y86e.__unittest_L38_C1()\
    \ [0x427be2]\\n??:? void tmps0u5y86e.__modtest() [0x427d10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bcb3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcd9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430188]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab1d]\\n??:? runModuleUnitTests [0x42ba89]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428363]\\n??:? _d_run_main [0x4282ce]\\n??:? main [0x427d23]\\\
    n??:? __libc_start_main [0xc1004554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] prime_factors = [];\n \
    \   for (long i = 0; i < primes.length; i++)\n    {\n        if (a % primes[i]\
    \ == 0)\n        {\n            prime_factors ~= primes[i];\n            a /=\
    \ primes[i];\n            i--;\n        }\n    }\n    if (prime_factors.length\
    \ == 3)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long\
    \ i; primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1olahdqm.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp1olahdqm.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmp1olahdqm.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xa1b32554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // your code here\n    if(a <= 1)\n        return false;\n    if(a == 2 ||\
    \ a == 3 || a == 5)\n        return true;\n    if(a % 2 == 0)\n        return\
    \ false;\n    if(a % 3 == 0)\n        return false;\n    if(a % 5 == 0)\n    \
    \    return false;\n    for(int i = 7; i <= sqrt(a); i += 2)\n    {\n        if(a\
    \ % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpke5ls9qk.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpke5ls9qk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1)\n        return false;\n    else if (a == 2)\n        return\
    \ true;\n    else if (a % 2 == 0)\n        return false;\n    else\n    {\n  \
    \      int i = 3;\n        while (i <= sqrt(a))\n        {\n            if (a\
    \ % i == 0)\n                return false;\n            i += 2;\n        }\n \
    \       return true;\n    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0t5_ee4m.d(23): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0t5_ee4m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz9i1qe35.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpz9i1qe35.__unittest_L24_C1()\
    \ [0x427e6e]\\n??:? void tmpz9i1qe35.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0xbafc4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \       if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a < 2)\n        return false;\n    if (a == 2)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <=\
    \ sqrt(a); i += 2)\n        if (a % i == 0)\n            return is_prime(i) &&\
    \ is_prime(a / i);\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvxrd3jh3.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpvxrd3jh3.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvxrd3jh3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int count = 0;\n    for (int i = 2; i <= a; i++)\n    {\n        if (a %\
    \ i == 0)\n        {\n            count++;\n            a /= i;\n            i--;\n\
    \        }\n    }\n    return count == 3;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool isPrime = true;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n\
    \    long l = 2;\n    long m = 2;\n    long n = 2;\n    long o = 2;\n    long\
    \ p = 2;\n    long q = 2;\n    long r = 2;\n    long s = 2;\n    long t = 2;\n\
    \    long u = 2;\n    long v = 2;\n    long w = 2;\n    long x = 2;\n    long\
    \ y = 2;\n    long z = 2;\n    long aa = 2;\n    long bb = 2;\n    long cc = 2;\n\
    \    long dd = 2;\n    long ee = 2;\n    long ff = 2;\n    long gg = 2;\n    long\
    \ hh = 2;\n    long ii = 2;\n    long jj = 2;\n    long kk = 2;\n    long ll =\
    \ 2;\n    long mm = 2;\n    long nn = 2;\n    long oo = 2;\n    long pp = 2;\n\
    \    long qq = 2;\n    long rr = 2;\n    long ss = 2;\n    long tt = 2;\n    long\
    \ uu = 2;\n    long vv = 2;\n    long ww = 2;\n    long xx = 2;\n    long yy =\
    \ 2;\n    long zz = 2;\n    long aaa = 2;\n    long bbb = 2;\n    long ccc = 2;\n\
    \    long ddd = 2;\n    long eee = 2;\n    long fff = 2;\n    long ggg = 2;\n\
    \    long hhh = 2;\n    long iii = 2;\n    long jjj = 2;\n    long kkk = 2;\n\
    \    long lll = 2;\n    long mmm = 2;\n    long nnn = 2;\n    long ooo = 2;\n\
    \    long ppp = 2;\n    long qqq = 2;\n    long rrr = 2;\n    long sss = 2;\n\
    \    long ttt = 2;\n    long uuu = 2;\n    long vvv = 2;\n   \nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp24wpfcj.d(82): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp24wpfcj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \       if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a <= 1)\n        return false;\n    if (a == 2)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <=\
    \ sqrt(a); i += 2)\n        if (a % i == 0)\n            return is_prime(i) &&\
    \ is_prime(a / i);\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbl4pr_bq.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpbl4pr_bq.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpbl4pr_bq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a == 3)\
    \ return true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n \
    \   if (a == 11) return true;\n    if (a == 13) return true;\n    if (a == 17)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n\
    \    if (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37)\
    \ return true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n\
    \    if (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59)\
    \ return true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n\
    \    if (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79)\
    \ return true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n\
    \    if (a == 97) return true;\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp82tbxt43.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427edd]\\n??:? void tmp82tbxt43.__unittest_L42_C1()\
    \ [0x427b2e]\\n??:? void tmp82tbxt43.__modtest() [0x427c5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa6d]\\n??:? runModuleUnitTests [0x42b9d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42832c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b3]\\n??:? _d_run_main [0x42821e]\\n??:? main [0x427c6f]\\\
    n??:? __libc_start_main [0xad636554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a < 2) return false;\n        if\
    \ (a == 2) return true;\n        if (a % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(a); i += 2)\n        {\n            if (a % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a < 6) return false;\n\
    \    if (a == 6) return true;\n    if (a % 2 == 0) return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0) return is_multiply_prime(a / 3);\n    for (long i\
    \ = 5; i <= sqrt(a); i += 6)\n    {\n        if (a % i == 0) return is_multiply_prime(a\
    \ / i);\n        if (a % (i + 2) == 0) return is_multiply_prime(a / (i + 2));\n\
    \    }\n    return is_prime(a);\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpchrehn1_.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpchrehn1_.d(29): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpchrehn1_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        for\
    \ (long i = 2; i < n; i++)\n        {\n            if (n % i == 0) return false;\n\
    \        }\n        return true;\n    }\n    long num = a;\n    int count = 0;\n\
    \    for (long i = 2; i < num; i++)\n    {\n        if (is_prime(i) && num % i\
    \ == 0)\n        {\n            num /= i;\n            count++;\n            i--;\n\
    \        }\n    }\n    return count == 3;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7kxvl57i.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ed5]\\n??:? void tmp7kxvl57i.__unittest_L36_C1()\
    \ [0x427b47]\\n??:? void tmp7kxvl57i.__modtest() [0x427c54]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbfb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa8e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc21]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa65]\\n??:? runModuleUnitTests [0x42b9d1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428324]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282ab]\\n??:? _d_run_main [0x428216]\\n??:? main [0x427c67]\\\
    n??:? __libc_start_main [0x56455554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool[] is_prime = new bool[a + 1];\n    is_prime[0] = false;\n    is_prime[1]\
    \ = false;\n    foreach (i; 2 .. a + 1)\n        is_prime[i] = true;\n    foreach\
    \ (i; 2 .. a + 1)\n    {\n        if (is_prime[i])\n        {\n            for\
    \ (long j = i * i; j <= a; j += i)\n                is_prime[j] = false;\n   \
    \     }\n    }\n    foreach (i; 2 .. a + 1)\n    {\n        if (is_prime[i])\n\
    \        {\n            foreach (j; 2 .. a + 1)\n            {\n             \
    \   if (is_prime[j])\n                {\n                    foreach (k; 2 ..\
    \ a + 1)\n                    {\n                        if (is_prime[k])\n  \
    \                      {\n                            if (i * j * k == a)\n  \
    \                              return true;\n                        }\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a == 3)\n        return true;\n    if (a == 5)\n        return true;\n\
    \    if (a == 7)\n        return true;\n    if (a == 11)\n        return true;\n\
    \    if (a == 13)\n        return true;\n    if (a == 17)\n        return true;\n\
    \    if (a == 19)\n        return true;\n    if (a == 23)\n        return true;\n\
    \    if (a == 29)\n        return true;\n    if (a == 31)\n        return true;\n\
    \    if (a == 37)\n        return true;\n    if (a == 41)\n        return true;\n\
    \    if (a == 43)\n        return true;\n    if (a == 47)\n        return true;\n\
    \    if (a == 53)\n        return true;\n    if (a == 59)\n        return true;\n\
    \    if (a == 61)\n        return true;\n    if (a == 67)\n        return true;\n\
    \    if (a == 71)\n        return true;\n    if (a == 73)\n        return true;\n\
    \    if (a == 79)\n        return true;\n    if (a == 83)\n        return true;\n\
    \    if (a == 89)\n        return true;\n    if (a == 97)\n        return true;\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph1a52mzh.d(72): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427edd]\\n??:? void tmph1a52mzh.__unittest_L68_C1()\
    \ [0x427b2e]\\n??:? void tmph1a52mzh.__modtest() [0x427c5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa6d]\\n??:? runModuleUnitTests [0x42b9d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42832c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b3]\\n??:? _d_run_main [0x42821e]\\n??:? main [0x427c6f]\\\
    n??:? __libc_start_main [0x49b88554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    for (int i = 0; i < prime_numbers.length; i++)\n    {\n      \
    \  for (int j = 0; j < prime_numbers.length; j++)\n        {\n            for\
    \ (int k = 0; k < prime_numbers.length; k++)\n            {\n                if\
    \ (prime_numbers[i] * prime_numbers[j] * prime_numbers[k] == a)\n            \
    \    {\n                    is_multiply_prime = true;\n                }\n   \
    \         }\n        }\n    }\n    return is_multiply_prime;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            a /= prime;\n\
    \            if(a == 1)\n            {\n                result = true;\n     \
    \           break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1gd_fg17.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmp1gd_fg17.__unittest_L30_C1()\
    \ [0x427e7a]\\n??:? void tmp1gd_fg17.__modtest() [0x427fa8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c20f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b079]\\n??:? runModuleUnitTests [0x42bfe5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428674]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285fb]\\n??:? _d_run_main [0x428566]\\n??:? main [0x427fbb]\\\
    n??:? __libc_start_main [0x4499f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // your code here\n    bool result = false;\n    long[] primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    foreach(i; primes)\n    {\n        if(a % i == 0)\n        {\n\
    \            result = true;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpseq_cv9v.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpseq_cv9v.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpseq_cv9v.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x976a2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n) {\n        if (n <= 1) return false;\n        if (n\
    \ == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n\
    \        }\n        return true;\n    }\n    if (a <= 1) return false;\n    if\
    \ (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (long i =\
    \ 3; i <= sqrt(a); i += 2) {\n        if (a % i == 0) {\n            if (is_prime(i)\
    \ && is_prime(a / i)) return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv4lgngep.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpv4lgngep.d(26): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpv4lgngep.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a < 2) return false;\n        if\
    \ (a == 2) return true;\n        if (a % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(a); i += 2)\n        {\n            if (a % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a < 6) return false;\n\
    \    for (long i = 2; i <= a / 3; i++)\n    {\n        if (is_prime(i) && is_prime(a\
    \ / i) && is_prime(a / (i * (a / i)))) return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps8pvogiv.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmps8pvogiv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    if (a > 0)\n    {\n        long[] primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n        long[] factors = [];\n        long i = 0;\n      \
    \  while (a > 1)\n        {\n            if (a % primes[i] == 0)\n           \
    \ {\n                factors ~= primes[i];\n                a /= primes[i];\n\
    \            }\n            else\n            {\n                i++;\n      \
    \      }\n        }\n        if (factors.length == 3)\n        {\n           \
    \ result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n\
    \    while (i < a)\n    {\n        while (j < a)\n        {\n            while\
    \ (k < a)\n            {\n                if (i * j * k == a)\n              \
    \  {\n                    result = true;\n                    break;\n       \
    \         }\n                k++;\n            }\n            j++;\n        }\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpul70pjhq.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e45]\\n??:? void tmpul70pjhq.__unittest_L37_C1()\
    \ [0x427abb]\\n??:? void tmpul70pjhq.__modtest() [0x427bc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9d5]\\n??:? runModuleUnitTests [0x42b941]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428294]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42821b]\\n??:? _d_run_main [0x428186]\\n??:? main [0x427bdb]\\\
    n??:? __libc_start_main [0xe31f1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            if(a / i == 1)\n            {\n\
    \                return true;\n            }\n            else\n            {\n\
    \                return is_multiply_prime(a / i);\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphjn3o_0x.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428235]\\n??:? void tmphjn3o_0x.__unittest_L31_C1()\
    \ [0x427e8a]\\n??:? void tmphjn3o_0x.__modtest() [0x427fb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c21f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430245]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b089]\\n??:? runModuleUnitTests [0x42bff5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428684]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42860b]\\n??:? _d_run_main [0x428576]\\n??:? main [0x427fcb]\\\
    n??:? __libc_start_main [0x71e3b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i;\n    long j;\n    long k;\n    bool is_prime;\n    bool is_multiply_prime;\n\
    \    is_multiply_prime = false;\n    for (i = 2; i < a; i++)\n    {\n        is_prime\
    \ = true;\n        for (j = 2; j < i; j++)\n        {\n            if (i % j ==\
    \ 0)\n            {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if (is_prime)\n        {\n            for (k\
    \ = 2; k < a; k++)\n            {\n                is_prime = true;\n        \
    \        for (j = 2; j < k; j++)\n                {\n                    if (k\
    \ % j == 0)\n                    {\n                        is_prime = false;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (is_prime)\n                {\n                    if (a % (i\
    \ * k) == 0)\n                    {\n                        is_multiply_prime\
    \ = true;\n                        break;\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return is_multiply_prime;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3vjlzawv.d(64): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ecd]\\n??:? void tmp3vjlzawv.__unittest_L57_C1()\
    \ [0x427b7d]\\n??:? void tmp3vjlzawv.__modtest() [0x427c4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa86]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa5d]\\n??:? runModuleUnitTests [0x42b9c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42831c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282a3]\\n??:? _d_run_main [0x42820e]\\n??:? main [0x427c5f]\\\
    n??:? __libc_start_main [0xa5b25554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2tnaaedo.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmp2tnaaedo.__unittest_L26_C1()\
    \ [0x427e2e]\\n??:? void tmp2tnaaedo.__modtest() [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1a3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b036]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430678]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430155]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b00d]\\n??:? runModuleUnitTests [0x42bf79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42862c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285b3]\\n??:? _d_run_main [0x42851e]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xf314c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwpltyo92.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwpltyo92.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        foreach\
    \ (i; 2 .. cast(long)sqrt(n) + 1)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    bool is_multiply_prime(long\
    \ a)\n    {\n        if (a <= 1) return false;\n        if (a == 2) return true;\n\
    \        if (a % 2 == 0) return false;\n        foreach (i; 2 .. cast(long)sqrt(a)\
    \ + 1)\n        {\n            if (a % i == 0)\n            {\n              \
    \  if (is_prime(i) && is_prime(a / i))\n                {\n                  \
    \  return true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n    return is_multiply_prime(a);\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvfusvanc.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpvfusvanc.d(30): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvfusvanc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab =\
    \ 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n   \
    \ int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak =\
    \ 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n   \
    \ int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at =\
    \ 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n   \
    \ int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc =\
    \ 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n   \
    \ int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl =\
    \ 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n   \
    \ int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu =\
    \ 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n    int by = 0;\n   \
    \ int bz\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwm15ight.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmpwm15ight.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwm15ight.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    int i = 2;\n    int count = 0;\n   \
    \ while (i <= a)\n    {\n        if (a % i == 0)\n        {\n            a /=\
    \ i;\n            count++;\n        }\n        else\n        {\n            i++;\n\
    \        }\n    }\n    if (count == 3)\n    {\n        is_multiply_prime = true;\n\
    \    }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for\
    \ (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    long[]\
    \ primes = new long[100];\n    long i = 0;\n    for (long j = 2; j < 100; j++)\n\
    \    {\n        if (is_prime(j))\n        {\n            primes[i] = j;\n    \
    \        i++;\n        }\n    }\n    for (long j = 0; j < i; j++)\n    {\n   \
    \     for (long k = 0; k < i; k++)\n        {\n            for (long l = 0; l\
    \ < i; l++)\n            {\n                if (primes[j] * primes[k] * primes[l]\
    \ == a)\n                    return true;\n            }\n        }\n    }\n \
    \   return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyucsf4bg.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpyucsf4bg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   foreach(i; prime_numbers)\n    {\n        if(a % i == 0)\n        {\n    \
    \        result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7lu45frc.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp7lu45frc.__unittest_L25_C1()\
    \ [0x427e5e]\\n??:? void tmp7lu45frc.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x2fbf1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    long limit = sqrt(a);\n    for\
    \ (long i = 3; i <= limit; i += 2)\n    {\n        if (a % i == 0)\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5g447kqe.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5g447kqe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfdp1pyu6.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpfdp1pyu6.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmpfdp1pyu6.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x572d4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 2;\n    long k = 2;\n    long result = 0;\n   \
    \ while (i < 100)\n    {\n        while (j < 100)\n        {\n            while\
    \ (k < 100)\n            {\n                result = i * j * k;\n            \
    \    if (result == a)\n                {\n                    return true;\n \
    \               }\n                k++;\n            }\n            j++;\n   \
    \     }\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp66e_uhga.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmp66e_uhga.__unittest_L37_C1()\
    \ [0x427aa3]\\n??:? void tmp66e_uhga.__modtest() [0x427bb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bc3]\\\
    n??:? __libc_start_main [0xb3ede554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n) {\n        if (n < 2) return false;\n        if (n\
    \ == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n\
    \        }\n        return true;\n    }\n    if (a < 2) return false;\n    if\
    \ (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (long i =\
    \ 3; i <= sqrt(a); i += 2) {\n        if (a % i == 0) {\n            if (is_prime(i)\
    \ && is_prime(a / i)) return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2w0mzvu2.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp2w0mzvu2.d(26): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2w0mzvu2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long\
    \ i; primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1sy5kq55.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp1sy5kq55.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmp1sy5kq55.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x13696554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2) \n    {\n     \
    \   if (a % i == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqjd8eltn.d(17): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqjd8eltn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    if (a == 2 || a == 3 || a == 5)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return false;\n    if (a % 3 == 0)\n   \
    \     return false;\n    if (a % 5 == 0)\n        return false;\n    for (int\
    \ i = 2; i < a; i++)\n    {\n        if (a % i == 0)\n        {\n            if\
    \ (is_prime(i))\n            {\n                if (is_prime(a / i))\n       \
    \         {\n                    if (is_prime(a / (a / i)))\n                \
    \    {\n                        result = true;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwmd3jc4y.d(27): Error: undefined identifier `is_prime`\\n/tmp/tmpwmd3jc4y.d(29):\
    \ Error: undefined identifier `is_prime`\\n/tmp/tmpwmd3jc4y.d(31): Error: undefined\
    \ identifier `is_prime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpwmd3jc4y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        else if (n <= 3)\n            return true;\n        else if (n % 2 ==\
    \ 0 || n % 3 == 0)\n            return false;\n        else\n        {\n     \
    \       for (long i = 5; i * i <= n; i += 6)\n                if (n % i == 0 ||\
    \ n % (i + 2) == 0)\n                    return false;\n            return true;\n\
    \        }\n    }\n    bool is_multiply_prime(long a)\n    {\n        if (a <=\
    \ 1)\n            return false;\n        else if (a <= 3)\n            return\
    \ true;\n        else if (a % 2 == 0 || a % 3 == 0)\n            return false;\n\
    \        else\n        {\n            for (long i = 5; i * i <= a; i += 6)\n \
    \               if (a % i == 0 || a % (i + 2) == 0)\n                    return\
    \ false;\n            return true;\n        }\n    }\n    bool is_multiply_prime(long\
    \ a)\n    {\n        if (a <= 1)\n            return false;\n        else if (a\
    \ <= 3)\n            return true;\n        else if (a % 2 == 0 || a % 3 == 0)\n\
    \            return false;\n        else\n        {\n            for (long i =\
    \ 5; i * i <= a; i += 6)\n                if (a % i == 0 || a % (i + 2) == 0)\n\
    \                    return false;\n            return true;\n        }\n    }\n\
    \    bool is_multiply_prime(long a)\n    {\n        if (a <= 1)\n            return\
    \ false;\n        else if (a <= 3)\n            return true;\n        else if\
    \ (a % 2 == 0 || a % 3 == 0)\n            return false;\n        else\n      \
    \  {\n            for (long i = 5; i * i <= a; i += 6)\n                if (a\
    \ % i == 0 || a % (i + 2) == 0)\n                    return false;\n         \
    \   return true;\n        }\n    }\n    bool is_mult\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp59v00s97.d(79): Error: semicolon expected, not `unittest`\\n/tmp/tmp59v00s97.d(79):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp59v00s97.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    foreach(i; prime_numbers)\n    {\n        if(a % i == 0)\n   \
    \     {\n            is_multiply_prime = true;\n        }\n    }\n    return is_multiply_prime;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3re0svt9.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp3re0svt9.__unittest_L25_C1()\
    \ [0x427e5e]\\n??:? void tmp3re0svt9.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x9e29a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 2;\n    long k = 2;\n    long x = a;\n    long\
    \ y = a;\n    long z = a;\n    long count = 0;\n    long count2 = 0;\n    long\
    \ count3 = 0;\n    long count4 = 0;\n    long count5 = 0;\n    long count6 = 0;\n\
    \    long count7 = 0;\n    long count8 = 0;\n    long count9 = 0;\n    long count10\
    \ = 0;\n    long count11 = 0;\n    long count12 = 0;\n    long count13 = 0;\n\
    \    long count14 = 0;\n    long count15 = 0;\n    long count16 = 0;\n    long\
    \ count17 = 0;\n    long count18 = 0;\n    long count19 = 0;\n    long count20\
    \ = 0;\n    long count21 = 0;\n    long count22 = 0;\n    long count23 = 0;\n\
    \    long count24 = 0;\n    long count25 = 0;\n    long count26 = 0;\n    long\
    \ count27 = 0;\n    long count28 = 0;\n    long count29 = 0;\n    long count30\
    \ = 0;\n    long count31 = 0;\n    long count32 = 0;\n    long count33 = 0;\n\
    \    long count34 = 0;\n    long count35 = 0;\n    long count36 = 0;\n    long\
    \ count37 = 0;\n    long count38 = 0;\n    long count39 = 0;\n    long count40\
    \ = 0;\n    long count41 = 0;\n    long count42 = 0;\n    long count43 = 0;\n\
    \    long count44 = 0;\n    long count45 = 0;\n    long count46 = 0;\n    long\
    \ count47 = 0;\n    long count48 = 0;\n    long count49 = 0;\n    long count50\
    \ = 0;\n    long count51 = 0;\n    long count52 = 0;\n    long count53 = 0;\n\
    \    long count54 = 0;\n    long count55 = 0;\n    long count56 = 0;\n    long\
    \ count57 = 0;\n    long count58 = 0;\n    long count59\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr5cj0y2e.d(79): Error: semicolon expected, not `unittest`\\n/tmp/tmpr5cj0y2e.d(79):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpr5cj0y2e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // your code here\n    int i = 2;\n    int count = 0;\n    while(a != 1)\n\
    \    {\n        if(a % i == 0)\n        {\n            a /= i;\n            count++;\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    if(count\
    \ == 3)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6b3h8qwp.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmp6b3h8qwp.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6b3h8qwp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    if (a == 1)\n        return result;\n    if (a\
    \ == 2)\n        return true;\n    long b = a;\n    long c = 0;\n    long d =\
    \ 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n   \
    \ long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m =\
    \ 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n   \
    \ long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v =\
    \ 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n   \
    \ long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphzlokyla.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphzlokyla.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int count = 0;\n    for (int i = 2; i <= a; i++)\n    {\n        if (a %\
    \ i == 0)\n        {\n            count++;\n            a /= i;\n            i--;\n\
    \        }\n    }\n    return count == 3;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primeNumbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   for (int i = 0; i < primeNumbers.length; i++)\n    {\n        for (int j =\
    \ 0; j < primeNumbers.length; j++)\n        {\n            for (int k = 0; k <\
    \ primeNumbers.length; k++)\n            {\n                if (primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a)\n                {\n             \
    \       result = true;\n                }\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for\
    \ (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    long\
    \ n = a;\n    long i = 2;\n    while (n > 1)\n    {\n        if (is_prime(i) &&\
    \ n % i == 0)\n        {\n            n /= i;\n            i = 2;\n        }\n\
    \        else\n            i++;\n    }\n    return n == 1;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpixexsf6n.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpixexsf6n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 2;\n    long k = 2;\n    long temp = a;\n    bool\
    \ is_prime = true;\n    bool is_multiply_prime = false;\n    while (i < temp)\n\
    \    {\n        if (temp % i == 0)\n        {\n            temp = temp / i;\n\
    \            j = 2;\n            while (j < temp)\n            {\n           \
    \     if (temp % j == 0)\n                {\n                    temp = temp /\
    \ j;\n                    k = 2;\n                    while (k < temp)\n     \
    \               {\n                        if (temp % k == 0)\n              \
    \          {\n                            is_prime = false;\n                \
    \            break;\n                        }\n                        k++;\n\
    \                    }\n                    if (is_prime)\n                  \
    \  {\n                        is_multiply_prime = true;\n                    \
    \    break;\n                    }\n                }\n                j++;\n\
    \            }\n            if (is_multiply_prime)\n            {\n          \
    \      break;\n            }\n        }\n        i++;\n    }\n    return is_multiply_prime;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    bool isPrime = false;\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            isPrime = true;\n\
    \            break;\n        }\n    }\n    return isPrime;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdvy0i8c6.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpdvy0i8c6.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmpdvy0i8c6.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x96798554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a == 3)\
    \ return true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n \
    \   if (a == 11) return true;\n    if (a == 13) return true;\n    if (a == 17)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n\
    \    if (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37)\
    \ return true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n\
    \    if (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59)\
    \ return true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n\
    \    if (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79)\
    \ return true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n\
    \    if (a == 97) return true;\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3jzkcvi7.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427edd]\\n??:? void tmp3jzkcvi7.__unittest_L42_C1()\
    \ [0x427b2e]\\n??:? void tmp3jzkcvi7.__modtest() [0x427c5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa6d]\\n??:? runModuleUnitTests [0x42b9d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42832c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b3]\\n??:? _d_run_main [0x42821e]\\n??:? main [0x427c6f]\\\
    n??:? __libc_start_main [0x9d51d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int count = 0;\n    for (int i = 2; i <= a; i++)\n    {\n        if (a %\
    \ i == 0)\n        {\n            count++;\n            a /= i;\n            i--;\n\
    \        }\n    }\n    return count == 3;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1842q_gw.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp1842q_gw.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmp1842q_gw.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x6ea35554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a < 6) return false;\n\
    \    if (a == 6) return true;\n    if (a % 2 == 0)\n    {\n        if (is_prime(a\
    \ / 2)) return true;\n        if (is_prime(a / 3)) return true;\n        if (is_prime(a\
    \ / 5)) return true;\n    }\n    if (a % 3 == 0)\n    {\n        if (is_prime(a\
    \ / 3)) return true;\n        if (is_prime(a / 5)) return true;\n    }\n    if\
    \ (a % 5 == 0)\n    {\n        if (is_prime(a / 5)) return true;\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeesfdzrc.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpeesfdzrc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgezou4ml.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmpgezou4ml.__unittest_L24_C1()\
    \ [0x427acf]\\n??:? void tmpgezou4ml.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0xe4bd0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \        for (long i = 5; i * i <= n; i += 6)\n            if (n % i == 0 || n\
    \ % (i + 2) == 0)\n                return false;\n        return true;\n    }\n\
    \    if (a <= 1) return false;\n    if (a <= 3) return true;\n    if (a % 2 ==\
    \ 0 || a % 3 == 0) return false;\n    for (long i = 5; i * i <= a; i += 6)\n \
    \       if (a % i == 0 || a % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaf7ey7eq.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f7d]\\n??:? void tmpaf7ey7eq.__unittest_L32_C1()\
    \ [0x427bd2]\\n??:? void tmpaf7ey7eq.__modtest() [0x427d00]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430178]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab0d]\\n??:? runModuleUnitTests [0x42ba79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428353]\\n??:? _d_run_main [0x4282be]\\n??:? main [0x427d13]\\\
    n??:? __libc_start_main [0x9b5e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6) return false;\n    if (a % 2 == 0) {\n        if (a % 3 == 0)\
    \ return true;\n        else return false;\n    }\n    if (a % 3 == 0) {\n   \
    \     if (a % 5 == 0) return true;\n        else return false;\n    }\n    if\
    \ (a % 5 == 0) {\n        if (a % 7 == 0) return true;\n        else return false;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpchj2yca7.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpchj2yca7.__unittest_L29_C1()\
    \ [0x427b02]\\n??:? void tmpchj2yca7.__modtest() [0x427bf0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427c03]\\\
    n??:? __libc_start_main [0xf901554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt95pw1gg.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmpt95pw1gg.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpt95pw1gg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \        for (long i = 5; i * i <= n; i += 6)\n            if (n % i == 0 || n\
    \ % (i + 2) == 0)\n                return false;\n        return true;\n    }\n\
    \    if (a <= 1) return false;\n    if (a <= 3) return true;\n    if (a % 2 ==\
    \ 0 || a % 3 == 0) return false;\n    for (long i = 5; i * i <= a; i += 6)\n \
    \       if (a % i == 0 || a % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1ry5cuvt.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f7d]\\n??:? void tmp1ry5cuvt.__unittest_L32_C1()\
    \ [0x427bd2]\\n??:? void tmp1ry5cuvt.__modtest() [0x427d00]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430178]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab0d]\\n??:? runModuleUnitTests [0x42ba79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428353]\\n??:? _d_run_main [0x4282be]\\n??:? main [0x427d13]\\\
    n??:? __libc_start_main [0xb6cf8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // your code here\n    if(a == 1)\n        return false;\n    if(a == 2)\n\
    \        return true;\n    if(a % 2 == 0)\n        return false;\n    for(int\
    \ i = 3; i <= sqrt(a); i += 2)\n    {\n        if(a % i == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn75gv5ky.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpn75gv5ky.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2) \n    {\n     \
    \   if (a % i == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpccrjtzlu.d(17): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpccrjtzlu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n      \
    \  if (a % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi7vnj2ng.d(17): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpi7vnj2ng.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    while (i <= a)\n    {\n        if (a % i == 0)\n        {\n\
    \            a /= i;\n            if (a == 1)\n                return true;\n\
    \        }\n        else\n            i++;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp5krnizm.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e1d]\\n??:? void tmpp5krnizm.__unittest_L28_C1()\
    \ [0x427a72]\\n??:? void tmpp5krnizm.__modtest() [0x427ba0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ad]\\n??:? runModuleUnitTests [0x42b919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42826c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281f3]\\n??:? _d_run_main [0x42815e]\\n??:? main [0x427bb3]\\\
    n??:? __libc_start_main [0x36fd7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 2;\n    long k = 2;\n    long result = 0;\n   \
    \ while (i < a)\n    {\n        while (j < a)\n        {\n            while (k\
    \ < a)\n            {\n                result = i * j * k;\n                if\
    \ (result == a)\n                {\n                    return true;\n       \
    \         }\n                k++;\n            }\n            j++;\n        }\n\
    \        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate =\
    \ is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0rce03ru.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e45]\\n??:? void tmp0rce03ru.__unittest_L37_C1()\
    \ [0x427abb]\\n??:? void tmp0rce03ru.__modtest() [0x427bc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9d5]\\n??:? runModuleUnitTests [0x42b941]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428294]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42821b]\\n??:? _d_run_main [0x428186]\\n??:? main [0x427bdb]\\\
    n??:? __libc_start_main [0xbed3c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            result\
    \ = true;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyye_1_nm.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpyye_1_nm.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmpyye_1_nm.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x1c588554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    int i = 0;\n    while (a > 1)\n  \
    \  {\n        if (a % primes[i] == 0)\n        {\n            a /= primes[i];\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ i < 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnzcz4iii.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428235]\\n??:? void tmpnzcz4iii.__unittest_L29_C1()\
    \ [0x427e8a]\\n??:? void tmpnzcz4iii.__modtest() [0x427fb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867f]\\n??:? _d_run_main [0x4285ea]\\n??:? main [0x427fcb]\\\
    n??:? __libc_start_main [0x84a53554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    auto result = true;\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            a /= i;\n   \
    \     }\n    }\n    return a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfa3pbont.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpfa3pbont.__unittest_L25_C1()\
    \ [0x427e6e]\\n??:? void tmpfa3pbont.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x86699554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt57pavrc.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpt57pavrc.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmpt57pavrc.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x5bed3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a == 3)\
    \ return true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n \
    \   if (a == 11) return true;\n    if (a == 13) return true;\n    if (a == 17)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n\
    \    if (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37)\
    \ return true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n\
    \    if (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59)\
    \ return true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n\
    \    if (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79)\
    \ return true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n\
    \    if (a == 97) return true;\n    if (a == 6) return true;\n    if (a == 10)\
    \ return true;\n    if (a == 14) return true;\n    if (a == 15) return true;\n\
    \    if (a == 21) return true;\n    if (a == 22) return true;\n    if (a == 33)\
    \ return true;\n    if (a == 34) return true;\n    if (a == 35) return true;\n\
    \    if (a == 38) return true;\n    if (a == 39) return true;\n    if (a == 46)\
    \ return true;\n    if (a == 51) return true;\n    if (a == 55) return true;\n\
    \    if (a == 57) return true;\n    if (a == 62) return true;\n    if (a == 65)\
    \ return true;\n    if (a == 69) return true;\n    if (a == 74) return true;\n\
    \    if (a == 77) return true;\n    if (\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpws8b38u1.d(61): Error: expression expected, not `unittest`\\\
    n/tmp/tmpws8b38u1.d(62): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpws8b38u1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    else if (a == 6)\n        return true;\n\
    \    else\n    {\n        long b = a;\n        long c = a;\n        long d = a;\n\
    \        long e = a;\n        long f = a;\n        long g = a;\n        long h\
    \ = a;\n        long i = a;\n        long j = a;\n        long k = a;\n      \
    \  long l = a;\n        long m = a;\n        long n = a;\n        long o = a;\n\
    \        long p = a;\n        long q = a;\n        long r = a;\n        long s\
    \ = a;\n        long t = a;\n        long u = a;\n        long v = a;\n      \
    \  long w = a;\n        long x = a;\n        long y = a;\n        long z = a;\n\
    \        long aa = a;\n        long ab = a;\n        long ac = a;\n        long\
    \ ad = a;\n        long ae = a;\n        long af = a;\n        long ag = a;\n\
    \        long ah = a;\n        long ai = a;\n        long aj = a;\n        long\
    \ ak = a;\n        long al = a;\n        long am = a;\n        long an = a;\n\
    \        long ao = a;\n        long ap = a;\n        long aq = a;\n        long\
    \ ar = a;\n        long as = a;\n        long at = a;\n        long au = a;\n\
    \        long av = a;\n        long aw = a;\n        long ax = a;\n        long\
    \ ay = a;\n        long az = a;\n        long ba = a;\n        long bb = a;\n\
    \        long bc = a;\n        long bd = a;\n        long be = a;\n        long\
    \ bf = a;\n        long bg = a;\n        long bh = a;\n        long bi = a;\n\
    \        long bj = a;\n        long bk = a;\n        long bl = a;\n        long\
    \ bm = a;\n        long bn = a;\n        long bo = a;\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgrrzwuoi.d(86): Error: found `unittest` instead of statement\\\
    n/tmp/tmpgrrzwuoi.d(101): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrrzwuoi.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        for (long i = 2; i < n; i++)\n            if (n % i == 0)\n         \
    \       return false;\n        return true;\n    }\n    for (long i = 2; i < a;\
    \ i++)\n        if (is_prime(i) && a % i == 0)\n        {\n            long b\
    \ = a / i;\n            for (long j = 2; j < b; j++)\n                if (is_prime(j)\
    \ && b % j == 0)\n                {\n                    long c = b / j;\n   \
    \                 if (is_prime(c))\n                        return true;\n   \
    \             }\n        }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.math;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.array;\n    import std.conv;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.typecons;\n    import\
    \ std.array;\n    import std.conv;\n    import std.math;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.typecons;\n    import std.array;\n\
    \    import std.conv;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.typecons;\n    import std.array;\n    import\
    \ std.conv;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.array;\n    import std.conv;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.array;\n    import std.conv;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.typecons;\n    import\
    \ std.array;\n    import std.conv;\n    import std.math;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.typecons;\n    import std.array;\n\
    \    import std.conv;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.typecons;\n    import std.array;\n    import\
    \ std.conv;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.array;\n    import std.conv;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp07xtv_le.d(84): Error: `;` expected\\n/tmp/tmp07xtv_le.d(99):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp07xtv_le.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n\
    \    while(i < a)\n    {\n        while(j < a)\n        {\n            while(k\
    \ < a)\n            {\n                if(i * j * k == a)\n                {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n                k++;\n            }\n            j++;\n        }\n   \
    \     i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8q4d549_.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e45]\\n??:? void tmp8q4d549_.__unittest_L37_C1()\
    \ [0x427abb]\\n??:? void tmp8q4d549_.__modtest() [0x427bc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9d5]\\n??:? runModuleUnitTests [0x42b941]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428294]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42821b]\\n??:? _d_run_main [0x428186]\\n??:? main [0x427bdb]\\\
    n??:? __libc_start_main [0x82d76554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptizigueg.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmptizigueg.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmptizigueg.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xb0727554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \        for (long i = 5; i * i <= n; i += 6)\n            if (n % i == 0 || n\
    \ % (i + 2) == 0)\n                return false;\n        return true;\n    }\n\
    \    if (a <= 1) return false;\n    if (a <= 3) return true;\n    if (a % 2 ==\
    \ 0 || a % 3 == 0) return false;\n    for (long i = 5; i * i <= a; i += 6)\n \
    \       if (a % i == 0 || a % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp13ha5pq1.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f7d]\\n??:? void tmp13ha5pq1.__unittest_L32_C1()\
    \ [0x427bd2]\\n??:? void tmp13ha5pq1.__modtest() [0x427d00]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430178]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab0d]\\n??:? runModuleUnitTests [0x42ba79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428353]\\n??:? _d_run_main [0x4282be]\\n??:? main [0x427d13]\\\
    n??:? __libc_start_main [0xca0e7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a < 6) return false;\n\
    \    if (a % 2 == 0)\n    {\n        if (is_prime(a / 2)) return true;\n     \
    \   if (is_prime(a / 3)) return true;\n        if (is_prime(a / 5)) return true;\n\
    \    }\n    if (a % 3 == 0)\n    {\n        if (is_prime(a / 3)) return true;\n\
    \        if (is_prime(a / 5)) return true;\n    }\n    if (a % 5 == 0)\n    {\n\
    \        if (is_prime(a / 5)) return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgsghs9t0.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgsghs9t0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            a\
    \ /= prime;\n            if(a == 1)\n            {\n                result = true;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd1kyhm7n.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmpd1kyhm7n.__unittest_L30_C1()\
    \ [0x427e7a]\\n??:? void tmpd1kyhm7n.__modtest() [0x427fa8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c20f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b079]\\n??:? runModuleUnitTests [0x42bfe5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428674]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285fb]\\n??:? _d_run_main [0x428566]\\n??:? main [0x427fbb]\\\
    n??:? __libc_start_main [0x9f53f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    int i = 0;\n    while (a != 1)\n \
    \   {\n        if (a % primes[i] == 0)\n        {\n            a /= primes[i];\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ i < 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4qad8owc.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428235]\\n??:? void tmp4qad8owc.__unittest_L29_C1()\
    \ [0x427e8a]\\n??:? void tmp4qad8owc.__modtest() [0x427fb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867f]\\n??:? _d_run_main [0x4285ea]\\n??:? main [0x427fcb]\\\
    n??:? __libc_start_main [0xb75ec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = a;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6leo4qtz.d(84): Error: semicolon expected, not `unittest`\\n/tmp/tmp6leo4qtz.d(84):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6leo4qtz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \       if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a <= 1)\n        return false;\n    if (a == 2)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <=\
    \ sqrt(a); i += 2)\n        if (a % i == 0)\n            return is_prime(i) &&\
    \ is_prime(a / i);\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpghb6j0y9.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpghb6j0y9.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpghb6j0y9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps1en_dpm.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmps1en_dpm.__unittest_L24_C1()\
    \ [0x427acf]\\n??:? void tmps1en_dpm.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0x62342554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        foreach\
    \ (i; 2 .. n)\n        {\n            if (n % i == 0) return false;\n        }\n\
    \        return true;\n    }\n    foreach (i; 2 .. a)\n    {\n        if (is_prime(i)\
    \ && a % i == 0)\n        {\n            foreach (j; 2 .. a)\n            {\n\
    \                if (is_prime(j) && a % j == 0 && i != j)\n                {\n\
    \                    foreach (k; 2 .. a)\n                    {\n            \
    \            if (is_prime(k) && a % k == 0 && i != k && j != k)\n            \
    \            {\n                            return true;\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjtbbnotp.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427fad]\\n??:? void tmpjtbbnotp.__unittest_L46_C1()\
    \ [0x427c3e]\\n??:? void tmpjtbbnotp.__modtest() [0x427d2c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bcd3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab66]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab3d]\\n??:? runModuleUnitTests [0x42baa9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428383]\\n??:? _d_run_main [0x4282ee]\\n??:? main [0x427d3f]\\\
    n??:? __libc_start_main [0xd635f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        foreach\
    \ (i; 2 .. (int)sqrt(n))\n        {\n            if (n % i == 0) return false;\n\
    \        }\n        return true;\n    }\n    foreach (i; 2 .. a)\n    {\n    \
    \    if (is_prime(i) && a % i == 0)\n        {\n            long b = a / i;\n\
    \            foreach (j; 2 .. b)\n            {\n                if (is_prime(j)\
    \ && b % j == 0)\n                {\n                    long c = b / j;\n   \
    \                 if (is_prime(c))\n                    {\n                  \
    \      return true;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpky1_087d.d(19): Error: C style cast illegal, use `cast(int)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpky1_087d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long a_copy = a;\n    long i = 2;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpov8japax.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmpov8japax.d(84): Error: semicolon expected, not `{`\\n/tmp/tmpov8japax.d(98):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpov8japax.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    int[] factors = [];\n    int i = 0;\n\
    \    while (a > 1)\n    {\n        if (a % primes[i] == 0)\n        {\n      \
    \      a /= primes[i];\n            factors ~= primes[i];\n        }\n       \
    \ else\n        {\n            i++;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb =\
    \ 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n   \
    \ int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk =\
    \ 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n   \
    \ int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt =\
    \ 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n   \
    \ int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int ccc\
    \ = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg = 0;\n\
    \    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int\
    \ lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp\
    \ = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n\
    \    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi84_tn56.d(82): Error: no identifier for declarator `int`\\n/tmp/tmpi84_tn56.d(82):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpi84_tn56.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \       if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a < 2)\n        return false;\n    if (a == 2)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <=\
    \ sqrt(a); i += 2)\n        if (a % i == 0)\n            return is_prime(i) &&\
    \ is_prime(a / i);\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpecehhkwr.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpecehhkwr.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpecehhkwr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n) \n    {\n        if (n <= 1) \n            return false;\n\
    \        if (n == 2) \n            return true;\n        if (n % 2 == 0) \n  \
    \          return false;\n        for (long i = 3; i <= sqrt(n); i += 2) \n  \
    \          if (n % i == 0) \n                return false;\n        return true;\n\
    \    }\n    if (a <= 1) \n        return false;\n    if (a == 2) \n        return\
    \ true;\n    if (a % 2 == 0) \n        return false;\n    for (long i = 3; i <=\
    \ sqrt(a); i += 2) \n        if (a % i == 0 && is_prime(i) && is_prime(a / i))\
    \ \n            return true;\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3nmh_9lp.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp3nmh_9lp.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp3nmh_9lp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool isPrime(long n)\n    {\n        if (n <= 1) return false;\n        if\
    \ (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \        for (long i = 5; i * i <= n; i += 6)\n            if (n % i == 0 || n\
    \ % (i + 2) == 0)\n                return false;\n        return true;\n    }\n\
    \    if (a <= 1) return false;\n    if (a <= 3) return true;\n    if (a % 2 ==\
    \ 0 || a % 3 == 0) return false;\n    for (long i = 5; i * i <= a; i += 6)\n \
    \       if (a % i == 0 || a % (i + 2) == 0)\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpymrtn2fb.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f7d]\\n??:? void tmpymrtn2fb.__unittest_L32_C1()\
    \ [0x427bd2]\\n??:? void tmpymrtn2fb.__modtest() [0x427d00]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430178]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab0d]\\n??:? runModuleUnitTests [0x42ba79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428353]\\n??:? _d_run_main [0x4282be]\\n??:? main [0x427d13]\\\
    n??:? __libc_start_main [0x39b55554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for\
    \ (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    if\
    \ (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return\
    \ false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i\
    \ == 0)\n        {\n            if (is_prime(i) && is_prime(a / i))\n        \
    \        return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7rixdrc8.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp7rixdrc8.d(29): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7rixdrc8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int count = 0;\n    for (int i = 2; i <= a; i++)\n    {\n        if (a %\
    \ i == 0)\n        {\n            count++;\n            a /= i;\n            i--;\n\
    \        }\n    }\n    return count == 3;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphhi9vp88.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmphhi9vp88.__unittest_L24_C1()\
    \ [0x427e6e]\\n??:? void tmphhi9vp88.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x2fb0e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i;\n    int j;\n    int k;\n    int count = 0;\n    for (i = 2; i < a;\
    \ i++)\n    {\n        for (j = 2; j < a; j++)\n        {\n            for (k\
    \ = 2; k < a; k++)\n            {\n                if (i * j * k == a)\n     \
    \           {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    if (count == 1)\n    {\n        return true;\n    }\n \
    \   else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5d1vbta1.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmp5d1vbta1.__unittest_L40_C1()\
    \ [0x427acf]\\n??:? void tmp5d1vbta1.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0x92067554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb =\
    \ 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n   \
    \ int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk =\
    \ 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n   \
    \ int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt =\
    \ 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n   \
    \ int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int ccc\
    \ = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg = 0;\n\
    \    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int\
    \ lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp\
    \ = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n\
    \    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo4aqj0gg.d(82): Error: no identifier for declarator `int`\\n/tmp/tmpo4aqj0gg.d(82):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpo4aqj0gg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a < 2) return false;\n\
    \    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i == 0)\n        {\n  \
    \          if (is_prime(i) && is_prime(a / i)) return true;\n        }\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdh4zvl2t.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpdh4zvl2t.d(28): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdh4zvl2t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    foreach(prime; primes)\n    {\n        if(a % prime == 0)\n        {\n  \
    \          is_multiply_prime = true;\n            break;\n        }\n    }\n \
    \   return is_multiply_prime;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6hjhz2xi.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp6hjhz2xi.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmp6hjhz2xi.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xa036c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 2;\n    long k = 2;\n    long result = 0;\n   \
    \ while (i < a)\n    {\n        while (j < a)\n        {\n            while (k\
    \ < a)\n            {\n                result = i * j * k;\n                if\
    \ (result == a)\n                {\n                    return true;\n       \
    \         }\n                k++;\n            }\n            j++;\n        }\n\
    \        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate =\
    \ is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn0xjsrqh.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e45]\\n??:? void tmpn0xjsrqh.__unittest_L37_C1()\
    \ [0x427abb]\\n??:? void tmpn0xjsrqh.__modtest() [0x427bc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9d5]\\n??:? runModuleUnitTests [0x42b941]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428294]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42821b]\\n??:? _d_run_main [0x428186]\\n??:? main [0x427bdb]\\\
    n??:? __libc_start_main [0xfafa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            a /= i;\n   \
    \         if(a == 1)\n            {\n                result = true;\n        \
    \        break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqjgoo_lc.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmpqjgoo_lc.__unittest_L30_C1()\
    \ [0x427e7a]\\n??:? void tmpqjgoo_lc.__modtest() [0x427fa8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c20f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b079]\\n??:? runModuleUnitTests [0x42bfe5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428674]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285fb]\\n??:? _d_run_main [0x428566]\\n??:? main [0x427fbb]\\\
    n??:? __libc_start_main [0x453b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 3) return false;\n    if (a == 3) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 5 == 0) return\
    \ false;\n    if (a % 7 == 0) return false;\n    if (a % 11 == 0) return false;\n\
    \    if (a % 13 == 0) return false;\n    if (a % 17 == 0) return false;\n    if\
    \ (a % 19 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a %\
    \ 29 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 37 ==\
    \ 0) return false;\n    if (a % 41 == 0) return false;\n    if (a % 43 == 0) return\
    \ false;\n    if (a % 47 == 0) return false;\n    if (a % 53 == 0) return false;\n\
    \    if (a % 59 == 0) return false;\n    if (a % 61 == 0) return false;\n    if\
    \ (a % 67 == 0) return false;\n    if (a % 71 == 0) return false;\n    if (a %\
    \ 73 == 0) return false;\n    if (a % 79 == 0) return false;\n    if (a % 83 ==\
    \ 0) return false;\n    if (a % 89 == 0) return false;\n    if (a % 97 == 0) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsh74dlo8.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ff5]\\n??:? void tmpsh74dlo8.__unittest_L43_C1()\
    \ [0x427c67]\\n??:? void tmpsh74dlo8.__modtest() [0x427d74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bd1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42abae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fd41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fccd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab85]\\n??:? runModuleUnitTests [0x42baf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428444]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283cb]\\n??:? _d_run_main [0x428336]\\n??:? main [0x427d87]\\\
    n??:? __libc_start_main [0xce3a8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] prime_factors = [];\n \
    \   long i = 0;\n    while (a > 1)\n    {\n        if (a % primes[i] == 0)\n \
    \       {\n            prime_factors ~= primes[i];\n            a /= primes[i];\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    if\
    \ (prime_factors.length == 3)\n    {\n        return true;\n    }\n    else\n\
    \    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8od9hyck.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8od9hyck.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \       if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a < 2)\n        return false;\n    if (a == 2)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <=\
    \ sqrt(a); i += 2)\n        if (a % i == 0)\n            if (is_prime(i) && is_prime(a\
    \ / i))\n                return true;\n    return false;\n}\nunittest\n{\n   \
    \ alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxu1lyleu.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpxu1lyleu.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxu1lyleu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            result\
    \ = true;\n            a /= prime;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb7ykw2bc.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpb7ykw2bc.__unittest_L26_C1()\
    \ [0x427e72]\\n??:? void tmpb7ykw2bc.__modtest() [0x427fa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427fb3]\\\
    n??:? __libc_start_main [0xf7fde554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    int i = 0;\n    while (a > 1)\n  \
    \  {\n        if (a % primes[i] == 0)\n        {\n            a /= primes[i];\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ i == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt8gsglti.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428235]\\n??:? void tmpt8gsglti.__unittest_L29_C1()\
    \ [0x427eab]\\n??:? void tmpt8gsglti.__modtest() [0x427fb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b102]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430295]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430221]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d9]\\n??:? runModuleUnitTests [0x42c045]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42867f]\\n??:? _d_run_main [0x4285ea]\\n??:? main [0x427fcb]\\\
    n??:? __libc_start_main [0x4e358554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n\
    \    long temp = 0;\n    while (i < a)\n    {\n        while (j < a)\n       \
    \ {\n            while (k < a)\n            {\n                temp = i * j *\
    \ k;\n                if (temp == a)\n                {\n                    result\
    \ = true;\n                    break;\n                }\n                k++;\n\
    \            }\n            if (result)\n            {\n                break;\n\
    \            }\n            j++;\n        }\n        if (result)\n        {\n\
    \            break;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5almeumz.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e55]\\n??:? void tmp5almeumz.__unittest_L47_C1()\
    \ [0x427acb]\\n??:? void tmp5almeumz.__modtest() [0x427bd8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb7b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa0e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9e5]\\n??:? runModuleUnitTests [0x42b951]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42822b]\\n??:? _d_run_main [0x428196]\\n??:? main [0x427beb]\\\
    n??:? __libc_start_main [0x5643f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6) return false;\n    if (a % 2 == 0) return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0) return is_multiply_prime(a / 3);\n    if (a % 5 ==\
    \ 0) return is_multiply_prime(a / 5);\n    if (a % 7 == 0) return is_multiply_prime(a\
    \ / 7);\n    if (a % 11 == 0) return is_multiply_prime(a / 11);\n    if (a % 13\
    \ == 0) return is_multiply_prime(a / 13);\n    if (a % 17 == 0) return is_multiply_prime(a\
    \ / 17);\n    if (a % 19 == 0) return is_multiply_prime(a / 19);\n    if (a %\
    \ 23 == 0) return is_multiply_prime(a / 23);\n    if (a % 29 == 0) return is_multiply_prime(a\
    \ / 29);\n    if (a % 31 == 0) return is_multiply_prime(a / 31);\n    if (a %\
    \ 37 == 0) return is_multiply_prime(a / 37);\n    if (a % 41 == 0) return is_multiply_prime(a\
    \ / 41);\n    if (a % 43 == 0) return is_multiply_prime(a / 43);\n    if (a %\
    \ 47 == 0) return is_multiply_prime(a / 47);\n    if (a % 53 == 0) return is_multiply_prime(a\
    \ / 53);\n    if (a % 59 == 0) return is_multiply_prime(a / 59);\n    if (a %\
    \ 61 == 0) return is_multiply_prime(a / 61);\n    if (a % 67 == 0) return is_multiply_prime(a\
    \ / 67);\n    if (a % 71 == 0) return is_multiply_prime(a / 71);\n    if (a %\
    \ 73 == 0) return is_multiply_prime(a / 73);\n    if (a % 79 == 0) return is_multiply\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx_wcedf7.d(37): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpx_wcedf7.d(52): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpx_wcedf7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu3j8wcg3.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpu3j8wcg3.__unittest_L24_C1()\
    \ [0x427e6e]\\n??:? void tmpu3j8wcg3.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x95760554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm : all;\n    import std.math : isPrime;\n    import std.range\
    \ : iota;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzgwb9cjv.d(65): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzgwb9cjv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
