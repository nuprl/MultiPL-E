name: HumanEval_95_check_dict_case
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary, return\
  \ True if all keys are strings in lower \n    case or all keys are strings in upper\
  \ case, else return False.\n    The function should return False is the given dictionary\
  \ is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
  }) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\",\
  \ \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\"\
  , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
  Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n \
  \   check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
  \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n"
tests: "unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
  p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
  \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
  ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"36\"\
  , \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\":\
  \ \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
  : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
  \ == false);\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
