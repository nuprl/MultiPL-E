name: HumanEval_16_count_distinct_characters
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out how\
  \ many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
  \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
  \ string) \n"
tests: "unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
  \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
  ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
  Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
completions: ["{\n    long count = 0;\n    foreach(char c; string)\n    {\n      \
    \  if(c.isAlpha)\n        {\n            if(c.isUpper)\n            {\n      \
    \          c = c.toLower;\n            }\n            if(!c.isAlpha)\n       \
    \     {\n                continue;\n            }\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isLetter)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    return to!(long)(uniq(string.toLower()));\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ !in string.tolower())\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isLetter)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isLetter)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isUpper)\n        {\n            c = c.toLower;\n       \
    \ }\n        if(!c.isAlpha)\n        {\n            continue;\n        }\n   \
    \     if(!count)\n        {\n            count++;\n            continue;\n   \
    \     }\n        bool is_duplicate = false;\n        foreach(char c2; string[0..count])\n\
    \        {\n            if(c == c2)\n            {\n                is_duplicate\
    \ = true;\n                break;\n            }\n        }\n        if(!is_duplicate)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return set(string.toLowerCase).length;\n}", "{\n    long count = 0;\n   \
    \ foreach(char c; string)\n    {\n        if(c.isAlpha)\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c >= 'a' && c <= 'z')\n      \
    \  {\n            count++;\n        }\n        else if(c >= 'A' && c <= 'Z')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return set(string.toLowerCase).length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    return string.toLower().chars.distinct.length;\n}", "{\n    return\
    \ to!string(string.toLower()).unique.length;\n}", "{\n    long count = 0;\n  \
    \  foreach(char c; string)\n    {\n        if(c.tolower() == c)\n        {\n \
    \           count++;\n        }\n    }\n    return count;\n}", "{\n    auto result\
    \ = new Set!char;\n    foreach(c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.tolower() !in string.tolower())\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters2(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters3(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters4(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n   ", "{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(!c.isLetter)\n  \
    \          continue;\n        if(c.isUpper)\n            c = c.toLower;\n    \
    \    if(!string.contains(c))\n            count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.length;\n    //return string.length;\n    //return string.length;\n\
    \    //return string.", "{\n    return set(string.toLower).length;\n}", "{\n \
    \   return to!(long)(std.algorithm.uniq(string.toLower()).length);\n}", "{\n \
    \   long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ !in count)\n        {\n            count ~= c.tolower();\n        }\n    }\n\
    \    return count.length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return set(string.toLowerCase).length;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            count++;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(!count)\n        {\n            count++;\n        }\n     \
    \   else\n        {\n            bool found = false;\n            foreach(char\
    \ c2; string[0..$-1])\n            {\n                if(c == c2)\n          \
    \      {\n                    found = true;\n                    break;\n    \
    \            }\n            }\n            if(!found)\n            {\n       \
    \         count++;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n   \
    \ >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string) \n    {\n    \
    \    if(c.isLetter) \n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string) \n    {\n    \
    \    if(c.isLetter) \n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string) \n    {\n    \
    \    if(c.isLetter) \n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(",
  "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \        {\n            count++;\n        }\n        else if(c.isLower)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}", "{\n  \
    \  long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a'\
    \ && c <= 'z')\n        {\n            count++;\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    return to!string(string.toLower()).length;\n}", "{\n\
    \    return set(string.toLowerCase).length;\n}", "{\n    long count = 0;\n   \
    \ foreach(char c; string)\n    {\n        if(c.tolower() !in count)\n        {\n\
    \            count ~= c.tolower();\n        }\n    }\n    return count.length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \        {\n            count++;\n        }\n        else if(c.isLower)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}", "{\n  \
    \  long count = 0;\n    foreach(char c; string)\n    {\n        if(!c.isAlpha)\n\
    \            continue;\n        if(c.isUpper)\n            c = c.toLower;\n  \
    \      if(!c.isAlpha)\n            continue;\n        if(!string.indexOf(c))\n\
    \            count++;\n    }\n    return count;\n}", "{\n    return std.algorithm.uniq(string.toLower()).length;\n\
    }", "{\n    return set(string.toLower()).length;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            count++;\n        }\n        else if(c >= 'A' && c <=\
    \ 'Z')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ in count)\n            continue;\n        count++;\n    }\n    return count;\n\
    }", "{\n    return to!string(string.toLower()).length;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    return\
    \ set(string.toLower).length;\n}", "{\n    long count = 0;\n    foreach(char c;\
    \ string)\n    {\n        if(c.tolower() in count)\n            continue;\n  \
    \      else\n            count++;\n    }\n    return count;\n}", "{\n    return\
    \ to!string(string.toLower()).length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n   \
    \ >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLowerCase).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLowerCase).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLowerCase).length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLowerCase).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct", "{\n    return to!(long)(toSet(string.toLower()).length);\n\
    }", "{\n    return set(string.toLowerCase).length;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    return to!string(to!char[])(string).toLower().unique.length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ in count)\n            continue;\n        count++;\n    }\n    return count;\n\
    }", "{\n    return to!string(string.toLower()).unique.length;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}", "{\n  \
    \  long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLower)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a'\
    \ && c <= 'z')\n        {\n            count++;\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n  \
    \  {\n        if(c.tolower() in count)\n            continue;\n        count++;\n\
    \    }\n    return count;\n}", "{\n    return to!(long)(uniq(string.toLower()));\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            count++;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.tolower() in count)\n            continue;\n        count++;\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c >= 'a' && c <= 'z')\n        {\n            count++;\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.tolower() !in string.tolower())\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    return\
    \ string.toLower().length;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isLetter)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char; string)\n\
    \    {\n        if(count == 0)\n        {\n            count++;\n        }\n \
    \       else\n        {\n            bool found = false;\n            foreach(char2;\
    \ string[0..count])\n            {\n                if(char == char2)\n      \
    \          {\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if(!found)\n            {\n   \
    \             count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    return set(string.toLowerCase).length;\n}", "{\n    return std.algorithm.uniq(string.toLower()).length;\n\
    }", "{\n    return set(string.toLowerCase).length;\n}", "{\n    return std.algorithm.uniq(string.toLower()).length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ !in string.tolower())\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}", "{\n    return to!string(string.toLower()).unique().length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n   \
    \ >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters2(string\
    \ string) \n{\n    return to!string(string.toLower()).unique().length;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters3(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters4(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters5(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters6(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n", "{\n    return to!string(string.toLower()).unique().length;\n\
    }", "{\n    return to!string(string.toLower()).unique().length;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_2(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_3(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_4(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_5(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters_6(string string) \n{\n    return\
    \ to!string(string.toLower()).unique().", "{\n    long result = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isAlpha)\n        {\n            result += 1;\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters_2(string\
    \ string) \n{\n    long result = 0;\n    foreach(char c; string)\n    {\n    \
    \    if(c.isAlpha)\n        {\n            result += 1;\n        }\n    }\n  \
    \  return result;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters_3(string\
    \ string) \n{\n    long result = 0;\n    foreach(char c; string)\n    {\n    \
    \    if(c.isAlpha)\n        {\n            result += 1;\n        }\n    }\n  \
    \  return result;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters_4(string\
    \ string) \n{\n    long result = 0;\n    foreach(char c; string)\n    {\n    \
    \    if(c.isAlpha)\n        {\n            result += 1;\n        }\n    }\n  \
    \  return result;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_",
  "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \        {\n            count++;\n        }\n        else if(c.isLower)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}", "{\n  \
    \  return distinct(string.toLower()).length;\n}", "{\n    long count = 0;\n  \
    \  foreach(char c; string)\n    {\n        if(c.tolower() == c)\n        {\n \
    \           count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper) count++;\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isLetter)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}", "{\n\tlong count = 0;\n\tforeach(char c; string)\n\
    \t{\n\t\tif(c.isLetter)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
  "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c == ' ')\n\
    \            continue;\n        if(c >= 'A' && c <= 'Z')\n            c = tolower(c);\n\
    \        if(count == 0)\n        {\n            count++;\n            continue;\n\
    \        }\n        bool found = false;\n        foreach(char c2; string)\n  \
    \      {\n            if(c2 == ' ')\n                continue;\n            if(c2\
    \ >= 'A' && c2 <= 'Z')\n                c2 = tolower(c2);\n            if(c ==\
    \ c2)\n            {\n                found = true;\n                break;\n\
    \            }\n        }\n        if(!found)\n            count++;\n    }\n \
    \   return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isUpper)\n        {\n            count++;\n        }\n  \
    \      else if(c.isLower)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isAlpha)\n        {\n            count++;\n        }\n  \
    \  }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\
    \ \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            count++;\n\
    \        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isUpper)\n        {\n            c = c.toLower;\n\
    \        }\n        if(c.isLower)\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    auto char_set = set!char();\n    foreach(char\
    \ c; string)\n    {\n        char_set.insert(c);\n    }\n    return char_set.length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     foreach(char c2; string)\n            {\n                if(c == c2)\n \
    \               {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n           \
    \ count++;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}", "{\n \
    \   return to!string(string.toLowerCase).distinct.length;\n}", "{\n    return\
    \ to!string(string.toLower()).length;\n}", "{\n    long result = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isLetter)\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n        {\n\
    \            count++;\n        }\n        else if(c.isLower)\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    return set(string.toLowerCase()).length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     bool found = false;\n            foreach(char d; string[0..count])\n   \
    \         {\n                if(c == d)\n                {\n                 \
    \   found = true;\n                    break;\n                }\n           \
    \ }\n            if(!found)\n            {\n                count++;\n       \
    \     }\n        }\n    }\n    return count;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    return set(string.toLower()).length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower()).length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLower()).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower()).length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLower()).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    return\
    \ set(string.toLower()).length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct",
  "{\n    return string.toLower().chars.uniq.length;\n}", "{\n    return to!string(string.toLower()).unique.length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ in count)\n            continue;\n        count++;\n    }\n    return count;\n\
    }", "{\n    return to!(long)(toSet(string.toLower()).length);\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}", "{\n \
    \   long count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     bool found = false;\n            foreach(char c2; string[0..$-1])\n    \
    \        {\n                if(c == c2)\n                {\n                 \
    \   found = true;\n                    break;\n                }\n           \
    \ }\n            if(!found)\n            {\n                count++;\n       \
    \     }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n  \
    \  foreach(char c; string)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n\
    \            count++;\n        }\n        else if(c >= 'A' && c <= 'Z')\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}", "{\n  \
    \  return string.toLower().toSet().length;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n           \
    \ count++;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    return\
    \ set(string.toLowerCase).length;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isUpper)\n        {\n            c = c.toLower;\n\
    \        }\n        if(!c.isAlpha)\n        {\n            continue;\n       \
    \ }\n        if(!c.isLower)\n        {\n            continue;\n        }\n   \
    \     count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.tolower() !in count)\n        {\n          \
    \  count ~= c.tolower();\n        }\n    }\n    return count.length;\n}", "{\n\
    \    return to!string(string.toLower()).byChunk(1).array.distinct.length;\n}",
  "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a'\
    \ && c <= 'z')\n        {\n            count++;\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    return distinct(string.toLowerCase).length;\n}",
  "{\n    return string.toLower().chars.distinct.length;\n}", "{\n    long count =\
    \ 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n \
    \           continue;\n        count++;\n    }\n    return count;\n}", "{\n  \
    \  return to!string(string.toLower()).length;\n}", "{\n    long count = 0;\n \
    \   foreach(char c; string)\n    {\n        if(c.isUpper)\n        {\n       \
    \     c = c.toLower;\n        }\n        if(!count.counts!(c))\n        {\n  \
    \          count[c] = 1;\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    return to!(long)(std.algorithm.uniq(string.toLower()).length);\n}",
  "{\n    long count = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char; string)\n    {\n        if(!count)\n \
    \       {\n            count++;\n        }\n        else\n        {\n        \
    \    bool found = false;\n            foreach(char2; string[0..$-1])\n       \
    \     {\n                if(char == char2)\n                {\n              \
    \      found = true;\n                    break;\n                }\n        \
    \    }\n            if(!found)\n            {\n                count++;\n    \
    \        }\n        }\n    }\n    return count;\n}", "{\n    return to!(long)(std.algorithm.uniq(string.toLower()).length);\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return to!string(string.toLower()).length;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(!count)\n        {\n         \
    \   count++;\n        }\n        else\n        {\n            bool found = false;\n\
    \            foreach(char c2; string[0..count])\n            {\n             \
    \   if(c == c2)\n                {\n                    found = true;\n      \
    \              break;\n                }\n            }\n            if(!found)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n \
    \   {\n        if (c >= 'a' && c <= 'z')\n        {\n            count++;\n  \
    \      }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n           \
    \ count++;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    auto result\
    \ = set!char();\n    foreach(char c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    auto result = set!char();\n    foreach(char c; string)\n  \
    \  {\n        result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    auto\
    \ result = set!char();\n    foreach(char c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    auto result = set!char();\n    foreach(char c; string)\n  \
    \  {\n        result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    auto\
    \ result = set!char();\n    foreach(char c; string)\n    {\n        result.insert(c);",
  "{\n    return set(string.toLowerCase).length;\n}", "{\n    long count = 0;\n  \
    \  foreach(char c; string)\n    {\n        if(c.isUpper)\n        {\n        \
    \    c = c.toLower;\n        }\n        if(!c.isAlpha)\n        {\n          \
    \  continue;\n        }\n        if(!count)\n        {\n            count = 1;\n\
    \            continue;\n        }\n        foreach(char c2; string[0..$-1])\n\
    \        {\n            if(c2.isUpper)\n            {\n                c2 = c2.toLower;\n\
    \            }\n            if(c2 == c)\n            {\n                break;\n\
    \            }\n            if(c2 == string[$-2])\n            {\n           \
    \     count++;\n            }\n        }\n    }\n    return count;\n}", "{\n \
    \   return set(string.toLowerCase).length;\n}", "{\n    return to!(long)(map!(toLower)(string.dup).sort.uniq.length);\n\
    }", "{\n    return to!string(string.toLower()).unique.length;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n    \
    \    {\n            count += 1;\n        }\n        else if(c.isLower)\n     \
    \   {\n            count += 1;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return to!(long)(uniq(string.toLower()));\n}", "{\n    return to!string(string.toLower()).byChunk(1).array.distinct.length;\n\
    }", "{\n    return to!(long)(std.algorithm.uniq(string.toLower()).length);\n}",
  "{\n    return to!string(string.toLower()).unique().length;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}", "{\n \
    \   long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return to!(long)(string.toUpper().unique());\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    return to!(long)(std.algorithm.uniq(string.toLower()).length);\n\
    }", "{\n    return set(string.toLowerCase).length;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter) \n       \
    \ {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}", "{\n  \
    \  auto result = set!char();\n    foreach(char c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isUpper)\n        {\n            count += 1;\n\
    \        }\n        else if(c.isLower)\n        {\n            count += 1;\n \
    \       }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isLetter)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    return string.toLower().toSet().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            count++;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isLetter)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}", "{\n    return to!string(string.toLower()).distinct.length;\n\
    }", "{\n    return to!string(string.toLower()).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters2(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters3(string\
    \ string) \n{\n    return to!string(string.toLower()).length;\n}\n/*\n Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters4(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters5(string\
    \ string) \n{\n    return to!string(string.toLower()).length;\n}\n/*\n Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters6(string string) \n{\n    return\
    \ to!string(string.toLower()).length;\n}\n/*\n Given a string, find out how many\
    \ distinct characters", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isAlpha)\n        {\n            count++;\n        }\n  \
    \  }\n    return count;\n}", "{\n    long result = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isLetter)\n        {\n            result++;\n        }\n\
    \    }\n    return result;\n}", "{\n    return string.toLower().toSet().length;\n\
    }", "{\n    return string.toLower().toSet().length;\n}", "{\n    long count =\
    \ 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in count)\n\
    \        {\n            count ~= c.tolower();\n        }\n    }\n    return count.length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n   \
    \ >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters2(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string)\n    {\n     \
    \   if(c.tolower() !in count)\n        {\n            count ~= c.tolower();\n\
    \        }\n    }\n    return count.length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters3(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in count)\n\
    \        {\n            count ~= c.tolower();\n        }\n    }\n    return count.length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n   \
    \ >>> count_distinct_characters('Jerry')\n    4\n    \n*/\nlong count_distinct_characters4(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string)\n    {\n     \
    \   if(c.tolower() !in count)\n        {\n            count ~= c.tolower();\n\
    \        }\n    }\n    return count.length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n        {\n\
    \            c = c.toLower;\n        }\n        if(!count.counts.contains(c))\n\
    \        {\n            count.counts[c] = 1;\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isLetter)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isAlpha)\n        {\n            count++;\n        }\n  \
    \  }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c >= 'a' && c <= 'z')\n        {\n            count++;\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isAlpha)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    return set(string.toLower()).length;\n\
    }", "{\n    return set(string.toLowerCase).length;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     foreach(char d; string[0..count])\n            {\n                if(c ==\
    \ d)\n                {\n                    break;\n                }\n     \
    \           else if(d == string[count-1])\n                {\n               \
    \     count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(char c; string) \n    {\n \
    \       if (c.tolower() in count) \n        {\n            count[c.tolower()]++;\n\
    \        } \n        else \n        {\n            count[c.tolower()] = 1;\n \
    \       }\n    }\n    return count.length;\n}", "{\n    return distinct(string.toLower()).length;\n\
    }", "{\n    return set(string.toLowerCase()).length;\n}", "{\n    return set(string.toLower()).length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \n*/\nlong count_distinct_characters(string string) \n{\n   ", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ in count)\n            continue;\n        count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char ch; string)\n    {\n        if(!ch.isAlpha)\n\
    \            continue;\n        if(!count)\n            count++;\n        else\n\
    \        {\n            bool found = false;\n            foreach(char c; string[0..$-1])\n\
    \            {\n                if(ch.tolower == c.tolower)\n                {\n\
    \                    found = true;\n                    break;\n             \
    \   }\n            }\n            if(!found)\n                count++;\n     \
    \   }\n    }\n    return count;\n}", "{\n    return to!(long)(string.toUpper().toSet().length);\n\
    }", "{\n    auto result = new HashSet!char;\n    foreach(c; string)\n    {\n \
    \       result.insert(c);\n    }\n    return result.length;\n}", "{\n    return\
    \ to!(long)(uniq(string.toLower()));\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.tolower() in string)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
