name: HumanEval_41_car_race_collision
language: humaneval_to_dlang.py
prompt: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight infinitely\
  \ long line.\n    n cars are driving left to right;  simultaneously, a different\
  \ set of n cars\n    are driving right to left.   The two sets of cars start out\
  \ being very far from\n    each other.  All cars move in the same speed.  Two cars\
  \ are said to collide\n    when a car that's moving left to right hits a car that's\
  \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
  \ as a result, they continue moving\n    in their trajectory as if they did not\
  \ collide.\n\n    This function outputs the number of such collisions.\n    \n*/\n\
  long car_race_collision(long n) \n"
tests: "unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
  \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
  \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
  \ main(){}"
completions: ["{\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n\
    \    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n\
    \    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n\
    \    long z;\n    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long\
    \ ae;\n    long af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n\
    \    long ak;\n    long al;\n    long am;\n    long an;\n    long ao;\n    long\
    \ ap;\n    long aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n\
    \    long av;\n    long aw;\n    long ax;\n    long ay;\n    long az;\n    long\
    \ ba;\n    long bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n\
    \    long bg;\n    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long\
    \ bl;\n    long bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n\
    \    long br;\n    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long\
    \ bw;\n    long bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n\
    \    long cc;\n    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long\
    \ ch;\n    long ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n\
    \    long cn;\n    long co;\n    long cp;\n    long cq;\n    long cr;\n    long\
    \ cs;\n    long ct;\n    long cu;\n    long cv;\n    long cw;\n    long cx;\n\
    \    long cy;\n   ", "{\n    long i, j, count = 0;\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j)\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long i, j, k, l, m, o, p, q, r, s, t, u, v, w,\
    \ x, y, z;\n    long a, b, c, d, e, f, g, h;\n    long result = 0;\n    for (i\
    \ = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n      \
    \      for (k = 0; k < n; k++)\n            {\n                for (l = 0; l <\
    \ n; l++)\n                {\n                    for (m = 0; m < n; m++)\n  \
    \                  {\n                        for (o = 0; o < n; o++)\n      \
    \                  {\n                            for (p = 0; p < n; p++)\n  \
    \                          {\n                                for (q = 0; q <\
    \ n; q++)\n                                {\n                               \
    \     for (r = 0; r < n; r++)\n                                    {\n       \
    \                                 for (s = 0; s < n; s++)\n                  \
    \                      {\n                                            for (t =\
    \ 0; t < n; t++)\n                                            {\n            \
    \                                    for (u = 0; u < n; u++)\n               \
    \                                 {\n                                        \
    \            for (v = 0; v < n; v++)\n                                       \
    \             {\n                                                        for (w\
    \ = 0; w < n; w++)\n                                                        {\n\
    \                                                            for (x = 0; x < n;\
    \ x++)\n                                                            {\n      \
    \                                                          for (y = 0; y < n;\
    \ y++)\n                                                                {\n  \
    \                                                                  for (z = 0;\
    \ z < n; z++)\n                                                              \
    \      {\n                                                                   \
    \     for (a = 0; a < n; a++)\n                                              \
    \                          {\n                                               \
    \                             for (b = 0; b < n; b++)\n                      \
    \                                                      {\n                   \
    \                                                             for (c = 0; c <\
    \ n; c++)\n                                                                  \
    \              {\n                                                           \
    \                         for (d = 0; d < n; d++)\n                          \
    \                                                          {\n               \
    \                                                                         for\
    \ (e = 0; e < n; e++)", "{\n    long count = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = 0; j < n; j++) {\n            if (i < j) {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long collisions = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long\
    \ mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr =\
    \ 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n\
    \    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long\
    \ aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long\
    \ eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long\
    \ iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long\
    \ mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long\
    \ rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long\
    \ vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long",
  "{\n    long num_collisions = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long\
    \ dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh =\
    \ 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n\
    \    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n \
    \   long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n \
    \   long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n \
    \   long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n    long ooo = 0;\n \
    \   long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n \
    \   long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;", "{\n\
    \    long i, j, k;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) {\n        left[i] = i;\n\
    \        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            if (left[i] > right[j]) {\n         \
    \       count++;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j\
    \ = 0; j < n; j++) {\n            if (i < j) {\n                result += 1;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    while (i < n) \n    {\n        j =\
    \ 0;\n        while (j < n) \n        {\n            if (i == j) \n          \
    \  {\n                j = j + 1;\n                continue;\n            }\n \
    \           if (i > j) \n            {\n                count = count + 1;\n \
    \           }\n            j = j + 1;\n        }\n        i = i + 1;\n    }\n\
    \    return count;\n}", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t, u, v,\
    \ w, x, y, z;\n    long aa, bb, cc, dd, ee, ff, gg, hh, ii, jj, kk, ll, mm, nn,\
    \ oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy, zz;\n    long aaa, bbb, ccc, ddd,\
    \ eee, fff, ggg, hhh, iii, jjj, kkk, lll, mmm, nnn, ooo, ppp, qqq, rrr, sss, ttt,\
    \ uuu, vvv, www, xxx, yyy, zzz;\n    long aaaa, bbbb, cccc, dddd, eeee, ffff,\
    \ gggg, hhhh, iiii, jjjj, kkkk, llll, mmmm, nnnn, oooo, pppp, qqqq, rrrr, ssss,\
    \ tttt, uuuu, vvvv, wwww, xxxx, yyyy, zzzz;\n    long aaaaa, bbbbb, ccccc, ddddd,\
    \ eeeee, fffff, ggggg, hhhhh, iiiii, jjjjj, kkkkk, lllll, mmmmm, nnnnn, ooooo,\
    \ ppppp, qqqqq, rrrrr, sssss, ttttt, uuuuu, vvvvv, wwwww, xxxxx, yyyyy, zzzzz;\n\
    \    long aaaaaa, bbbbbb, cccccc, dddddd, eeeeee, ffffff, gggggg, hhhhhh, iiiiii,\
    \ jjjjjj, kkkkkk, llllll, mmmmmm, nnnnnn, oooooo, pppppp, qqqqqq, rrrrrr, ssssss,\
    \ tttttt, uuuuuu, vvvvvv, wwwwww, xxxxxx, yyyyyy, zzzzzz;\n    long", "{\n   \
    \ long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n \
    \   long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n\
    \    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n\
    \    long aa;\n    long bb;\n    long cc;\n    long dd;\n    long ee;\n    long\
    \ ff;\n    long gg;\n    long hh;\n    long ii;\n    long jj;\n    long kk;\n\
    \    long ll;\n    long mm;\n    long nn;\n    long oo;\n    long pp;\n    long\
    \ qq;\n    long rr;\n    long ss;\n    long tt;\n    long uu;\n    long vv;\n\
    \    long ww;\n    long xx;\n    long yy;\n    long zz;\n    long aaa;\n    long\
    \ bbb;\n    long ccc;\n    long ddd;\n    long eee;\n    long fff;\n    long ggg;\n\
    \    long hhh;\n    long iii;\n    long jjj;\n    long kkk;\n    long lll;\n \
    \   long mmm;\n    long nnn;\n    long ooo;\n    long ppp;\n    long qqq;\n  \
    \  long rrr;\n    long sss;\n    long ttt;\n    long uuu;\n    long vvv;\n   \
    \ long www;\n    long xxx;\n    long yyy;\n    long zzz;\n    long aaaa;\n   \
    \ long bbbb;\n    long cccc;\n    long dddd;\n    long eeee;\n    long ffff;\n\
    \    long gggg;\n    long hhhh;\n    long iiii;\n    long jjjj;\n    long kkkk;\n\
    \    long llll;\n    long mmmm;\n    long nnnn;\n    long oooo;\n    long pppp;\n\
    \    long qqqq;\n    long rrrr;", "{\n    long i;\n    long j;\n    long k;\n\
    \    long count;\n    long[] left;\n    long[] right;\n    long[] left_sorted;\n\
    \    long[] right_sorted;\n    long[] left_sorted_index;\n    long[] right_sorted_index;\n\
    \    long[] left_sorted_index_sorted;\n    long[] right_sorted_index_sorted;\n\
    \    long[] left_sorted_index_sorted_index;\n    long[] right_sorted_index_sorted_index;\n\
    \    long[] left_sorted_index_sorted_index_sorted;\n    long[] right_sorted_index_sorted_index_sorted;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index;\n    long[] right_sorted_index_sorted_index_sorted_index;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index_sorted;\n    long[] right_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index_sorted_index;\n    long[]\
    \ right_sorted_index_sorted_index_sorted_index_sorted_index;\n    long[] left_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_sorted_index", "{\n    long i, j, k, l, m, o, p, q, r, s, t,\
    \ u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n    long result;\n    long\
    \ left_to_right[n];\n    long right_to_left[n];\n    long left_to_right_sorted[n];\n\
    \    long right_to_left_sorted[n];\n    long left_to_right_sorted_index[n];\n\
    \    long right_to_left_sorted_index[n];\n    long left_to_right_sorted_index_sorted[n];\n\
    \    long right_to_left_sorted_index_sorted[n];\n    long left_to_right_sorted_index_sorted_index[n];\n\
    \    long right_to_left_sorted_index_sorted_index[n];\n    long left_to_right_sorted_index_sorted_index_sorted[n];\n\
    \    long right_to_left_sorted_index_sorted_index_sorted[n];\n    long left_to_right_sorted_index_sorted_index_sorted_index[n];\n\
    \    long right_to_left_sorted_index_sorted_index_sorted_index[n];\n    long left_to_right_sorted_index_sorted_index_sorted_index_sorted[n];\n\
    \    long right_to_left_sorted_index_sorted_index_sorted_index_sorted[n];\n  \
    \  long left_to_right_sorted_index_sorted_index_sorted_index_sorted_index[n];\n\
    \    long right_to_left_sorted_index_sorted_index_sorted_index_sorted_index[n];\n\
    \    long left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted[n];\n\
    \    long right_to_left_sorted_index_sorted_index_sorted_index_sorted_index_sorted[n",
  "{\n    long i, j, k;\n    long collisions = 0;\n    double[] left_to_right_positions\
    \ = new double[n];\n    double[] right_to_left_positions = new double[n];\n  \
    \  double[] left_to_right_speeds = new double[n];\n    double[] right_to_left_speeds\
    \ = new double[n];\n    double[] left_to_right_times = new double[n];\n    double[]\
    \ right_to_left_times = new double[n];\n    double[] left_to_right_distances =\
    \ new double[n];\n    double[] right_to_left_distances = new double[n];\n    double[]\
    \ left_to_right_distances_to_collision = new double[n];\n    double[] right_to_left_distances_to_collision\
    \ = new double[n];\n    double[] left_to_right_times_to_collision = new double[n];\n\
    \    double[] right_to_left_times_to_collision = new double[n];\n    double[]\
    \ left_to_right_collision_positions = new double[n];\n    double[] right_to_left_collision_positions\
    \ = new double[n];\n    double[] left_to_right_collision_speeds = new double[n];\n\
    \    double[] right_to_left_collision_speeds = new double[n];\n    double[] left_to_right_collision_times\
    \ = new double[n];\n    double[] right_to_left_collision_times = new double[n];\n\
    \    double[] left_to_right_collision_distances = new double[n];\n    double[]\
    \ right_to_left_collision_distances = new double[n];\n    double[] left_to_right_collision_distances_to_collision\
    \ = new double[n];\n    double[] right_to_left_collision_distances_to_collision\
    \ = new double[n];\n    double[] left_to_right_collision_times_to_collision =\
    \ new double[n];\n    double[] right_to_left_collision_times_to_collision", "{\n\
    \    long count = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long\
    \ j = 0; j < n; j++) \n        {\n            if (i < j) \n            {\n   \
    \             count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n  \
    \  long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n\
    \    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long\
    \ ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am =\
    \ 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n\
    \    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long\
    \ av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az =\
    \ 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n\
    \    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long\
    \ bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm =\
    \ 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n\
    \    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long\
    \ bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz",
  "{\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while (i < n) {\n\
    \        while (j < n) {\n            if (i == j) {\n                j++;\n  \
    \              continue;\n            }\n            if (i > j) {\n          \
    \      count++;\n            }\n            j++;\n        }\n        i++;\n  \
    \  }\n    return count;\n}", "{\n    long i, j, k;\n    long count = 0;\n    long[]\
    \ a = new long[n];\n    long[] b = new long[n];\n    for (i = 0; i < n; i++) {\n\
    \        a[i] = i;\n        b[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (a[i] == b[j]) {\n    \
    \            count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0;\
    \ j < n; j++) {\n            if (i < j) {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n   \
    \ long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m =\
    \ 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n   \
    \ long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w =\
    \ 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n  \
    \  long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long\
    \ ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj =\
    \ 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n\
    \    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long\
    \ tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx =\
    \ 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n\
    \    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n\
    \    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n\
    \    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n\
    \    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n\
    \    long xxx = 0;\n    long yyy = 0;\n    long", "{\n    long collisions = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long\
    \ ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj =\
    \ 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n\
    \    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long\
    \ tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx =\
    \ 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n\
    \    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n\
    \    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n\
    \    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n\
    \    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n\
    \    long xxx = 0;\n    long yyy = 0;\n    long", "{\n    return n * (n - 1) /\
    \ 2;\n}", "{\n    long i, j, k;\n    double x, y, z;\n    long collision = 0;\n\
    \    for (i = 0; i < n; i++) {\n        x = random();\n        for (j = 0; j <\
    \ n; j++) {\n            y = random();\n            if (x > y) {\n           \
    \     for (k = 0; k < n; k++) {\n                    z = random();\n         \
    \           if (y > z) {\n                        collision++;\n             \
    \       }\n                }\n            }\n        }\n    }\n    return collision;\n\
    }", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long\
    \ mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq =\
    \ 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n\
    \    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long\
    \ zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd\
    \ = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh\
    \ = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll\
    \ = 0;\n    long mmm = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp\
    \ = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt\
    \ = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long", "{\n\
    \    long i = 0;\n    long j = 0;\n    long count = 0;\n    long[] left = new\
    \ long[n];\n    long[] right = new long[n];\n    for (i = 0; i < n; i++) {\n \
    \       left[i] = i;\n        right[i] = n - i - 1;\n    }\n    for (i = 0; i\
    \ < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (left[i] == right[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long\
    \ aa, bb, cc, dd, ee, ff, gg, hh, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss,\
    \ tt, uu, vv, ww, xx, yy, zz;\n    long aaa, bbb, ccc, ddd, eee, fff, ggg, hhh,\
    \ iii, jjj, kkk, lll, mmm, nnn, ooo, ppp, qqq, rrr, sss, ttt, uuu, vvv, www, xxx,\
    \ yyy, zzz;\n    long aaaa, bbbb, cccc, dddd, eeee, ffff, gggg, hhhh, iiii, jjjj,\
    \ kkkk, llll, mmmm, nnnn, oooo, pppp, qqqq, rrrr, ssss, tttt, uuuu, vvvv, wwww,\
    \ xxxx, yyyy, zzzz;\n    long aaaaa, bbbbb, ccccc, ddddd, eeeee, fffff, ggggg,\
    \ hhhhh, iiiii, jjjjj, kkkkk, lllll, mmmmm, nnnnn, ooooo, ppppp, qqqqq, rrrrr,\
    \ sssss, ttttt, uuuuu, vvvvv, wwwww, xxxxx, yyyyy, zzzzz;\n    long aaaaaa, bbbbbb,\
    \ cccccc, dddddd, eeeeee, ffffff, gggggg, hhhhhh, iiiiii, jjjjjj, kkkkkk, llllll,\
    \ mmmmmm, nnnnnn, oooooo, pppppp, qqqqqq, rrrrrr, ssssss, tttttt, uuuuuu, vvvvvv,\
    \ wwwwww, xxxxxx, yyyyyy, zzzzzz;\n    long", "{\n    long i = 0;\n    long j\
    \ = 0;\n    long count = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i, j, k;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n  \
    \              if (i == j) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long i;\n   \
    \ long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) \n   \
    \ {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n  \
    \          {\n                count = count + 1;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t,\
    \ u, v, w, x, y, z;\n    long aa, bb, cc, dd, ee, ff, gg, hh, ii, jj, kk, ll,\
    \ mm, nn, oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy, zz;\n    long aaa, bbb,\
    \ ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk, lll, mmm, nnn, ooo, ppp, qqq, rrr,\
    \ sss, ttt, uuu, vvv, www, xxx, yyy, zzz;\n    long aaaa, bbbb, cccc, dddd, eeee,\
    \ ffff, gggg, hhhh, iiii, jjjj, kkkk, llll, mmmm, nnnn, oooo, pppp, qqqq, rrrr,\
    \ ssss, tttt, uuuu, vvvv, wwww, xxxx, yyyy, zzzz;\n    long aaaaa, bbbbb, ccccc,\
    \ ddddd, eeeee, fffff, ggggg, hhhhh, iiiii, jjjjj, kkkkk, lllll, mmmmm, nnnnn,\
    \ ooooo, ppppp, qqqqq, rrrrr, sssss, ttttt, uuuuu, vvvvv, wwwww, xxxxx, yyyyy,\
    \ zzzzz;\n    long aaaaaa, bbbbbb, cccccc, dddddd, eeeeee, ffffff, gggggg, hhhhhh,\
    \ iiiiii, jjjjjj, kkkkkk, llllll, mmmmmm, nnnnnn, oooooo, pppppp, qqqqqq, rrrrrr,\
    \ ssssss, tttttt, uuuuuu, vvvvvv, wwwwww, xxxxxx, yyyyyy, zzzzzz;\n    long",
  "{\n    long i, j, k, l, m, c;\n    float x, y, z;\n    float a[n], b[n];\n    float\
    \ d[n];\n    float e[n];\n    float f[n];\n    float g[n];\n    float h[n];\n\
    \    float v[n];\n    float w[n];\n    float p[n];\n    float q[n];\n    float\
    \ r[n];\n    float s[n];\n    float t[n];\n    float u[n];\n    float o[n];\n\
    \    float A[n];\n    float B[n];\n    float C[n];\n    float D[n];\n    float\
    \ E[n];\n    float F[n];\n    float G[n];\n    float H[n];\n    float I[n];\n\
    \    float J[n];\n    float K[n];\n    float L[n];\n    float M[n];\n    float\
    \ N[n];\n    float O[n];\n    float P[n];\n    float Q[n];\n    float R[n];\n\
    \    float S[n];\n    float T[n];\n    float U[n];\n    float V[n];\n    float\
    \ W[n];\n    float X[n];\n    float Y[n];\n    float Z[n];\n    float AA[n];\n\
    \    float BB[n];\n    float CC[n];\n    float DD[n];\n    float EE[n];\n    float\
    \ FF[n];\n    float GG[n];\n    float HH[n];\n    float II[n];\n    float JJ[n];\n\
    \    float KK[n];\n    float LL[n];\n    float MM[n];\n    float NN[n];\n    float\
    \ OO[n];\n    float PP[n];\n    float QQ[n];\n    float RR[n];\n    float SS[n];\n\
    \    float TT[n];\n    float UU[n];\n    float VV[n];\n    float WW[n];\n    float\
    \ XX[n];\n    float YY[n];\n    float ZZ[n];\n    float AAA[", "{\n    return\
    \ n * (n - 1) / 2;\n}", "{\n    long i, j, k;\n    long x, y;\n    long collisions;\n\
    \    collisions = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            x = i;\n            y = j;\n            for (k = 0; k <\
    \ n; k++) {\n                if (x == y) {\n                    collisions++;\n\
    \                }\n                x = x + 1;\n                y = y - 1;\n \
    \           }\n        }\n    }\n    return collisions;\n}", "{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n) {\n        while (j\
    \ < n) {\n            if (i == j) {\n                collisions++;\n         \
    \   }\n            j++;\n        }\n        i++;\n    }\n    return collisions;\n\
    }", "{\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long count = 0;\n\
    \    long temp = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4\
    \ = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long\
    \ temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n\
    \    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15\
    \ = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n   \
    \ long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22\
    \ = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n   \
    \ long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29\
    \ = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n   \
    \ long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36\
    \ = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n   \
    \ long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43\
    \ = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n   \
    \ long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50\
    \ = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n   \
    \ long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57\
    \ = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n   \
    \ long", "{\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n\
    \    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n\
    \    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n\
    \    long z;\n    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long\
    \ ae;\n    long af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n\
    \    long ak;\n    long al;\n    long am;\n    long an;\n    long ao;\n    long\
    \ ap;\n    long aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n\
    \    long av;\n    long aw;\n    long ax;\n    long ay;\n    long az;\n    long\
    \ ba;\n    long bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n\
    \    long bg;\n    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long\
    \ bl;\n    long bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n\
    \    long br;\n    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long\
    \ bw;\n    long bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n\
    \    long cc;\n    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long\
    \ ch;\n    long ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n\
    \    long cn;\n    long co;\n    long cp;\n    long cq;\n    long cr;\n    long\
    \ cs;\n    long ct;\n    long cu;\n    long cv;\n    long cw;\n    long cx;\n\
    \    long cy;\n   ", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (i < j) \n            {\n                result++;\n   \
    \         }\n        }\n    }\n    return result;\n}", "{\n    long i, j, k, l,\
    \ m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n \
    \   long result = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (j = 0; j < n; j++) {\n\
    \        for (k = 0; k < n; k++) {\n            if (left_to_right[j] == right_to_left[k])\
    \ {\n                result++;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long i, j, collisions = 0;\n    for (i = 0; i < n; i++) {\n      \
    \  for (j = 0; j < n; j++) {\n            if (i < j) {\n                collisions++;\n\
    \            }\n        }\n    }\n    return collisions;\n}", "{\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}", "{\n    long count = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n\
    \    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long\
    \ gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk =\
    \ 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n\
    \    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long\
    \ uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy =\
    \ 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n\
    \    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n\
    \    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n\
    \    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n\
    \    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n\
    \    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n\
    \    long yyy = 0;\n    long", "{\n    long num_collisions = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb\
    \ = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp =\
    \ 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n\
    \    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long\
    \ yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc\
    \ = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg\
    \ = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk\
    \ = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp\
    \ = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt\
    \ = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx\
    \ = 0;\n    long yyy = 0;", "{\n    long num_collisions = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n\
    \    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long\
    \ gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk =\
    \ 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n\
    \    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long\
    \ tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx =\
    \ 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n\
    \    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n\
    \    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n\
    \    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n\
    \    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n\
    \    long www = 0;", "{\n    long count = 0;\n    long i = 0;\n    while (i <\
    \ n) \n    {\n        long j = 0;\n        while (j < n) \n        {\n       \
    \     if (i == j) \n            {\n                j = j + 1;\n            }\n\
    \            else \n            {\n                count = count + 1;\n      \
    \          j = j + 1;\n            }\n        }\n        i = i + 1;\n    }\n \
    \   return count;\n}", "{\n    long collisions = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long\
    \ cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg =\
    \ 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n\
    \    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n \
    \   long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n \
    \   long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n \
    \   long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n \
    \   long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n \
    \   long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n \
    \   long yyy = 0;\n    long", "{\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) \n    {\n        for (long j = 0; j < n; j++) \n        {\n      \
    \      if (i < j) \n            {\n                count++;\n            }\n \
    \       }\n    }\n    return count;\n}", "{\n    long i, j, cnt = 0;\n    for\
    \ (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i\
    \ < j) {\n                cnt++;\n            }\n        }\n    }\n    return\
    \ cnt;\n}", "{\n    long i;\n    long j;\n    long count;\n    count = 0;\n  \
    \  for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if\
    \ (i < j) {\n                count = count + 1;\n            }\n        }\n  \
    \  }\n    return count;\n}", "{\n    long i;\n    long j;\n    long k;\n    long\
    \ count;\n    long[] left_to_right;\n    long[] right_to_left;\n    long[] left_to_right_sorted;\n\
    \    long[] right_to_left_sorted;\n    left_to_right = new long[n];\n    right_to_left\
    \ = new long[n];\n    left_to_right_sorted = new long[n];\n    right_to_left_sorted\
    \ = new long[n];\n    count = 0;\n    for (i = 0; i < n; i++) \n    {\n      \
    \  left_to_right[i] = rand() % 100;\n        right_to_left[i] = rand() % 100;\n\
    \    }\n    for (i = 0; i < n; i++) \n    {\n        left_to_right_sorted[i] =\
    \ left_to_right[i];\n        right_to_left_sorted[i] = right_to_left[i];\n   \
    \ }\n    sort(left_to_right_sorted);\n    sort(right_to_left_sorted);\n    for\
    \ (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n \
    \           if (left_to_right_sorted[i] == left_to_right[j]) \n            {\n\
    \                for (k = 0; k < n; k++) \n                {\n               \
    \     if (right_to_left_sorted[k] == right_to_left[j]) \n                    {\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long i, j, k,\
    \ l, m, x, y, z, count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n     \
    \   for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n       \
    \         for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++)\
    \ {\n                        for (x = 0; x < n; x++) {\n                     \
    \       for (y = 0; y < n; y++) {\n                                for (z = 0;\
    \ z < n; z++) {\n                                    if (i == j) {\n         \
    \                               count++;\n                                   \
    \ }\n                                    if (k == l) {\n                     \
    \                   count++;\n                                    }\n        \
    \                            if (m == x) {\n                                 \
    \       count++;\n                                    }\n                    \
    \                if (y == z) {\n                                        count++;\n\
    \                                    }\n                                    if\
    \ (i == k) {\n                                        count++;\n             \
    \                       }\n                                    if (j == l) {\n\
    \                                        count++;\n                          \
    \          }\n                                    if (m == y) {\n            \
    \                            count++;\n                                    }\n\
    \                                    if (x == z) {\n                         \
    \               count++;\n                                    }\n            \
    \                        if (i == m) {\n                                     \
    \   count++;\n                                    }\n                        \
    \            if (j == x) {\n                                        count++;\n\
    \                                    }\n                                    if\
    \ (k == y) {\n                                        count++;\n             \
    \                       }\n                                    if (l == z) {\n\
    \                                        count++;\n                          \
    \          }\n                                    if (i == y) {\n            \
    \                            count++;\n                                    }\n\
    \                                    if (j == z) {\n                         \
    \               count++;\n                                    }\n            \
    \                        if (k == m) {\n                                     \
    \   count++;\n                                    }\n                        \
    \            if (l == x) {\n                                        count++;\n\
    \                                    }\n                                    if\
    \ (i == z) {\n                                        count++;\n             \
    \                       }\n                                    if (j == y) {\n\
    \                                        count++;\n                          \
    \          }\n                                    if (k == x) {\n            \
    \                            count++;\n                                    }",
  "{\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = 0; j < n; j++) {\n            if (i == j) {\n     \
    \           count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long num_collisions = 0;\n    long i, j;\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (i < j) {\n               \
    \ num_collisions++;\n            }\n        }\n    }\n    return num_collisions;\n\
    }", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long\
    \ a, b, c, d, e, f, g, h;\n    long result;\n    result = 0;\n    for (i = 0;\
    \ i < n; i++) {\n        for (j = 0; j < n; j++) {\n            for (k = 0; k\
    \ < n; k++) {\n                for (l = 0; l < n; l++) {\n                   \
    \ for (m = 0; m < n; m++) {\n                        for (n = 0; n < n; n++) {\n\
    \                            for (o = 0; o < n; o++) {\n                     \
    \           for (p = 0; p < n; p++) {\n                                    for\
    \ (q = 0; q < n; q++) {\n                                        for (r = 0; r\
    \ < n; r++) {\n                                            for (s = 0; s < n;\
    \ s++) {\n                                                for (t = 0; t < n; t++)\
    \ {\n                                                    for (u = 0; u < n; u++)\
    \ {\n                                                        for (v = 0; v < n;\
    \ v++) {\n                                                            for (w =\
    \ 0; w < n; w++) {\n                                                         \
    \       for (x = 0; x < n; x++) {\n                                          \
    \                          for (y = 0; y < n; y++) {\n                       \
    \                                                 for (z = 0; z < n; z++) {\n\
    \                                                                            for\
    \ (a = 0; a < n; a++) {\n                                                    \
    \                            for (b = 0; b < n; b++) {\n                     \
    \                                                               for (c = 0; c\
    \ < n; c++) {\n                                                              \
    \                          for (d = 0; d < n; d++) {\n                       \
    \                                                                     for (e =\
    \ 0; e < n; e++) {\n                                                         \
    \                                       for (f = 0; f < n; f++) {\n          \
    \                                                                            \
    \              for (g = 0; g < n; g++) {\n                                   \
    \                                                                     for (h =",
  "{\n    return n * (n - 1) / 2;\n}", "{\n    long i = 0;\n    long j = 0;\n    long\
    \ count = 0;\n    while (i < n && j < n) {\n        if (i == j) {\n          \
    \  count++;\n            i++;\n            j++;\n        } else if (i < j) {\n\
    \            i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long i, j, k, l, m, n;\n    long a[n];\n    long b[n];\n\
    \    long c[n];\n    long d[n];\n    long e[n];\n    long f[n];\n    long g[n];\n\
    \    long h[n];\n    long i[n];\n    long j[n];\n    long k[n];\n    long l[n];\n\
    \    long m[n];\n    long n[n];\n    long o[n];\n    long p[n];\n    long q[n];\n\
    \    long r[n];\n    long s[n];\n    long t[n];\n    long u[n];\n    long v[n];\n\
    \    long w[n];\n    long x[n];\n    long y[n];\n    long z[n];\n    long aa[n];\n\
    \    long ab[n];\n    long ac[n];\n    long ad[n];\n    long ae[n];\n    long\
    \ af[n];\n    long ag[n];\n    long ah[n];\n    long ai[n];\n    long aj[n];\n\
    \    long ak[n];\n    long al[n];\n    long am[n];\n    long an[n];\n    long\
    \ ao[n];\n    long ap[n];\n    long aq[n];\n    long ar[n];\n    long as[n];\n\
    \    long at[n];\n    long au[n];\n    long av[n];\n    long aw[n];\n    long\
    \ ax[n];\n    long ay[n];\n    long az[n];\n    long ba[n];\n    long bb[n];\n\
    \    long bc[n];\n    long bd[n];\n    long be[n];\n    long bf[n];\n    long\
    \ bg[n];\n    long bh[n];\n    long bi[n];\n    long bj[n];\n    long bk[n];\n\
    \    long bl[n];\n    long bm[n];\n    long bn[n];\n    long bo[n];\n    long\
    \ bp[n];\n    long", "{\n    long i, j, count = 0;\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (i < j) {\n           \
    \     count++;\n            }\n        }\n    }\n    return count;\n}", "{\n \
    \   long count = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long\
    \ j = 0; j < n; j++) \n        {\n            if (i < j) \n            {\n   \
    \             count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j\
    \ = 0; j < n; j++) {\n            if (i < j) {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}", "{\n    long i;\n    long\
    \ j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            if (i < j) {\n                count =\
    \ count + 1;\n            }\n        }\n    }\n    return count;\n}", "{\n   \
    \ long collisions = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n &&\
    \ j < n) \n    {\n        if (i < j) \n        {\n            collisions += j\
    \ - i;\n            i++;\n        }\n        else \n        {\n            j++;\n\
    \        }\n    }\n    return collisions;\n}", "{\n    long i, j, k;\n    long\
    \ count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n\
    \            for (k = 0; k < n; k++) {\n                if (i == j && j == k)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long i, j, k, l, m, p, q, r, s, t, u, v,\
    \ w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n    long collisions = 0;\n  \
    \  long* cars_left_to_right = new long[n];\n    long* cars_right_to_left = new\
    \ long[n];\n    for (i = 0; i < n; i++) {\n        cars_left_to_right[i] = i;\n\
    \        cars_right_to_left[i] = n - i - 1;\n    }\n    for (j = 0; j < n; j++)\
    \ {\n        for (k = 0; k < n; k++) {\n            if (cars_left_to_right[j]\
    \ == cars_right_to_left[k]) {\n                collisions++;\n            }\n\
    \        }\n    }\n    return collisions;\n}", "{\n    return n*(n-1)/2;\n}",
  "{\n    long i, j, k;\n    long count = 0;\n    float left[n];\n    float right[n];\n\
    \    float left_speed[n];\n    float right_speed[n];\n    float left_pos[n];\n\
    \    float right_pos[n];\n    float left_time[n];\n    float right_time[n];\n\
    \    float left_time_min;\n    float right_time_min;\n    float left_time_min_pos;\n\
    \    float right_time_min_pos;\n    float left_time_min_speed;\n    float right_time_min_speed;\n\
    \    float left_time_min_index;\n    float right_time_min_index;\n    float left_time_min_pos_index;\n\
    \    float right_time_min_pos_index;\n    float left_time_min_speed_index;\n \
    \   float right_time_min_speed_index;\n    float left_time_min_pos_speed_index;\n\
    \    float right_time_min_pos_speed_index;\n    float left_time_min_pos_speed;\n\
    \    float right_time_min_pos_speed;\n    float left_time_min_pos_index_speed;\n\
    \    float right_time_min_pos_index_speed;\n    float left_time_min_pos_index_speed_index;\n\
    \    float right_time_min_pos_index_speed_index;\n    float left_time_min_pos_index_speed_index_index;\n\
    \    float right_time_min_pos_index_speed_index_index;\n    float left_time_min_pos_index_speed_index_index_index;\n\
    \    float right_time_min_pos_index_speed_index_index_index;\n    float left_time_min_pos_index_speed_index_index_index_index;\n\
    \    float right_time_min_pos_index_speed_index_index_index_index;\n    float\
    \ left_time_min_pos_index_speed_index_index_index_index_index;\n    float right_time_min_pos_index_speed_index_index_",
  "{\n    long i, j, count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n     \
    \   for (j = 0; j < n; j++) {\n            if (i < j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long i, j, k,\
    \ l;\n    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n    long\
    \ e[n];\n    long f[n];\n    long g[n];\n    long h[n];\n    long i1[n];\n   \
    \ long j1[n];\n    long k1[n];\n    long l1[n];\n    long m1[n];\n    long n1[n];\n\
    \    long o1[n];\n    long p1[n];\n    long q1[n];\n    long r1[n];\n    long\
    \ s1[n];\n    long t1[n];\n    long u1[n];\n    long v1[n];\n    long w1[n];\n\
    \    long x1[n];\n    long y1[n];\n    long z1[n];\n    long a2[n];\n    long\
    \ b2[n];\n    long c2[n];\n    long d2[n];\n    long e2[n];\n    long f2[n];\n\
    \    long g2[n];\n    long h2[n];\n    long i2[n];\n    long j2[n];\n    long\
    \ k2[n];\n    long l2[n];\n    long m2[n];\n    long n2[n];\n    long o2[n];\n\
    \    long p2[n];\n    long q2[n];\n    long r2[n];\n    long s2[n];\n    long\
    \ t2[n];\n    long u2[n];\n    long v2[n];\n    long w2[n];\n    long x2[n];\n\
    \    long y2[n];\n    long z2[n];\n    long a3[n];\n    long b3[n];\n    long\
    \ c3[n];\n    long d3[n];\n    long e3[n];\n    long f3[n];\n    long g3[n];\n\
    \    long h3[n];\n    long i3[n];\n    long j3[n];\n    long k3[n];\n    long",
  "{\n    long i, j, count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0;\
    \ j < n; j++) {\n            if (i < j) {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}", "{\n    return n * (n - 1) /\
    \ 2;\n}", "{\n    long i, j, k;\n    long result = 0;\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++)\
    \ {\n                if (i == j) {\n                    result += 1;\n       \
    \         }\n            }\n        }\n    }\n    return result;\n}", "{\n   \
    \ long i, j, k;\n    long count = 0;\n    long[] a = new long[n];\n    long[]\
    \ b = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        a[i] = i;\n \
    \       b[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n      \
    \  for (j = 0; j < n; j++) \n        {\n            if (a[i] == b[j]) \n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < n) {\n        while (j < n) {\n            if (i == j) {\n            \
    \    count++;\n            }\n            j++;\n        }\n        i++;\n    }\n\
    \    return count;\n}", "{\n    long collisions = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long\
    \ cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg =\
    \ 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n\
    \    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n \
    \   long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n \
    \   long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n \
    \   long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n \
    \   long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n \
    \   long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n \
    \   long yyy = 0;\n    long", "{\n    long num_collisions = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n\
    \    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long\
    \ gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk =\
    \ 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n\
    \    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long\
    \ tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx =\
    \ 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n\
    \    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n\
    \    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n\
    \    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n\
    \    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n\
    \    long www = 0;", "{\n    return n * (n - 1) / 2;\n}", "{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long result;\n    long x[n];\n    long y[n];\n\
    \    long z[n];\n    long w[n];\n    long v[n];\n    long u[n];\n    long t[n];\n\
    \    long s[n];\n    long r[n];\n    long q[n];\n    long p[n];\n    long o[n];\n\
    \    long m[n];\n    long l[n];\n    long k[n];\n    long j[n];\n    long i[n];\n\
    \    long h[n];\n    long g[n];\n    long f[n];\n    long e[n];\n    long d[n];\n\
    \    long c[n];\n    long b[n];\n    long a[n];\n    long result[n];\n    for\
    \ (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            for (k\
    \ = 0; k < n; k++) {\n                for (l = 0; l < n; l++) {\n            \
    \        for (m = 0; m < n; m++) {\n                        for (n = 0; n < n;\
    \ n++) {\n                            for (o = 0; o < n; o++) {\n            \
    \                    for (p = 0; p < n; p++) {\n                             \
    \       for (q = 0; q < n; q++) {\n                                        for\
    \ (r = 0; r < n; r++) {\n                                            for (s =\
    \ 0; s < n; s++) {\n                                                for (t = 0;\
    \ t < n; t++) {\n                                                    for (u =\
    \ 0; u < n; u++) {\n                                                        for\
    \ (v = 0; v < n; v++) {\n                                                    \
    \        for (w = 0; w < n; w++) {\n                                         \
    \                       for (x = 0; x < n; x++) {\n                          \
    \                                          for (", "{\n    long i;\n    long j;\n\
    \    long k;\n    long count;\n    long[] left;\n    long[] right;\n    long[]\
    \ left_sorted;\n    long[] right_sorted;\n    long[] left_sorted_index;\n    long[]\
    \ right_sorted_index;\n    long[] left_sorted_index_sorted;\n    long[] right_sorted_index_sorted;\n\
    \    long[] left_sorted_index_sorted_index;\n    long[] right_sorted_index_sorted_index;\n\
    \    long[] left_sorted_index_sorted_index_sorted;\n    long[] right_sorted_index_sorted_index_sorted;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index;\n    long[] right_sorted_index_sorted_index_sorted_index;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index_sorted;\n    long[] right_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index_sorted_index;\n    long[]\
    \ right_sorted_index_sorted_index_sorted_index_sorted_index;\n    long[] left_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] left_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] right_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_sorted_index", "{\n    // The number of collisions is the number\
    \ of pairs of cars that are\n    // at the same position at the same time.\n \
    \   //\n    // The cars that are moving left to right start at position n and\n\
    \    // move at speed 1.  The cars that are moving right to left start at\n  \
    \  // position 0 and move at speed 1.\n    //\n    // So the number of collisions\
    \ is the number of pairs of cars that\n    // are at the same position at the\
    \ same time.\n    //\n    // The cars that are moving left to right start at position\
    \ n and\n    // move at speed 1.  The cars that are moving right to left start\
    \ at\n    // position 0 and move at speed 1.\n    //\n    // So the number of\
    \ collisions is the number of pairs of cars that\n    // are at the same position\
    \ at the same time.\n    //\n    // The cars that are moving left to right start\
    \ at position n and\n    // move at speed 1.  The cars that are moving right to\
    \ left start at\n    // position 0 and move at speed 1.\n    //\n    // So the\
    \ number of collisions is the number of pairs of cars that\n    // are at the\
    \ same position at the same time.\n    //\n    // The cars that are moving left\
    \ to right start at position n and\n    // move at speed 1.  The cars that are\
    \ moving right to left start at\n    // position 0 and move at speed 1.\n    //\n\
    \    // So the number of collisions is the number of pairs of cars that\n    //\
    \ are at the same position at the same time.\n    //\n    // The cars that are\
    \ moving left to right start at position n and\n    // move at speed 1.  The cars\
    \ that are moving right to left start at\n    // position 0 and move at speed\
    \ 1.\n    //\n    // So the number of collisions is the number of pairs of cars\
    \ that\n    // are at the same position at the same time.\n    //\n    // The\
    \ cars that are moving left to right start at position n and\n    // move at speed\
    \ 1.  The cars that are moving right to left start at\n    // position 0 and move\
    \ at speed 1.\n    //\n    // So the number of collisions is the number of pairs\
    \ of cars that\n    // are at the same position at", "{\n    long i, j, k;\n \
    \   long collisions = 0;\n    long[] left_to_right_cars = new long[n];\n    long[]\
    \ right_to_left_cars = new long[n];\n    for (i = 0; i < n; i++) \n    {\n   \
    \     left_to_right_cars[i] = i;\n        right_to_left_cars[i] = n - i - 1;\n\
    \    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (left_to_right_cars[i] == right_to_left_cars[j]) \n\
    \            {\n                collisions++;\n            }\n        }\n    }\n\
    \    return collisions;\n}", "{\n    long collisions = 0;\n    long i = 0;\n \
    \   long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o\
    \ = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n \
    \   long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x\
    \ = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n\
    \    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long\
    \ gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk =\
    \ 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n\
    \    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long\
    \ uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy =\
    \ 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n\
    \    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n\
    \    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n\
    \    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n\
    \    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n\
    \    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n\
    \    long yyy = 0;\n    long", "{\n    long i, j, count;\n    double x, y;\n \
    \   count = 0;\n    for (i = 0; i < n; i++) {\n        x = random();\n       \
    \ for (j = 0; j < n; j++) {\n            y = random();\n            if (x > y)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    for (long i = 0; i < n; i++) \n    {\n     \
    \   for (long j = 0; j < n; j++) \n        {\n            if (i < j) \n      \
    \      {\n                result += 1;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long i, j, k;\n    long collisions = 0;\n    long left_to_right[n];\n\
    \    long right_to_left[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}", "{\n    long i = 0;\n    long j = 0;\n    long k = 0;\n   \
    \ long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q =\
    \ 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n   \
    \ long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z =\
    \ 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n\
    \    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long\
    \ ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am =\
    \ 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n\
    \    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long\
    \ av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az =\
    \ 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n\
    \    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long\
    \ bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm =\
    \ 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n\
    \    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long\
    \ bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz =\
    \ 0;\n    long ca", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n\
    \    while (i < n) {\n        while (j < n) {\n            if (i < j) {\n    \
    \            result = result + 1;\n            }\n            j = j + 1;\n   \
    \     }\n        i = i + 1;\n    }\n    return result;\n}", "{\n    long i, j,\
    \ k, l;\n    long count = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (j = 0; j < n; j++)\
    \ \n    {\n        for (k = 0; k < n; k++) \n        {\n            if (left_to_right[j]\
    \ == right_to_left[k]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}", "{\n    long i, j, k, l, m, n;\n\
    \    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n    long e[n];\n\
    \    long f[n];\n    long g[n];\n    long h[n];\n    long x[n];\n    long y[n];\n\
    \    long z[n];\n    long w[n];\n    long p[n];\n    long q[n];\n    long r[n];\n\
    \    long s[n];\n    long t[n];\n    long u[n];\n    long v[n];\n    long o[n];\n\
    \    long collisions = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i;\n\
    \        b[i] = i;\n        c[i] = i;\n        d[i] = i;\n        e[i] = i;\n\
    \        f[i] = i;\n        g[i] = i;\n        h[i] = i;\n        x[i] = i;\n\
    \        y[i] = i;\n        z[i] = i;\n        w[i] = i;\n        p[i] = i;\n\
    \        q[i] = i;\n        r[i] = i;\n        s[i] = i;\n        t[i] = i;\n\
    \        u[i] = i;\n        v[i] = i;\n        o[i] = i;\n    }\n    for (j =\
    \ 0; j < n; j++) {\n        a[j] = j;\n        b[j] = j;\n        c[j] = j;\n\
    \        d[j] = j;\n        e[j] = j;\n        f[j] = j;\n        g[j] = j;\n\
    \        h[j] = j;\n        x[j] = j;\n        y[j] = j;\n        z[j] = j;\n\
    \        w[j] = j;\n        p[j] = j;\n        q[j] = j;\n        r[j] = j;",
  "{\n    long collisions = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n\
    \ && j < n) \n    {\n        if (i < j) \n        {\n            collisions +=\
    \ j - i;\n            i++;\n        } \n        else \n        {\n           \
    \ j++;\n        }\n    }\n    return collisions;\n}", "{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] a = new long[n];\n    long[] b = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        a[i] = i;\n        b[i] = n - i\
    \ - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n;\
    \ j++) \n        {\n            if (a[i] > b[j]) \n            {\n           \
    \     count++;\n            }\n        }\n    }\n    return count;\n}", "{\n \
    \   long collisions = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long\
    \ mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr =\
    \ 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n\
    \    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long\
    \ aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long\
    \ eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long\
    \ iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long\
    \ mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long\
    \ rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long\
    \ vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long",
  "{\n    long collisions = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long\
    \ mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr =\
    \ 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n\
    \    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long\
    \ aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long\
    \ eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long\
    \ iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long\
    \ mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long\
    \ rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long\
    \ vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long",
  "{\n    long i;\n    long j;\n    long k;\n    long collisions;\n    long[] left_to_right;\n\
    \    long[] right_to_left;\n    long[] left_to_right_sorted;\n    long[] right_to_left_sorted;\n\
    \    collisions = 0;\n    left_to_right = new long[n];\n    right_to_left = new\
    \ long[n];\n    left_to_right_sorted = new long[n];\n    right_to_left_sorted\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = random(0,\
    \ 1000000);\n        right_to_left[i] = random(0, 1000000);\n    }\n    for (i\
    \ = 0; i < n; i++) {\n        left_to_right_sorted[i] = left_to_right[i];\n  \
    \      right_to_left_sorted[i] = right_to_left[i];\n    }\n    sort(left_to_right_sorted);\n\
    \    sort(right_to_left_sorted);\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < n; j++) {\n            if (left_to_right_sorted[i] == left_to_right[j])\
    \ {\n                for (k = 0; k < n; k++) {\n                    if (right_to_left_sorted[k]\
    \ == right_to_left[j]) {\n                        collisions = collisions + 1;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return collisions;\n}", "{\n    long i, j, count = 0;\n    for (i = 0; i <\
    \ n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i < j) {\n   \
    \             count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long i, j, k;\n    long count = 0;\n    long[] left = new long[n];\n   \
    \ long[] right = new long[n];\n    for (i = 0; i < n; i++) {\n        left[i]\
    \ = i;\n        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (left[i] == right[j]) {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i, j, k, l, m, n;\n    long x[n], y[n];\n    long a[n], b[n];\n\
    \    long c[n], d[n];\n    long e[n], f[n];\n    long g[n], h[n];\n    long p[n],\
    \ q[n];\n    long r[n], s[n];\n    long t[n], u[n];\n    long v[n], w[n];\n  \
    \  long z[n], zz[n];\n    long zzz[n], zzzz[n];\n    long zzzzz[n], zzzzzz[n];\n\
    \    long zzzzzzz[n], zzzzzzzz[n];\n    long zzzzzzzzz[n], zzzzzzzzzz[n];\n  \
    \  long zzzzzzzzzzz[n], zzzzzzzzzzzz[n];\n    long zzzzzzzzzzzzz[n], zzzzzzzzzzzzzz[n];\n\
    \    long zzzzzzzzzzzzzzz[n], zzzzzzzzzzzzzzzz[n];\n    long zzzzzzzzzzzzzzzzz[n],\
    \ zzzzzzzzzzzzzzzzzz[n];\n    long zzzzzzzzzzzzzzzzzzz[n], zzzzzzzzzzzzzzzzzzzz[n];\n\
    \    long zzzzzzzzzzzzzzzzzzzzz[n], zzzzzzzzzzzzzzzzzzzzzz[n];\n    long zzzzzzzzzzzzzzzzzzzzzzz[n],\
    \ zzzzzzzzzzzzzzzzzzzzzzzz[n];\n    long zzzzzzzzzzzzzzzzzzzzzzzzz[n], zzzzzzzzzzzzzzzzzzzzzzzzzz[n];\n\
    \    long zzzzzzzzzzzzzzzzzzzzzzzzzzz[n], zzzzzzzzzzzzzzzzzzzzzzzzzzzz[n];\n \
    \   long zzzzzzzzzzzzzzzzzzzzzzzzzzzzz[n], zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz[n];\n\
    \    long zzzzz", "{\n    long collisions = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc\
    \ = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n\
    \    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long\
    \ ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq =\
    \ 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n\
    \    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long\
    \ zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd\
    \ = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh\
    \ = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll\
    \ = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy\
    \ = 0;\n    long", "{\n    long i, j, k;\n    long[] a = new long[n];\n    long[]\
    \ b = new long[n];\n    long[] c = new long[n];\n    long[] d = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        a[i] = i;\n        b[i] = n - i\
    \ - 1;\n        c[i] = i;\n        d[i] = n - i - 1;\n    }\n    for (i = 0; i\
    \ < n; i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n           \
    \ if (a[i] > b[j]) \n            {\n                k = a[i];\n              \
    \  a[i] = b[j];\n                b[j] = k;\n            }\n        }\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (c[i] > d[j]) \n            {\n                k = c[i];\n\
    \                c[i] = d[j];\n                d[j] = k;\n            }\n    \
    \    }\n    }\n    long count = 0;\n    for (i = 0; i < n; i++) \n    {\n    \
    \    for (j = 0; j < n; j++) \n        {\n            if (a[i] == c[j]) \n   \
    \         {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long i, j, k;\n    long result = 0;\n    long* left_to_right\
    \ = new long[n];\n    long* right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n\
    \ - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j\
    \ < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                result++;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    long i, j, k;\n    long[] a = new long[n];\n\
    \    long[] b = new long[n];\n    long[] c = new long[n];\n    long[] d = new\
    \ long[n];\n    long[] e = new long[n];\n    long[] f = new long[n];\n    long[]\
    \ g = new long[n];\n    long[] h = new long[n];\n    long[] i1 = new long[n];\n\
    \    long[] j1 = new long[n];\n    long[] k1 = new long[n];\n    long[] l = new\
    \ long[n];\n    long[] m = new long[n];\n    long[] n1 = new long[n];\n    long[]\
    \ o = new long[n];\n    long[] p = new long[n];\n    long[] q = new long[n];\n\
    \    long[] r = new long[n];\n    long[] s = new long[n];\n    long[] t = new\
    \ long[n];\n    long[] u = new long[n];\n    long[] v = new long[n];\n    long[]\
    \ w = new long[n];\n    long[] x = new long[n];\n    long[] y = new long[n];\n\
    \    long[] z = new long[n];\n    long[] aa = new long[n];\n    long[] bb = new\
    \ long[n];\n    long[] cc = new long[n];\n    long[] dd = new long[n];\n    long[]\
    \ ee = new long[n];\n    long[] ff = new long[n];\n    long[] gg = new long[n];\n\
    \    long[] hh = new long[n];\n    long[] ii = new long[n];\n    long[] jj = new\
    \ long[n];\n    long[] kk = new long[n];\n    long[] ll = new long[n];\n    long[]\
    \ mm = new long[n];\n    long[] nn = new long[n];\n    long[] oo = new long[n];\n\
    \    long[] pp = new long[n];\n    long[] qq = new long[n];\n    long[] rr = new\
    \ long[n];\n   ", "{\n    long[] left_to_right_cars = new long[n];\n    long[]\
    \ right_to_left_cars = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n\
    \        left_to_right_cars[i] = i;\n        right_to_left_cars[i] = n - i - 1;\n\
    \    }\n    long collisions = 0;\n    for (long i = 0; i < n; i++) \n    {\n \
    \       for (long j = 0; j < n; j++) \n        {\n            if (left_to_right_cars[i]\
    \ == right_to_left_cars[j]) \n            {\n                collisions++;\n \
    \           }\n        }\n    }\n    return collisions;\n}", "{\n    return n\
    \ * (n - 1) / 2;\n}", "{\n    long num_collisions = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long\
    \ cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg =\
    \ 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n\
    \    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long\
    \ pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt =\
    \ 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n\
    \    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n  \
    \  long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n  \
    \  long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;", "{\n    long collisions = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc\
    \ = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n\
    \    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long\
    \ ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq =\
    \ 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n\
    \    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long\
    \ zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd\
    \ = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh\
    \ = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll\
    \ = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy\
    \ = 0;\n    long", "{\n    long i, j, k, l;\n    long collisions = 0;\n    long[]\
    \ left_to_right = new long[n];\n    long[] right_to_left = new long[n];\n    for\
    \ (i = 0; i < n; i++) \n    {\n        left_to_right[i] = (i + 1) * 100;\n   \
    \     right_to_left[i] = (i + 1) * 100;\n    }\n    for (i = 0; i < n; i++) \n\
    \    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                collisions++;\n      \
    \      }\n        }\n    }\n    return collisions;\n}", "{\n    long i, j, k,\
    \ cnt = 0;\n    float a[n], b[n];\n    float x, y;\n    float t;\n    float d;\n\
    \    float v;\n    float t1, t2;\n    float d1, d2;\n    float v1, v2;\n    float\
    \ t_min;\n    float d_min;\n    float v_min;\n    float t_max;\n    float d_max;\n\
    \    float v_max;\n    float t_min_1, t_min_2;\n    float d_min_1, d_min_2;\n\
    \    float v_min_1, v_min_2;\n    float t_max_1, t_max_2;\n    float d_max_1,\
    \ d_max_2;\n    float v_max_1, v_max_2;\n    float t_min_1_1, t_min_1_2;\n   \
    \ float d_min_1_1, d_min_1_2;\n    float v_min_1_1, v_min_1_2;\n    float t_max_1_1,\
    \ t_max_1_2;\n    float d_max_1_1, d_max_1_2;\n    float v_max_1_1, v_max_1_2;\n\
    \    float t_min_2_1, t_min_2_2;\n    float d_min_2_1, d_min_2_2;\n    float v_min_2_1,\
    \ v_min_2_2;\n    float t_max_2_1, t_max_2_2;\n    float d_max_2_1, d_max_2_2;\n\
    \    float v_max_2_1, v_max_2_2;\n    float t_min_1_1_1, t_min_1_1_2;\n    float\
    \ d_min_1_1_1, d_min_1_1_2;\n    float v_min_1_1_1, v_min_1_1_2;\n    float t_max_",
  "{\n    return n * (n - 1) / 2;\n}", "{\n    long i = 0;\n    long j = 0;\n    long\
    \ count = 0;\n    while (i < n && j < n) \n    {\n        if (i < j) \n      \
    \  {\n            count++;\n            i++;\n        } \n        else \n    \
    \    {\n            j++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ collisions = 0;\n    long i = 0;\n    long j = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    while (i < n) {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n      \
    \  i = i + 1;\n    }\n    while (j < n) {\n        if (left_to_right[j] == right_to_left[j])\
    \ {\n            collisions = collisions + 1;\n        }\n        j = j + 1;\n\
    \    }\n    return collisions;\n}", "{\n    long collisions = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    i = 0;\n    j = 0;\n    while\
    \ (i < n && j < n) {\n        if (left_to_right[i] < right_to_left[j]) {\n   \
    \         i++;\n        } else if (left_to_right[i] > right_to_left[j]) {\n  \
    \          j++;\n        } else {\n            collisions++;\n            i++;\n\
    \            j++;\n        }\n    }\n    return collisions;\n}", "{\n    return\
    \ n * (n - 1) / 2;\n}", "{\n    long i, j, count = 0;\n    double x1, x2;\n  \
    \  for (i = 0; i < n; i++) {\n        x1 = i;\n        for (j = 0; j < n; j++)\
    \ {\n            x2 = j;\n            if (x1 > x2) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    return n * (n\
    \ - 1) / 2;\n}", "{\n    long collisions = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = 0; j < n; j++) {\n            if (i < j) {\n      \
    \          collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long\
    \ a, b, c, d, e, f, g, h;\n    long result;\n    long[] left_to_right_cars;\n\
    \    long[] right_to_left_cars;\n    long[] left_to_right_cars_sorted;\n    long[]\
    \ right_to_left_cars_sorted;\n    long[] left_to_right_cars_sorted_unique;\n \
    \   long[] right_to_left_cars_sorted_unique;\n    long[] left_to_right_cars_sorted_unique_counts;\n\
    \    long[] right_to_left_cars_sorted_unique_counts;\n    long[] left_to_right_cars_sorted_unique_counts_sorted;\n\
    \    long[] right_to_left_cars_sorted_unique_counts_sorted;\n    long[] left_to_right_cars_sorted_unique_counts_sorted_unique;\n\
    \    long[] right_to_left_cars_sorted_unique_counts_sorted_unique;\n    long[]\
    \ left_to_right_cars_sorted_unique_counts_sorted_unique_counts;\n    long[] right_to_left_cars_sorted_unique_counts_sorted_unique_counts;\n\
    \    long[] left_to_right_cars_sorted_unique_counts_sorted_unique_counts_sorted;\n\
    \    long[] right_to_left_cars_sorted_unique_counts_sorted_unique_counts_sorted;\n\
    \    long[] left_to_right_cars_sorted_unique_counts_sorted_unique_counts_sorted_unique;\n\
    \    long[] right_to_left_cars_sorted_unique_counts_sorted_unique_counts_sorted_unique;\n\
    \    long[] left_to_right_cars_sorted_unique_counts_sorted_unique_counts_sorted_unique_counts;\n\
    \    long", "{\n    long i, j, count = 0;\n    for (i = 0; i < n; i++) {\n   \
    \     for (j = 0; j < n; j++) {\n            if (i < j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}", "{\n    long i, j, k;\n    long count = 0;\n\
    \    long[] left = new long[n];\n    long[] right = new long[n];\n    for (i =\
    \ 0; i < n; i++) \n    {\n        left[i] = i;\n        right[i] = n - i - 1;\n\
    \    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (left[i] == right[j]) \n            {\n           \
    \     count++;\n                for (k = j; k < n - 1; k++) \n               \
    \ {\n                    right[k] = right[k + 1];\n                }\n       \
    \         n--;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n   \
    \ long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p =\
    \ 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n   \
    \ long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y =\
    \ 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long\
    \ bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by =\
    \ 0;\n    long bz", "{\n    long result = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = 0; j < n; j++) {\n            result += (i - j) * (i\
    \ - j);\n        }\n    }\n    return result;\n}", "{\n    long i, j, k;\n   \
    \ long cnt = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            for (k = 0; k < n; k++) {\n                if (i == j) {\n  \
    \                  cnt++;\n                }\n            }\n        }\n    }\n\
    \    return cnt;\n}", "{\n    long i, j, k;\n    long num_collisions = 0;\n  \
    \  long num_cars_left_to_right = n;\n    long num_cars_right_to_left = n;\n  \
    \  long* cars_left_to_right = new long[n];\n    long* cars_right_to_left = new\
    \ long[n];\n    for (i = 0; i < n; i++) \n    {\n        cars_left_to_right[i]\
    \ = i;\n        cars_right_to_left[i] = i;\n    }\n    while (num_cars_left_to_right\
    \ > 0 && num_cars_right_to_left > 0) \n    {\n        for (i = 0; i < num_cars_left_to_right;\
    \ i++) \n        {\n            for (j = 0; j < num_cars_right_to_left; j++) \n\
    \            {\n                if (cars_left_to_right[i] == cars_right_to_left[j])\
    \ \n                {\n                    num_collisions++;\n               \
    \     for (k = j; k < num_cars_right_to_left - 1; k++) \n                    {\n\
    \                        cars_right_to_left[k] = cars_right_to_left[k + 1];\n\
    \                    }\n                    num_cars_right_to_left--;\n      \
    \              break;\n                }\n            }\n            if (j < num_cars_right_to_left)\
    \ \n            {\n                for (k = i; k < num_cars_left_to_right - 1;\
    \ k++) \n                {\n                    cars_left_to_right[k] = cars_left_to_right[k\
    \ + 1];\n                }\n                num_cars_left_to_right--;\n      \
    \      }\n        }\n    }\n    return num_collisions;\n}", "{\n    long i, j,\
    \ k;\n    long count = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i, j, k;\n    long collisions = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    long[] left_to_right_sorted\
    \ = new long[n];\n    long[] right_to_left_sorted = new long[n];\n    long[] left_to_right_sorted_index\
    \ = new long[n];\n    long[] right_to_left_sorted_index = new long[n];\n    long[]\
    \ left_to_right_sorted_index_sorted = new long[n];\n    long[] right_to_left_sorted_index_sorted\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index = new long[n];\n\
    \    long[] right_to_left_sorted_index_sorted_index = new long[n];\n    long[]\
    \ left_to_right_sorted_index_sorted_index_sorted = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n   ", "{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n  \
    \  long a,b,c,d,e,f,g,h;\n    long ans;\n    ans = 0;\n    for (i = 0; i < n;\
    \ i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i <\
    \ j)\n            {\n                ans = ans + 1;\n            }\n        }\n\
    \    }\n    return ans;\n}", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t,\
    \ u, v, w, x, y, z;\n    long aa, bb, cc, dd, ee, ff, gg, hh, ii, jj, kk, ll,\
    \ mm, nn, oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy, zz;\n    long aaa, bbb,\
    \ ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk, lll, mmm, nnn, ooo, ppp, qqq, rrr,\
    \ sss, ttt, uuu, vvv, www, xxx, yyy, zzz;\n    long aaaa, bbbb, cccc, dddd, eeee,\
    \ ffff, gggg, hhhh, iiii, jjjj, kkkk, llll, mmmm, nnnn, oooo, pppp, qqqq, rrrr,\
    \ ssss, tttt, uuuu, vvvv, wwww, xxxx, yyyy, zzzz;\n    long aaaaa, bbbbb, ccccc,\
    \ ddddd, eeeee, fffff, ggggg, hhhhh, iiiii, jjjjj, kkkkk, lllll, mmmmm, nnnnn,\
    \ ooooo, ppppp, qqqqq, rrrrr, sssss, ttttt, uuuuu, vvvvv, wwwww, xxxxx, yyyyy,\
    \ zzzzz;\n    long aaaaaa, bbbbbb, cccccc, dddddd, eeeeee, ffffff, gggggg, hhhhhh,\
    \ iiiiii, jjjjjj, kkkkkk, llllll, mmmmmm, nnnnnn, oooooo, pppppp, qqqqqq, rrrrrr,\
    \ ssssss, tttttt, uuuuuu, vvvvvv, wwwwww, xxxxxx, yyyyyy, zzzzzz;\n    long",
  "{\n    long collisions = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long\
    \ mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr =\
    \ 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n\
    \    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long\
    \ aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long\
    \ eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long\
    \ iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long\
    \ mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long\
    \ rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long\
    \ vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long",
  "{\n    long i, j, k;\n    long count = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    long[] left_to_right_copy = new\
    \ long[n];\n    long[] right_to_left_copy = new long[n];\n    for (i = 0; i <\
    \ n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n\
    \ - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        left_to_right_copy[i]\
    \ = left_to_right[i];\n        right_to_left_copy[i] = right_to_left[i];\n   \
    \ }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n \
    \       {\n            if (left_to_right[i] == right_to_left[j]) \n          \
    \  {\n                count++;\n                left_to_right[i] = -1;\n     \
    \           right_to_left[j] = -1;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long i, j, k;\n    long count = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n\
    \ - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j\
    \ < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long i, j, k;\n    long collisions = 0;\n    long\
    \ left_to_right[n];\n    long right_to_left[n];\n    for (i = 0; i < n; i++) {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          \
    \  if (left_to_right[i] == right_to_left[j]) {\n                collisions++;\n\
    \            }\n        }\n    }\n    return collisions;\n}", "{\n    long i,\
    \ j, k;\n    long num_collisions;\n    long left_to_right_car_positions[n];\n\
    \    long right_to_left_car_positions[n];\n    long left_to_right_car_speeds[n];\n\
    \    long right_to_left_car_speeds[n];\n    long left_to_right_car_positions_sorted[n];\n\
    \    long right_to_left_car_positions_sorted[n];\n    long left_to_right_car_speeds_sorted[n];\n\
    \    long right_to_left_car_speeds_sorted[n];\n    long left_to_right_car_positions_sorted_index[n];\n\
    \    long right_to_left_car_positions_sorted_index[n];\n    long left_to_right_car_speeds_sorted_index[n];\n\
    \    long right_to_left_car_speeds_sorted_index[n];\n    long left_to_right_car_positions_sorted_index_sorted[n];\n\
    \    long right_to_left_car_positions_sorted_index_sorted[n];\n    long left_to_right_car_speeds_sorted_index_sorted[n];\n\
    \    long right_to_left_car_speeds_sorted_index_sorted[n];\n    long left_to_right_car_positions_sorted_index_sorted_index[n];\n\
    \    long right_to_left_car_positions_sorted_index_sorted_index[n];\n    long\
    \ left_to_right_car_speeds_sorted_index_sorted_index[n];\n    long right_to_left_car_speeds_sorted_index_sorted_index[n];\n\
    \    long left_to_right_car_positions_sorted_index_sorted_index_sorted[n];\n \
    \   long right_to_left_car_positions_sorted_index_sorted_index_sorted[n];\n  \
    \  long left_to_right_car_", "{\n    long i, j, k, l;\n    long count = 0;\n \
    \   long a[n];\n    long b[n];\n    for (i = 0; i < n; i++)\n    {\n        a[i]\
    \ = rand() % 100;\n        b[i] = rand() % 100;\n    }\n    for (j = 0; j < n;\
    \ j++)\n    {\n        for (k = 0; k < n; k++)\n        {\n            if (a[j]\
    \ == b[k])\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long collisions = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n\
    \    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long\
    \ gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk =\
    \ 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n\
    \    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long\
    \ uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy =\
    \ 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n\
    \    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n\
    \    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n\
    \    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n\
    \    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n\
    \    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n\
    \    long yyy = 0;\n    long", "{\n    long i;\n    long j;\n    long count;\n\
    \    count = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}", "{\n    long\
    \ result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n   \
    \ long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v =\
    \ 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n   \
    \ long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long\
    \ ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii =\
    \ 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n\
    \    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long\
    \ rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv =\
    \ 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n\
    \    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n\
    \    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n\
    \    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n\
    \    long mmm = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n\
    \    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n\
    \    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long", "{\n    long\
    \ i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d,\
    \ e, f, g, h;\n    long ret = 0;\n    long[] left_to_right = new long[n];\n  \
    \  long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n      \
    \  left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for\
    \ (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i]\
    \ == right_to_left[j]) {\n                ret++;\n            }\n        }\n \
    \   }\n    return ret;\n}", "{\n    return n * (n - 1) / 2;\n}", "{\n    long\
    \ i, j, k;\n    long collisions = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }", "{\n    long i, j, k;\n    long count = 0;\n    for (i = 0; i < n; i++)\n\
    \    {\n        for (j = 0; j < n; j++)\n        {\n            for (k = 0; k\
    \ < n; k++)\n            {\n                if (i == j && j == k)\n          \
    \      {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}", "{\n    long result = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n   \
    \ long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long\
    \ ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr =\
    \ 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n\
    \    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long\
    \ aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee =\
    \ 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n\
    \    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n\
    \    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n\
    \    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n\
    \    long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n    long aaaa = 0;\n\
    \    long bbbb = 0;\n    long cccc = 0;", "{\n    long i, j, k;\n    long count\
    \ = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left = new\
    \ long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n\
    \    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    for\
    \ (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j < n; j++) \n  \
    \      {\n            if (i < j) \n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}", "{\n    long result =\
    \ 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j < n;\
    \ j++) \n        {\n            if (i < j) \n            {\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long", "{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long", "{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n    \
    \    left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n   \
    \ for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if\
    \ (left_to_right[i] == right_to_left[j]) {\n                count++;\n       \
    \     }\n        }\n    }\n    return count;\n}", "{\n    long result = 0;\n \
    \   long i = 0;\n    while (i < n) \n    {\n        long j = 0;\n        while\
    \ (j < n) \n        {\n            if (i < j) \n            {\n              \
    \  result = result + 1;\n            }\n            j = j + 1;\n        }\n  \
    \      i = i + 1;\n    }\n    return result;\n}", "{\n    long i, j, k;\n    long\
    \ collisions = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    long[] left_to_right_sorted = new long[n];\n    long[] right_to_left_sorted\
    \ = new long[n];\n    long[] left_to_right_sorted_index = new long[n];\n    long[]\
    \ right_to_left_sorted_index = new long[n];\n    long[] left_to_right_sorted_index_sorted\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted = new long[n];\n\
    \    long[] left_to_right_sorted_index_sorted_index = new long[n];\n    long[]\
    \ right_to_left_sorted_index_sorted_index = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted =\
    \ new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n   ", "{\n    long i, j, k;\n    long count = 0;\n    long[]\
    \ left = new long[n];\n    long[] right = new long[n];\n    for (i = 0; i < n;\
    \ i++) \n    {\n        left[i] = i;\n        right[i] = n - i - 1;\n    }\n \
    \   for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n      \
    \  {\n            if (left[i] == right[j]) \n            {\n                count++;\n\
    \                for (k = j; k < n - 1; k++) \n                {\n           \
    \         right[k] = right[k + 1];\n                }\n                right[n\
    \ - 1] = left[i];\n                break;\n            }\n        }\n    }\n \
    \   return count;\n}", "{\n    long i, j, k;\n    long collisions = 0;\n    long[]\
    \ left_to_right = new long[n];\n    long[] right_to_left = new long[n];\n    for\
    \ (i = 0; i < n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                collisions++;\n            }\n        }\n \
    \   }\n    return collisions;\n}", "{\n    long result = 0;\n    long i = 0;\n\
    \    while (i < n) {\n        long j = 0;\n        while (j < n) {\n         \
    \   if (i == j) {\n                j = j + 1;\n            } else {\n        \
    \        result = result + 1;\n                j = j + 1;\n            }\n   \
    \     }\n        i = i + 1;\n    }\n    return result;\n}", "{\n    long i, j,\
    \ k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f,\
    \ g, h;\n    long collisions = 0;\n    long cars_left_to_right[n];\n    long cars_right_to_left[n];\n\
    \    long cars_left_to_right_sorted[n];\n    long cars_right_to_left_sorted[n];\n\
    \    long cars_left_to_right_sorted_index[n];\n    long cars_right_to_left_sorted_index[n];\n\
    \    long cars_left_to_right_sorted_index_sorted[n];\n    long cars_right_to_left_sorted_index_sorted[n];\n\
    \    long cars_left_to_right_sorted_index_sorted_index[n];\n    long cars_right_to_left_sorted_index_sorted_index[n];\n\
    \    long cars_left_to_right_sorted_index_sorted_index_sorted[n];\n    long cars_right_to_left_sorted_index_sorted_index_sorted[n];\n\
    \    long cars_left_to_right_sorted_index_sorted_index_sorted_index[n];\n    long\
    \ cars_right_to_left_sorted_index_sorted_index_sorted_index[n];\n    long cars_left_to_right_sorted_index_sorted_index_sorted_index_sorted[n];\n\
    \    long cars_right_to_left_sorted_index_sorted_index_sorted_index_sorted[n];\n\
    \    long cars_left_to_right_sorted_index_sorted_index_sorted_index_sorted_index[n];\n\
    \    long cars_right_to_left_sorted_index_sorted_index_sorted_index_sorted_index[n];\n\
    \    long cars_left_to_right_sorted_index_sorted_index_sorted_index_s", "{\n \
    \   long i, j, count;\n    float x[n], y[n];\n    count = 0;\n    for (i = 0;\
    \ i < n; i++) {\n        x[i] = i;\n        y[i] = i;\n    }\n    for (i = 0;\
    \ i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (x[i] < y[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i, j, count = 0;\n    for (i = 0; i < n; i++) \n    {\n     \
    \   for (j = 0; j < n; j++) \n        {\n            if (i < j) \n           \
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i;\n    long j;\n    long count;\n    count = 0;\n    for (i\
    \ = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n        {\n    \
    \        if (i < j) \n            {\n                count = count + 1;\n    \
    \        }\n        }\n    }\n    return count;\n}", "{\n    long i, j, k, l,\
    \ m, n;\n    long a[n], b[n];\n    long c[n];\n    long d[n];\n    long e[n];\n\
    \    long f[n];\n    long g[n];\n    long h[n];\n    long i[n];\n    long j[n];\n\
    \    long k[n];\n    long l[n];\n    long m[n];\n    long n[n];\n    long o[n];\n\
    \    long p[n];\n    long q[n];\n    long r[n];\n    long s[n];\n    long t[n];\n\
    \    long u[n];\n    long v[n];\n    long w[n];\n    long x[n];\n    long y[n];\n\
    \    long z[n];\n    long aa[n];\n    long ab[n];\n    long ac[n];\n    long ad[n];\n\
    \    long ae[n];\n    long af[n];\n    long ag[n];\n    long ah[n];\n    long\
    \ ai[n];\n    long aj[n];\n    long ak[n];\n    long al[n];\n    long am[n];\n\
    \    long an[n];\n    long ao[n];\n    long ap[n];\n    long aq[n];\n    long\
    \ ar[n];\n    long as[n];\n    long at[n];\n    long au[n];\n    long av[n];\n\
    \    long aw[n];\n    long ax[n];\n    long ay[n];\n    long az[n];\n    long\
    \ ba[n];\n    long bb[n];\n    long bc[n];\n    long bd[n];\n    long be[n];\n\
    \    long bf[n];\n    long bg[n];\n    long bh[n];\n    long bi[n];\n    long\
    \ bj[n];\n    long bk[n];\n    long bl[n];\n    long bm[n];\n    long bn[n];\n\
    \    long bo[n];\n    long bp[n];\n    long bq[", "{\n    long i, j, k;\n    long\
    \ collisions = 0;\n    long[] car_positions = new long[n];\n    long[] car_speeds\
    \ = new long[n];\n    long[] car_positions_2 = new long[n];\n    long[] car_speeds_2\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        car_positions[i]\
    \ = i;\n        car_speeds[i] = i + 1;\n        car_positions_2[i] = i;\n    \
    \    car_speeds_2[i] = i + 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n  \
    \      for (j = 0; j < n; j++) \n        {\n            if (car_positions[i] >\
    \ car_positions_2[j]) \n            {\n                collisions++;\n       \
    \     }\n        }\n        for (k = 0; k < n; k++) \n        {\n            car_positions[k]\
    \ += car_speeds[k];\n            car_positions_2[k] -= car_speeds_2[k];\n    \
    \    }\n    }\n    return collisions;\n}", "{\n    long result = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0;\
    \ j < n; j++) {\n            if (i < j) {\n                result++;\n       \
    \     }\n        }\n    }\n    return result;\n}", "{\n    return n * (n - 1)\
    \ / 2;\n}", "{\n    long i,j,k,l;\n    long count = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n\
    \ - i - 1;\n    }\n    for (j = 0; j < n; j++) \n    {\n        for (k = 0; k\
    \ < n; k++) \n        {\n            if (left_to_right[j] == right_to_left[k])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long i, j, k, l;\n    long collisions = 0;\n \
    \   long[] left_to_right = new long[n];\n    long[] right_to_left = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                collisions++;\n                for (k = j;\
    \ k < n - 1; k++) \n                {\n                    right_to_left[k] =\
    \ right_to_left[k + 1];\n                }\n                for (l = i; l < n\
    \ - 1; l++) \n                {\n                    left_to_right[l] = left_to_right[l\
    \ + 1];\n                }\n                n--;\n                break;\n   \
    \         }\n        }\n    }\n    return collisions;\n}", "{\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}", "{\n    long result = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n\
    \    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long\
    \ gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk =\
    \ 0;\n    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n\
    \    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long\
    \ uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy =\
    \ 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n\
    \    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n\
    \    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n\
    \    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n\
    \    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n\
    \    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n\
    \    long yyy = 0;\n    long", "{\n    long i, j, k;\n    long count = 0;\n  \
    \  long[] left = new long[n];\n    long[] right = new long[n];\n    for (i = 0;\
    \ i < n; i++) {\n        left[i] = i;\n        right[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          \
    \  if (left[i] == right[j]) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}", "{\n    long collisions = 0;\n    long i,\
    \ j;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n     \
    \       if (i < j) {\n                collisions++;\n            }\n        }\n\
    \    }\n    return collisions;\n}", "{\n    long i;\n    long j;\n    long count;\n\
    \    count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count = count + 1;\n          \
    \  }\n        }\n    }\n    return count;\n}", "{\n    long i;\n    long j;\n\
    \    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n\
    \    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n\
    \    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n    long ab;\n\
    \    long ac;\n    long ad;\n    long ae;\n    long af;\n    long ag;\n    long\
    \ ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n    long am;\n\
    \    long an;\n    long ao;\n    long ap;\n    long aq;\n    long ar;\n    long\
    \ as;\n    long at;\n    long au;\n    long av;\n    long aw;\n    long ax;\n\
    \    long ay;\n    long az;\n    long ba;\n    long bb;\n    long bc;\n    long\
    \ bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n    long bi;\n\
    \    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long bn;\n    long\
    \ bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n    long bt;\n\
    \    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long by;\n    long\
    \ bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n    long ce;\n\
    \    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long cj;\n    long\
    \ ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n    long cp;\n\
    \    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long cu;\n    long\
    \ cv;\n    long cw;\n    long cx;\n    long cy;\n   ", "{\n    long i = 0;\n \
    \   long j = 0;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n        for\
    \ (j = 0; j < n; j++) {\n            if (i == j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long i;\n   \
    \ long j;\n    long k;\n    long l;\n    long m;\n    long o;\n    long p;\n \
    \   long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n\
    \    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n    long bb;\n\
    \    long cc;\n    long dd;\n    long ee;\n    long ff;\n    long gg;\n    long\
    \ hh;\n    long ii;\n    long jj;\n    long kk;\n    long ll;\n    long mm;\n\
    \    long oo;\n    long pp;\n    long qq;\n    long rr;\n    long ss;\n    long\
    \ tt;\n    long uu;\n    long vv;\n    long ww;\n    long xx;\n    long yy;\n\
    \    long zz;\n    long aaa;\n    long bbb;\n    long ccc;\n    long ddd;\n  \
    \  long eee;\n    long fff;\n    long ggg;\n    long hhh;\n    long iii;\n   \
    \ long jjj;\n    long kkk;\n    long lll;\n    long mmm;\n    long ooo;\n    long\
    \ ppp;\n    long qqq;\n    long rrr;\n    long sss;\n    long ttt;\n    long uuu;\n\
    \    long vvv;\n    long www;\n    long xxx;\n    long yyy;\n    long zzz;\n \
    \   long aaaa;\n    long bbbb;\n    long cccc;\n    long dddd;\n    long eeee;\n\
    \    long ffff;\n    long gggg;\n    long hhhh;\n    long iiii;\n    long jjjj;\n\
    \    long kkkk;\n    long llll;\n    long mmmm;\n    long oooo;\n    long pppp;\n\
    \    long qqqq;\n    long rrrr;\n    long ssss;\n    long tttt;\n    long uuuu;\n\
    \    long", "{\n    long i, j, k, l;\n    long a[n];\n    long b[n];\n    long\
    \ c[n];\n    long d[n];\n    long e[n];\n    long f[n];\n    long g[n];\n    long\
    \ h[n];\n    long count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i;\n\
    \        b[i] = i;\n        c[i] = i;\n        d[i] = i;\n        e[i] = i;\n\
    \        f[i] = i;\n        g[i] = i;\n        h[i] = i;\n    }\n    for (i =\
    \ 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            for (k = 0;\
    \ k < n; k++) {\n                for (l = 0; l < n; l++) {\n                 \
    \   if (a[i] < b[j]) {\n                        count++;\n                   \
    \ }\n                    if (c[i] < d[j]) {\n                        count++;\n\
    \                    }\n                    if (e[i] < f[j]) {\n             \
    \           count++;\n                    }\n                    if (g[i] < h[j])\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i < j) \n        {\n            count += j - i;\n            i++;\n\
    \        } \n        else \n        {\n            j++;\n        }\n    }\n  \
    \  return count;\n}", "{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n    long\
    \ a,b,c,d,e,f,g,h;\n    long result;\n    long left_to_right_cars[n];\n    long\
    \ right_to_left_cars[n];\n    long left_to_right_cars_position[n];\n    long right_to_left_cars_position[n];\n\
    \    long left_to_right_cars_speed[n];\n    long right_to_left_cars_speed[n];\n\
    \    long left_to_right_cars_collision_time[n];\n    long right_to_left_cars_collision_time[n];\n\
    \    long left_to_right_cars_collision_position[n];\n    long right_to_left_cars_collision_position[n];\n\
    \    long left_to_right_cars_collision_speed[n];\n    long right_to_left_cars_collision_speed[n];\n\
    \    long left_to_right_cars_collision_index[n];\n    long right_to_left_cars_collision_index[n];\n\
    \    long left_to_right_cars_collision_count;\n    long right_to_left_cars_collision_count;\n\
    \    long left_to_right_cars_collision_time_min;\n    long right_to_left_cars_collision_time_min;\n\
    \    long left_to_right_cars_collision_time_min_index;\n    long right_to_left_cars_collision_time_min_index;\n\
    \    long left_to_right_cars_collision_time_min_position;\n    long right_to_left_cars_collision_time_min_position;\n\
    \    long left_to_right_cars_collision_time_min_speed;\n    long right_to_left_cars_collision_time_min_speed;\n\
    \    long left_to_right_cars_collision_time_min_index_value;\n    long right_to_",
  "{\n    long i, j, k, l;\n    long collisions = 0;\n    float x[n], y[n];\n    float\
    \ x1[n], y1[n];\n    float x2[n], y2[n];\n    float x3[n], y3[n];\n    float x4[n],\
    \ y4[n];\n    float x5[n], y5[n];\n    float x6[n], y6[n];\n    float x7[n], y7[n];\n\
    \    float x8[n], y8[n];\n    float x9[n], y9[n];\n    float x10[n], y10[n];\n\
    \    float x11[n], y11[n];\n    float x12[n], y12[n];\n    float x13[n], y13[n];\n\
    \    float x14[n], y14[n];\n    float x15[n], y15[n];\n    float x16[n], y16[n];\n\
    \    float x17[n], y17[n];\n    float x18[n], y18[n];\n    float x19[n], y19[n];\n\
    \    float x20[n], y20[n];\n    float x21[n], y21[n];\n    float x22[n], y22[n];\n\
    \    float x23[n], y23[n];\n    float x24[n], y24[n];\n    float x25[n], y25[n];\n\
    \    float x26[n], y26[n];\n    float x27[n], y27[n];\n    float x28[n], y28[n];\n\
    \    float x29[n], y29[n];\n    float x30[n], y30[n];\n    float x31[n], y31[n];\n\
    \    float x32[n], y32[n];\n    float x33[n], y33[n];\n    float x34[n], y34[n];\n\
    \    float x35[n], y35[n];\n    float x36[n], y36[n];\n    float x37[n], y37[n];",
  "{\n    long i, j, k, count = 0;\n    float x1, x2, y1, y2, x3, x4, y3, y4;\n  \
    \  float x, y;\n    float m1, m2;\n    float c1, c2;\n    float d;\n    float\
    \ t1, t2;\n    float a, b, c;\n    float t;\n    float tmin;\n    float tmax;\n\
    \    float tmin1, tmax1;\n    float tmin2, tmax2;\n    float tmin3, tmax3;\n \
    \   float tmin4, tmax4;\n    float tmin5, tmax5;\n    float tmin6, tmax6;\n  \
    \  float tmin7, tmax7;\n    float tmin8, tmax8;\n    float tmin9, tmax9;\n   \
    \ float tmin10, tmax10;\n    float tmin11, tmax11;\n    float tmin12, tmax12;\n\
    \    float tmin13, tmax13;\n    float tmin14, tmax14;\n    float tmin15, tmax15;\n\
    \    float tmin16, tmax16;\n    float tmin17, tmax17;\n    float tmin18, tmax18;\n\
    \    float tmin19, tmax19;\n    float tmin20, tmax20;\n    float tmin21, tmax21;\n\
    \    float tmin22, tmax22;\n    float tmin23, tmax23;\n    float tmin24, tmax24;\n\
    \    float tmin25, tmax25;\n    float tmin26, tmax26;\n    float tmin27, tmax27;\n\
    \    float tmin28, tmax28;\n    float tmin29, tmax29;\n    float tmin30, tmax30;\n\
    \    float tmin31, tmax31;\n    float tmin32, tmax32;\n    float tmin33, tmax33;\n\
    \    float tmin34, tmax34;\n    float tmin35, tmax35;\n    float tmin36, tmax36;\n\
    \    float tmin37, tmax", "{\n    long collisions = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long\
    \ cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg =\
    \ 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n\
    \    long ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n \
    \   long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n \
    \   long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n \
    \   long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n \
    \   long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n \
    \   long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n \
    \   long yyy = 0;\n    long", "{\n    long num_collisions = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n\
    \    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long\
    \ gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk =\
    \ 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n\
    \    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long\
    \ tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx =\
    \ 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n\
    \    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n\
    \    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n\
    \    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n\
    \    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n\
    \    long www = 0;", "{\n    long collisions = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n \
    \   long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long\
    \ ll = 0;\n    long mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq =\
    \ 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n\
    \    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long\
    \ zz = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n\
    \    long mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n\
    \    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n\
    \    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n\
    \    long zzz = 0;\n    long", "{\n    long i, j, k, count;\n    float x[n], y[n],\
    \ z[n];\n    float a[n], b[n], c[n];\n    float t[n], u[n], v[n];\n    float p[n],\
    \ q[n], r[n];\n    float s[n], w[n], e[n];\n    float f[n], g[n], h[n];\n    float\
    \ m[n], o[n], l[n];\n    float d[n], y1[n], z1[n];\n    float a1[n], b1[n], c1[n];\n\
    \    float t1[n], u1[n], v1[n];\n    float p1[n], q1[n], r1[n];\n    float s1[n],\
    \ w1[n], e1[n];\n    float f1[n], g1[n], h1[n];\n    float m1[n], o1[n], l1[n];\n\
    \    float d1[n], y2[n], z2[n];\n    float a2[n], b2[n], c2[n];\n    float t2[n],\
    \ u2[n], v2[n];\n    float p2[n], q2[n], r2[n];\n    float s2[n], w2[n], e2[n];\n\
    \    float f2[n], g2[n], h2[n];\n    float m2[n], o2[n], l2[n];\n    float d2[n],\
    \ y3[n], z3[n];\n    float a3[n], b3[n], c3[n];\n    float t3[n], u3[n], v3[n];\n\
    \    float p3[n], q3[n], r3[n];\n    float s3[n], w3[n], e3[n];\n    float f3[n],\
    \ g3[n], h3[n];\n    float m3[n], o3[n], l3[n];\n    float d3[n], y4[n], z4[n",
  "{\n    long result = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for\
    \ (long j = 0; j < n; j++) \n        {\n            if (i < j) \n            {\n\
    \                result++;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long i;\n    long j;\n    long count;\n    count = 0;\n    for (i\
    \ = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i ==\
    \ j) {\n                count = count + 1;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long i, j, k, l;\n    long collisions = 0;\n \
    \   long[] left_to_right = new long[n];\n    long[] right_to_left = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                collisions++;\n                for (k = j;\
    \ k < n - 1; k++) \n                {\n                    right_to_left[k] =\
    \ right_to_left[k + 1];\n                }\n                for (l = i; l < n\
    \ - 1; l++) \n                {\n                    left_to_right[l] = left_to_right[l\
    \ + 1];\n                }\n                n--;\n                break;\n   \
    \         }\n        }\n    }\n    return collisions;\n}", "{\n    long i, j,\
    \ count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n\
    \            if (i < j) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    return n * (n - 1) / 2;\n}", "{\n    long\
    \ i, j, k;\n    long collisions = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }", "{\n    long i, j, k;\n    long num_collisions = 0;\n    long left_to_right[n];\n\
    \    long right_to_left[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                num_collisions++;\n            }\n        }\n    }\n    return\
    \ num_collisions;\n}", "{\n    long result = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = 0; j < n; j++) {\n            if (i < j) {\n      \
    \          result++;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    long i;\n    long j;\n    long k;\n    long collisions;\n    long[] left_to_right;\n\
    \    long[] right_to_left;\n    long[] sorted_left_to_right;\n    long[] sorted_right_to_left;\n\
    \    collisions = 0;\n    left_to_right = new long[n];\n    right_to_left = new\
    \ long[n];\n    sorted_left_to_right = new long[n];\n    sorted_right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = random(0, 1000000000);\n        right_to_left[i] = random(0, 1000000000);\n\
    \    }\n    for (i = 0; i < n; i++) \n    {\n        sorted_left_to_right[i] =\
    \ left_to_right[i];\n        sorted_right_to_left[i] = right_to_left[i];\n   \
    \ }\n    std.sort.sort(sorted_left_to_right);\n    std.sort.sort(sorted_right_to_left);\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == sorted_left_to_right[j]) \n       \
    \     {\n                for (k = 0; k < n; k++) \n                {\n       \
    \             if (right_to_left[k] == sorted_right_to_left[n - 1 - j]) \n    \
    \                {\n                        collisions = collisions + 1;\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ collisions;\n}", "{\n    long collisions = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    while (i < n && j < n) \n    {\n        if (i == j) \n        {\n  \
    \          collisions++;\n            i++;\n            j++;\n        } \n   \
    \     else if (i < j) \n        {\n            i++;\n        } \n        else\
    \ \n        {\n            j++;\n        }\n    }\n    return collisions;\n}",
  "{\n    long num_collisions = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long\
    \ dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh =\
    \ 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n\
    \    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n \
    \   long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n \
    \   long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n \
    \   long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n    long ooo = 0;\n \
    \   long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n \
    \   long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;", "{\n\
    \    long i = 0;\n    long j = 0;\n    long count = 0;\n    while (i < n && j\
    \ < n) \n    {\n        if (i < j) \n        {\n            i++;\n        } \n\
    \        else if (i > j) \n        {\n            j++;\n        } \n        else\
    \ \n        {\n            i++;\n            j++;\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    return n * (n - 1) / 2;\n}", "{\n\
    \    long collisions = 0;\n    long i = 0;\n    long j = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n\
    \ - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j\
    \ < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                collisions++;\n            }\n        }\n \
    \   }\n    return collisions;\n}", "{\n    long collisions = 0;\n    long[] left_to_right_cars_positions\
    \ = new long[n];\n    long[] right_to_left_cars_positions = new long[n];\n   \
    \ for (long i = 0; i < n; i++) {\n        left_to_right_cars_positions[i] = i;\n\
    \        right_to_left_cars_positions[i] = i;\n    }\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (left_to_right_cars_positions[i]\
    \ == right_to_left_cars_positions[j]) {\n                collisions++;\n     \
    \       }\n        }\n    }\n    return collisions;\n}", "{\n    // your code\
    \ here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        for(long\
    \ j = 0; j < n; j++)\n        {\n            if(i == j)\n            {\n     \
    \           count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long collisions = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long\
    \ mm = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr =\
    \ 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n\
    \    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long\
    \ aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long\
    \ eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long\
    \ iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long\
    \ mmm = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long\
    \ rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long\
    \ vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long",
  "{\n    long i, j, k, l;\n    long count = 0;\n    float x[n], y[n];\n    float\
    \ a[n], b[n];\n    float c[n], d[n];\n    float e[n], f[n];\n    float g[n], h[n];\n\
    \    float m[n], p[n];\n    float q[n], r[n];\n    float s[n], t[n];\n    float\
    \ u[n], v[n];\n    float w[n], z[n];\n    float A[n], B[n];\n    float C[n], D[n];\n\
    \    float E[n], F[n];\n    float G[n], H[n];\n    float I[n], J[n];\n    float\
    \ K[n], L[n];\n    float M[n], N[n];\n    float O[n], P[n];\n    float Q[n], R[n];\n\
    \    float S[n], T[n];\n    float U[n], V[n];\n    float W[n], Z[n];\n    float\
    \ AA[n], BB[n];\n    float CC[n], DD[n];\n    float EE[n], FF[n];\n    float GG[n],\
    \ HH[n];\n    float II[n], JJ[n];\n    float KK[n], LL[n];\n    float MM[n], NN[n];\n\
    \    float OO[n], PP[n];\n    float QQ[n], RR[n];\n    float SS[n], TT[n];\n \
    \   float UU[n], VV[n];\n    float WW[n], ZZ[n];\n    float AAA[n], BBB[n];\n\
    \    float CCC[n], DDD[n];\n    float EEE[n], FFF[n];\n    float GGG[n], HHH[n];\n\
    \    float III[n], JJJ[n];\n    float KKK[n], LLL[n];\n    float MMM[n], NNN[n];\n\
    \    float OOO[n], PPP[n];\n    float QQQ[n], R", "{\n    long count = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n  \
    \          if (i < j) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long i, j, k, l, m, n, o, p, q, r, s, t,\
    \ u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n    long result = 0;\n\
    \    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          \
    \  for (k = 0; k < n; k++) {\n                for (l = 0; l < n; l++) {\n    \
    \                for (m = 0; m < n; m++) {\n                        for (n = 0;\
    \ n < n; n++) {\n                            for (o = 0; o < n; o++) {\n     \
    \                           for (p = 0; p < n; p++) {\n                      \
    \              for (q = 0; q < n; q++) {\n                                   \
    \     for (r = 0; r < n; r++) {\n                                            for\
    \ (s = 0; s < n; s++) {\n                                                for (t\
    \ = 0; t < n; t++) {\n                                                    for\
    \ (u = 0; u < n; u++) {\n                                                    \
    \    for (v = 0; v < n; v++) {\n                                             \
    \               for (w = 0; w < n; w++) {\n                                  \
    \                              for (x = 0; x < n; x++) {\n                   \
    \                                                 for (y = 0; y < n; y++) {\n\
    \                                                                        for (z\
    \ = 0; z < n; z++) {\n                                                       \
    \                     for (a = 0; a < n; a++) {\n                            \
    \                                                    for (b = 0; b < n; b++) {\n\
    \                                                                            \
    \        for (c = 0; c < n; c++) {\n                                         \
    \                                               for (d = 0; d < n; d++) {\n  \
    \                                                                            \
    \              for (e = 0; e < n; e++) {\n                                   \
    \                                                             for (f = 0; f <\
    \ n; f++) {\n                                                                \
    \                                    for (g = 0; g < n; g++) {\n             \
    \                                                                            \
    \               for (h = 0; h <", "{\n    long i,j,k;\n    long count = 0;\n \
    \   double[] left_to_right = new double[n];\n    double[] right_to_left = new\
    \ double[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n \
    \       right_to_left[i] = i;\n    }\n    for (i = 0; i < n; i++) {\n        for\
    \ (j = 0; j < n; j++) {\n            if (left_to_right[i] > right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long\
    \ a, b, c, d, e, f, g, h;\n    long collisions = 0;\n    long[] cars_left = new\
    \ long[n];\n    long[] cars_right = new long[n];\n    for (i = 0; i < n; i++)\
    \ \n    {\n        cars_left[i] = i;\n        cars_right[i] = n - i - 1;\n   \
    \ }\n    for (j = 0; j < n; j++) \n    {\n        for (k = 0; k < n; k++) \n \
    \       {\n            if (cars_left[j] == cars_right[k]) \n            {\n  \
    \              collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }", "{\n    long i;\n    long j;\n    long count;\n    count = 0;\n    for (i\
    \ = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i < j)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
