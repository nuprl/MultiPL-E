name: HumanEval_130_tri
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn0fer2fk.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0fer2fk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp5g60hqkt.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp5g60hqkt.tri(long) [0x427f7c]\\\
    n??:? void tmp5g60hqkt.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp5g60hqkt.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xfeba5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpptig3ft4.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpptig3ft4.tri(long) [0x427f7c]\\\
    n??:? void tmpptig3ft4.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpptig3ft4.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x52e83554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n\
    \        return result;\n    result[0] = 1;\n    if(n == 1)\n        return result;\n\
    \    result[1] = 3;\n    if(n == 2)\n        return result;\n    result[2] = 2;\n\
    \    if(n == 3)\n        return result;\n    for(int i = 3; i < n; i++)\n    {\n\
    \        if(i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n  \
    \          result[i] = result[i-1] + result[i-2] + result[i+1];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp55hrec3x.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4288e5]\\n??:? void tmp55hrec3x.__unittest_L44_C1()\
    \ [0x428095]\\n??:? void tmp55hrec3x.__modtest() [0x428668]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c99f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b832]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430abd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f6c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a49]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b809]\\n??:? runModuleUnitTests [0x42c775]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d2f]\\n??:? _d_run_main [0x428c9a]\\n??:? main [0x42867b]\\\
    n??:? __libc_start_main [0x9aa7b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0zm8yvr0.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp0zm8yvr0.tri(long) [0x427f82]\\\
    n??:? void tmp0zm8yvr0.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp0zm8yvr0.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xd3907554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjk8khe5m.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjk8khe5m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpwz8xjepk.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpwz8xjepk.tri(long) [0x427f82]\\\
    n??:? void tmpwz8xjepk.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpwz8xjepk.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x7ac94554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp04f2tuy_.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04f2tuy_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmptw9i7fgy.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmptw9i7fgy.tri(long) [0x427f82]\\\
    n??:? void tmptw9i7fgy.__unittest_L40_C1() [0x427fbf]\\n??:? void tmptw9i7fgy.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x13c14554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpy1od660d.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpy1od660d.tri(long) [0x427f7f]\\\
    n??:? void tmpy1od660d.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpy1od660d.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x58b18554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp91cje6xi.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp91cje6xi.tri(long) [0x427f7f]\\\
    n??:? void tmp91cje6xi.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp91cje6xi.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x832b1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpkla1qh1h.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpkla1qh1h.tri(long) [0x427f7f]\\\
    n??:? void tmpkla1qh1h.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpkla1qh1h.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x27f30554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp3zdf3mwc.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp3zdf3mwc.tri(long) [0x427f7c]\\\
    n??:? void tmp3zdf3mwc.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp3zdf3mwc.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x96608554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] res = new long[n + 1];\n    res[0] = 1;\n\
    \    res[1] = 3;\n    res[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            res[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            res[i] = res[i - 1] + res[i - 2] + res[i\
    \ + 1];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmprvb8zgcx.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmprvb8zgcx.tri(long) [0x427f7c]\\\
    n??:? void tmprvb8zgcx.__unittest_L40_C1() [0x427fbb]\\n??:? void tmprvb8zgcx.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xc72b0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpr8ef2ciy.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmpr8ef2ciy.tri(long) [0x427fcf]\\\
    n??:? void tmpr8ef2ciy.__unittest_L42_C1() [0x42800f]\\n??:? void tmpr8ef2ciy.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0x907b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    if (n > 0)\n    {\n        result[1] = 3;\n        if (n > 1)\n  \
    \      {\n            result[2] = 2;\n            if (n > 2)\n            {\n\
    \                for (long i = 3; i <= n; i++)\n                {\n          \
    \          if (i % 2 == 0)\n                    {\n                        result[i]\
    \ = 1 + i / 2;\n                    }\n                    else\n            \
    \        {\n                        result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n                    }\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpzsevpcm9.d(41): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428966]\\n??:? long[] tmpzsevpcm9.tri(long) [0x427fa9]\\\
    n??:? void tmpzsevpcm9.__unittest_L49_C1() [0x427fe7]\\n??:? void tmpzsevpcm9.__modtest()\
    \ [0x428634]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c96f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b802]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a8d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f3c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a19]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7d9]\\n??:? runModuleUnitTests [0x42c745]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d78]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cff]\\n??:? _d_run_main [0x428c6a]\\n??:? main [0x428647]\\\
    n??:? __libc_start_main [0xbb004554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7xptkw1m.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xptkw1m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpb6ghmefg.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpb6ghmefg.tri(long) [0x427f7f]\\\
    n??:? void tmpb6ghmefg.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpb6ghmefg.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x38de6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpdui5pne3.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpdui5pne3.tri(long) [0x427f7c]\\\
    n??:? void tmpdui5pne3.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpdui5pne3.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x44b00554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpwzi7f_3i.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmpwzi7f_3i.tri(long) [0x427fcf]\\\
    n??:? void tmpwzi7f_3i.__unittest_L42_C1() [0x42800f]\\n??:? void tmpwzi7f_3i.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0x2d5ca554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    if (n > 0)\n    {\n        result[1] = 3;\n        if (n > 1)\n  \
    \      {\n            result[2] = 2;\n            for (long i = 3; i <= n; i++)\n\
    \            {\n                if (i % 2 == 0)\n                {\n         \
    \           result[i] = 1 + i / 2;\n                }\n                else\n\
    \                {\n                    result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmprx3yu3rf.d(39): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428956]\\n??:? long[] tmprx3yu3rf.tri(long) [0x427f9e]\\\
    n??:? void tmprx3yu3rf.__unittest_L46_C1() [0x427fdb]\\n??:? void tmprx3yu3rf.__modtest()\
    \ [0x428628]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c95f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a7d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a09]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7c9]\\n??:? runModuleUnitTests [0x42c735]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cef]\\n??:? _d_run_main [0x428c5a]\\n??:? main [0x42863b]\\\
    n??:? __libc_start_main [0xc3b0c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    if (n == 0)\n        return [];\n    if (n ==\
    \ 1)\n        return [1];\n    if (n == 2)\n        return [1, 3];\n    long[]\
    \ result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpqme3ongp.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4289be]\\n??:? long[] tmpqme3ongp.tri(long) [0x428002]\\\
    n??:? void tmpqme3ongp.__unittest_L42_C1() [0x42803f]\\n??:? void tmpqme3ongp.__modtest()\
    \ [0x42868c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c9c7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b85a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ae5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f94]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a71]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b831]\\n??:? runModuleUnitTests [0x42c79d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428dd0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d57]\\n??:? _d_run_main [0x428cc2]\\n??:? main [0x42869f]\\\
    n??:? __libc_start_main [0xd846a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0) return result;\n    result[0] = 1;\n    if (n == 1) return result;\n    result[1]\
    \ = 3;\n    if (n == 2) return result;\n    result[2] = 2;\n    for (long i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp5f2q5d92.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmp5f2q5d92.tri(long) [0x427fcf]\\\
    n??:? void tmp5f2q5d92.__unittest_L43_C1() [0x42800f]\\n??:? void tmp5f2q5d92.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0xfea8e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpcpvy4s2e.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpcpvy4s2e.tri(long) [0x427f7c]\\\
    n??:? void tmpcpvy4s2e.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpcpvy4s2e.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x1cdd7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] res = new long[n+1];\n    res[0] = 1;\n\
    \    res[1] = 3;\n    res[2] = 2;\n    for(long i = 3; i <= n; i++)\n    {\n \
    \       if(i % 2 == 0)\n        {\n            res[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            res[i] = res[i-1] + res[i-2] + res[i+1];\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmphosc8wqc.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmphosc8wqc.tri(long) [0x427f7f]\\\
    n??:? void tmphosc8wqc.__unittest_L40_C1() [0x427fbf]\\n??:? void tmphosc8wqc.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xbec81554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpbzww07vn.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpbzww07vn.tri(long) [0x427f7f]\\\
    n??:? void tmpbzww07vn.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpbzww07vn.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xcdb3d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp1zh3tpdc.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp1zh3tpdc.tri(long) [0x427f7c]\\\
    n??:? void tmp1zh3tpdc.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp1zh3tpdc.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x2d4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpvt_u3hvx.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpvt_u3hvx.tri(long) [0x427f82]\\\
    n??:? void tmpvt_u3hvx.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpvt_u3hvx.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x3a8b7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpooq9_mkc.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpooq9_mkc.tri(long) [0x427f82]\\\
    n??:? void tmpooq9_mkc.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpooq9_mkc.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x2b867554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj15mb1gi.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj15mb1gi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpisea62zq.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpisea62zq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpp25b2dde.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpp25b2dde.tri(long) [0x427f7c]\\\
    n??:? void tmpp25b2dde.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpp25b2dde.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x65d57554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpjur89mqp.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpjur89mqp.tri(long) [0x427f7f]\\\
    n??:? void tmpjur89mqp.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpjur89mqp.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x81703554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmputmpeo9m.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmputmpeo9m.tri(long) [0x427f7c]\\\
    n??:? void tmputmpeo9m.__unittest_L40_C1() [0x427fbb]\\n??:? void tmputmpeo9m.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xa2abd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg3aaxbcq.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3aaxbcq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpd96akcoa.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpd96akcoa.tri(long) [0x427f7c]\\\
    n??:? void tmpd96akcoa.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpd96akcoa.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x8249554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpmap1g5d1.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpmap1g5d1.tri(long) [0x427f7f]\\\
    n??:? void tmpmap1g5d1.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpmap1g5d1.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xb061554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp1c1zn8jm.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp1c1zn8jm.tri(long) [0x427f7c]\\\
    n??:? void tmp1c1zn8jm.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp1c1zn8jm.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x6f57a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpn7amr90a.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpn7amr90a.tri(long) [0x427f7f]\\\
    n??:? void tmpn7amr90a.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpn7amr90a.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x5f07d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    if\
    \ (n == 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n    \
    \    return result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n\
    \    result[2] = 2;\n    if (n == 3)\n        return result;\n    for (long i\
    \ = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[(int)i]\
    \ = 1 + i / 2;\n        else\n            result[(int)i] = result[(int)i - 1]\
    \ + result[(int)i - 2] + result[(int)i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu92lymap.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    n/tmp/tmpu92lymap.d(38): Error: C style cast illegal, use `cast(int)i`\\n/tmp/tmpu92lymap.d(40):\
    \ Error: C style cast illegal, use `cast(int)i`\\n/tmp/tmpu92lymap.d(40): Error:\
    \ C style cast illegal, use `cast(int)i`\\n/tmp/tmpu92lymap.d(40): Error: C style\
    \ cast illegal, use `cast(int)i`\\n/tmp/tmpu92lymap.d(40): Error: C style cast\
    \ illegal, use `cast(int)i`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpu92lymap.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    if (n == 3)\n        return result;\n    for (long i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n \
    \       else\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqz8e4a4r.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4288ed]\\n??:? void tmpqz8e4a4r.__unittest_L44_C1()\
    \ [0x42809d]\\n??:? void tmpqz8e4a4r.__modtest() [0x428670]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c9a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b83a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ac5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a51]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b811]\\n??:? runModuleUnitTests [0x42c77d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428db0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d37]\\n??:? _d_run_main [0x428ca2]\\n??:? main [0x428683]\\\
    n??:? __libc_start_main [0x5bafb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpak6km9gq.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpak6km9gq.tri(long) [0x427f7c]\\\
    n??:? void tmpak6km9gq.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpak6km9gq.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x546cf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpuslq6p_6.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpuslq6p_6.tri(long) [0x427f82]\\\
    n??:? void tmpuslq6p_6.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpuslq6p_6.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x48ed554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpx4fn2mjm.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpx4fn2mjm.tri(long) [0x427f7f]\\\
    n??:? void tmpx4fn2mjm.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpx4fn2mjm.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x838ff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpcqbud8gn.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpcqbud8gn.tri(long) [0x427f82]\\\
    n??:? void tmpcqbud8gn.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpcqbud8gn.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x79530554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpyclk1isw.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpyclk1isw.tri(long) [0x427f82]\\\
    n??:? void tmpyclk1isw.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpyclk1isw.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xca9ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpbh2fsg2k.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpbh2fsg2k.tri(long) [0x427f7f]\\\
    n??:? void tmpbh2fsg2k.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpbh2fsg2k.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xef9bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpwpec8x9f.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpwpec8x9f.tri(long) [0x427f82]\\\
    n??:? void tmpwpec8x9f.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpwpec8x9f.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xf235e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] arr = new long[n + 1];\n    arr[0] = 1;\n\
    \    arr[1] = 3;\n    arr[2] = 2;\n    for (long i = 3; i < n + 1; i++)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            arr[i] = 1 + i / 2;\n       \
    \ }\n        else\n        {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1];\n        }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpp6h0l29_.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpp6h0l29_.tri(long) [0x427f82]\\\
    n??:? void tmpp6h0l29_.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpp6h0l29_.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xfec55554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0n7jg7ol.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp0n7jg7ol.tri(long) [0x427f7f]\\\
    n??:? void tmp0n7jg7ol.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp0n7jg7ol.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xbfdcd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpmgh3yuk8.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpmgh3yuk8.tri(long) [0x427f7f]\\\
    n??:? void tmpmgh3yuk8.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpmgh3yuk8.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x72262554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpgm0_joyx.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpgm0_joyx.tri(long) [0x427f7f]\\\
    n??:? void tmpgm0_joyx.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpgm0_joyx.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xdd76d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    if(n == 0)\n        return\
    \ result[0..1];\n    if(n == 1)\n        return result[0..2];\n    if(n == 2)\n\
    \        return result[0..3];\n    for(int i = 3; i <= n; i++)\n    {\n      \
    \  if(i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n        \
    \    result[i] = result[i-1] + result[i-2] + result[i+1];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmphsxkihh_.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4289ce]\\n??:? long[] tmphsxkihh_.tri(long) [0x428013]\\\
    n??:? void tmphsxkihh_.__unittest_L42_C1() [0x42804f]\\n??:? void tmphsxkihh_.__modtest()\
    \ [0x42869c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c9d7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b86a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430af5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430fa4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b841]\\n??:? runModuleUnitTests [0x42c7ad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428de0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d67]\\n??:? _d_run_main [0x428cd2]\\n??:? main [0x4286af]\\\
    n??:? __libc_start_main [0x3f188554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpdtm5sk0s.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpdtm5sk0s.tri(long) [0x427f7f]\\\
    n??:? void tmpdtm5sk0s.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpdtm5sk0s.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x61c26554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpn2hpy44p.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpn2hpy44p.tri(long) [0x427f7f]\\\
    n??:? void tmpn2hpy44p.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpn2hpy44p.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xad543554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpab3s0dgp.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpab3s0dgp.tri(long) [0x427f7c]\\\
    n??:? void tmpab3s0dgp.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpab3s0dgp.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x149d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(long i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpeq6zw_z5.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpeq6zw_z5.tri(long) [0x427f7f]\\\
    n??:? void tmpeq6zw_z5.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpeq6zw_z5.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xc8a89554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmphgy6ru8t.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmphgy6ru8t.tri(long) [0x427f7c]\\\
    n??:? void tmphgy6ru8t.__unittest_L40_C1() [0x427fbb]\\n??:? void tmphgy6ru8t.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x9656b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpna1y9tqk.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpna1y9tqk.tri(long) [0x427f82]\\\
    n??:? void tmpna1y9tqk.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpna1y9tqk.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xd197d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwy_9skp8.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwy_9skp8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpdvs87t3g.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpdvs87t3g.tri(long) [0x427f7f]\\\
    n??:? void tmpdvs87t3g.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpdvs87t3g.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x7f9d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp13lxvdqo.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp13lxvdqo.tri(long) [0x427f7f]\\\
    n??:? void tmp13lxvdqo.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp13lxvdqo.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x9b343554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0) \n    {\n        return result;\n    }\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++) \n    {\n      \
    \  if (i % 2 == 0) \n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else \n        {\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpxgj4__p3.d(39): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428956]\\n??:? long[] tmpxgj4__p3.tri(long) [0x427f9a]\\\
    n??:? void tmpxgj4__p3.__unittest_L44_C1() [0x427fd7]\\n??:? void tmpxgj4__p3.__modtest()\
    \ [0x428624]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c95f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a7d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a09]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7c9]\\n??:? runModuleUnitTests [0x42c735]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cef]\\n??:? _d_run_main [0x428c5a]\\n??:? main [0x428637]\\\
    n??:? __libc_start_main [0xb14df554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpccll34gz.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpccll34gz.tri(long) [0x427f7f]\\\
    n??:? void tmpccll34gz.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpccll34gz.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x302f7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpxljkesw3.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpxljkesw3.tri(long) [0x427f7f]\\\
    n??:? void tmpxljkesw3.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpxljkesw3.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xa8b8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpr4sowkrb.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpr4sowkrb.tri(long) [0x427f7f]\\\
    n??:? void tmpr4sowkrb.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpr4sowkrb.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xabc12554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpv53sm3et.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpv53sm3et.tri(long) [0x427f7c]\\\
    n??:? void tmpv53sm3et.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpv53sm3et.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x545e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n\
    \        return result;\n    result[0] = 1;\n    if(n == 1)\n        return result;\n\
    \    result[1] = 3;\n    if(n == 2)\n        return result;\n    result[2] = 2;\n\
    \    for(int i = 3; i <= n; i++)\n    {\n        if(i % 2 == 0)\n            result[i]\
    \ = 1 + i / 2;\n        else\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpe6lnrelc.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428986]\\n??:? long[] tmpe6lnrelc.tri(long) [0x427fc9]\\\
    n??:? void tmpe6lnrelc.__unittest_L42_C1() [0x428007]\\n??:? void tmpe6lnrelc.__modtest()\
    \ [0x428654]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b822]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430aad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a39]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f9]\\n??:? runModuleUnitTests [0x42c765]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d98]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d1f]\\n??:? _d_run_main [0x428c8a]\\n??:? main [0x428667]\\\
    n??:? __libc_start_main [0x71426554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpyd7lxdnz.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpyd7lxdnz.tri(long) [0x427f82]\\\
    n??:? void tmpyd7lxdnz.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpyd7lxdnz.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x48768554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpiuvmcn3g.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpiuvmcn3g.tri(long) [0x427f7f]\\\
    n??:? void tmpiuvmcn3g.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpiuvmcn3g.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xb2df554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] arr = new long[n+1];\n    arr[0] = 1;\n\
    \    arr[1] = 3;\n    arr[2] = 2;\n    for(int i = 3; i < n+1; i++)\n    {\n \
    \       if(i % 2 == 0)\n        {\n            arr[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n\
    \        }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpi4gr4zrd.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpi4gr4zrd.tri(long) [0x427f82]\\\
    n??:? void tmpi4gr4zrd.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpi4gr4zrd.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xa300b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpf44mb0j6.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpf44mb0j6.tri(long) [0x427f82]\\\
    n??:? void tmpf44mb0j6.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpf44mb0j6.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x1e67e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp4bqslno9.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp4bqslno9.tri(long) [0x427f82]\\\
    n??:? void tmp4bqslno9.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp4bqslno9.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x756eb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpafh2a5id.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpafh2a5id.tri(long) [0x427f82]\\\
    n??:? void tmpafh2a5id.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpafh2a5id.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xa6076554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp7zub2h73.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp7zub2h73.tri(long) [0x427f82]\\\
    n??:? void tmp7zub2h73.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp7zub2h73.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x83d39554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpjx1i881d.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpjx1i881d.tri(long) [0x427f82]\\\
    n??:? void tmpjx1i881d.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpjx1i881d.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x76a29554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpt5i1w_up.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpt5i1w_up.tri(long) [0x427f7c]\\\
    n??:? void tmpt5i1w_up.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpt5i1w_up.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xdc2de554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp8ux6hlg7.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp8ux6hlg7.tri(long) [0x427f82]\\\
    n??:? void tmp8ux6hlg7.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp8ux6hlg7.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x4d32b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n\
    \        return result;\n    result[0] = 1;\n    if(n == 1)\n        return result;\n\
    \    result[1] = 3;\n    if(n == 2)\n        return result;\n    result[2] = 2;\n\
    \    for(int i = 3; i <= n; i++)\n    {\n        if(i % 2 == 0)\n            result[i]\
    \ = 1 + i / 2;\n        else\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpwxdvow8e.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428986]\\n??:? long[] tmpwxdvow8e.tri(long) [0x427fc9]\\\
    n??:? void tmpwxdvow8e.__unittest_L42_C1() [0x428007]\\n??:? void tmpwxdvow8e.__modtest()\
    \ [0x428654]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b822]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430aad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a39]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f9]\\n??:? runModuleUnitTests [0x42c765]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d98]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d1f]\\n??:? _d_run_main [0x428c8a]\\n??:? main [0x428667]\\\
    n??:? __libc_start_main [0x337d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpvqc59ikq.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpvqc59ikq.tri(long) [0x427f7c]\\\
    n??:? void tmpvqc59ikq.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpvqc59ikq.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x17fcd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    if (n == 3)\n        return result;\n    for (long i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n \
    \       else\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxhnh43wj.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4288ed]\\n??:? void tmpxhnh43wj.__unittest_L44_C1()\
    \ [0x42809d]\\n??:? void tmpxhnh43wj.__modtest() [0x428670]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c9a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b83a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ac5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a51]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b811]\\n??:? runModuleUnitTests [0x42c77d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428db0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d37]\\n??:? _d_run_main [0x428ca2]\\n??:? main [0x428683]\\\
    n??:? __libc_start_main [0x22ded554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp4drxlq0i.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp4drxlq0i.tri(long) [0x427f7f]\\\
    n??:? void tmp4drxlq0i.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp4drxlq0i.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x212e4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpvia_l28t.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpvia_l28t.tri(long) [0x427f7f]\\\
    n??:? void tmpvia_l28t.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpvia_l28t.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x65b51554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp_jxmy1bs.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp_jxmy1bs.tri(long) [0x427f82]\\\
    n??:? void tmp_jxmy1bs.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp_jxmy1bs.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x1ce94554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp1km8whb0.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp1km8whb0.tri(long) [0x427f7c]\\\
    n??:? void tmp1km8whb0.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp1km8whb0.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x9c27f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpbis3vrt1.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpbis3vrt1.tri(long) [0x427f82]\\\
    n??:? void tmpbis3vrt1.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpbis3vrt1.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x36a40554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpmpe1kca_.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpmpe1kca_.tri(long) [0x427f7c]\\\
    n??:? void tmpmpe1kca_.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpmpe1kca_.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x59d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt1zobpuh.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1zobpuh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp4zxiec_t.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp4zxiec_t.tri(long) [0x427f7f]\\\
    n??:? void tmp4zxiec_t.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp4zxiec_t.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x3f49e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpu537a7at.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpu537a7at.tri(long) [0x427f82]\\\
    n??:? void tmpu537a7at.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpu537a7at.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x70654554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp9mg8blpj.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp9mg8blpj.tri(long) [0x427f7f]\\\
    n??:? void tmp9mg8blpj.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp9mg8blpj.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x7c5ea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpcubkurao.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpcubkurao.tri(long) [0x427f7f]\\\
    n??:? void tmpcubkurao.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpcubkurao.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xfd869554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] arr = new long[n + 1];\n    arr[0] = 1;\n\
    \    arr[1] = 3;\n    arr[2] = 2;\n    for (int i = 3; i < n + 1; i++)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            arr[i] = 1 + i / 2;\n       \
    \ }\n        else\n        {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1];\n        }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpphsxnu9m.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpphsxnu9m.tri(long) [0x427f82]\\\
    n??:? void tmpphsxnu9m.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpphsxnu9m.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xaebec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp2yd4l5n7.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp2yd4l5n7.tri(long) [0x427f7c]\\\
    n??:? void tmp2yd4l5n7.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp2yd4l5n7.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xc9306554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp_brz7cwn.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp_brz7cwn.tri(long) [0x427f7f]\\\
    n??:? void tmp_brz7cwn.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp_brz7cwn.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x1a337554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpp6o94naz.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpp6o94naz.tri(long) [0x427f7c]\\\
    n??:? void tmpp6o94naz.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpp6o94naz.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xf9a9f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpd302xgav.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpd302xgav.tri(long) [0x427f7c]\\\
    n??:? void tmpd302xgav.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpd302xgav.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xb1fae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    if (n == 0) \n        return new long[0];\n  \
    \  if (n == 1) \n        return new long[] { 1 };\n    if (n == 2) \n        return\
    \ new long[] { 1, 3 };\n    if (n == 3) \n        return new long[] { 1, 3, 2,\
    \ 8 };\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    result[3] = 8;\n    for (long i = 4; i <= n; i++)\
    \ \n    {\n        if (i % 2 == 0) \n            result[i] = 1 + i / 2;\n    \
    \    else \n            result[i] = result[i - 1] + result[i - 2] + result[i +\
    \ 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsdatwdjp.d(26): Error: found `{` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpsdatwdjp.d(26): Error: found `}` when expecting\
    \ `;` following statement\\n/tmp/tmpsdatwdjp.d(26): Deprecation: use `{ }` for\
    \ an empty statement, not `;`\\n/tmp/tmpsdatwdjp.d(28): Error: found `{` when\
    \ expecting `;` following `return` statement\\n/tmp/tmpsdatwdjp.d(28): Error:\
    \ found `}` when expecting `;` following statement\\n/tmp/tmpsdatwdjp.d(28): Deprecation:\
    \ use `{ }` for an empty statement, not `;`\\n/tmp/tmpsdatwdjp.d(30): Error: found\
    \ `{` when expecting `;` following `return` statement\\n/tmp/tmpsdatwdjp.d(30):\
    \ Error: found `}` when expecting `;` following statement\\n/tmp/tmpsdatwdjp.d(30):\
    \ Deprecation: use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdatwdjp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpyvsnkbni.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpyvsnkbni.tri(long) [0x427f82]\\\
    n??:? void tmpyvsnkbni.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpyvsnkbni.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x45d2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpemipvwpd.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpemipvwpd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp90wlml5x.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp90wlml5x.tri(long) [0x427f7c]\\\
    n??:? void tmp90wlml5x.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp90wlml5x.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x86048554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpiljflqto.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpiljflqto.tri(long) [0x427f82]\\\
    n??:? void tmpiljflqto.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpiljflqto.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x8511b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpv_64vqlz.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpv_64vqlz.tri(long) [0x427f7c]\\\
    n??:? void tmpv_64vqlz.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpv_64vqlz.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x837ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpey520d5o.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmpey520d5o.tri(long) [0x427fcf]\\\
    n??:? void tmpey520d5o.__unittest_L42_C1() [0x42800f]\\n??:? void tmpey520d5o.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0x29f72554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp9_p87xvk.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp9_p87xvk.tri(long) [0x427f7f]\\\
    n??:? void tmp9_p87xvk.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp9_p87xvk.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xb7d22554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpsyesk4e9.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpsyesk4e9.tri(long) [0x427f7c]\\\
    n??:? void tmpsyesk4e9.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpsyesk4e9.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xd4c66554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmporpxmg4s.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmporpxmg4s.tri(long) [0x427f7c]\\\
    n??:? void tmporpxmg4s.__unittest_L40_C1() [0x427fbb]\\n??:? void tmporpxmg4s.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xd99e6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpwuoig7bl.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpwuoig7bl.tri(long) [0x427f7c]\\\
    n??:? void tmpwuoig7bl.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpwuoig7bl.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x41f15554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp2lhu8g60.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp2lhu8g60.tri(long) [0x427f7c]\\\
    n??:? void tmp2lhu8g60.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp2lhu8g60.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x3d463554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp7tksikva.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmp7tksikva.tri(long) [0x427fcf]\\\
    n??:? void tmp7tksikva.__unittest_L42_C1() [0x42800f]\\n??:? void tmp7tksikva.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0xae8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n\
    \        return result;\n    result[0] = 1;\n    if(n == 1)\n        return result;\n\
    \    result[1] = 3;\n    if(n == 2)\n        return result;\n    result[2] = 2;\n\
    \    if(n == 3)\n        return result;\n    for(int i = 3; i < n+1; i++)\n  \
    \  {\n        if(i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n\
    \            result[i] = result[i-1] + result[i-2] + result[i+1];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqn4b8_h5.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4288ed]\\n??:? void tmpqn4b8_h5.__unittest_L44_C1()\
    \ [0x42809d]\\n??:? void tmpqn4b8_h5.__modtest() [0x428670]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c9a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b83a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ac5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a51]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b811]\\n??:? runModuleUnitTests [0x42c77d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428db0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d37]\\n??:? _d_run_main [0x428ca2]\\n??:? main [0x428683]\\\
    n??:? __libc_start_main [0xd74a0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmph3arlp9j.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmph3arlp9j.tri(long) [0x427fcf]\\\
    n??:? void tmph3arlp9j.__unittest_L42_C1() [0x42800f]\\n??:? void tmph3arlp9j.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0xdb3d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpls5fk_et.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpls5fk_et.tri(long) [0x427f7f]\\\
    n??:? void tmpls5fk_et.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpls5fk_et.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x672a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp93b3b777.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp93b3b777.tri(long) [0x427f7c]\\\
    n??:? void tmp93b3b777.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp93b3b777.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x25726554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpinlpz3hw.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmpinlpz3hw.tri(long) [0x427fcf]\\\
    n??:? void tmpinlpz3hw.__unittest_L42_C1() [0x42800f]\\n??:? void tmpinlpz3hw.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0x554b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpsc0podhe.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428986]\\n??:? long[] tmpsc0podhe.tri(long) [0x427fc9]\\\
    n??:? void tmpsc0podhe.__unittest_L42_C1() [0x428007]\\n??:? void tmpsc0podhe.__modtest()\
    \ [0x428654]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b822]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430aad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a39]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f9]\\n??:? runModuleUnitTests [0x42c765]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d98]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d1f]\\n??:? _d_run_main [0x428c8a]\\n??:? main [0x428667]\\\
    n??:? __libc_start_main [0x721ad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpopnv8n30.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpopnv8n30.tri(long) [0x427f7c]\\\
    n??:? void tmpopnv8n30.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpopnv8n30.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xd333b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp_ps0c8gg.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp_ps0c8gg.tri(long) [0x427f82]\\\
    n??:? void tmp_ps0c8gg.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp_ps0c8gg.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xcff02554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0i906fjc.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp0i906fjc.tri(long) [0x427f7c]\\\
    n??:? void tmp0i906fjc.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp0i906fjc.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xbfd3a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(long i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpo4evuqhq.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpo4evuqhq.tri(long) [0x427f7f]\\\
    n??:? void tmpo4evuqhq.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpo4evuqhq.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xdb34e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp8ss8t9md.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp8ss8t9md.tri(long) [0x427f7c]\\\
    n??:? void tmp8ss8t9md.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp8ss8t9md.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x3f906554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(long i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpo97gnti6.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpo97gnti6.tri(long) [0x427f7f]\\\
    n??:? void tmpo97gnti6.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpo97gnti6.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xe1ee7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpctukeup9.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpctukeup9.tri(long) [0x427f7c]\\\
    n??:? void tmpctukeup9.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpctukeup9.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x84fd3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmplene_69h.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmplene_69h.tri(long) [0x427f7f]\\\
    n??:? void tmplene_69h.__unittest_L40_C1() [0x427fbf]\\n??:? void tmplene_69h.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xaaed6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ (i / 2);\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi26tbv8q.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi26tbv8q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpmje1e9ei.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmpmje1e9ei.tri(long) [0x427fcf]\\\
    n??:? void tmpmje1e9ei.__unittest_L42_C1() [0x42800f]\\n??:? void tmpmje1e9ei.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0x9740a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpq54yszgv.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpq54yszgv.tri(long) [0x427f82]\\\
    n??:? void tmpq54yszgv.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpq54yszgv.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xc7bea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpn9kdvcp0.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpn9kdvcp0.tri(long) [0x427f82]\\\
    n??:? void tmpn9kdvcp0.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpn9kdvcp0.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xc1762554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp590t27d1.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp590t27d1.tri(long) [0x427f7c]\\\
    n??:? void tmp590t27d1.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp590t27d1.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xb88a6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps_3l9rio.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_3l9rio.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmptos2r16g.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmptos2r16g.tri(long) [0x427f7c]\\\
    n??:? void tmptos2r16g.__unittest_L40_C1() [0x427fbb]\\n??:? void tmptos2r16g.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xee372554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmppuq_6vtp.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmppuq_6vtp.tri(long) [0x427f7f]\\\
    n??:? void tmppuq_6vtp.__unittest_L40_C1() [0x427fbf]\\n??:? void tmppuq_6vtp.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x43529554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpn6d3atc3.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpn6d3atc3.tri(long) [0x427f7c]\\\
    n??:? void tmpn6d3atc3.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpn6d3atc3.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x3327c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptkpgrx9z.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptkpgrx9z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpyrypefjm.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpyrypefjm.tri(long) [0x427f82]\\\
    n??:? void tmpyrypefjm.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpyrypefjm.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x1de7d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[(int)i] = 1 + i\
    \ / 2;\n        }\n        else\n        {\n            result[(int)i] = result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfsvjly4v.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    n/tmp/tmpfsvjly4v.d(31): Error: C style cast illegal, use `cast(int)i`\\n/tmp/tmpfsvjly4v.d(35):\
    \ Error: C style cast illegal, use `cast(int)i`\\n/tmp/tmpfsvjly4v.d(35): Error:\
    \ C style cast illegal, use `cast(int)i`\\n/tmp/tmpfsvjly4v.d(35): Error: C style\
    \ cast illegal, use `cast(int)i`\\n/tmp/tmpfsvjly4v.d(35): Error: C style cast\
    \ illegal, use `cast(int)i`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfsvjly4v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp20bgsuif.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp20bgsuif.tri(long) [0x427f7f]\\\
    n??:? void tmp20bgsuif.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp20bgsuif.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x5dc97554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpft5qm34w.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpft5qm34w.tri(long) [0x427f7c]\\\
    n??:? void tmpft5qm34w.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpft5qm34w.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xde46d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpbjo720fv.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpbjo720fv.tri(long) [0x427f7c]\\\
    n??:? void tmpbjo720fv.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpbjo720fv.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xe09a8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_aczkkw_.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_aczkkw_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpl445zmxa.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpl445zmxa.tri(long) [0x427f7c]\\\
    n??:? void tmpl445zmxa.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpl445zmxa.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x47682554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpufikmb6v.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpufikmb6v.tri(long) [0x427f82]\\\
    n??:? void tmpufikmb6v.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpufikmb6v.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x7b7e4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpdrpid9zp.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmpdrpid9zp.tri(long) [0x427fcf]\\\
    n??:? void tmpdrpid9zp.__unittest_L42_C1() [0x42800f]\\n??:? void tmpdrpid9zp.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0xccc49554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpat06q7o2.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpat06q7o2.tri(long) [0x427f82]\\\
    n??:? void tmpat06q7o2.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpat06q7o2.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x88b4e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp38_eahn4.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp38_eahn4.tri(long) [0x427f7f]\\\
    n??:? void tmp38_eahn4.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp38_eahn4.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x5f074554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp3ilsz255.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp3ilsz255.tri(long) [0x427f7c]\\\
    n??:? void tmp3ilsz255.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp3ilsz255.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xa40ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpguuhq5tu.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpguuhq5tu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpcjvbb7uz.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpcjvbb7uz.tri(long) [0x427f7c]\\\
    n??:? void tmpcjvbb7uz.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpcjvbb7uz.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x29911554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpyxkmc4lb.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpyxkmc4lb.tri(long) [0x427f7c]\\\
    n??:? void tmpyxkmc4lb.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpyxkmc4lb.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x8558c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpfri37n32.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpfri37n32.tri(long) [0x427f82]\\\
    n??:? void tmpfri37n32.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpfri37n32.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x32297554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpo6fg3m5z.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmpo6fg3m5z.tri(long) [0x427fcf]\\\
    n??:? void tmpo6fg3m5z.__unittest_L42_C1() [0x42800f]\\n??:? void tmpo6fg3m5z.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0x10dd2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpxv687fio.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpxv687fio.tri(long) [0x427f7f]\\\
    n??:? void tmpxv687fio.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpxv687fio.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x9bbe7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    if\
    \ (n == 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n    \
    \    return result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n\
    \    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i %\
    \ 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n            result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvge_3phu.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvge_3phu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    if (n == 0) return new long[0];\n    if (n ==\
    \ 1) return new long[]{1};\n    if (n == 2) return new long[]{1, 3};\n    long[]\
    \ arr = new long[n + 1];\n    arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n\
    \    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            arr[i] = 1 + i / 2;\n        }\n        else\n        {\n       \
    \     arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1];\n        }\n    }\n    return\
    \ arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg5sobp2l.d(24): Error: found `{` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpg5sobp2l.d(24): Error: found `}` when expecting\
    \ `;` following statement\\n/tmp/tmpg5sobp2l.d(24): Deprecation: use `{ }` for\
    \ an empty statement, not `;`\\n/tmp/tmpg5sobp2l.d(25): Error: found `{` when\
    \ expecting `;` following `return` statement\\n/tmp/tmpg5sobp2l.d(25): Error:\
    \ found `}` when expecting `;` following statement\\n/tmp/tmpg5sobp2l.d(25): Deprecation:\
    \ use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpg5sobp2l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    if (n == 3)\n        return result;\n    for (long i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n \
    \       else\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzspf37fd.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4288ed]\\n??:? void tmpzspf37fd.__unittest_L44_C1()\
    \ [0x42809d]\\n??:? void tmpzspf37fd.__modtest() [0x428670]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c9a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b83a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ac5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a51]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b811]\\n??:? runModuleUnitTests [0x42c77d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428db0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d37]\\n??:? _d_run_main [0x428ca2]\\n??:? main [0x428683]\\\
    n??:? __libc_start_main [0x9d08d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpf82eixta.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmpf82eixta.tri(long) [0x427fcf]\\\
    n??:? void tmpf82eixta.__unittest_L42_C1() [0x42800f]\\n??:? void tmpf82eixta.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0xe4c50554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp01nqxwa4.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmp01nqxwa4.tri(long) [0x427fcf]\\\
    n??:? void tmp01nqxwa4.__unittest_L42_C1() [0x42800f]\\n??:? void tmp01nqxwa4.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0xd11fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    if (n == 3)\n        return result;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n \
    \       else\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphnveu6wm.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4288ed]\\n??:? void tmphnveu6wm.__unittest_L44_C1()\
    \ [0x42809d]\\n??:? void tmphnveu6wm.__modtest() [0x428670]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c9a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b83a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ac5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a51]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b811]\\n??:? runModuleUnitTests [0x42c77d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428db0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d37]\\n??:? _d_run_main [0x428ca2]\\n??:? main [0x428683]\\\
    n??:? __libc_start_main [0xa87f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpntxmtydv.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpntxmtydv.tri(long) [0x427f7c]\\\
    n??:? void tmpntxmtydv.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpntxmtydv.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x732b0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmph5cko0fj.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmph5cko0fj.tri(long) [0x427f82]\\\
    n??:? void tmph5cko0fj.__unittest_L40_C1() [0x427fbf]\\n??:? void tmph5cko0fj.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x3f0af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp32tfqb6e.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp32tfqb6e.tri(long) [0x427f7c]\\\
    n??:? void tmp32tfqb6e.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp32tfqb6e.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xc1bf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7by0yedf.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7by0yedf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    if (n == 3)\n        return result;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n \
    \       else\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphouxdoyu.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4288ed]\\n??:? void tmphouxdoyu.__unittest_L44_C1()\
    \ [0x42809d]\\n??:? void tmphouxdoyu.__modtest() [0x428670]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c9a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b83a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ac5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a51]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b811]\\n??:? runModuleUnitTests [0x42c77d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428db0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d37]\\n??:? _d_run_main [0x428ca2]\\n??:? main [0x428683]\\\
    n??:? __libc_start_main [0x1c9aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ (i / 2);\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp6o89v70z.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp6o89v70z.tri(long) [0x427f82]\\\
    n??:? void tmp6o89v70z.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp6o89v70z.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xc6a7b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n\
    \    {\n        return result;\n    }\n    result[0] = 1;\n    if(n == 1)\n  \
    \  {\n        return result;\n    }\n    result[1] = 3;\n    if(n == 2)\n    {\n\
    \        return result;\n    }\n    result[2] = 2;\n    for(int i = 3; i < n+1;\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp1ax609_k.d(47): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428986]\\n??:? long[] tmp1ax609_k.tri(long) [0x427fcf]\\\
    n??:? void tmp1ax609_k.__unittest_L52_C1() [0x42800b]\\n??:? void tmp1ax609_k.__modtest()\
    \ [0x428658]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b822]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430aad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a39]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f9]\\n??:? runModuleUnitTests [0x42c765]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d98]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d1f]\\n??:? _d_run_main [0x428c8a]\\n??:? main [0x42866b]\\\
    n??:? __libc_start_main [0x4f117554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpot07n57m.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpot07n57m.tri(long) [0x427f7f]\\\
    n??:? void tmpot07n57m.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpot07n57m.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x282af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp_8_3w9ui.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp_8_3w9ui.tri(long) [0x427f7f]\\\
    n??:? void tmp_8_3w9ui.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp_8_3w9ui.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x72ed1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmplge23s2i.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmplge23s2i.tri(long) [0x427f7f]\\\
    n??:? void tmplge23s2i.__unittest_L40_C1() [0x427fbf]\\n??:? void tmplge23s2i.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x259f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp84__zkdh.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp84__zkdh.tri(long) [0x427f7c]\\\
    n??:? void tmp84__zkdh.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp84__zkdh.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xf293d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpro7b380d.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpro7b380d.tri(long) [0x427f82]\\\
    n??:? void tmpro7b380d.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpro7b380d.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xb602a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpgrlk9wqr.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpgrlk9wqr.tri(long) [0x427f7c]\\\
    n??:? void tmpgrlk9wqr.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpgrlk9wqr.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xbef33554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp69it2hzv.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmp69it2hzv.tri(long) [0x427f7c]\\\
    n??:? void tmp69it2hzv.__unittest_L40_C1() [0x427fbb]\\n??:? void tmp69it2hzv.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x2a577554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    if(n == 0)\n\
    \        return result;\n    result[0] = 1;\n    if(n == 1)\n        return result;\n\
    \    result[1] = 3;\n    if(n == 2)\n        return result;\n    result[2] = 2;\n\
    \    if(n == 3)\n        return result;\n    for(int i = 3; i < n+1; i++)\n  \
    \  {\n        if(i % 2 == 0)\n            result[i] = 1 + i / 2;\n        else\n\
    \            result[i] = result[i-1] + result[i-2] + result[i+1];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvp435uxl.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4288ed]\\n??:? void tmpvp435uxl.__unittest_L44_C1()\
    \ [0x42809d]\\n??:? void tmpvp435uxl.__modtest() [0x428670]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c9a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b83a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ac5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a51]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b811]\\n??:? runModuleUnitTests [0x42c77d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428db0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d37]\\n??:? _d_run_main [0x428ca2]\\n??:? main [0x428683]\\\
    n??:? __libc_start_main [0x21523554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] fib = new long[(int)n + 1];\n    fib[0]\
    \ = 1;\n    fib[1] = 3;\n    fib[2] = 2;\n    for(int i = 3; i < n + 1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            fib[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            fib[i] = fib[i - 1] + fib[i -\
    \ 2] + fib[i + 1];\n        }\n    }\n    return fib;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvy4qnifi.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvy4qnifi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpfge720iq.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpfge720iq.tri(long) [0x427f82]\\\
    n??:? void tmpfge720iq.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpfge720iq.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xd1faf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmppiza8moj.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmppiza8moj.tri(long) [0x427f82]\\\
    n??:? void tmppiza8moj.__unittest_L40_C1() [0x427fbf]\\n??:? void tmppiza8moj.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x4ca5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp_7cwwa3_.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp_7cwwa3_.tri(long) [0x427f7f]\\\
    n??:? void tmp_7cwwa3_.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp_7cwwa3_.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x1577a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpt5p773sh.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpt5p773sh.tri(long) [0x427f7f]\\\
    n??:? void tmpt5p773sh.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpt5p773sh.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x6f5d2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp1cjyryt2.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428986]\\n??:? long[] tmp1cjyryt2.tri(long) [0x427fc9]\\\
    n??:? void tmp1cjyryt2.__unittest_L42_C1() [0x428007]\\n??:? void tmp1cjyryt2.__modtest()\
    \ [0x428654]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b822]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430aad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a39]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f9]\\n??:? runModuleUnitTests [0x42c765]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d98]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d1f]\\n??:? _d_run_main [0x428c8a]\\n??:? main [0x428667]\\\
    n??:? __libc_start_main [0x79f8a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpkxylxilh.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpkxylxilh.tri(long) [0x427f7c]\\\
    n??:? void tmpkxylxilh.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpkxylxilh.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x2bbfd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    if (n > 0)\n    {\n        result[1] = 3;\n        if (n > 1)\n  \
    \      {\n            result[2] = 2;\n            if (n > 2)\n            {\n\
    \                for (long i = 3; i <= n; i++)\n                {\n          \
    \          if (i % 2 == 0)\n                    {\n                        result[i]\
    \ = 1 + i / 2;\n                    }\n                    else\n            \
    \        {\n                        result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n                    }\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp3iffwf_k.d(41): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428966]\\n??:? long[] tmp3iffwf_k.tri(long) [0x427fa9]\\\
    n??:? void tmp3iffwf_k.__unittest_L49_C1() [0x427fe7]\\n??:? void tmp3iffwf_k.__modtest()\
    \ [0x428634]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c96f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b802]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a8d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f3c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a19]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7d9]\\n??:? runModuleUnitTests [0x42c745]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d78]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cff]\\n??:? _d_run_main [0x428c6a]\\n??:? main [0x428647]\\\
    n??:? __libc_start_main [0x4288d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpepkid2xe.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpepkid2xe.tri(long) [0x427f7c]\\\
    n??:? void tmpepkid2xe.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpepkid2xe.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xdba8b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpu0plws4t.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmpu0plws4t.tri(long) [0x427fcf]\\\
    n??:? void tmpu0plws4t.__unittest_L42_C1() [0x42800f]\\n??:? void tmpu0plws4t.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0x6e4b7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp_tw9ssk8.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp_tw9ssk8.tri(long) [0x427f7f]\\\
    n??:? void tmp_tw9ssk8.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp_tw9ssk8.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x5baea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmps7nmw1z3.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmps7nmw1z3.tri(long) [0x427f7c]\\\
    n??:? void tmps7nmw1z3.__unittest_L40_C1() [0x427fbb]\\n??:? void tmps7nmw1z3.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x6de8e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp1s5jk4l.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1s5jk4l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmps8vceod2.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmps8vceod2.tri(long) [0x427f82]\\\
    n??:? void tmps8vceod2.__unittest_L40_C1() [0x427fbf]\\n??:? void tmps8vceod2.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x269cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0vdxsjjq.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428986]\\n??:? long[] tmp0vdxsjjq.tri(long) [0x427fc9]\\\
    n??:? void tmp0vdxsjjq.__unittest_L42_C1() [0x428007]\\n??:? void tmp0vdxsjjq.__modtest()\
    \ [0x428654]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b822]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430aad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a39]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f9]\\n??:? runModuleUnitTests [0x42c765]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d98]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d1f]\\n??:? _d_run_main [0x428c8a]\\n??:? main [0x428667]\\\
    n??:? __libc_start_main [0x308bf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n  \
    \          result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpvja3vbd9.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42898e]\\n??:? long[] tmpvja3vbd9.tri(long) [0x427fcf]\\\
    n??:? void tmpvja3vbd9.__unittest_L42_C1() [0x42800f]\\n??:? void tmpvja3vbd9.__modtest()\
    \ [0x42865c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c997]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b82a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ab5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b801]\\n??:? runModuleUnitTests [0x42c76d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d27]\\n??:? _d_run_main [0x428c92]\\n??:? main [0x42866f]\\\
    n??:? __libc_start_main [0x1c97a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmprc5ce83r.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmprc5ce83r.tri(long) [0x427f7c]\\\
    n??:? void tmprc5ce83r.__unittest_L40_C1() [0x427fbb]\\n??:? void tmprc5ce83r.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xa9cc5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp61b6tqh_.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp61b6tqh_.tri(long) [0x427f7f]\\\
    n??:? void tmp61b6tqh_.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp61b6tqh_.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xb8add554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpj0t3yxf0.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpj0t3yxf0.tri(long) [0x427f82]\\\
    n??:? void tmpj0t3yxf0.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpj0t3yxf0.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xc74b5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpb8l3v47z.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmpb8l3v47z.tri(long) [0x427f82]\\\
    n??:? void tmpb8l3v47z.__unittest_L40_C1() [0x427fbf]\\n??:? void tmpb8l3v47z.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x33027554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpgh853evq.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpgh853evq.tri(long) [0x427f7c]\\\
    n??:? void tmpgh853evq.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpgh853evq.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0x397a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    if\
    \ (n == 0) return result;\n    result[0] = 1;\n    if (n == 1) return result;\n\
    \    result[1] = 3;\n    if (n == 2) return result;\n    result[2] = 2;\n    if\
    \ (n == 3) return result;\n    for (int i = 3; i <= n; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy8xt6e86.d(23): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8xt6e86.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0q_0d749.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp0q_0d749.tri(long) [0x427f82]\\\
    n??:? void tmp0q_0d749.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp0q_0d749.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x27211554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n + 1;\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 +\
    \ i / 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp2r3400g3.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp2r3400g3.tri(long) [0x427f82]\\\
    n??:? void tmp2r3400g3.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp2r3400g3.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0xaee8f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(long i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp847fny7t.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42893e]\\n??:? long[] tmp847fny7t.tri(long) [0x427f7f]\\\
    n??:? void tmp847fny7t.__unittest_L40_C1() [0x427fbf]\\n??:? void tmp847fny7t.__modtest()\
    \ [0x42860c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c947]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7b1]\\n??:? runModuleUnitTests [0x42c71d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d50]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cd7]\\n??:? _d_run_main [0x428c42]\\n??:? main [0x42861f]\\\
    n??:? __libc_start_main [0x48593554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpub3fcbi0.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmpub3fcbi0.tri(long) [0x427f7c]\\\
    n??:? void tmpub3fcbi0.__unittest_L40_C1() [0x427fbb]\\n??:? void tmpub3fcbi0.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xffbc0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n\
    */\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmplcq1qlwk.d(35): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428936]\\n??:? long[] tmplcq1qlwk.tri(long) [0x427f7c]\\\
    n??:? void tmplcq1qlwk.__unittest_L40_C1() [0x427fbb]\\n??:? void tmplcq1qlwk.__modtest()\
    \ [0x428608]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c93f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7a9]\\n??:? runModuleUnitTests [0x42c715]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ccf]\\n??:? _d_run_main [0x428c3a]\\n??:? main [0x42861b]\\\
    n??:? __libc_start_main [0xc7cab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
