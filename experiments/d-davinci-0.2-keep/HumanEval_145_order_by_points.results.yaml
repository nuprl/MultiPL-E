name: HumanEval_145_order_by_points
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i].abs.to!string.sum!(a => a.to!int - '0');\n\
    \    }\n    return nums.zip(sums).sort!((a, b) => a[1] < b[1] || (a[1] == b[1]\
    \ && a[0] < b[0])).map!(a => a[0]).array;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvvrz2t3f.d(20): Error: no property `to` for type `long`\\n/tmp/tmpvvrz2t3f.d(22):\
    \ Error: no property `zip` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvvrz2t3f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    auto sums = new long[result.length];\n\
    \    foreach(i, n; result)\n    {\n        sums[i] = n.abs.sum;\n    }\n    sort(result,\
    \ sums);\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt_g5nspv.d(21): Error: no property `sum` for type `long`\\n/tmp/tmpt_g5nspv.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_g5nspv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum[i] = 0;\n     \
    \   while (nums[i] != 0)\n        {\n            sum[i] += nums[i] % 10;\n   \
    \         nums[i] /= 10;\n        }\n    }\n    int[] index = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n        index[i] = i;\n    sort(sum,\
    \ index);\n    for (int i = 0; i < nums.length; i++)\n        result[i] = nums[index[i]];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8b__h6x.d(31): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8b__h6x.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    long[] sortedSums = sums.dup;\n    sortedSums.sort;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sums[j] == sortedSums[i])\n            {\n\
    \                result[i] = nums[j];\n                sums[j] = -1;\n       \
    \         break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpstev2vbe.d(21): Error: undefined identifier `sumDigits`\\n/tmp/tmpstev2vbe.d(24):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpstev2vbe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    int[] indices = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    sort(sums, indices);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjwe916pw.d(23): Error: undefined identifier `sumDigits`\\n/tmp/tmpjwe916pw.d(25):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjwe916pw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) <\
    \ sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe2qzlyqp.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe2qzlyqp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5p37uq4o.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5p37uq4o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] result = new\
    \ long[nums.length];\n    long[] sum = new long[nums.length];\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n        if\
    \ (temp < 0)\n            temp *= -1;\n        while (temp > 0)\n        {\n \
    \           sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long min = sum[i];\n\
    \        int index = i;\n        for (int j = i; j < nums.length; j++)\n     \
    \   {\n            if (sum[j] < min)\n            {\n                min = sum[j];\n\
    \                index = j;\n            }\n        }\n        result[i] = nums[index];\n\
    \        sum[index] = sum[i];\n        sum[i] = min;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbkcfztwq.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289a5]\\n??:? void tmpbkcfztwq.__unittest_L50_C1()\
    \ [0x42819d]\\n??:? void tmpbkcfztwq.__modtest() [0x428728]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ba1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431050]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430b2d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b8ed]\\n??:? runModuleUnitTests [0x42c859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428def]\\n??:? _d_run_main [0x428d5a]\\n??:? main [0x42873b]\\\
    n??:? __libc_start_main [0xe7d3d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto nums_with_points = zip(nums, map!((n) => n.abs.sumOfDigits)(nums));\n\
    \    return sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]))(nums_with_points).map!(a\
    \ => a[0]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb43yp28i.d(17): Error: undefined identifier `zip`\\n/tmp/tmpb43yp28i.d(18):\
    \ Error: template instance `sort!((a, b) => a[1] < b[1] || a[1] == b[1] && (a[0]\
    \ < b[0]))` template `sort` is not defined, did you mean sqrt?\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb43yp28i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzv21zpkf.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzv21zpkf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i].to!string.sum!(a\
    \ => a.to!int);\n    }\n    auto sorted = sort!((a, b) => a < b)(sums);\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[sums.indexOf(sorted[i])];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1rgkazoc.d(21): Error: no property `to` for type `long`\\n/tmp/tmp1rgkazoc.d(23):\
    \ Error: template instance `sort!((a, b) => a < b)` template `sort` is not defined,\
    \ did you mean sqrt?\\n/tmp/tmp1rgkazoc.d(26): Error: no property `indexOf` for\
    \ type `int[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rgkazoc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] <\
    \ 0 ? -nums[i] : nums[i];\n        while (sums[i] > 0)\n        {\n          \
    \  sums[i] = sums[i] / 10 + sums[i] % 10;\n        }\n    }\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        int min = i;\n        for (int j =\
    \ i + 1; j < nums.length; j++)\n        {\n            if (sums[j] < sums[min])\n\
    \            {\n                min = j;\n            }\n        }\n        result[i]\
    \ = nums[min];\n        sums[min] = sums[i];\n        nums[min] = nums[i];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = 0;\n        long n =\
    \ nums[i];\n        while (n != 0)\n        {\n            sums[i] += n % 10;\n\
    \            n /= 10;\n        }\n    }\n    sort(sums, indices);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[(int)indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3a1s26ru.d(34): Error: C style cast illegal, use `cast(int)indices[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a1s26ru.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto nums_with_index = zip(nums, iota(nums.length));\n    auto nums_with_index_and_sum\
    \ = nums_with_index.map!(a => tuple(a[0], a[1], a[0].sumDigits()));\n    auto\
    \ sorted_nums_with_index_and_sum = nums_with_index_and_sum.sort!((a, b) => a[2]\
    \ < b[2] || (a[2] == b[2] && a[1] < b[1]));\n    return sorted_nums_with_index_and_sum.map!(a\
    \ => a[0]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9yp5u9l5.d(17): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yp5u9l5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = nums.dup;\n    result.sort!((a, b) =>\n    {\n    \
    \    long a_sum = 0;\n        long b_sum = 0;\n        foreach(c; a.to!string)\n\
    \        {\n            a_sum += c.to!long - '0'.to!long;\n        }\n       \
    \ foreach(c; b.to!string)\n        {\n            b_sum += c.to!long - '0'.to!long;\n\
    \        }\n        return a_sum == b_sum ? a.compare(b) : a_sum.compare(b_sum);\n\
    \    });\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe2b9txo1.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe2b9txo1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    int[] index = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \ }\n    sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[index[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoyja6iu4.d(21): Error: cannot implicitly convert expression `nums[cast(ulong)i]`\
    \ of type `long` to `int`\\n/tmp/tmpoyja6iu4.d(33): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpoyja6iu4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] result = new\
    \ long[nums.length];\n    long[] sums = new long[nums.length];\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] < 0 ? -nums[i]\
    \ : nums[i];\n        while (sums[i] > 0)\n        {\n            sums[i] = sums[i]\
    \ / 10 + sums[i] % 10;\n        }\n    }\n    long[] sorted = sums.dup;\n    sorted.sort;\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int index = sorted.indexOf(sums[i]);\n\
    \        result[index] = nums[i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzndno8g7.d(30): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpzndno8g7.d(33): Error: no property `indexOf` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzndno8g7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indexes = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i] < 0 ? -nums[i] : nums[i];\n        indexes[i]\
    \ = i;\n    }\n    for (int i = 0; i < sums.length; i++)\n    {\n        sums[i]\
    \ = sums[i] % 10 + sums[i] / 10;\n    }\n    sort(sums, indexes);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[(int)indexes[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_0q4jmaa.d(32): Error: C style cast illegal, use `cast(int)indexes[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0q4jmaa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    long[] sorted = sums.dup;\n    sort(sorted);\n    for (int i = 0;\
    \ i < sorted.length; i++)\n    {\n        for (int j = 0; j < sums.length; j++)\n\
    \        {\n            if (sorted[i] == sums[j])\n            {\n           \
    \     result[i] = nums[j];\n                sums[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nlong sumDigits(long num)\n\
    {\n    long sum = 0;\n    while (num != 0)\n    {\n        sum += num % 10;\n\
    \        num /= 10;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz4qcvgne.d(24): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4qcvgne.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum[i] = sum_of_digits(nums[i]);\n\
    \    }\n    int[] index = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n    }\n    sort(sum, index);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ebos4kc.d(21): Error: undefined identifier `sum_of_digits`\\\
    n/tmp/tmp0ebos4kc.d(28): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ebos4kc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    foreach (i, val; nums)\n    {\n        sums[i] = val.abs;\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] -= sums[i] % 10;\n\
    \            sums[i] /= 10;\n        }\n    }\n    return nums.sort(sums);\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1dyytcit.d(29): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1dyytcit.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    long[] temp = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        temp[i] = nums[i];\n\
    \    }\n    sort(sum);\n    for (int i = 0; i < nums.length; i++)\n    {\n   \
    \     for (int j = 0; j < nums.length; j++)\n        {\n            if (sum[i]\
    \ == sum[j] && temp[j] != 0)\n            {\n                result[i] = temp[j];\n\
    \                temp[j] = 0;\n                break;\n            }\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpihhnvqoe.d(33): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihhnvqoe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, num; nums)\n    {\n        long sum = 0;\n        foreach(c; num.to!string)\n\
    \        {\n            sum += c.to!long - '0'.to!long;\n        }\n        sums[i]\
    \ = sum;\n    }\n    auto sorted = sort(sums);\n    foreach(i, sum; sorted)\n\
    \    {\n        foreach(j, num; nums)\n        {\n            if(sum == sums[j])\n\
    \            {\n                result[i] = num;\n                sums[j] = -1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ql1xj0l.d(22): Error: no property `to` for type `long`\\n/tmp/tmp3ql1xj0l.d(28):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ql1xj0l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto sum = (long n) => n.to!string.map!(a => a.to!long).sum;\n    return\
    \ nums.sort!((a, b) => sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0i324q5x.d(17): Error: no property `to` for type `long`\\n/tmp/tmp0i324q5x.d(18):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0i324q5x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    auto tuple = tuple(nums, sums);\n    tuple.sort!((a, b) => a[1] <\
    \ b[1]);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = tuple[i][0];\n    }\n    return result;\n}\nlong sumDigits(long num)\n{\n\
    \    long sum = 0;\n    while (num != 0)\n    {\n        sum += num % 10;\n  \
    \      num /= 10;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp13gvy91u.d(24): Error: no property `sort` for type `Tuple!(long[],\
    \ long[])`\\n/tmp/tmp13gvy91u.d(27): Error: variable `i` cannot be read at compile\
    \ time\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13gvy91u.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    foreach (i, v; nums)\n    {\n        long sum = 0;\n\
    \        foreach (c; to!string(v))\n            sum += c.to!long - '0'.to!long;\n\
    \        sums[i] = sum;\n    }\n    auto result = sort!((a, b) => a[1] < b[1]\
    \ || (a[1] == b[1] && a[0] < b[0]))(zip(iota(nums.length), sums));\n    return\
    \ result.map!(a => nums[a[0]]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_42ue0j.d(23): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmph_42ue0j.d(27): Error: template\
    \ instance `sort!((a, b) => a[1] < b[1] || a[1] == b[1] && (a[0] < b[0]))` template\
    \ `sort` is not defined, did you mean sqrt?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmph_42ue0j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n\
    \    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n\
    \    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n\
    \    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n\
    \    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n\
    \    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n\
    \    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n\
    \    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n\
    \    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n\
    \    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n\
    \    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n\
    \    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n\
    \    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n\
    \    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n\
    \    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n\
    \    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n\
    \    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n\
    \    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n\
    \    long[] temp72;\n\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxakfhjae.d(91): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxakfhjae.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto nums_with_points = new tuple[nums.length];\n    foreach (i, n;\
    \ nums)\n    {\n        nums_with_points[i] = tuple(n, n.abs.sumDigits);\n   \
    \ }\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0]\
    \ < b[0]));\n    return nums_with_points.map!(a => a[0]).array;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp409jbr8r.d(17): Error: template `std.typecons.tuple(Names...)`\
    \ is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp409jbr8r.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long num = nums[i];\n\
    \        long sum_of_digits = 0;\n        while (num != 0)\n        {\n      \
    \      sum_of_digits += num % 10;\n            num /= 10;\n        }\n       \
    \ sum[i] = sum_of_digits;\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        long min = sum[i];\n        int min_index = i;\n        for (int\
    \ j = i; j < nums.length; j++)\n        {\n            if (sum[j] < min)\n   \
    \         {\n                min = sum[j];\n                min_index = j;\n \
    \           }\n        }\n        long temp = sum[i];\n        sum[i] = sum[min_index];\n\
    \        sum[min_index] = temp;\n        temp = nums[i];\n        nums[i] = nums[min_index];\n\
    \        nums[min_index] = temp;\n    }\n    return nums;\n}\nunittest\n{\n  \
    \  alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnxyfsf5d.d(55): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289e5]\\n??:? void tmpnxyfsf5d.__unittest_L51_C1()\
    \ [0x4281d9]\\n??:? void tmpnxyfsf5d.__modtest() [0x428764]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430be1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431090]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430b6d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ea8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e2f]\\n??:? _d_run_main [0x428d9a]\\n??:? main [0x428777]\\\
    n??:? __libc_start_main [0x44902554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1uqedmjq.d(21): Error: undefined identifier `sumDigits`\\n/tmp/tmp1uqedmjq.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uqedmjq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] / 10;\n\
    \            if (sums[i] > 0)\n                sums[i] = sums[i] + (sums[i] %\
    \ 10);\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n \
    \       long min = sums[i];\n        int index = i;\n        for (int j = i; j\
    \ < nums.length; j++)\n        {\n            if (sums[j] < min)\n           \
    \ {\n                min = sums[j];\n                index = j;\n            }\n\
    \        }\n        result[i] = nums[index];\n        sums[index] = long.max;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp12vuodx0.d(50): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a65]\\n??:? void tmp12vuodx0.__unittest_L46_C1()\
    \ [0x428259]\\n??:? void tmp12vuodx0.__modtest() [0x4287e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431110]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430bed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b9ad]\\n??:? runModuleUnitTests [0x42c919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f28]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428eaf]\\n??:? _d_run_main [0x428e1a]\\n??:? main [0x4287f7]\\\
    n??:? __libc_start_main [0xaf55f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    long[] index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n        sum[i] = 0;\n        long n = nums[i];\n\
    \        while (n != 0)\n        {\n            sum[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < nums.length; j++)\n        {\n          \
    \  if (sum[i] > sum[j])\n            {\n                long temp = sum[i];\n\
    \                sum[i] = sum[j];\n                sum[j] = temp;\n          \
    \      temp = nums[i];\n                nums[i] = nums[j];\n                nums[j]\
    \ = temp;\n                temp = index[i];\n                index[i] = index[j];\n\
    \                index[j] = temp;\n            }\n            else if (sum[i]\
    \ == sum[j])\n            {\n                if (index[i] > index[j])\n      \
    \          {\n                    long temp = sum[i];\n                    sum[i]\
    \ = sum[j];\n                    sum[j] = temp;\n                    temp = nums[i];\n\
    \                    nums[i] = nums[j];\n                    nums[j] = temp;\n\
    \                    temp = index[i];\n                    index[i] = index[j];\n\
    \                    index[j] = temp;\n                }\n            }\n    \
    \    }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzwhz15zf.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428dad]\\n??:? void tmpzwhz15zf.__unittest_L70_C1()\
    \ [0x4285a1]\\n??:? void tmpzwhz15zf.__modtest() [0x428b2c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430fa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430f35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcf5]\\n??:? runModuleUnitTests [0x42cc61]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429270]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4291f7]\\n??:? _d_run_main [0x429162]\\n??:? main [0x428b3f]\\\
    n??:? __libc_start_main [0x8a3f2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    auto sums = nums.map!(a => a.abs.sumOfDigits).dup;\n\
    \    auto indices = nums.map!(a => a.indexOf).dup;\n    sort!((a, b) => sums[a]\
    \ < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n    foreach (i, index;\
    \ indices)\n        result[i] = nums[index];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptyb08bv9.d(18): Error: no property `map` for type `long[]`\\\
    n/tmp/tmptyb08bv9.d(19): Error: no property `map` for type `long[]`\\n/tmp/tmptyb08bv9.d(20):\
    \ Error: template instance `sort!((a, b) => sums[a] < sums[b] || sums[a] == sums[b]\
    \ && (a < b))` template `sort` is not defined, did you mean sqrt?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptyb08bv9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long n = nums[i];\n        while (n != 0)\n        {\n            sum +=\
    \ n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n    }\n  \
    \  int[] indexes = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n  \
    \  {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp68zwy_yd.d(30): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68zwy_yd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2tysoyq7.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2tysoyq7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, n; nums)\n    {\n        sums[i] = n.abs.sumDigits;\n    }\n \
    \   auto t = tuple(nums, sums);\n    t.sort!((a, b) => a[1] < b[1]);\n    foreach(i,\
    \ n; t)\n    {\n        result[i] = n[0];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96k15rl2.d(21): Error: no property `sumDigits` for type `long`\\\
    n/tmp/tmp96k15rl2.d(24): Error: no property `sort` for type `Tuple!(long[], long[])`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp96k15rl2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    auto pairs = zip(nums, sums);\n    pairs.sort!((a, b) => a[1] < b[1]);\n\
    \    foreach (i, pair; pairs)\n    {\n        result[i] = pair[0];\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_b0tlnxx.d(30): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_b0tlnxx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] != 0)\n        {\n            sums[i] = sums[i] / 10;\n\
    \            sums[i] += nums[i] % 10;\n        }\n    }\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        long min = sums[i];\n        int index =\
    \ i;\n        for (int j = i; j < nums.length; j++)\n        {\n            if\
    \ (sums[j] < min)\n            {\n                min = sums[j];\n           \
    \     index = j;\n            }\n        }\n        sums[index] = sums[i];\n \
    \       sums[i] = min;\n        result[i] = nums[index];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    long[] sortedSums = sums.dup;\n    sort(sortedSums);\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sortedSums[i] == sums[j])\n            {\n\
    \                result[i] = nums[j];\n                sums[j] = -1;\n       \
    \         break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1x5hf8ag.d(31): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1x5hf8ag.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6blu31c1.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6blu31c1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long n = nums[i];\n\
    \        while (n != 0)\n        {\n            sum[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n   \
    \ {\n        int min = i;\n        for (int j = i + 1; j < nums.length; j++)\n\
    \        {\n            if (sum[j] < sum[min])\n            {\n              \
    \  min = j;\n            }\n        }\n        long temp = sum[i];\n        sum[i]\
    \ = sum[min];\n        sum[min] = temp;\n        temp = nums[i];\n        nums[i]\
    \ = nums[min];\n        nums[min] = temp;\n    }\n    return nums;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_9ak961_.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289a5]\\n??:? void tmp_9ak961_.__unittest_L47_C1()\
    \ [0x42819d]\\n??:? void tmp_9ak961_.__modtest() [0x428728]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ba1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431050]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430b2d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b8ed]\\n??:? runModuleUnitTests [0x42c859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428def]\\n??:? _d_run_main [0x428d5a]\\n??:? main [0x42873b]\\\
    n??:? __libc_start_main [0x7e0d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpapubs96g.d(21): Error: undefined identifier `sumDigits`\\n/tmp/tmpapubs96g.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapubs96g.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] != 0)\n        {\n            sums[i] = sums[i] / 10;\n\
    \            sums[i] += nums[i] % 10;\n        }\n    }\n    long[] sorted = sums.dup;\n\
    \    sorted.sort;\n    for (int i = 0; i < nums.length; i++)\n    {\n        for\
    \ (int j = 0; j < nums.length; j++)\n        {\n            if (sorted[i] == sums[j])\n\
    \            {\n                result[i] = nums[j];\n                sums[j]\
    \ = -1;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3wufnpdv.d(29): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3wufnpdv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sum_digits(nums[i]);\n\
    \    }\n    int[] sorted_sums = sums.dup;\n    sort(sorted_sums);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int index = sums.indexOf(sorted_sums[i]);\n\
    \        result[i] = nums[index];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpca4h687j.d(21): Error: undefined identifier `sum_digits`\\n/tmp/tmpca4h687j.d(24):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpca4h687j.d(27):\
    \ Error: no property `indexOf` for type `int[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpca4h687j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp94y_1gv.d(21): Error: undefined identifier `sumDigits`\\n/tmp/tmpp94y_1gv.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp94y_1gv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    foreach (i, num; nums)\n    {\n        long sum = 0;\n\
    \        foreach (c; to!string(num))\n            sum += c.to!long - '0'.to!long;\n\
    \        sums[i] = sum;\n    }\n    auto zipped = zip(sums, nums);\n    zipped.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]));\n    return zipped.map!(a\
    \ => a[1]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpymxqpy8y.d(23): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpymxqpy8y.d(27): Error: undefined\
    \ identifier `zip`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpymxqpy8y.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result;\n    long[] sums;\n    long[] indices;\n    long[] sorted_indices;\n\
    \    long[] sorted_sums;\n    long[] sorted_nums;\n    long i;\n    long j;\n\
    \    long temp;\n    long temp_sum;\n    long temp_index;\n    long sum;\n   \
    \ long index;\n    long[] digits;\n    long[] sorted_digits;\n    long[] sorted_digits_indices;\n\
    \    long[] sorted_digits_sums;\n    long[] sorted_digits_nums;\n    long[] sorted_digits_indices_sums;\n\
    \    long[] sorted_digits_indices_nums;\n    long[] sorted_digits_sums_nums;\n\
    \    long[] sorted_digits_indices_sums_nums;\n    long[] sorted_digits_indices_sums_nums_indices;\n\
    \    long[] sorted_digits_indices_sums_nums_sums;\n    long[] sorted_digits_indices_sums_nums_nums;\n\
    \    long[] sorted_digits_indices_sums_nums_indices_sums;\n    long[] sorted_digits_indices_sums_nums_indices_nums;\n\
    \    long[] sorted_digits_indices_sums_nums_sums_nums;\n    long[] sorted_digits_indices_sums_nums_indices_sums_nums;\n\
    \    long[] sorted_digits_indices_sums_nums_indices_sums_nums_indices;\n    long[]\
    \ sorted_digits_indices_sums_nums_indices_sums_nums_sums;\n    long[] sorted_digits_indices_sums_nums_indices_sums_nums_nums;\n\
    \    long[] sorted_digits_indices_sums_nums_indices_sums_nums_indices_sums;\n\
    \    long[] sorted_digits_indices_sums_nums_indices_sums_nums_\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfb3gr6xw.d(51): Error: semicolon expected, not `unittest`\\n/tmp/tmpfb3gr6xw.d(51):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfb3gr6xw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] indices = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n    }\n    sort(sums, indices);\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_14yp1rq.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_14yp1rq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    while (nums[i] != 0)\n        {\n            sum += nums[i] % 10;\n     \
    \       nums[i] /= 10;\n        }\n        sums[i] = sum;\n    }\n    long[] result\
    \ = new long[nums.length];\n    int[] indices = new int[nums.length];\n    for\
    \ (int i = 0; i < indices.length; i++)\n        indices[i] = i;\n    indices.sort!((a,\
    \ b) => sums[a] < sums[b]);\n    for (int i = 0; i < indices.length; i++)\n  \
    \      result[i] = nums[indices[i]];\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptruk4vix.d(34): Error: no property `sort` for type `int[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptruk4vix.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    auto nums_with_points\
    \ = new long[][2](nums.length);\n    foreach (i, n; nums)\n    {\n        nums_with_points[i][0]\
    \ = n;\n        nums_with_points[i][1] = n.abs.sumDigits;\n    }\n    nums_with_points.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return nums_with_points.map!(a\
    \ => a[0]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfg1gb0rx.d(19): Error: function expected before `()`, not `new\
    \ long[][](2LU)` of type `long[][]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfg1gb0rx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto list = new long[nums.length];\n    auto sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        list[i] = nums[i];\n\
    \        sum[i] = 0;\n        int temp = nums[i];\n        while (temp != 0)\n\
    \        {\n            sum[i] += temp % 10;\n            temp /= 10;\n      \
    \  }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        for (int\
    \ j = 0; j < nums.length - 1; j++)\n        {\n            if (sum[j] > sum[j\
    \ + 1])\n            {\n                long temp = sum[j];\n                sum[j]\
    \ = sum[j + 1];\n                sum[j + 1] = temp;\n                temp = list[j];\n\
    \                list[j] = list[j + 1];\n                list[j + 1] = temp;\n\
    \            }\n        }\n    }\n    return list;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6hcf6jle.d(23): Error: cannot implicitly convert expression `nums[cast(ulong)i]`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp6hcf6jle.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto sum = (long n) => n.to!string.map!(a => a.to!long).sum;\n    return\
    \ nums.enumerate.sort!((a, b) => sum(a[1]) < sum(b[1]) || (sum(a[1]) == sum(b[1])\
    \ && a[0] < b[0])).map!(a => a[1]).array;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqo15h5pq.d(17): Error: no property `to` for type `long`\\n/tmp/tmpqo15h5pq.d(18):\
    \ Error: no property `enumerate` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqo15h5pq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] result = new\
    \ long[nums.length];\n    long[] sums = new long[nums.length];\n    foreach (i,\
    \ n; nums)\n    {\n        sums[i] = sum(n.digits);\n    }\n    auto t = tuple(nums,\
    \ sums);\n    t.sort!((a, b) => a[1] < b[1]);\n    foreach (i, tup; t)\n    {\n\
    \        result[i] = tup[0];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2rwuc8km.d(23): Error: undefined identifier `sum`, did you mean\
    \ variable `sums`?\\n/tmp/tmp2rwuc8km.d(26): Error: no property `sort` for type\
    \ `Tuple!(long[], long[])`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2rwuc8km.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpovpzbg7x.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpovpzbg7x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) <\
    \ sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0pbwrvqz.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pbwrvqz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n     \
    \   long sum = 0;\n        foreach (c; nums[i].to!string)\n        {\n       \
    \     if (c.isDigit)\n                sum += c.to!long - '0'.to!long;\n      \
    \  }\n        sums[i] = sum;\n    }\n    long[] sorted = nums.dup;\n    sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(sorted);\n    return\
    \ sorted;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw1jydjn6.d(23): Error: no property `to` for type `long`\\n/tmp/tmpw1jydjn6.d(31):\
    \ Error: template instance `sort!((a, b) => sums[a] < sums[b] || sums[a] == sums[b]\
    \ && (a < b))` template `sort` is not defined, did you mean sqrt?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1jydjn6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] res = nums.dup;\n    res.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp59znm2m_.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59znm2m_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    auto sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int num = nums[i];\n\
    \        if (num < 0)\n            num = -num;\n        while (num > 0)\n    \
    \    {\n            sum[i] += num % 10;\n            num /= 10;\n        }\n \
    \   }\n    auto index = sort(sum);\n    for (int i = 0; i < nums.length; i++)\n\
    \        result[i] = nums[index[i]];\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqqxt_7hv.d(21): Error: cannot implicitly convert expression `nums[cast(ulong)i]`\
    \ of type `long` to `int`\\n/tmp/tmpqqxt_7hv.d(30): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpqqxt_7hv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i].to!string.sum!(a\
    \ => a.to!int);\n    }\n    auto sorted = sums.dup.sort;\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[sums.indexOf(sorted[i])];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc55lg5r_.d(21): Error: no property `to` for type `long`\\n/tmp/tmpc55lg5r_.d(23):\
    \ Error: no property `sort` for type `int[]`\\n/tmp/tmpc55lg5r_.d(26): Error:\
    \ no property `indexOf` for type `int[]`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpc55lg5r_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n\
    \    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n\
    \    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n\
    \    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n\
    \    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n\
    \    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n\
    \    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n\
    \    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n\
    \    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n\
    \    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n\
    \    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n\
    \    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n\
    \    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n\
    \    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n\
    \    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n\
    \    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n\
    \    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n\
    \    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n\
    \    long[] temp72;\n\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6qsjd4c7.d(91): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6qsjd4c7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        sums[i] = sum_digits(nums[i]);\n\
    \    }\n    for (int i = 0; i < nums.length; i++) {\n        int min = minIndex(sums);\n\
    \        result[i] = nums[min];\n        sums[min] = long.max;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphza3qgp0.d(20): Error: undefined identifier `sum_digits`\\n/tmp/tmphza3qgp0.d(23):\
    \ Error: undefined identifier `minIndex`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmphza3qgp0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    auto arr = new tuple!(long,\
    \ long)[nums.length];\n    foreach (i, n; nums)\n    {\n        long sum = 0;\n\
    \        foreach (c; n.to!string)\n            sum += c.to!long - '0'.to!long;\n\
    \        arr[i] = tuple(sum, n);\n    }\n    arr.sort!((a, b) => a[0] < b[0] ||\
    \ (a[0] == b[0] && a[1] < b[1]));\n    foreach (i, a; arr)\n        nums[i] =\
    \ a[1];\n    return nums;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1nov5w8r.d(19): Error: `tuple!(long, long)` is used as a type\\\
    n/tmp/tmp1nov5w8r.d(23): Error: no property `to` for type `long`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1nov5w8r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    auto sums = nums.map!(a => a.abs.to!string.sum!(a\
    \ => a.to!long - '0'.to!long));\n    result.sort!((a, b) => sums[a] < sums[b]\
    \ || (sums[a] == sums[b] && a < b));\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplikzzh4_.d(18): Error: no property `map` for type `long[]`\\\
    n/tmp/tmplikzzh4_.d(19): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplikzzh4_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    long[] sorted = sums.dup;\n    sorted.sort;\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n  \
    \      {\n            if (sums[j] == sorted[i])\n            {\n             \
    \   result[i] = nums[j];\n                sums[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_dzo6924.d(31): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_dzo6924.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] indexes = sort(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }\nlong sumDigits(long n)\n{\n    long sum = 0;\n    while (n != 0)\n    {\n \
    \       sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm4hlfbuk.d(23): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm4hlfbuk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    long[] sorted_sums = sums.dup;\n    sorted_sums.sort;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        long sum = sorted_sums[i];\n  \
    \      for (int j = 0; j < nums.length; j++)\n        {\n            if (sums[j]\
    \ == sum)\n            {\n                result[i] = nums[j];\n             \
    \   sums[j] = -1;\n                break;\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx9fw6qz2.d(31): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx9fw6qz2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = 0;\n    \
    \    long n = nums[i];\n        while (n != 0)\n        {\n            sums[i]\
    \ += n % 10;\n            n /= 10;\n        }\n    }\n    int[] indices = new\
    \ int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n        indices[i]\
    \ = i;\n    sort(indices, (a, b) => sums[a] == sums[b] ? a - b : sums[a] - sums[b]);\n\
    \    for (int i = 0; i < nums.length; i++)\n        result[i] = nums[indices[i]];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg9jmd313.d(32): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg9jmd313.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    long[] index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n        sum[i] = 0;\n        long n = nums[i];\n\
    \        while (n != 0)\n        {\n            sum[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    sort(sum, index);\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg13pombk.d(31): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg13pombk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7362q35y.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7362q35y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] != 0)\n        {\n            sums[i] = sums[i] / 10;\n\
    \            sums[i] += nums[i] % 10;\n        }\n    }\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        long min = sums[i];\n        int min_index\
    \ = i;\n        for (int j = i; j < nums.length; j++)\n        {\n           \
    \ if (sums[j] < min)\n            {\n                min = sums[j];\n        \
    \        min_index = j;\n            }\n        }\n        sums[min_index] = sums[i];\n\
    \        sums[i] = min;\n        result[i] = nums[min_index];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnspz0pyl.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnspz0pyl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long num = nums[i];\n\
    \        while (num != 0)\n        {\n            sum[i] += num % 10;\n      \
    \      num /= 10;\n        }\n    }\n    int[] index = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \ }\n    sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[index[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuwglry34.d(33): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwglry34.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdq31de4y.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdq31de4y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    auto tuple = tuple(nums, sums);\n    tuple.sort!((a, b) => a[1] < b[1]);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = tuple[i][0];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptgku50wr.d(31): Error: no property `sort` for type `Tuple!(long[],\
    \ long[])`\\n/tmp/tmptgku50wr.d(34): Error: variable `i` cannot be read at compile\
    \ time\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptgku50wr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i] < 0 ? -nums[i] : nums[i];\n        while\
    \ (sums[i] > 0)\n        {\n            sums[i] = sums[i] % 10 + sums[i] / 10;\n\
    \        }\n    }\n    return sort!((a, b) => sums[a] < sums[b] || (sums[a] ==\
    \ sums[b] && a < b))(iota(nums.length)).map!(a => nums[a]).array;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwyaei7j4.d(20): Error: cannot implicitly convert expression `nums[cast(ulong)i]\
    \ < 0L ? -nums[cast(ulong)i] : nums[cast(ulong)i]` of type `long` to `int`\\n/tmp/tmpwyaei7j4.d(26):\
    \ Error: template instance `sort!((a, b) => sums[a] < sums[b] || sums[a] == sums[b]\
    \ && (a < b))` template `sort` is not defined, did you mean sqrt?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwyaei7j4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int temp = nums[i];\n\
    \        if (temp < 0)\n            temp = -temp;\n        while (temp > 0)\n\
    \        {\n            sum[i] += temp % 10;\n            temp /= 10;\n      \
    \  }\n    }\n    int[] index = new int[nums.length];\n    for (int i = 0; i <\
    \ nums.length; i++)\n        index[i] = i;\n    sort!((a, b) => sum[a] < sum[b]\
    \ || (sum[a] == sum[b] && a < b))(index);\n    for (int i = 0; i < nums.length;\
    \ i++)\n        result[i] = nums[index[i]];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnmq9kn5i.d(21): Error: cannot implicitly convert expression `nums[cast(ulong)i]`\
    \ of type `long` to `int`\\n/tmp/tmpnmq9kn5i.d(33): Error: template instance `sort!((a,\
    \ b) => sum[a] < sum[b] || sum[a] == sum[b] && (a < b))` template `sort` is not\
    \ defined, did you mean sqrt?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpnmq9kn5i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sum_digits(nums[i]);\n\
    \    }\n    int[] sorted_sums = sums.dup;\n    sort(sorted_sums);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int index = sums.indexOf(sorted_sums[i]);\n\
    \        result[i] = nums[index];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4lhx1hqn.d(21): Error: undefined identifier `sum_digits`\\n/tmp/tmp4lhx1hqn.d(24):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp4lhx1hqn.d(27):\
    \ Error: no property `indexOf` for type `int[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4lhx1hqn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    long[] sorted = sums.dup;\n    sort(sorted);\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n\
    \        {\n            if (sums[j] == sorted[i])\n            {\n           \
    \     result[i] = nums[j];\n                sums[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd53wu3ni.d(31): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd53wu3ni.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] indexes = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indexes[i] = i;\n    }\n    indexes.sort!((a, b) => sums[a]\
    \ < sums[b] || (sums[a] == sums[b] && a < b));\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkc7_xvxz.d(35): Error: no property `sort` for type `int[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkc7_xvxz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbg2299sc.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbg2299sc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] result = new\
    \ long[nums.length];\n    long[] sums = new long[nums.length];\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] < 0 ? -nums[i]\
    \ : nums[i];\n        while (sums[i] > 0)\n        {\n            sums[i] = sums[i]\
    \ - sums[i] % 10;\n            sums[i] /= 10;\n        }\n    }\n    int[] indexes\
    \ = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n       \
    \ indexes[i] = i;\n    for (int i = 0; i < nums.length; i++)\n    {\n        for\
    \ (int j = 0; j < nums.length - 1; j++)\n        {\n            if (sums[j] >\
    \ sums[j + 1])\n            {\n                long temp = sums[j];\n        \
    \        sums[j] = sums[j + 1];\n                sums[j + 1] = temp;\n       \
    \         int temp2 = indexes[j];\n                indexes[j] = indexes[j + 1];\n\
    \                indexes[j + 1] = temp2;\n            }\n        }\n    }\n  \
    \  for (int i = 0; i < nums.length; i++)\n        result[i] = nums[indexes[i]];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpifxxz2jq.d(56): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428e45]\\n??:? void tmpifxxz2jq.__unittest_L52_C1()\
    \ [0x42863d]\\n??:? void tmpifxxz2jq.__modtest() [0x428bc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d107]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bf9a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431225]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4316d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4311b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bf71]\\n??:? runModuleUnitTests [0x42cedd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429308]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42928f]\\n??:? _d_run_main [0x4291fa]\\n??:? main [0x428bdb]\\\
    n??:? __libc_start_main [0xf9663554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = 0;\n    \
    \    long n = nums[i];\n        if (n < 0)\n            n = -n;\n        while\
    \ (n > 0)\n        {\n            sums[i] += n % 10;\n            n /= 10;\n \
    \       }\n    }\n    return nums.dup.sort!((a, b) => sums[a] < sums[b] || (sums[a]\
    \ == sums[b] && a < b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplak08_3x.d(32): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplak08_3x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indexes = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indexes[i] = i;\n        sums[i] = 0;\n        long num\
    \ = nums[i];\n        while (num != 0)\n        {\n            sums[i] += num\
    \ % 10;\n            num /= 10;\n        }\n    }\n    mergeSort(sums, indexes,\
    \ 0, nums.length - 1);\n    for (int i = 0; i < nums.length; i++)\n    {\n   \
    \     result[i] = nums[(int)indexes[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqvbthywv.d(34): Error: C style cast illegal, use `cast(int)indexes[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvbthywv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] indexes = sort(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }\nlong sumDigits(long n)\n{\n    long sum = 0;\n    while (n != 0)\n    {\n \
    \       sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2sy8n4pg.d(23): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2sy8n4pg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => \n    {\n        long aSum = 0;\n     \
    \   long bSum = 0;\n        foreach(n; a.digits)\n            aSum += n;\n   \
    \     foreach(n; b.digits)\n            bSum += n;\n        return aSum == bSum\
    \ ? a.indexOf(nums) - b.indexOf(nums) : aSum - bSum;\n    });\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf3ta5c7y.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3ta5c7y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    long[] sorted = sums.dup;\n    sort(sorted);\n    for (int i = 0; i\
    \ < sorted.length; i++)\n    {\n        for (int j = 0; j < sums.length; j++)\n\
    \        {\n            if (sorted[i] == sums[j])\n            {\n           \
    \     result[i] = nums[j];\n                sums[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2wnvpkd4.d(31): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wnvpkd4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) =>\n    {\n        long sumA = 0;\n      \
    \  long sumB = 0;\n        foreach(c; a.to!string())\n        {\n            sumA\
    \ += c.to!long() - '0'.to!long();\n        }\n        foreach(c; b.to!string())\n\
    \        {\n            sumB += c.to!long() - '0'.to!long();\n        }\n    \
    \    return sumA < sumB;\n    });\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphwczg6mo.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphwczg6mo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto nums_with_points = zip(nums, map!(a => a.sum, map!(a => a.digits,\
    \ nums)));\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1]\
    \ && a[0] < b[0]));\n    return map!(a => a[0], nums_with_points);\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdayzrxk4.d(17): Error: undefined identifier `zip`\\n/tmp/tmpdayzrxk4.d(19):\
    \ Error: template instance `map!((a) => a[0], nums_with_points)` template `map`\
    \ is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdayzrxk4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp55cso9hp.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55cso9hp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        long min = sum[i];\n        int min_index = i;\n        for (int\
    \ j = i; j < nums.length; j++)\n        {\n            if (sum[j] < min)\n   \
    \         {\n                min = sum[j];\n                min_index = j;\n \
    \           }\n        }\n        long temp = sum[i];\n        sum[i] = sum[min_index];\n\
    \        sum[min_index] = temp;\n        temp = nums[i];\n        nums[i] = nums[min_index];\n\
    \        nums[min_index] = temp;\n    }\n    return nums;\n}\nunittest\n{\n  \
    \  alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp26oot6zs.d(53): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289d5]\\n??:? void tmp26oot6zs.__unittest_L49_C1()\
    \ [0x4281c9]\\n??:? void tmp26oot6zs.__modtest() [0x428754]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cab3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b946]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430bd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431080]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430b5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b91d]\\n??:? runModuleUnitTests [0x42c889]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e98]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e1f]\\n??:? _d_run_main [0x428d8a]\\n??:? main [0x428767]\\\
    n??:? __libc_start_main [0x4dcb3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    for (int i = 0; i < nums.length; i++)\n    {\n        long min = sums[i];\n\
    \        int minIndex = i;\n        for (int j = i + 1; j < nums.length; j++)\n\
    \        {\n            if (sums[j] < min)\n            {\n                min\
    \ = sums[j];\n                minIndex = j;\n            }\n        }\n      \
    \  sums[minIndex] = sums[i];\n        sums[i] = min;\n        result[i] = nums[minIndex];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprf6zuih7.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428995]\\n??:? void tmprf6zuih7.__unittest_L48_C1()\
    \ [0x42818d]\\n??:? void tmprf6zuih7.__modtest() [0x428718]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b906]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430b91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431040]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430b1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b8dd]\\n??:? runModuleUnitTests [0x42c849]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e58]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ddf]\\n??:? _d_run_main [0x428d4a]\\n??:? main [0x42872b]\\\
    n??:? __libc_start_main [0xa9a96554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    foreach (i, v; nums)\n    {\n        if (v < 0)\n  \
    \          v = -v;\n        long sum = 0;\n        while (v > 0)\n        {\n\
    \            sum += v % 10;\n            v /= 10;\n        }\n        sums[i]\
    \ = sum;\n    }\n    long[] result = new long[nums.length];\n    foreach (i, v;\
    \ nums)\n    {\n        long min = sums[0];\n        long index = 0;\n       \
    \ foreach (j, v2; sums)\n        {\n            if (v2 < min)\n            {\n\
    \                min = v2;\n                index = j;\n            }\n      \
    \  }\n        result[i] = nums[index];\n        sums[index] = max(sums);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpntblffkf.d(46): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpntblffkf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    result.sort!((a, b) => (a.sumDigits()\
    \ == b.sumDigits()) ? a < b : a.sumDigits() < b.sumDigits());\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfp59rb6k.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfp59rb6k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    foreach (i, n; nums)\n    {\n        sums[i] = n.abs.sumDigits;\n\
    \    }\n    long[] result = new long[nums.length];\n    foreach (i, n; nums)\n\
    \    {\n        long min = sums[0];\n        long min_index = 0;\n        foreach\
    \ (j, s; sums)\n        {\n            if (s < min)\n            {\n         \
    \       min = s;\n                min_index = j;\n            }\n        }\n \
    \       result[i] = nums[min_index];\n        sums[min_index] = long.max;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphthvw653.d(22): Error: no property `sumDigits` for type `long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphthvw653.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    long[] sorted = sums.dup;\n    sorted.sort();\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n\
    \        {\n            if (sorted[i] == sums[j])\n            {\n           \
    \     result[i] = nums[j];\n                sums[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxgydwmbd.d(31): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxgydwmbd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    long[] index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n        sum[i] = 0;\n        long temp =\
    \ nums[i];\n        while (temp != 0)\n        {\n            sum[i] += temp %\
    \ 10;\n            temp /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < nums.length; j++)\n        {\n\
    \            if (sum[i] > sum[j])\n            {\n                long temp =\
    \ sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n\
    \                temp = nums[i];\n                nums[i] = nums[j];\n       \
    \         nums[j] = temp;\n                temp = index[i];\n                index[i]\
    \ = index[j];\n                index[j] = temp;\n            }\n            else\
    \ if (sum[i] == sum[j])\n            {\n                if (index[i] > index[j])\n\
    \                {\n                    long temp = sum[i];\n                \
    \    sum[i] = sum[j];\n                    sum[j] = temp;\n                  \
    \  temp = nums[i];\n                    nums[i] = nums[j];\n                 \
    \   nums[j] = temp;\n                    temp = index[i];\n                  \
    \  index[i] = index[j];\n                    index[j] = temp;\n              \
    \  }\n            }\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgw8i9wlj.d(74): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428dad]\\n??:? void tmpgw8i9wlj.__unittest_L70_C1()\
    \ [0x4285a1]\\n??:? void tmpgw8i9wlj.__modtest() [0x428b2c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430fa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430f35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcf5]\\n??:? runModuleUnitTests [0x42cc61]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429270]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4291f7]\\n??:? _d_run_main [0x429162]\\n??:? main [0x428b3f]\\\
    n??:? __libc_start_main [0xca829554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return [];\n    long[] sums = new long[nums.length];\n\
    \    foreach (i, e; nums)\n    {\n        long sum = 0;\n        foreach (c; to!string(e))\n\
    \            sum += c.to!long - '0'.to!long;\n        sums[i] = sum;\n    }\n\
    \    long[] result = new long[nums.length];\n    foreach (i, e; nums)\n    {\n\
    \        long min = sums[0];\n        long index = 0;\n        foreach (j, f;\
    \ sums)\n        {\n            if (f < min)\n            {\n                min\
    \ = f;\n                index = j;\n            }\n        }\n        result[i]\
    \ = nums[index];\n        sums[index] = max(sums);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphzx7693i.d(23): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmphzx7693i.d(41): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmphzx7693i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdvwewtbe.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvwewtbe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto res = nums.dup;\n    res.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmd8k2vgz.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmd8k2vgz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto list = new long[nums.length];\n    auto sum = new long[nums.length];\n\
    \    foreach(i, num; nums)\n    {\n        list[i] = num;\n        sum[i] = 0;\n\
    \        foreach(j, digit; num.to!string)\n        {\n            sum[i] += digit.to!long;\n\
    \        }\n    }\n    auto sorted = sort(sum);\n    auto result = new long[nums.length];\n\
    \    foreach(i, num; sorted)\n    {\n        foreach(j, num2; sum)\n        {\n\
    \            if(num == num2)\n            {\n                result[i] = list[j];\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5yh00jt6.d(23): Error: no property `to` for type `long`\\n/tmp/tmp5yh00jt6.d(28):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5yh00jt6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] / 10;\n\
    \            sums[i] += nums[i] % 10;\n            nums[i] = nums[i] / 10;\n \
    \       }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        long\
    \ min = sums[i];\n        int index = i;\n        for (int j = i; j < nums.length;\
    \ j++)\n        {\n            if (sums[j] < min)\n            {\n           \
    \     min = sums[j];\n                index = j;\n            }\n        }\n \
    \       result[i] = nums[index];\n        sums[index] = sums[i];\n        sums[i]\
    \ = min;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_xrgpnlj.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aad]\\n??:? void tmp_xrgpnlj.__unittest_L47_C1()\
    \ [0x4282a1]\\n??:? void tmp_xrgpnlj.__modtest() [0x42882c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ca9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431158]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430c35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b9f5]\\n??:? runModuleUnitTests [0x42c961]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ef7]\\n??:? _d_run_main [0x428e62]\\n??:? main [0x42883f]\\\
    n??:? __libc_start_main [0x2de0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    int num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] sorted = sums.dup;\n    sorted.sort;\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        int index = sums.indexOf(sorted[i]);\n   \
    \     result[i] = nums[index];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_j_x2ptu.d(22): Error: cannot implicitly convert expression `nums[cast(ulong)i]`\
    \ of type `long` to `int`\\n/tmp/tmp_j_x2ptu.d(31): Error: no property `sort`\
    \ for type `int[]`\\n/tmp/tmp_j_x2ptu.d(34): Error: no property `indexOf` for\
    \ type `int[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_j_x2ptu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] indexes = sort!((a, b) => sums[a] < sums[b])(iota(nums.length));\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_uozpbbv.d(30): Error: template instance `sort!((a, b) => sums[a]\
    \ < sums[b])` template `sort` is not defined, did you mean sqrt?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_uozpbbv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = 0;\n        long n = nums[i];\n        while\
    \ (n != 0)\n        {\n            sums[i] += n % 10;\n            n /= 10;\n\
    \        }\n    }\n    return nums.dup.sort!((a, b) => sums[a] < sums[b] || (sums[a]\
    \ == sums[b] && a < b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb4uhrgnl.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4uhrgnl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    int[] indexes = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i].to!string.sumOfDigits();\n        indexes[i]\
    \ = i;\n    }\n    sort!((a, b) => a > b)(sums, indexes);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_zq2roll.d(22): Error: no property `to` for type `long`\\n/tmp/tmp_zq2roll.d(25):\
    \ Error: template instance `sort!((a, b) => a > b)` template `sort` is not defined,\
    \ did you mean sqrt?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zq2roll.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto sum = (long n) => n < 0 ? -n : n;\n    auto sumDigits = (long\
    \ n) => sum(n) % 10 + sum(n / 10);\n    auto sumDigits2 = (long n) => sum(n) %\
    \ 100 + sum(n / 100);\n    auto sumDigits3 = (long n) => sum(n) % 1000 + sum(n\
    \ / 1000);\n    auto sumDigits4 = (long n) => sum(n) % 10000 + sum(n / 10000);\n\
    \    auto sumDigits5 = (long n) => sum(n) % 100000 + sum(n / 100000);\n    auto\
    \ sumDigits6 = (long n) => sum(n) % 1000000 + sum(n / 1000000);\n    auto sumDigits7\
    \ = (long n) => sum(n) % 10000000 + sum(n / 10000000);\n    auto sumDigits8 =\
    \ (long n) => sum(n) % 100000000 + sum(n / 100000000);\n    auto sumDigits9 =\
    \ (long n) => sum(n) % 1000000000 + sum(n / 1000000000);\n    auto sumDigits10\
    \ = (long n) => sum(n) % 10000000000 + sum(n / 10000000000);\n    auto sumDigits11\
    \ = (long n) => sum(n) % 100000000000 + sum(n / 100000000000);\n    auto sumDigits12\
    \ = (long n) => sum(n) % 1000000000000 + sum(n / 1000000000000);\n    auto sumDigits13\
    \ = (long n) => sum(n) % 10000000000000 + sum(n / 10000000000000);\n    auto sumDigits14\
    \ = (long n) => sum(n) % 100000000000000 + sum(n / 100000000000000);\n    auto\
    \ sumDigits15 = (long n) => sum(n) % 1000000000000000 + sum(n / 1000000000000000);\n\
    \    auto sumDigits16 = (long n) => sum(n) % 10000000000000000 + sum(n / 10000000000000000);\n\
    \    auto sumDigits17 = (long n) => sum(n) % 100000000000000000 + sum(n / 100000000000000000);\n\
    \    auto sumDigits18 = (long\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsiz0j9pz.d(36): Error: found `unittest` when expecting `.` following\
    \ long\\n/tmp/tmpsiz0j9pz.d(37): Error: found `{` when expecting identifier following\
    \ `long`.\\n/tmp/tmpsiz0j9pz.d(35): Error: found `alias` when expecting `)`\\\
    n/tmp/tmpsiz0j9pz.d(38): Error: semicolon expected following auto declaration,\
    \ not `candidate`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsiz0j9pz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = nums.dup;\n    result.sort!((a, b) => \n    {\n   \
    \     long aSum = 0;\n        long bSum = 0;\n        while (a != 0)\n       \
    \ {\n            aSum += a % 10;\n            a /= 10;\n        }\n        while\
    \ (b != 0)\n        {\n            bSum += b % 10;\n            b /= 10;\n   \
    \     }\n        return aSum < bSum;\n    });\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxrc_7tig.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxrc_7tig.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] indices = sort(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppg52549u.d(21): Error: undefined identifier `sumDigits`\\n/tmp/tmppg52549u.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppg52549u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    int[] index = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \ }\n    sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[index[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptypyy_es.d(33): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptypyy_es.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     foreach (long digit; nums[i].to!string)\n        {\n            sum += digit.to!long;\n\
    \        }\n        sums[i] = sum;\n    }\n    auto sorted = sort(sums);\n   \
    \ for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sums[j] == sorted[i])\n            {\n    \
    \            result[i] = nums[j];\n                sums[j] = -1;\n           \
    \     break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbycivblb.d(22): Error: no property `to` for type `long`\\n/tmp/tmpbycivblb.d(28):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbycivblb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long n = nums[i];\n        while (n != 0)\n        {\n            sum +=\
    \ n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n    }\n  \
    \  long[] sorted = sums.dup;\n    sorted.sort;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n        {\n    \
    \        if (sums[j] == sorted[i])\n            {\n                result[i] =\
    \ nums[j];\n                sums[j] = -1;\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptkjs4yu6.d(31): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptkjs4yu6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] sorted = sums.dup;\n    sorted.sort;\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        int index = sums.indexOf(sorted[i]);\n   \
    \     result[i] = nums[index];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp43pl0o2l.d(31): Error: no property `sort` for type `int[]`\\\
    n/tmp/tmp43pl0o2l.d(34): Error: no property `indexOf` for type `int[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43pl0o2l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto sum = (long n) {\n        long sum = 0;\n        while (n != 0)\
    \ {\n            sum += n % 10;\n            n /= 10;\n        }\n        return\
    \ sum;\n    };\n    auto compare = (long a, long b) {\n        return sum(a) <\
    \ sum(b) || (sum(a) == sum(b) && a < b);\n    };\n    return nums.sort!(compare);\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcsfyuboo.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcsfyuboo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    result.sort!((a, b) => a.sumDigits.cmp(b.sumDigits));\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpebfiedgk.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebfiedgk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto sum = (long n) => n.to!string.map!(a => a.to!long).sum;\n    auto\
    \ res = nums.dup;\n    res.sort!((a, b) => sum(a) < sum(b) || (sum(a) == sum(b)\
    \ && a > b));\n    return res;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbo5o5qej.d(17): Error: no property `to` for type `long`\\n/tmp/tmpbo5o5qej.d(19):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpbo5o5qej.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto arr = nums.dup;\n    auto sum = 0;\n    auto sum_arr = new long[arr.length];\n\
    \    foreach(i, num; arr)\n    {\n        sum = 0;\n        foreach(j, digit;\
    \ num.to!string)\n        {\n            sum += digit.to!long;\n        }\n  \
    \      sum_arr[i] = sum;\n    }\n    auto sorted_arr = sort(sum_arr);\n    auto\
    \ result = new long[arr.length];\n    foreach(i, num; arr)\n    {\n        foreach(j,\
    \ sum; sorted_arr)\n        {\n            if(num.to!string.sum == sum)\n    \
    \        {\n                result[i] = num;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdxd6r_fk.d(23): Error: no property `to` for type `long`\\n/tmp/tmpdxd6r_fk.d(29):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxd6r_fk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) <\
    \ sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjn83fc8y.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjn83fc8y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum[i] = 0;\n     \
    \   while (nums[i] != 0)\n        {\n            sum[i] += nums[i] % 10;\n   \
    \         nums[i] /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        int min = i;\n        for (int j = i + 1; j < nums.length;\
    \ j++)\n        {\n            if (sum[j] < sum[min])\n            {\n       \
    \         min = j;\n            }\n        }\n        if (min != i)\n        {\n\
    \            int temp = sum[i];\n            sum[i] = sum[min];\n            sum[min]\
    \ = temp;\n            temp = nums[i];\n            nums[i] = nums[min];\n   \
    \         nums[min] = temp;\n        }\n    }\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfp3bmso0.d(43): Error: cannot implicitly convert expression `nums[cast(ulong)i]`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpfp3bmso0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] <\
    \ 0 ? -nums[i] : nums[i];\n        while (sums[i] > 0)\n        {\n          \
    \  sums[i] = sums[i] % 10 + sums[i] / 10;\n        }\n    }\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        long min = sums[i];\n        int min_index\
    \ = i;\n        for (int j = i; j < nums.length; j++)\n        {\n           \
    \ if (sums[j] < min)\n            {\n                min = sums[j];\n        \
    \        min_index = j;\n            }\n        }\n        sums[min_index] = sums[i];\n\
    \        sums[i] = min;\n        result[i] = nums[min_index];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    foreach (i, v; nums)\n    {\n        sums[i] = v.abs;\n\
    \        while (sums[i] >= 10)\n        {\n            sums[i] = sums[i] / 10\
    \ + sums[i] % 10;\n        }\n    }\n    long[] indices = new long[nums.length];\n\
    \    foreach (i, v; nums)\n    {\n        indices[i] = i;\n    }\n    sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n    long[]\
    \ result = new long[nums.length];\n    foreach (i, v; indices)\n    {\n      \
    \  result[i] = nums[v];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf3pkud6d.d(33): Error: template instance `sort!((a, b) => sums[a]\
    \ < sums[b] || sums[a] == sums[b] && (a < b))` template `sort` is not defined,\
    \ did you mean sqrt?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3pkud6d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    auto sums = nums.map!(n => n.abs.sumDigits).array;\n\
    \    result.sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b));\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpte5kuolo.d(18): Error: no property `map` for type `long[]`\\\
    n/tmp/tmpte5kuolo.d(19): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpte5kuolo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgunz7x7l.d(21): Error: undefined identifier `sumDigits`\\n/tmp/tmpgunz7x7l.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgunz7x7l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] / 10;\n\
    \            sums[i] += nums[i] % 10;\n            nums[i] = nums[i] / 10;\n \
    \       }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        long\
    \ min = sums[i];\n        int minIndex = i;\n        for (int j = i; j < nums.length;\
    \ j++)\n        {\n            if (sums[j] < min)\n            {\n           \
    \     min = sums[j];\n                minIndex = j;\n            }\n        }\n\
    \        result[i] = nums[minIndex];\n        sums[minIndex] = sums[i];\n    \
    \    sums[i] = min;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqzbwq04b.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aad]\\n??:? void tmpqzbwq04b.__unittest_L47_C1()\
    \ [0x4282a1]\\n??:? void tmpqzbwq04b.__modtest() [0x42882c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ca9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431158]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430c35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b9f5]\\n??:? runModuleUnitTests [0x42c961]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ef7]\\n??:? _d_run_main [0x428e62]\\n??:? main [0x42883f]\\\
    n??:? __libc_start_main [0x3384a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) <\
    \ sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvf98v9hu.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvf98v9hu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = 0;\n        long n =\
    \ nums[i];\n        while (n != 0)\n        {\n            sums[i] += n % 10;\n\
    \            n /= 10;\n        }\n    }\n    sort(sums, indices);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmd7egx_2.d(31): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmd7egx_2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum[i] = 0;\n     \
    \   long temp = nums[i];\n        while (temp != 0)\n        {\n            sum[i]\
    \ += temp % 10;\n            temp /= 10;\n        }\n    }\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        int min = i;\n        for (int j = i;\
    \ j < nums.length; j++)\n        {\n            if (sum[j] < sum[min])\n     \
    \       {\n                min = j;\n            }\n        }\n        long temp\
    \ = sum[i];\n        sum[i] = sum[min];\n        sum[min] = temp;\n        temp\
    \ = nums[i];\n        nums[i] = nums[min];\n        nums[min] = temp;\n    }\n\
    \    return nums;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6ci52i_j.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289d5]\\n??:? void tmp6ci52i_j.__unittest_L48_C1()\
    \ [0x4281cd]\\n??:? void tmp6ci52i_j.__modtest() [0x428758]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cab3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b946]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430bd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431080]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430b5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b91d]\\n??:? runModuleUnitTests [0x42c889]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e98]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e1f]\\n??:? _d_run_main [0x428d8a]\\n??:? main [0x42876b]\\\
    n??:? __libc_start_main [0x6293d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto nums_with_points = zip(nums, map!(a => a.sumOfDigits())(nums));\n\
    \    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n\
    \    return map!(a => a[0])(nums_with_points);\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp37wtao8v.d(17): Error: undefined identifier `zip`\\n/tmp/tmp37wtao8v.d(19):\
    \ Error: template instance `map!((a) => a[0])` template `map` is not defined\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37wtao8v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long n = nums[i];\n\
    \        while (n != 0)\n        {\n            sum[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    int[] index = new int[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n    }\n   \
    \ sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n      \
    \  result[i] = nums[index[i]];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq07zzs5t.d(33): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq07zzs5t.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    auto pairs = zip(nums, sums);\n    pairs.sort!((a, b) => a[1] < b[1]);\n\
    \    foreach (i, pair; pairs)\n    {\n        result[i] = pair[0];\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0wtkpdg.d(30): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0wtkpdg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] %\
    \ 10;\n        nums[i] /= 10;\n        while (nums[i] != 0)\n        {\n     \
    \       sums[i] += nums[i] % 10;\n            nums[i] /= 10;\n        }\n    }\n\
    \    int[] indexes = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n        indexes[i] = i;\n    indexes.sort!((a, b) => sums[a] < sums[b]\
    \ || (sums[a] == sums[b] && a < b));\n    for (int i = 0; i < nums.length; i++)\n\
    \        result[i] = nums[indexes[i]];\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96lhkqn0.d(32): Error: no property `sort` for type `int[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp96lhkqn0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n  \
    \      for (int j = 0; j < nums.length; j++)\n        {\n            if (sums[i]\
    \ == sumDigits(nums[j]))\n            {\n                result[i] = nums[j];\n\
    \                nums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nlong sumDigits(long num)\n{\n    long sum\
    \ = 0;\n    while (num > 0)\n    {\n        sum += num % 10;\n        num /= 10;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoz68ocep.d(23): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoz68ocep.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    auto sums = new long[nums.length];\n \
    \   foreach(i, num; nums)\n    {\n        sums[i] = num.digits.sum;\n    }\n \
    \   sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdkrj6nlm.d(21): Error: no property `digits` for type `long`\\\
    n/tmp/tmpdkrj6nlm.d(23): Error: template instance `sort!((a, b) => sums[a] < sums[b]\
    \ || sums[a] == sums[b] && (a < b))` template `sort` is not defined, did you mean\
    \ sqrt?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdkrj6nlm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    foreach(i, n; nums)\n    {\n\
    \        sums[i] = sumDigits(n);\n        indices[i] = i;\n    }\n    sort!(\"\
    a < b\")(sums, indices);\n    foreach(i, n; indices)\n    {\n        result[i]\
    \ = nums[n];\n    }\n    return result;\n}\nlong sumDigits(long n)\n{\n    long\
    \ sum = 0;\n    while(n != 0)\n    {\n        sum += n % 10;\n        n /= 10;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfoygn888.d(25): Error: template instance `sort!\"a < b\"` template\
    \ `sort` is not defined, did you mean sqrt?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfoygn888.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoi1a2w_p.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi1a2w_p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        int min = sum[i];\n        int min_index = i;\n        for (int\
    \ j = i + 1; j < nums.length; j++)\n        {\n            if (sum[j] < min)\n\
    \            {\n                min = sum[j];\n                min_index = j;\n\
    \            }\n        }\n        int temp = sum[i];\n        sum[i] = sum[min_index];\n\
    \        sum[min_index] = temp;\n        temp = nums[i];\n        nums[i] = nums[min_index];\n\
    \        nums[min_index] = temp;\n    }\n    return nums;\n}\nunittest\n{\n  \
    \  alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp5otmv4h.d(21): Error: cannot implicitly convert expression `nums[cast(ulong)i]`\
    \ of type `long` to `int`\\n/tmp/tmpp5otmv4h.d(43): Error: cannot implicitly convert\
    \ expression `nums[cast(ulong)i]` of type `long` to `int`\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp5otmv4h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    result.sort!((a, b) =>\n    {\n      \
    \  auto sumA = a.digits.sum;\n        auto sumB = b.digits.sum;\n        if (sumA\
    \ == sumB)\n        {\n            return a.indexOf(nums) < b.indexOf(nums);\n\
    \        }\n        return sumA < sumB;\n    });\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzliidz3_.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzliidz3_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n    \
    \    for (int j = 0; j < nums.length; j++)\n        {\n            if (sums[i]\
    \ == sums[j])\n            {\n                result[i] = nums[j];\n         \
    \       sums[j] = -1;\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd4wzy1rk.d(30): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4wzy1rk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result;\n    if (nums.length == 0)\n    {\n        return result;\n\
    \    }\n    else\n    {\n        result = nums;\n        sort!((a, b) => a.sumDigits()\
    \ < b.sumDigits())(result);\n        return result;\n    }\n}\nunittest\n{\n \
    \   alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyerp73me.d(25): Error: template instance `sort!((a, b) => a.sumDigits()\
    \ < b.sumDigits())` template `sort` is not defined, did you mean sqrt?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyerp73me.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] != 0)\n        {\n            sums[i] = sums[i] / 10;\n\
    \            if (sums[i] != 0)\n                sums[i] = sums[i] + (sums[i] %\
    \ 10);\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n \
    \       long min = sums[i];\n        int min_index = i;\n        for (int j =\
    \ i; j < nums.length; j++)\n        {\n            if (sums[j] < min)\n      \
    \      {\n                min = sums[j];\n                min_index = j;\n   \
    \         }\n        }\n        sums[min_index] = sums[i];\n        sums[i] =\
    \ min;\n        result[i] = nums[min_index];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3asga6ix.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmp3asga6ix.__unittest_L47_C1()\
    \ [0x428295]\\n??:? void tmp3asga6ix.__modtest() [0x428820]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb7b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba0e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431148]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430c25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b9e5]\\n??:? runModuleUnitTests [0x42c951]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f60]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ee7]\\n??:? _d_run_main [0x428e52]\\n??:? main [0x428833]\\\
    n??:? __libc_start_main [0xcda5f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto s = nums.dup;\n    s.sort!((a, b) => (a.sumDigits() == b.sumDigits())\
    \ ? a < b : a.sumDigits() < b.sumDigits());\n    return s;\n}\nunittest\n{\n \
    \   alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4k25xeco.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4k25xeco.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    foreach (i, item; nums)\n    {\n        long sum = 0;\n\
    \        foreach (c; item.to!string)\n        {\n            if (c.isDigit)\n\
    \                sum += c.to!long - '0'.to!long;\n        }\n        sums[i] =\
    \ sum;\n    }\n    auto t = tuple(nums, sums);\n    t.sort!((a, b) => a[1] < b[1]);\n\
    \    return t[0];\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj668rqko.d(23): Error: no property `to` for type `long`\\n/tmp/tmpj668rqko.d(31):\
    \ Error: no property `sort` for type `Tuple!(long[], long[])`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj668rqko.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) <\
    \ sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqtrmk4pq.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqtrmk4pq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] res = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] indexes = sort(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        res[i] = nums[indexes[i]];\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ki2e2zz.d(21): Error: undefined identifier `sumDigits`\\n/tmp/tmp5ki2e2zz.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ki2e2zz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8y9cfvif.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8y9cfvif.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9lggj3kv.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lggj3kv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    long[] index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n        sum[i] = 0;\n        long num =\
    \ nums[i];\n        while (num != 0)\n        {\n            sum[i] += num % 10;\n\
    \            num /= 10;\n        }\n    }\n    sort(sum, index);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg97ngyzf.d(31): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg97ngyzf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] -= sums[i] % 10;\n\
    \            sums[i] /= 10;\n        }\n    }\n    auto sorted = sort(sums);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j <\
    \ nums.length; j++)\n        {\n            if (sums[j] == sorted[i])\n      \
    \      {\n                result[i] = nums[j];\n                sums[j] = -1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvibv4ub6.d(28): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvibv4ub6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        int min = i;\n        for (int j = i + 1; j < nums.length; j++)\n\
    \        {\n            if (sum[j] < sum[min])\n            {\n              \
    \  min = j;\n            }\n        }\n        if (min != i)\n        {\n    \
    \        long temp = sum[i];\n            sum[i] = sum[min];\n            sum[min]\
    \ = temp;\n            temp = nums[i];\n            nums[i] = nums[min];\n   \
    \         nums[min] = temp;\n        }\n    }\n    return nums;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprhvejqd9.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289ad]\\n??:? void tmprhvejqd9.__unittest_L50_C1()\
    \ [0x4281a1]\\n??:? void tmprhvejqd9.__modtest() [0x42872c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b91e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430ba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430b35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b8f5]\\n??:? runModuleUnitTests [0x42c861]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428df7]\\n??:? _d_run_main [0x428d62]\\n??:? main [0x42873f]\\\
    n??:? __libc_start_main [0x31a8a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = 0;\n        long n =\
    \ nums[i];\n        while (n != 0)\n        {\n            sums[i] += n % 10;\n\
    \            n /= 10;\n        }\n    }\n    sort(sums, indices);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[(int)indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplkseokjk.d(34): Error: C style cast illegal, use `cast(int)indices[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplkseokjk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result;\n    result = nums.dup;\n    result.sort!((a, b) =>\
    \ sumDigits(a) < sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpphhesa8e.d(19): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpphhesa8e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv1vavvsy.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1vavvsy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt3s3z4ne.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt3s3z4ne.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt66rv6tk.d(21): Error: undefined identifier `sumDigits`\\n/tmp/tmpt66rv6tk.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt66rv6tk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) <\
    \ sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq21jvk01.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq21jvk01.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    auto sums = new long[result.length];\n\
    \    foreach(i, nums; i < result.length)\n    {\n        sums[i] = nums[i] < 0\
    \ ? -nums[i] : nums[i];\n        while(sums[i] > 0)\n        {\n            sums[i]\
    \ = sums[i] % 10 + sums[i] / 10;\n        }\n    }\n    auto indices = new long[result.length];\n\
    \    foreach(i, nums; i < result.length)\n    {\n        indices[i] = i;\n   \
    \ }\n    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n\
    \    foreach(i, nums; i < result.length)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprbwj6fqk.d(19): Error: undefined identifier `i`\\n/tmp/tmprbwj6fqk.d(28):\
    \ Error: undefined identifier `i`\\n/tmp/tmprbwj6fqk.d(32): Error: template instance\
    \ `sort!((a, b) => sums[a] < sums[b] || sums[a] == sums[b] && (a < b))` template\
    \ `sort` is not defined, did you mean sqrt?\\n/tmp/tmprbwj6fqk.d(33): Error: undefined\
    \ identifier `i`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprbwj6fqk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    foreach (int digit; nums[i].digits)\n        {\n            sum += digit;\n\
    \        }\n        sums[i] = sum;\n    }\n    int[] indices = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        indices[i] = i;\n \
    \   }\n    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6sqfgia2.d(22): Error: no property `digits` for type `long`\\\
    n/tmp/tmp6sqfgia2.d(33): Error: template instance `sort!((a, b) => sums[a] < sums[b]\
    \ || sums[a] == sums[b] && (a < b))` template `sort` is not defined, did you mean\
    \ sqrt?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6sqfgia2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] - sums[i]\
    \ % 10;\n            sums[i] = sums[i] / 10;\n        }\n    }\n    int[] indexes\
    \ = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        indexes[i] = i;\n    }\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        for (int j = i + 1; j < nums.length; j++)\n        {\n        \
    \    if (sums[i] > sums[j])\n            {\n                long temp = sums[i];\n\
    \                sums[i] = sums[j];\n                sums[j] = temp;\n       \
    \         int temp2 = indexes[i];\n                indexes[i] = indexes[j];\n\
    \                indexes[j] = temp2;\n            }\n        }\n    }\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6jz5518q.d(58): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428e05]\\n??:? void tmp6jz5518q.__unittest_L54_C1()\
    \ [0x4285fd]\\n??:? void tmp6jz5518q.__modtest() [0x428b88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d0c7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bf5a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4311e5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431694]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431171]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bf31]\\n??:? runModuleUnitTests [0x42ce9d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4292c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42924f]\\n??:? _d_run_main [0x4291ba]\\n??:? main [0x428b9b]\\\
    n??:? __libc_start_main [0x1fbd0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4v3rs20y.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4v3rs20y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] <\
    \ 0 ? -nums[i] : nums[i];\n        while (sums[i] > 0)\n        {\n          \
    \  sums[i] = sums[i] / 10 + sums[i] % 10;\n        }\n    }\n    int[] indexes\
    \ = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        indexes[i] = i;\n    }\n    indexes.sort((a, b) => sums[a] < sums[b]\
    \ ? -1 : sums[a] > sums[b] ? 1 : a < b ? -1 : 1);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf4td96yn.d(32): Error: no property `sort` for type `int[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4td96yn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto sum = (long n) => n < 0 ? -n : n;\n    auto sumDigits = (long\
    \ n) => n < 0 ? sum(n) : n == 0 ? 0 : n % 10 + sumDigits(n / 10);\n    auto sums\
    \ = nums.map!(sumDigits);\n    auto indices = iota(nums.length);\n    sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n    return\
    \ indices.map!(i => nums[i]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvgkf87xh.d(18): Error: undefined identifier `sumDigits`\\n/tmp/tmpvgkf87xh.d(19):\
    \ Error: no property `map` for type `long[]`\\n/tmp/tmpvgkf87xh.d(20): Error:\
    \ undefined identifier `iota`\\n/tmp/tmpvgkf87xh.d(21): Error: template instance\
    \ `sort!((a, b) => sums[a] < sums[b] || sums[a] == sums[b] && (a < b))` template\
    \ `sort` is not defined, did you mean sqrt?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvgkf87xh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] indices = sort(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpomanoytp.d(21): Error: undefined identifier `sumDigits`\\n/tmp/tmpomanoytp.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpomanoytp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = 0;\n    \
    \    long num = nums[i];\n        while (num != 0)\n        {\n            sums[i]\
    \ += num % 10;\n            num /= 10;\n        }\n    }\n    int[] indices =\
    \ new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n  \
    \      indices[i] = i;\n    }\n    quickSort(sums, indices, 0, nums.length - 1);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp32hl8qhr.d(34): Error: undefined identifier `quickSort`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32hl8qhr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    auto tuples = new\
    \ Tuple!(long, long)[nums.length];\n    foreach (i, n; nums)\n    {\n        tuples[i]\
    \ = tuple(n, n.abs.digits.sum);\n    }\n    tuples.sort!((a, b) => a[1] < b[1]\
    \ || (a[1] == b[1] && a[0] < b[0]));\n    foreach (i, t; tuples)\n    {\n    \
    \    nums[i] = t[0];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph7m75nv2.d(22): Error: no property `digits` for type `long`\\\
    n/tmp/tmph7m75nv2.d(24): Error: no property `sort` for type `Tuple!(long, long)[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7m75nv2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i].abs.to!string.sum.to!int;\n\
    \    }\n    auto sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        for (int j = 0; j < nums.length; j++)\n        {\n           \
    \ if (sums[j] == sorted[i])\n            {\n                result[i] = nums[j];\n\
    \                sums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpybm8kpzh.d(21): Error: no property `to` for type `long`\\n/tmp/tmpybm8kpzh.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybm8kpzh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] <\
    \ 0 ? -nums[i] : nums[i];\n        while (sums[i] > 0)\n        {\n          \
    \  sums[i] = sums[i] / 10 + sums[i] % 10;\n        }\n    }\n    long[] sorted\
    \ = sums.dup;\n    sorted.sort();\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        for (int j = 0; j < nums.length; j++)\n        {\n           \
    \ if (sorted[i] == sums[j])\n            {\n                result[i] = nums[j];\n\
    \                sums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw9j7g4dc.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9j7g4dc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    foreach (i, n; nums)\n    {\n        long sum = 0;\n\
    \        while (n != 0)\n        {\n            sum += n % 10;\n            n\
    \ /= 10;\n        }\n        sums[i] = sum;\n    }\n    long[] result = nums.dup;\n\
    \    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7d0ggv7.d(31): Error: template instance `sort!((a, b) => sums[a]\
    \ < sums[b] || sums[a] == sums[b] && (a < b))` template `sort` is not defined,\
    \ did you mean sqrt?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7d0ggv7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] res = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long n = nums[i];\n        while (n != 0)\n        {\n            sum +=\
    \ n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n    }\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        long min = sums[i];\n\
    \        int min_index = i;\n        for (int j = i; j < nums.length; j++)\n \
    \       {\n            if (sums[j] < min)\n            {\n                min\
    \ = sums[j];\n                min_index = j;\n            }\n        }\n     \
    \   res[i] = nums[min_index];\n        sums[min_index] = sums[i];\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl7a_2fvh.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42896d]\\n??:? void tmpl7a_2fvh.__unittest_L47_C1()\
    \ [0x428161]\\n??:? void tmpl7a_2fvh.__modtest() [0x4286ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b8de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430b69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431018]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430af5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b8b5]\\n??:? runModuleUnitTests [0x42c821]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e30]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428db7]\\n??:? _d_run_main [0x428d22]\\n??:? main [0x4286ff]\\\
    n??:? __libc_start_main [0xe0de9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    auto sums = nums.map!(x => x.abs.sumDigits);\n\
    \    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvei6cfen.d(18): Error: no property `map` for type `long[]`\\\
    n/tmp/tmpvei6cfen.d(19): Error: template instance `sort!((a, b) => sums[a] < sums[b]\
    \ || sums[a] == sums[b] && (a < b))` template `sort` is not defined, did you mean\
    \ sqrt?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvei6cfen.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    long[] sums = new\
    \ long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n     \
    \   long sum = 0;\n        foreach (c; nums[i].to!string)\n        {\n       \
    \     if (c.isDigit)\n                sum += c.to!long - '0'.to!long;\n      \
    \  }\n        sums[i] = sum;\n    }\n    auto sorted = sort!((a, b) => a[0] <\
    \ b[0])(zip(sums, nums));\n    return sorted.map!(a => a[1]).array;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_hsog68.d(23): Error: no property `to` for type `long`\\n/tmp/tmp1_hsog68.d(30):\
    \ Error: template instance `sort!((a, b) => a[0] < b[0])` template `sort` is not\
    \ defined, did you mean sqrt?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1_hsog68.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    auto arr = nums.dup;\n\
    \    auto sums = new long[arr.length];\n    foreach (i, num; arr)\n    {\n   \
    \     long sum = 0;\n        foreach (j, digit; num.to!string)\n        {\n  \
    \          sum += digit.to!long - '0'.to!long;\n        }\n        sums[i] = sum;\n\
    \    }\n    auto indices = new long[arr.length];\n    foreach (i, _; arr)\n  \
    \      indices[i] = i;\n    auto sorted = sort!((a, b) => a < b)(sums);\n    auto\
    \ result = new long[arr.length];\n    foreach (i, _; arr)\n    {\n        auto\
    \ index = indices[sorted[i]];\n        result[i] = arr[index];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwn7pqwvd.d(24): Error: no property `to` for type `long`\\n/tmp/tmpwn7pqwvd.d(33):\
    \ Error: template instance `sort!((a, b) => a < b)` template `sort` is not defined,\
    \ did you mean sqrt?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwn7pqwvd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long num = nums[i];\n\
    \        long sum_of_digits = 0;\n        while (num != 0)\n        {\n      \
    \      sum_of_digits += num % 10;\n            num /= 10;\n        }\n       \
    \ sum[i] = sum_of_digits;\n    }\n    long[] sorted_sum = sum.dup;\n    sort(sorted_sum);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j <\
    \ nums.length; j++)\n        {\n            if (sum[j] == sorted_sum[i])\n   \
    \         {\n                result[i] = nums[j];\n                sum[j] = -1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph61n9zin.d(31): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph61n9zin.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n    \
    \    for (int j = 0; j < nums.length; j++)\n        {\n            if (sums[i]\
    \ == sums[j])\n            {\n                result[i] = nums[j];\n         \
    \       sums[j] = -1;\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuff45k9j.d(30): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuff45k9j.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum[i] = abs(nums[i]);\n\
    \        while (sum[i] > 0)\n        {\n            sum[i] = sum[i] % 10 + sum[i]\
    \ / 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        int min = i;\n        for (int j = i + 1; j < nums.length; j++)\n   \
    \     {\n            if (sum[j] < sum[min])\n            {\n                min\
    \ = j;\n            }\n        }\n        long temp = sum[i];\n        sum[i]\
    \ = sum[min];\n        sum[min] = temp;\n        temp = nums[i];\n        nums[i]\
    \ = nums[min];\n        nums[min] = temp;\n    }\n    return nums;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    foreach (int digit; nums[i].digits)\n        {\n            sum += digit;\n\
    \        }\n        sums[i] = sum;\n    }\n    int[] indices = sums.indices.sort(sums);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvu9ts5fe.d(22): Error: no property `digits` for type `long`\\\
    n/tmp/tmpvu9ts5fe.d(28): Error: no property `indices` for type `int[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvu9ts5fe.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    sort(sums, indices);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3nh0m9_f.d(23): Error: undefined identifier `sumDigits`\\n/tmp/tmp3nh0m9_f.d(25):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nh0m9_f.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, num; nums)\n    {\n        long sum = 0;\n        foreach(c; to!string(num))\n\
    \        {\n            sum += to!long(c);\n        }\n        sums[i] = sum;\n\
    \    }\n    foreach(i, num; nums)\n    {\n        long min = sums[i];\n      \
    \  long min_index = i;\n        foreach(j, sum; sums[i..$])\n        {\n     \
    \       if(sum < min)\n            {\n                min = sum;\n           \
    \     min_index = j;\n            }\n        }\n        result[i] = nums[min_index];\n\
    \        nums[min_index] = nums[i];\n        sums[min_index] = sums[i];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplv18y_ou.d(22): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmplv18y_ou.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto sum = (long n) => n.to!string.map!(a => a.to!long).sum;\n    return\
    \ nums.sort!((a, b) => sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb1nq_4m8.d(17): Error: no property `to` for type `long`\\n/tmp/tmpb1nq_4m8.d(18):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpb1nq_4m8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto sums = new long[nums.length];\n    foreach(i, ref n; nums)\n \
    \   {\n        sums[i] = n.abs.sumDigits;\n    }\n    return nums.sort!((a, b)\
    \ => sums[a] < sums[b] || (sums[a] == sums[b] && a < b));\n}\nunittest\n{\n  \
    \  alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ng7plsg.d(20): Error: no property `sumDigits` for type `long`\\\
    n/tmp/tmp1ng7plsg.d(22): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ng7plsg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] res = nums.dup;\n    res.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return res;\n}\nlong sumDigits(long n)\n{\n    long sum = 0;\n    while (n\
    \ != 0)\n    {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ojb2i3v.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ojb2i3v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, n; nums)\n    {\n        long sum = 0;\n        foreach(c; to!string(n))\n\
    \        {\n            if(c.isDigit)\n                sum += c.to!long;\n   \
    \     }\n        sums[i] = sum;\n    }\n    auto sorted = sort(sums);\n    foreach(i,\
    \ n; nums)\n    {\n        foreach(j, s; sums)\n        {\n            if(s ==\
    \ sorted[i])\n            {\n                result[i] = nums[j];\n          \
    \      break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyfr9krwa.d(22): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpyfr9krwa.d(29): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyfr9krwa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto arr = nums.dup;\n    auto sums = arr.map!(a => a.abs.sumDigits).array;\n\
    \    auto indices = iota(arr.length).array;\n    sort!((a, b) => sums[a] < sums[b]\
    \ || (sums[a] == sums[b] && a < b))(indices);\n    return indices.map!(i => arr[i]).array;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv8urpgw8.d(18): Error: no property `map` for type `long[]`\\\
    n/tmp/tmpv8urpgw8.d(19): Error: undefined identifier `iota`\\n/tmp/tmpv8urpgw8.d(20):\
    \ Error: template instance `sort!((a, b) => sums[a] < sums[b] || sums[a] == sums[b]\
    \ && (a < b))` template `sort` is not defined, did you mean sqrt?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8urpgw8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] <\
    \ 0 ? -nums[i] : nums[i];\n        while (sums[i] > 0)\n        {\n          \
    \  sums[i] = sums[i] / 10 + sums[i] % 10;\n        }\n    }\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        int min = i;\n        for (int j =\
    \ i + 1; j < nums.length; j++)\n        {\n            if (sums[j] < sums[min])\n\
    \            {\n                min = j;\n            }\n        }\n        if\
    \ (min != i)\n        {\n            long temp = sums[i];\n            sums[i]\
    \ = sums[min];\n            sums[min] = temp;\n            temp = nums[i];\n \
    \           nums[i] = nums[min];\n            nums[min] = temp;\n        }\n \
    \   }\n    return nums;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    sort(sums);\n    for (int i = 0; i < nums.length; i++) {\n       \
    \ result[i] = nums[indexOf(sums, sums[i])];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp37yp5sqf.d(20): Error: undefined identifier `sumDigits`\\n/tmp/tmp37yp5sqf.d(22):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp37yp5sqf.d(24):\
    \ Error: undefined identifier `indexOf`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp37yp5sqf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6oe25znw.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6oe25znw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp337ds38.d(21): Error: undefined identifier `sumDigits`\\n/tmp/tmpp337ds38.d(23):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp337ds38.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq6_0zqol.d(17): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6_0zqol.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    if (nums.length == 0)\n        return nums;\n    auto sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        auto temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    auto result = new long[nums.length];\n\
    \    auto index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n    }\n    auto temp = new long[nums.length];\n\
    \    merge_sort(sum, index, temp, 0, nums.length - 1);\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqd81l4hl.d(36): Error: undefined identifier `merge_sort`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqd81l4hl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto sum = (long n) => n.digits.sum;\n    return nums.sort!((a, b)\
    \ => sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpty1lni34.d(17): Error: no property `digits` for type `long`\\\
    n/tmp/tmpty1lni34.d(18): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpty1lni34.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long num = nums[i];\n\
    \        int sum = 0;\n        while (num != 0)\n        {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n\
    \    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        int index = 0;\n        for (int j = 0; j < nums.length; j++)\n\
    \        {\n            if (sums[j] == sorted[i])\n            {\n           \
    \     index = j;\n                break;\n            }\n        }\n        result[i]\
    \ = nums[index];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp81pprlzf.d(30): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81pprlzf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long num = nums[i];\n        while\
    \ (num != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n        indices[i] = i;\n    }\n    sort(sums,\
    \ indices);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[indices[i]];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjshoiq3s.d(32): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjshoiq3s.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    int[] index = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \ }\n    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0;\
    \ j < nums.length - 1; j++)\n        {\n            if (sum[j] > sum[j + 1])\n\
    \            {\n                int temp = sum[j];\n                sum[j] = sum[j\
    \ + 1];\n                sum[j + 1] = temp;\n                temp = index[j];\n\
    \                index[j] = index[j + 1];\n                index[j + 1] = temp;\n\
    \            }\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[index[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaj1w5z90.d(21): Error: cannot implicitly convert expression `nums[cast(ulong)i]`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpaj1w5z90.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpngpzylfd.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngpzylfd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    auto sums = nums.map!(a => a.abs.sumDigits).dup;\n\
    \    auto indices = iota(nums.length).dup;\n    auto tmp = new long[][3](nums.length);\n\
    \    foreach(i, ref e; tmp)\n    {\n        e[0] = sums[i];\n        e[1] = result[i];\n\
    \        e[2] = indices[i];\n    }\n    tmp.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[2] < b[2]));\n    foreach(i, ref e; result)\n    {\n        e =\
    \ tmp[i][1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuord3lec.d(18): Error: no property `map` for type `long[]`\\\
    n/tmp/tmpuord3lec.d(19): Error: undefined identifier `iota`\\n/tmp/tmpuord3lec.d(20):\
    \ Error: function expected before `()`, not `new long[][](3LU)` of type `long[][]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuord3lec.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) <\
    \ sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpllg8fu5x.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpllg8fu5x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto nums_with_points = nums.map!(n => tuple(n, n.abs.digits.sum));\n\
    \    nums_with_points.sort!((a, b) => (a[1] == b[1]) ? (a[0] < b[0]) : (a[1] <\
    \ b[1]));\n    return nums_with_points.map!(t => t[0]).array;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkyfh0fom.d(17): Error: no property `map` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyfh0fom.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] - (sums[i]\
    \ % 10);\n            sums[i] = sums[i] / 10;\n        }\n    }\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int min = i;\n        for (int\
    \ j = i + 1; j < nums.length; j++)\n        {\n            if (sums[j] < sums[min])\n\
    \            {\n                min = j;\n            }\n        }\n        long\
    \ temp = sums[min];\n        sums[min] = sums[i];\n        sums[i] = temp;\n \
    \       temp = nums[min];\n        nums[min] = nums[i];\n        nums[i] = temp;\n\
    \    }\n    return nums;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp3h6wv9g.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a7d]\\n??:? void tmpp3h6wv9g.__unittest_L47_C1()\
    \ [0x428271]\\n??:? void tmpp3h6wv9g.__modtest() [0x4287fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431128]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430c05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b9c5]\\n??:? runModuleUnitTests [0x42c931]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f40]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ec7]\\n??:? _d_run_main [0x428e32]\\n??:? main [0x42880f]\\\
    n??:? __libc_start_main [0x23cb5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    auto sums = nums.map!(a => a.abs.sumDigits).array;\n\
    \    auto indices = iota(nums.length).array;\n    sort!((a, b) => sums[a] < sums[b]\
    \ || (sums[a] == sums[b] && a < b))(indices);\n    foreach (i, ref n; result)\n\
    \        n = nums[indices[i]];\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn0s9loi7.d(18): Error: no property `map` for type `long[]`\\\
    n/tmp/tmpn0s9loi7.d(19): Error: undefined identifier `iota`\\n/tmp/tmpn0s9loi7.d(20):\
    \ Error: template instance `sort!((a, b) => sums[a] < sums[b] || sums[a] == sums[b]\
    \ && (a < b))` template `sort` is not defined, did you mean sqrt?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0s9loi7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8fvhhkp.d(18): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8fvhhkp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, e; nums)\n    {\n        sums[i] = sumDigits(e);\n    }\n    auto\
    \ sort = sort!((a, b) => a < b);\n    sort(sums);\n    foreach(i, e; sums)\n \
    \   {\n        foreach(j, f; nums)\n        {\n            if(sumDigits(f) ==\
    \ e)\n            {\n                result[i] = f;\n                nums[j] =\
    \ 0;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }\nlong sumDigits(long n)\n{\n    long sum = 0;\n    while(n != 0)\n    {\n  \
    \      sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpifmhjcfa.d(23): Error: template instance `sort!((a, b) => a <\
    \ b)` template `sort` is not defined, did you mean sqrt?\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpifmhjcfa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   \
    \ >>> order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums)\
    \ \n{\n    auto result = nums.dup;\n    auto sums = nums.map!(x => sum(x.digits));\n\
    \    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpylbrsjd8.d(18): Error: no property `map` for type `long[]`\\\
    n/tmp/tmpylbrsjd8.d(19): Error: template instance `sort!((a, b) => sums[a] < sums[b]\
    \ || sums[a] == sums[b] && (a < b))` template `sort` is not defined, did you mean\
    \ sqrt?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpylbrsjd8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
