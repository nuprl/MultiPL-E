name: HumanEval_135_can_arrange
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long result = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n        {\n            result = i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfs0921rr.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpfs0921rr.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmpfs0921rr.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xbd860554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            index = i;\n\
    \        }\n        else\n        {\n            max = arr[i];\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0nzrn54j.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4282be]\\n??:? long tmp0nzrn54j.can_arrange(long[]) [0x427d0b]\\\
    n??:? void tmp0nzrn54j.__unittest_L30_C1() [0x427f5e]\\n??:? void tmp0nzrn54j.__modtest()\
    \ [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x239cb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long res = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n        {\n            res = i;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcs9188v2.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpcs9188v2.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmpcs9188v2.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xc104c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxobxnmcv.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpxobxnmcv.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpxobxnmcv.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xb8f29554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm4k4gjhc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpm4k4gjhc.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpm4k4gjhc.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xa66d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            index = i;\n\
    \        }\n        else\n        {\n            max = arr[i];\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpu7o8uubu.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4282be]\\n??:? long tmpu7o8uubu.can_arrange(long[]) [0x427d0b]\\\
    n??:? void tmpu7o8uubu.__unittest_L30_C1() [0x427f5e]\\n??:? void tmpu7o8uubu.__modtest()\
    \ [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x921ca554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= arr[i - 1])\n        {\n            max = max(max, i - 1);\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_460jjbi.d(20): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_460jjbi.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp22pfvzw0.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22pfvzw0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    foreach(i; 0 .. arr.length)\n    {\n        if(arr[i]\
    \ > arr[i-1])\n        {\n            max = i;\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmprty2_v3j.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmprty2_v3j.can_arrange(long[]) [0x427d5d]\\\
    n??:? void tmprty2_v3j.__unittest_L25_C1() [0x427dd0]\\n??:? void tmprty2_v3j.__modtest()\
    \ [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xde02c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] < arr[i+1])\n        {\n            index = i;\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpqoysv97h.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpqoysv97h.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmpqoysv97h.__unittest_L25_C1() [0x427dcc]\\n??:? void tmpqoysv97h.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0x29899554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpy73qkzg5.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428286]\\n??:? long tmpy73qkzg5.can_arrange(long[]) [0x427d4f]\\\
    n??:? void tmpy73qkzg5.__unittest_L25_C1() [0x427dc4]\\n??:? void tmpy73qkzg5.__modtest()\
    \ [0x427f54]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f67]\\\
    n??:? __libc_start_main [0x8bdc8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] <= arr[i-1])\n        {\n            index = i;\n            break;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpkw61gvp1.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpkw61gvp1.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmpkw61gvp1.__unittest_L26_C1() [0x427dcc]\\n??:? void tmpkw61gvp1.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0x20b6d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long n = arr.length;\n    long max = arr[n-1];\n    long index = -1;\n\
    \    for(long i = n-2; i >= 0; i--)\n    {\n        if(arr[i] <= max)\n      \
    \  {\n            index = i;\n            max = max(max, arr[i]);\n        }\n\
    \    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfay1xcvj.d(23): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfay1xcvj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            return maxIndex;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6s2aej88.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428215]\\n??:? void tmp6s2aej88.__unittest_L31_C1()\
    \ [0x427e1f]\\n??:? void tmp6s2aej88.__modtest() [0x427f94]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c273]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b106]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430299]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430225]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0dd]\\n??:? runModuleUnitTests [0x42c049]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865f]\\n??:? _d_run_main [0x4285ca]\\n??:? main [0x427fa7]\\\
    n??:? __libc_start_main [0x9c5c1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] > arr[i + 1])\n        {\n            max = i;\n        }\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp91eaodmh.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmp91eaodmh.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmp91eaodmh.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x1023554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2a6q07rn.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2a6q07rn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = arr.length - 1; i >= 0; i--)\n    {\n\
    \        if(arr[i] < arr[i-1])\n        {\n            index = i;\n          \
    \  break;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp5jlvpvnv.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmp5jlvpvnv.can_arrange(long[]) [0x427d55]\\\
    n??:? void tmp5jlvpvnv.__unittest_L26_C1() [0x427e1f]\\n??:? void tmp5jlvpvnv.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0x2b8f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < max)\n        {\n            return i - 1;\n\
    \        }\n        else if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8jpjuiaf.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428245]\\n??:? void tmp8jpjuiaf.__unittest_L31_C1()\
    \ [0x427e53]\\n??:? void tmp8jpjuiaf.__modtest() [0x427fc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2a3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b136]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430778]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430255]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b10d]\\n??:? runModuleUnitTests [0x42c079]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428708]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42868f]\\n??:? _d_run_main [0x4285fa]\\n??:? main [0x427fdb]\\\
    n??:? __libc_start_main [0x47e4e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] < arr[i+1])\n        {\n            index = i;\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpn8i2otbh.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpn8i2otbh.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmpn8i2otbh.__unittest_L25_C1() [0x427dcc]\\n??:? void tmpn8i2otbh.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0x98380554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    long index = 0;\n    long max_index = 0;\n    foreach(i;\
    \ arr)\n    {\n        if(i > max)\n        {\n            max = i;\n        \
    \    max_index = index;\n        }\n        index++;\n    }\n    return max_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy2evivx8.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281c5]\\n??:? void tmpy2evivx8.__unittest_L29_C1()\
    \ [0x427dcf]\\n??:? void tmpy2evivx8.__modtest() [0x427f44]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b042]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430684]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430161]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b019]\\n??:? runModuleUnitTests [0x42bf85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428614]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859b]\\n??:? _d_run_main [0x428506]\\n??:? main [0x427f57]\\\
    n??:? __libc_start_main [0xa3e7c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpydhjf_jm.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpydhjf_jm.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpydhjf_jm.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x95ebe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (int i = 1; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] <= arr[i-1])\n        {\n            max = max(max, i-1);\n   \
    \     }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxnuaijn.d(20): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxnuaijn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long result = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n \
    \       if (arr[i] <= arr[i-1])\n        {\n            result = i-1;\n      \
    \      break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpuhobfkv7.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpuhobfkv7.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmpuhobfkv7.__unittest_L26_C1() [0x427dd0]\\n??:? void tmpuhobfkv7.__modtest()\
    \ [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x610fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz5oyh3u9.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5oyh3u9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] < arr[i + 1])\n        {\n            index = i;\n        }\n\
    \    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpkfhdc8ui.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpkfhdc8ui.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmpkfhdc8ui.__unittest_L25_C1() [0x427dcc]\\n??:? void tmpkfhdc8ui.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xd7185554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] >= arr[i-1])\n        {\n            if(i > max)\n            {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpt80o_c6j.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpt80o_c6j.can_arrange(long[]) [0x427d4f]\\\
    n??:? void tmpt80o_c6j.__unittest_L28_C1() [0x427dcc]\\n??:? void tmpt80o_c6j.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xe7b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    long maxIndex = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v <= max)\n        {\n            return maxIndex;\n        }\n  \
    \      else\n        {\n            max = v;\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4ovneinn.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281cd]\\n??:? void tmp4ovneinn.__unittest_L31_C1()\
    \ [0x427ddb]\\n??:? void tmp4ovneinn.__modtest() [0x427f50]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b04a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301dd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43068c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430169]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b021]\\n??:? runModuleUnitTests [0x42bf8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42861c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285a3]\\n??:? _d_run_main [0x42850e]\\n??:? main [0x427f63]\\\
    n??:? __libc_start_main [0xbc4c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (int i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] <= arr[i-1])\n        {\n            max = max(max, i-1);\n   \
    \     }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnb74z4a8.d(20): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnb74z4a8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if(arr[i] >= arr[i + 1])\n        {\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu9nlo1x1.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpu9nlo1x1.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmpu9nlo1x1.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x646aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            index = i;\n\
    \        }\n        else\n        {\n            max = arr[i];\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpb4drjzhw.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4282be]\\n??:? long tmpb4drjzhw.can_arrange(long[]) [0x427d0b]\\\
    n??:? void tmpb4drjzhw.__unittest_L30_C1() [0x427f5e]\\n??:? void tmpb4drjzhw.__modtest()\
    \ [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xd1e50554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8wyl9ues.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp8wyl9ues.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp8wyl9ues.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x1eac5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] < arr[i+1])\n        {\n            index = i;\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp1xb4jorj.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmp1xb4jorj.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmp1xb4jorj.__unittest_L25_C1() [0x427dcc]\\n??:? void tmp1xb4jorj.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0x959b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8rry6h6u.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp8rry6h6u.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp8rry6h6u.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x59504554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] <= arr[i-1])\n        {\n            index = i;\n            break;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp7wsofsu2.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmp7wsofsu2.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmp7wsofsu2.__unittest_L26_C1() [0x427dcc]\\n??:? void tmp7wsofsu2.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0x80ca9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if(arr[i] >= arr[i + 1])\n        {\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq153fqld.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpq153fqld.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmpq153fqld.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xf8589554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx0e5sua1.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0e5sua1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3tsfsfjv.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp3tsfsfjv.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp3tsfsfjv.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x54927554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuz79djvg.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpuz79djvg.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpuz79djvg.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x42b6c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp49d8zo1u.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp49d8zo1u.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp49d8zo1u.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x75395554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    foreach(i,v;arr)\n    {\n\
    \        if(v <= max)\n        {\n            max = v;\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz2hffr6q.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpz2hffr6q.__unittest_L27_C1()\
    \ [0x427deb]\\n??:? void tmpz2hffr6q.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x1dbf0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            if(i > max)\n            {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmphth77ce3.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmphth77ce3.can_arrange(long[]) [0x427d4f]\\\
    n??:? void tmphth77ce3.__unittest_L28_C1() [0x427dcc]\\n??:? void tmphth77ce3.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xfb695554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long res = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n        {\n            res = i;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpswk_qxpb.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpswk_qxpb.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmpswk_qxpb.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x1c896554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length -\
    \ 1; i >= 0; i--)\n    {\n        if (arr[i] <= max)\n        {\n            maxIndex\
    \ = i;\n        }\n        else\n        {\n            max = arr[i];\n      \
    \  }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk6s9ye6x.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmpk6s9ye6x.__unittest_L30_C1()\
    \ [0x427def]\\n??:? void tmpk6s9ye6x.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0x5e1fc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphirjnihu.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmphirjnihu.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmphirjnihu.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x12fca554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 1; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] < arr[i-1])\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfun68h85.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmpfun68h85.__unittest_L25_C1()\
    \ [0x427e38]\\n??:? void tmpfun68h85.__modtest() [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0x4cb73554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long largestIndex = -1;\n    for(long i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] < arr[i+1])\n        {\n            largestIndex = i;\n\
    \        }\n    }\n    return largestIndex;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpmwoen8hc.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpmwoen8hc.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmpmwoen8hc.__unittest_L25_C1() [0x427dcc]\\n??:? void tmpmwoen8hc.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xb2170554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < max)\n        {\n            return i - 1;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplakx9whb.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmplakx9whb.__unittest_L31_C1()\
    \ [0x427e17]\\n??:? void tmplakx9whb.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xdaae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n            continue;\n        if (i > max)\n\
    \            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5vfizd7a.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmp5vfizd7a.__unittest_L25_C1()\
    \ [0x427e44]\\n??:? void tmp5vfizd7a.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0xe60f1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long result = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n\
    \        if (arr[i] < arr[i - 1])\n        {\n            result = i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxy8nyv86.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmpxy8nyv86.__unittest_L25_C1()\
    \ [0x427f0f]\\n??:? void tmpxy8nyv86.__modtest() [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0xf512b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 1; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6swjoc8z.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmp6swjoc8z.__unittest_L25_C1()\
    \ [0x427e38]\\n??:? void tmp6swjoc8z.__modtest() [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0xbdfb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            if(i > max)\n            {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpnji9k_hb.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpnji9k_hb.can_arrange(long[]) [0x427d4f]\\\
    n??:? void tmpnji9k_hb.__unittest_L28_C1() [0x427dcc]\\n??:? void tmpnji9k_hb.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xea649554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    if (arr.length < 2) return -1;\n    long max = arr[0];\n    long index\
    \ = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ <= max)\n        {\n            max = arr[i];\n            index = i;\n    \
    \    }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7uhxv1bz.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmp7uhxv1bz.__unittest_L28_C1()\
    \ [0x427e27]\\n??:? void tmp7uhxv1bz.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c27b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b10e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43022d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0e5]\\n??:? runModuleUnitTests [0x42c051]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428667]\\n??:? _d_run_main [0x4285d2]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x33972554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if(arr[i] >= arr[i + 1])\n        {\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph_k586dp.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmph_k586dp.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmph_k586dp.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xe4a94554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8yeuzxi2.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8yeuzxi2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < max)\n        {\n            return i - 1;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz8_xytwc.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpz8_xytwc.__unittest_L31_C1()\
    \ [0x427e17]\\n??:? void tmpz8_xytwc.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x5152d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] <= arr[i-1])\n        {\n            index = i;\n            break;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmprw6utli2.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmprw6utli2.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmprw6utli2.__unittest_L26_C1() [0x427dcc]\\n??:? void tmprw6utli2.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0x78863554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    long maxIndex = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq76fqbfq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmpq76fqbfq.__unittest_L27_C1()\
    \ [0x427def]\\n??:? void tmpq76fqbfq.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0xc0b30554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8rwmbgp6.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp8rwmbgp6.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp8rwmbgp6.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x9f0bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd32vk7o4.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpd32vk7o4.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpd32vk7o4.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x968554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpli_zi1b2.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpli_zi1b2.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpli_zi1b2.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x557b3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= arr[i-1])\n        {\n            if (i >\
    \ max)\n            {\n                max = i;\n                index = i-1;\n\
    \            }\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplfm5nmek.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281fd]\\n??:? void tmplfm5nmek.__unittest_L30_C1()\
    \ [0x427e0b]\\n??:? void tmplfm5nmek.__modtest() [0x427f80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c25b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430281]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43020d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0c5]\\n??:? runModuleUnitTests [0x42c031]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428647]\\n??:? _d_run_main [0x4285b2]\\n??:? main [0x427f93]\\\
    n??:? __libc_start_main [0xab65c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    long maxIndex = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc4154f4u.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmpc4154f4u.__unittest_L27_C1()\
    \ [0x427def]\\n??:? void tmpc4154f4u.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0x33336554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] <= max) {\n            index = i;\n        } else\
    \ {\n            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpkdpza5hg.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4282be]\\n??:? long tmpkdpza5hg.can_arrange(long[]) [0x427d0b]\\\
    n??:? void tmpkdpza5hg.__unittest_L26_C1() [0x427f5e]\\n??:? void tmpkdpza5hg.__modtest()\
    \ [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xaeb07554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            if(i > max)\n            {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpeewayvil.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpeewayvil.can_arrange(long[]) [0x427d4f]\\\
    n??:? void tmpeewayvil.__unittest_L28_C1() [0x427dcc]\\n??:? void tmpeewayvil.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xe864554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphflsqyr8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmphflsqyr8.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmphflsqyr8.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x5a614554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v < max)\n        {\n            index = i;\n        }\n        else\n\
    \        {\n            max = v;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp9kcuohoz.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmp9kcuohoz.can_arrange(long[]) [0x427d0b]\\\
    n??:? void tmp9kcuohoz.__unittest_L30_C1() [0x427f32]\\n??:? void tmp9kcuohoz.__modtest()\
    \ [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x1b825554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 1; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe1b21i_n.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmpe1b21i_n.__unittest_L25_C1()\
    \ [0x427e38]\\n??:? void tmpe1b21i_n.__modtest() [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0x8426d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v <= max)\n        {\n            max = v;\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuu4c0v87.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpuu4c0v87.__unittest_L27_C1()\
    \ [0x427deb]\\n??:? void tmpuu4c0v87.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x73213554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long i = arr.length - 1;\n    while (i > 0 && arr[i] >= arr[i - 1])\n \
    \       i--;\n    return i - 1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoft92e4t.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281cd]\\n??:? void tmpoft92e4t.__unittest_L20_C1()\
    \ [0x427dd7]\\n??:? void tmpoft92e4t.__modtest() [0x427f4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c22b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430251]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b095]\\n??:? runModuleUnitTests [0x42c001]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428690]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428617]\\n??:? _d_run_main [0x428582]\\n??:? main [0x427f5f]\\\
    n??:? __libc_start_main [0xba01e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5ebtzb70.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp5ebtzb70.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp5ebtzb70.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x1466554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    long index = -1;\n    for (long i = 0; i < arr.length\
    \ - 1; i++)\n    {\n        if (arr[i] <= arr[i + 1])\n        {\n           \
    \ if (i > max)\n            {\n                max = i;\n                index\
    \ = i;\n            }\n        }\n    }\n    return index;\n}\nunittest\n{\n \
    \   alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5mkje95c.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281f5]\\n??:? void tmp5mkje95c.__unittest_L30_C1()\
    \ [0x427e54]\\n??:? void tmp5mkje95c.__modtest() [0x427f74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c253]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430279]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430728]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430205]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0bd]\\n??:? runModuleUnitTests [0x42c029]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286b8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42863f]\\n??:? _d_run_main [0x4285aa]\\n??:? main [0x427f87]\\\
    n??:? __libc_start_main [0xe6290554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    if(arr[i] <= arr[i-1])\n        {\n            index = i;\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmps2c18_5h.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmps2c18_5h.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmps2c18_5h.__unittest_L25_C1() [0x427dcc]\\n??:? void tmps2c18_5h.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xf0a5b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] < arr[i+1])\n        {\n            index = i;\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpwq1fbhnh.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpwq1fbhnh.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmpwq1fbhnh.__unittest_L25_C1() [0x427dcc]\\n??:? void tmpwq1fbhnh.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xb4f75554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n            continue;\n        if (arr[i]\
    \ > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpihe2u_jx.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpihe2u_jx.__unittest_L25_C1()\
    \ [0x427e6c]\\n??:? void tmpihe2u_jx.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xa3d75554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long largest = arr[0];\n    long index = 0;\n    for(long i = 1; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] <= largest)\n        {\n            largest =\
    \ arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd12it73_.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpd12it73_.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpd12it73_.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x4960554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphniwswpj.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmphniwswpj.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmphniwswpj.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xc7b18554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            return max_index;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9n9oyupg.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428215]\\n??:? void tmp9n9oyupg.__unittest_L31_C1()\
    \ [0x427e1f]\\n??:? void tmp9n9oyupg.__modtest() [0x427f94]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c273]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b106]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430299]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430225]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0dd]\\n??:? runModuleUnitTests [0x42c049]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865f]\\n??:? _d_run_main [0x4285ca]\\n??:? main [0x427fa7]\\\
    n??:? __libc_start_main [0x1e2fc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6ndenj3i.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp6ndenj3i.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp6ndenj3i.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xb9733554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            return maxIndex;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxepr5q65.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428215]\\n??:? void tmpxepr5q65.__unittest_L31_C1()\
    \ [0x427e1f]\\n??:? void tmpxepr5q65.__modtest() [0x427f94]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c273]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b106]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430299]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430225]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0dd]\\n??:? runModuleUnitTests [0x42c049]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865f]\\n??:? _d_run_main [0x4285ca]\\n??:? main [0x427fa7]\\\
    n??:? __libc_start_main [0x979a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq0o7_g6j.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpq0o7_g6j.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpq0o7_g6j.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xfa141554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    if (arr.length == 0) return -1;\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyfwowk_0.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpyfwowk_0.__unittest_L28_C1()\
    \ [0x427e27]\\n??:? void tmpyfwowk_0.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c27b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b10e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43022d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0e5]\\n??:? runModuleUnitTests [0x42c051]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428667]\\n??:? _d_run_main [0x4285d2]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0xf93df554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpud__004y.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud__004y.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long result = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n \
    \       if (arr[i] <= arr[i-1])\n        {\n            result = i;\n        \
    \    break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpb8hrwkic.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpb8hrwkic.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmpb8hrwkic.__unittest_L26_C1() [0x427dcc]\\n??:? void tmpb8hrwkic.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xe9212554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] > max)\n        {\n            max = arr[i];\n        }\n       \
    \ else\n        {\n            return i-1;\n        }\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv74i8nnp.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmpv74i8nnp.__unittest_L29_C1()\
    \ [0x427def]\\n??:? void tmpv74i8nnp.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0x78453554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] > max)\n        {\n            max = arr[i];\n        }\n       \
    \ else\n        {\n            return i - 1;\n        }\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoqekjnfk.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmpoqekjnfk.__unittest_L29_C1()\
    \ [0x427def]\\n??:? void tmpoqekjnfk.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0x544d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpun9_53s1.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpun9_53s1.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpun9_53s1.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xa24ec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzntc06qn.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpzntc06qn.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpzntc06qn.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xf8dcd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] < arr[i+1])\n        {\n            index = i;\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpjrswshft.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpjrswshft.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmpjrswshft.__unittest_L25_C1() [0x427dcc]\\n??:? void tmpjrswshft.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0x216b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            index = i;\n\
    \        }\n        max = max(max, arr[i]);\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4r39tpwb.d(23): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4r39tpwb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg86xnam6.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpg86xnam6.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpg86xnam6.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xde8e1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    foreach(i, e; arr)\n    {\n\
    \        if(e <= max)\n        {\n            index = i;\n            max = e;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf7admjk8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpf7admjk8.__unittest_L27_C1()\
    \ [0x427deb]\\n??:? void tmpf7admjk8.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x2e4d1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4t732g0g.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp4t732g0g.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp4t732g0g.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x5e08d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            max = i-1;\n            break;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpbb80_snr.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428286]\\n??:? long tmpbb80_snr.can_arrange(long[]) [0x427d4f]\\\
    n??:? void tmpbb80_snr.__unittest_L26_C1() [0x427dc8]\\n??:? void tmpbb80_snr.__modtest()\
    \ [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0x3df38554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsbejpcww.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpsbejpcww.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpsbejpcww.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x95bb6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7v226qp8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp7v226qp8.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp7v226qp8.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x9c377554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long result = -1;\n    for (long i = arr.length - 1; i > 0; i--)\n    {\n\
    \        if (arr[i] < arr[i - 1])\n        {\n            result = i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo4x06xaa.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmpo4x06xaa.__unittest_L25_C1()\
    \ [0x427f0f]\\n??:? void tmpo4x06xaa.__modtest() [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0x17b58554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfb6lul33.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpfb6lul33.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpfb6lul33.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x1deaa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long result = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n        {\n            result = i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpku1u_84h.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpku1u_84h.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmpku1u_84h.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x9e1eb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(int i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if(arr[i] >= arr[i + 1])\n        {\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgmj4tz25.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpgmj4tz25.__unittest_L25_C1()\
    \ [0x427de7]\\n??:? void tmpgmj4tz25.__modtest() [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0x7b975554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp67lz37tm.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp67lz37tm.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp67lz37tm.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x6c4c7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf_pu3vmz.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_pu3vmz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(int i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if(arr[i] >= arr[i + 1])\n        {\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpal8augm6.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpal8augm6.__unittest_L25_C1()\
    \ [0x427de7]\\n??:? void tmpal8augm6.__modtest() [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xeb9f7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= arr[i - 1])\n        {\n            max = max(max, i - 1);\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnptkhxy6.d(20): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnptkhxy6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    long max_index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprr5yw0r2.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmprr5yw0r2.__unittest_L27_C1()\
    \ [0x427def]\\n??:? void tmprr5yw0r2.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0x61127554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long largest = arr[0];\n    long index = 0;\n    for(long i = 1; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] > largest)\n        {\n            largest =\
    \ arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp25um6esi.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp25um6esi.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp25um6esi.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x3c5bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long result = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n        {\n            result = i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9tpe_3ij.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmp9tpe_3ij.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmp9tpe_3ij.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xb4dd1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] > max)\n        {\n            max = arr[i];\n        }\n       \
    \ else\n        {\n            return i - 1;\n        }\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8r7vs0iy.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmp8r7vs0iy.__unittest_L29_C1()\
    \ [0x427def]\\n??:? void tmp8r7vs0iy.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0xc35cf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwri6op0k.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpwri6op0k.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpwri6op0k.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x468f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqp2egrkk.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqp2egrkk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long res = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n        {\n            res = i;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl1pzrtwk.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpl1pzrtwk.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmpl1pzrtwk.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x89f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt_cphj7s.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpt_cphj7s.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpt_cphj7s.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x304df554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] > max)\n        {\n            max = arr[i];\n        }\n       \
    \ else\n        {\n            return i - 1;\n        }\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp458f2rrv.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmp458f2rrv.__unittest_L29_C1()\
    \ [0x427def]\\n??:? void tmp458f2rrv.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0x42421554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeyv4iqab.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeyv4iqab.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = arr.length - 1; i > 0; i--)\n    {\n\
    \        if(arr[i] < arr[i - 1])\n        {\n            index = i;\n        }\n\
    \    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpujgbf06r.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmpujgbf06r.__unittest_L25_C1()\
    \ [0x427f0f]\\n??:? void tmpujgbf06r.__modtest() [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0x33206554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 1; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            max = i-1;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmputux2ige.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmputux2ige.__unittest_L25_C1()\
    \ [0x427de7]\\n??:? void tmputux2ige.__modtest() [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0x47f4e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = arr.length -\
    \ 1; i > 0; i--)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n      \
    \      if (arr[i] > max)\n            {\n                max = arr[i];\n     \
    \           maxIndex = i;\n            }\n        }\n    }\n    return maxIndex;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgkqdrn5h.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42823d]\\n??:? void tmpgkqdrn5h.__unittest_L30_C1()\
    \ [0x427f73]\\n??:? void tmpgkqdrn5h.__modtest() [0x427fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c29b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b12e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302c1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430770]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43024d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b105]\\n??:? runModuleUnitTests [0x42c071]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428700]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428687]\\n??:? _d_run_main [0x4285f2]\\n??:? main [0x427fcf]\\\
    n??:? __libc_start_main [0xec66554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n            continue;\n        if (arr[i]\
    \ > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt954iahi.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpt954iahi.__unittest_L25_C1()\
    \ [0x427e6c]\\n??:? void tmpt954iahi.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x85f30554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = arr.length-1; i > 0; i--)\n    {\n \
    \       if(arr[i] < arr[i-1])\n        {\n            index = i;\n           \
    \ break;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    long maxIndex = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn38q2ff1.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmpn38q2ff1.__unittest_L27_C1()\
    \ [0x427df3]\\n??:? void tmpn38q2ff1.__modtest() [0x427f68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f7b]\\\
    n??:? __libc_start_main [0x235aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long res = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] < arr[i - 1])\n        {\n            res = i - 1;\n         \
    \   break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpui1wfqzq.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpui1wfqzq.__unittest_L26_C1()\
    \ [0x427deb]\\n??:? void tmpui1wfqzq.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x83179554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] > max)\n        {\n            max = arr[i];\n        }\n       \
    \ else\n        {\n            return i - 1;\n        }\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf70ao13m.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmpf70ao13m.__unittest_L29_C1()\
    \ [0x427def]\\n??:? void tmpf70ao13m.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0x79e94554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            index = i;\n\
    \        }\n        else\n        {\n            max = arr[i];\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpkdgj7ct2.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4282be]\\n??:? long tmpkdgj7ct2.can_arrange(long[]) [0x427d0b]\\\
    n??:? void tmpkdgj7ct2.__unittest_L30_C1() [0x427f5e]\\n??:? void tmpkdgj7ct2.__modtest()\
    \ [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x97f0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = arr.length - 1; i > 0; i--)\n    {\n\
    \        if(arr[i] < arr[i - 1])\n        {\n            index = i;\n        }\n\
    \    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6haeiql9.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmp6haeiql9.__unittest_L25_C1()\
    \ [0x427f0f]\\n??:? void tmp6haeiql9.__modtest() [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0x366ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= arr[i-1])\n        {\n            if (max\
    \ < arr[i-1])\n            {\n                max = arr[i-1];\n              \
    \  index = i-1;\n            }\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp548eg5w7.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428255]\\n??:? void tmp548eg5w7.__unittest_L30_C1()\
    \ [0x427e5f]\\n??:? void tmp548eg5w7.__modtest() [0x427fd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b146]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430788]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430265]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b11d]\\n??:? runModuleUnitTests [0x42c089]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428718]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42869f]\\n??:? _d_run_main [0x42860a]\\n??:? main [0x427fe7]\\\
    n??:? __libc_start_main [0xd86c3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = arr.length-1; i > 0; i--)\n    {\n \
    \       if(arr[i] < arr[i-1])\n        {\n            index = i;\n           \
    \ break;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbuy3wv91.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbuy3wv91.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n            max = max(max, i);\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsu_37_g7.d(19): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsu_37_g7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long largest = arr[0];\n    long largestIndex = 0;\n    for (long i = 1;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] > largest)\n        {\n    \
    \        largest = arr[i];\n            largestIndex = i;\n        }\n    }\n\
    \    return largestIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphtyil5mh.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmphtyil5mh.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmphtyil5mh.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x1b5d4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v <= max)\n        {\n            index = i;\n            max = v;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprdpu3_3w.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmprdpu3_3w.__unittest_L27_C1()\
    \ [0x427deb]\\n??:? void tmprdpu3_3w.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xd89c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp671jegpy.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp671jegpy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgrpoeslu.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpgrpoeslu.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpgrpoeslu.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x1609a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    long max_index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbjv9aq_1.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmpbjv9aq_1.__unittest_L27_C1()\
    \ [0x427def]\\n??:? void tmpbjv9aq_1.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0x7714d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] > max)\n        {\n            max = arr[i];\n        }\n       \
    \ else\n        {\n            return i - 1;\n        }\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9zoqmcjo.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmp9zoqmcjo.__unittest_L29_C1()\
    \ [0x427def]\\n??:? void tmp9zoqmcjo.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0x713d7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long result = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n \
    \       if (i > 0 && arr[i] <= arr[i-1])\n        {\n            result = i;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkxdthn0b.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpkxdthn0b.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpkxdthn0b.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x3c3c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz1js0ozm.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1js0ozm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < max)\n        {\n            index = i;\n\
    \        }\n        else\n        {\n            max = arr[i];\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpznjidmn8.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4282be]\\n??:? long tmpznjidmn8.can_arrange(long[]) [0x427d0b]\\\
    n??:? void tmpznjidmn8.__unittest_L30_C1() [0x427f5e]\\n??:? void tmpznjidmn8.__modtest()\
    \ [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x59c44554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long res = -1;\n    long i = 0;\n    foreach(elem; arr)\n    {\n      \
    \  if(i > 0 && elem <= arr[i-1])\n        {\n            res = i;\n        }\n\
    \        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp8e0m9p2d.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428286]\\n??:? long tmp8e0m9p2d.can_arrange(long[]) [0x427d4f]\\\
    n??:? void tmp8e0m9p2d.__unittest_L25_C1() [0x427dc4]\\n??:? void tmp8e0m9p2d.__modtest()\
    \ [0x427f54]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f67]\\\
    n??:? __libc_start_main [0x88f8f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= arr[i-1])\n        {\n            if (max\
    \ < i)\n            {\n                max = i;\n                index = i-1;\n\
    \            }\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7tsoh8tv.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281fd]\\n??:? void tmp7tsoh8tv.__unittest_L30_C1()\
    \ [0x427e0b]\\n??:? void tmp7tsoh8tv.__modtest() [0x427f80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c25b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430281]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43020d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0c5]\\n??:? runModuleUnitTests [0x42c031]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428647]\\n??:? _d_run_main [0x4285b2]\\n??:? main [0x427f93]\\\
    n??:? __libc_start_main [0xcc8de554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            return maxIndex;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpulhs2sf0.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428215]\\n??:? void tmpulhs2sf0.__unittest_L31_C1()\
    \ [0x427e1f]\\n??:? void tmpulhs2sf0.__modtest() [0x427f94]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c273]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b106]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430299]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430225]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0dd]\\n??:? runModuleUnitTests [0x42c049]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865f]\\n??:? _d_run_main [0x4285ca]\\n??:? main [0x427fa7]\\\
    n??:? __libc_start_main [0x5ea4c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 1; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            if(i > max)\n              \
    \  max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqma2847y.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmpqma2847y.__unittest_L26_C1()\
    \ [0x427e44]\\n??:? void tmpqma2847y.__modtest() [0x427f64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f77]\\\
    n??:? __libc_start_main [0x9ce52554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n       \
    \ if(arr[i] > max)\n        {\n            max = arr[i];\n        }\n    }\n \
    \   long[] arr2 = new long[max+1];\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        arr2[arr[i]] = i;\n    }\n    long max2 = 0;\n    for(int i =\
    \ 0; i < arr2.length; i++)\n    {\n        if(arr2[i] > max2)\n        {\n   \
    \         max2 = arr2[i];\n        }\n    }\n    return max2;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxliiuulp.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282cd]\\n??:? void tmpxliiuulp.__unittest_L38_C1()\
    \ [0x427ed7]\\n??:? void tmpxliiuulp.__modtest() [0x42804c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c387]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b21a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430954]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430431]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1f1]\\n??:? runModuleUnitTests [0x42c15d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428790]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428717]\\n??:? _d_run_main [0x428682]\\n??:? main [0x42805f]\\\
    n??:? __libc_start_main [0xc81fa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    long index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (i == 0)\n        {\n            max = arr[i];\n   \
    \         index = i;\n        }\n        else\n        {\n            if (arr[i]\
    \ > max)\n            {\n                max = arr[i];\n                index\
    \ = i;\n            }\n        }\n    }\n    return index;\n}\nunittest\n{\n \
    \   alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnt8i01a3.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmpnt8i01a3.__unittest_L35_C1()\
    \ [0x427e33]\\n??:? void tmpnt8i01a3.__modtest() [0x427fa8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c283]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b116]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430758]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430235]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ed]\\n??:? runModuleUnitTests [0x42c059]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42866f]\\n??:? _d_run_main [0x4285da]\\n??:? main [0x427fbb]\\\
    n??:? __libc_start_main [0x6fb18554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n            continue;\n        if (arr[i]\
    \ > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr1qqxz_d.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpr1qqxz_d.__unittest_L25_C1()\
    \ [0x427e6c]\\n??:? void tmpr1qqxz_d.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x3903d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] > arr[i + 1])\n        {\n            max = max(max, i);\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxhj4ev2k.d(20): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhj4ev2k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0k3tiqs6.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp0k3tiqs6.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp0k3tiqs6.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x7195a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long res = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= arr[i - 1])\n        {\n            res = i - 1;\n        \
    \    break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi094h124.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpi094h124.__unittest_L26_C1()\
    \ [0x427deb]\\n??:? void tmpi094h124.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x94b5c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    foreach(i,e; arr)\n    {\n\
    \        if(e <= max)\n        {\n            index = i;\n            max = e;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3ot61sid.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmp3ot61sid.__unittest_L27_C1()\
    \ [0x427deb]\\n??:? void tmp3ot61sid.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xc9c1d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    if(arr[i] < arr[i+1])\n        {\n            index = i;\n        }\n   \
    \ }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpqwu6egvr.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428286]\\n??:? long tmpqwu6egvr.can_arrange(long[]) [0x427d55]\\\
    n??:? void tmpqwu6egvr.__unittest_L25_C1() [0x427dc8]\\n??:? void tmpqwu6egvr.__modtest()\
    \ [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0xe217d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            return maxIndex;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjis5h6qw.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428215]\\n??:? void tmpjis5h6qw.__unittest_L31_C1()\
    \ [0x427e1f]\\n??:? void tmpjis5h6qw.__modtest() [0x427f94]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c273]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b106]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430299]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430225]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0dd]\\n??:? runModuleUnitTests [0x42c049]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865f]\\n??:? _d_run_main [0x4285ca]\\n??:? main [0x427fa7]\\\
    n??:? __libc_start_main [0xf3c9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long n = arr.length;\n    if (n == 1) return -1;\n    long max = arr[0];\n\
    \    long max_index = 0;\n    for (long i = 1; i < n; i++)\n    {\n        if\
    \ (arr[i] <= max)\n        {\n            max = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaavyhh95.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpaavyhh95.__unittest_L29_C1()\
    \ [0x427e27]\\n??:? void tmpaavyhh95.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c27b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b10e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43022d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0e5]\\n??:? runModuleUnitTests [0x42c051]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428667]\\n??:? _d_run_main [0x4285d2]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x59e0e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 1; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp33mgvxc_.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmp33mgvxc_.__unittest_L25_C1()\
    \ [0x427e38]\\n??:? void tmp33mgvxc_.__modtest() [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0x9b7f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    foreach(i,v;arr)\n    {\n\
    \        if(v<=max)\n        {\n            max = v;\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9in2ntcn.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmp9in2ntcn.__unittest_L27_C1()\
    \ [0x427deb]\\n??:? void tmp9in2ntcn.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x7e4b3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    long index = -1;\n    foreach(long i, long v; arr)\n\
    \    {\n        if(v <= max)\n        {\n            max = v;\n            index\
    \ = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoijmuwjm.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281c5]\\n??:? void tmpoijmuwjm.__unittest_L27_C1()\
    \ [0x427dd3]\\n??:? void tmpoijmuwjm.__modtest() [0x427f48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b042]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430684]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430161]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b019]\\n??:? runModuleUnitTests [0x42bf85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428614]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859b]\\n??:? _d_run_main [0x428506]\\n??:? main [0x427f5b]\\\
    n??:? __libc_start_main [0xffa4e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ynuw562.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ynuw562.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] < arr[i+1])\n        {\n            index = i;\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp4zh53tv0.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmp4zh53tv0.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmp4zh53tv0.__unittest_L25_C1() [0x427dcc]\\n??:? void tmp4zh53tv0.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xaef63554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpllqf33mf.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpllqf33mf.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpllqf33mf.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x79370554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            index = i;\n\
    \        }\n        else\n        {\n            max = arr[i];\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpfr6ml65t.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4282be]\\n??:? long tmpfr6ml65t.can_arrange(long[]) [0x427d0b]\\\
    n??:? void tmpfr6ml65t.__unittest_L30_C1() [0x427f5e]\\n??:? void tmpfr6ml65t.__modtest()\
    \ [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xb662554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = 0;\n    for(long i = 1; i < arr.length; i++)\n    {\n      \
    \  if(arr[i] <= arr[i-1])\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpth7glb9s.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmpth7glb9s.__unittest_L25_C1()\
    \ [0x427e38]\\n??:? void tmpth7glb9s.__modtest() [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0xc24fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc8xnhrmb.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpc8xnhrmb.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpc8xnhrmb.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xb71ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpywxloy_y.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpywxloy_y.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpywxloy_y.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x22422554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < max)\n        {\n            index = i;\n\
    \        }\n        else\n        {\n            max = arr[i];\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp9mt3qe56.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4282be]\\n??:? long tmp9mt3qe56.can_arrange(long[]) [0x427d0b]\\\
    n??:? void tmp9mt3qe56.__unittest_L30_C1() [0x427f5e]\\n??:? void tmp9mt3qe56.__modtest()\
    \ [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xa2df7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    foreach(i,v; arr)\n    {\n        if(i > 0 && v <=\
    \ arr[i-1])\n            max = max(max, i);\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpozt3l962.d(19): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpozt3l962.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbjbx9ssn.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjbx9ssn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkkyvlg12.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpkkyvlg12.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpkkyvlg12.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xb307a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi5seexwm.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpi5seexwm.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpi5seexwm.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x27cf8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++) \n    {\n\
    \        if (arr[i] <= arr[i + 1]) \n        {\n            max = i + 1;\n   \
    \     }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmparbq9skh.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmparbq9skh.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmparbq9skh.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x33bcc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long n = arr.length;\n    long max = arr[n-1];\n    long index = n-1;\n\
    \    for(long i = n-2; i >= 0; i--)\n    {\n        if(arr[i] <= max)\n      \
    \  {\n            max = arr[i];\n            index = i;\n        }\n    }\n  \
    \  return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4xvrr0b_.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp4xvrr0b_.__unittest_L28_C1()\
    \ [0x427e1b]\\n??:? void tmp4xvrr0b_.__modtest() [0x427f90]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427fa3]\\\
    n??:? __libc_start_main [0x35b83554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n            continue;\n        if (arr[i]\
    \ > max)\n            max = i;\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmc1g0zdu.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpmc1g0zdu.__unittest_L25_C1()\
    \ [0x427e6c]\\n??:? void tmpmc1g0zdu.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xcb19f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqt_psazl.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpqt_psazl.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpqt_psazl.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x315ad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy_x05fwf.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpy_x05fwf.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpy_x05fwf.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x975c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5mh1fnt8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp5mh1fnt8.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp5mh1fnt8.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x1bc27554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            index = i;\n\
    \        }\n        else\n        {\n            max = arr[i];\n        }\n  \
    \  }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpzcze03k5.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4282be]\\n??:? long tmpzcze03k5.can_arrange(long[]) [0x427d0b]\\\
    n??:? void tmpzcze03k5.__unittest_L30_C1() [0x427f5e]\\n??:? void tmpzcze03k5.__modtest()\
    \ [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c26b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430291]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43021d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0d5]\\n??:? runModuleUnitTests [0x42c041]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428657]\\n??:? _d_run_main [0x4285c2]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x2e3ff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] <= max) {\n            max = arr[i];\n          \
    \  index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsjh5xt_1.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpsjh5xt_1.__unittest_L25_C1()\
    \ [0x427e13]\\n??:? void tmpsjh5xt_1.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x85eaf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long res = -1;\n    for (long i = 0; i < arr.length - 1; i++)\n    {\n\
    \        if (arr[i] >= arr[i + 1])\n        {\n            res = i;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnxjte4fr.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpnxjte4fr.__unittest_L25_C1()\
    \ [0x427deb]\\n??:? void tmpnxjte4fr.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xd70b7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqqyzijiz.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqqyzijiz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            return maxIndex;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdhb6oipw.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428215]\\n??:? void tmpdhb6oipw.__unittest_L31_C1()\
    \ [0x427e1f]\\n??:? void tmpdhb6oipw.__modtest() [0x427f94]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c273]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b106]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430299]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430225]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0dd]\\n??:? runModuleUnitTests [0x42c049]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42865f]\\n??:? _d_run_main [0x4285ca]\\n??:? main [0x427fa7]\\\
    n??:? __libc_start_main [0xa3f6c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkf2hvi3t.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpkf2hvi3t.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpkf2hvi3t.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x3d985554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hs30lur.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hs30lur.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = max(max,\
    \ arr[i]);\n            index = i;\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_q80s3lr.d(21): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_q80s3lr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfe7jer0r.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpfe7jer0r.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpfe7jer0r.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xe3bff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbh5n14yz.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpbh5n14yz.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpbh5n14yz.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x68d55554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for(long i = 1; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaducemb9.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpaducemb9.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpaducemb9.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x47134554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for(int i = 1; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9o_3vcuo.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp9o_3vcuo.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp9o_3vcuo.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xeadcb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkbdfegr9.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpkbdfegr9.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpkbdfegr9.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x7bcc6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for(long i = 1; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph4tzkkcc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmph4tzkkcc.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmph4tzkkcc.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xc42ae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= arr[i - 1])\n        {\n            max = max(max, i - 1);\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpurpfure_.d(20): Error: function expected before `()`, not `max`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpurpfure_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v <= max)\n        {\n            index = i;\n            max = v;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcbfqx7n_.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpcbfqx7n_.__unittest_L27_C1()\
    \ [0x427deb]\\n??:? void tmpcbfqx7n_.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xba0bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long i = arr.length - 1;\n    while (i > 0 && arr[i] >= arr[i - 1])\n \
    \       i--;\n    return i - 1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3oaeieqk.d(24): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281cd]\\n??:? void tmp3oaeieqk.__unittest_L20_C1()\
    \ [0x427dd7]\\n??:? void tmp3oaeieqk.__modtest() [0x427f4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c22b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430251]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b095]\\n??:? runModuleUnitTests [0x42c001]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428690]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428617]\\n??:? _d_run_main [0x428582]\\n??:? main [0x427f5f]\\\
    n??:? __libc_start_main [0xa2ddf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for(int i = 1; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] < max)\n        {\n            index = i;\n \
    \       }\n        else\n        {\n            max = arr[i];\n        }\n   \
    \ }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpct4gjgrt.d(15): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4282b6]\\n??:? long tmpct4gjgrt.can_arrange(long[]) [0x427d0b]\\\
    n??:? void tmpct4gjgrt.__unittest_L30_C1() [0x427f5a]\\n??:? void tmpct4gjgrt.__modtest()\
    \ [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0xfbd45554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = -1;\n    long maxIndex = -1;\n    for (int i = arr.length -\
    \ 1; i >= 0; i--)\n    {\n        if (arr[i] <= max)\n        {\n            maxIndex\
    \ = i;\n        }\n        else\n        {\n            max = arr[i];\n      \
    \  }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp20pgie4p.d(17): Error: cannot implicitly convert expression `arr.length\
    \ - 1LU` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp20pgie4p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long largest = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n \
    \       if(arr[i] <= arr[i-1])\n        {\n            largest = i;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp_y8x9z8u.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmp_y8x9z8u.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmp_y8x9z8u.__unittest_L25_C1() [0x427dcc]\\n??:? void tmp_y8x9z8u.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xf629a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for(long i = 1; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] > max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8xj3d_jj.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp8xj3d_jj.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp8xj3d_jj.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x70cdb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for(long i = 1; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4bxxyd7t.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmp4bxxyd7t.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmp4bxxyd7t.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x57a1e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for(long i = 1; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppetph3wf.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmppetph3wf.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmppetph3wf.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x3f6fc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long maxIndex = 0;\n    for (long i = 1; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < max)\n        {\n            return i - 1;\n\
    \        }\n        else\n        {\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3iyn1c13.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmp3iyn1c13.__unittest_L31_C1()\
    \ [0x427e27]\\n??:? void tmp3iyn1c13.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c27b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b10e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43022d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0e5]\\n??:? runModuleUnitTests [0x42c051]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428667]\\n??:? _d_run_main [0x4285d2]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x4e90b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long max = arr[0];\n    long index = -1;\n    for(long i = 1; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] <= max)\n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfqbs5mbn.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428205]\\n??:? void tmpfqbs5mbn.__unittest_L27_C1()\
    \ [0x427e13]\\n??:? void tmpfqbs5mbn.__modtest() [0x427f88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864f]\\n??:? _d_run_main [0x4285ba]\\n??:? main [0x427f9b]\\\
    n??:? __libc_start_main [0x40802554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] <= arr[i-1])\n        {\n            index = i;\n            break;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpe6ng9l0j.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42828e]\\n??:? long tmpe6ng9l0j.can_arrange(long[]) [0x427d58]\\\
    n??:? void tmpe6ng9l0j.__unittest_L26_C1() [0x427dcc]\\n??:? void tmpe6ng9l0j.__modtest()\
    \ [0x427f5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430261]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428627]\\n??:? _d_run_main [0x428592]\\n??:? main [0x427f6f]\\\
    n??:? __libc_start_main [0xde22b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \n*/\nlong can_arrange(long[] arr) \n\
    {\n    long index = -1;\n    for(long i = arr.length - 1; i > 0; i--)\n    {\n\
    \        if(arr[i] <= arr[i - 1])\n        {\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplrmqmnbp.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmplrmqmnbp.__unittest_L25_C1()\
    \ [0x427f0f]\\n??:? void tmplrmqmnbp.__modtest() [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c233]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b09d]\\n??:? runModuleUnitTests [0x42c009]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428698]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42861f]\\n??:? _d_run_main [0x42858a]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0xe3c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
