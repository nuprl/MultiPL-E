name: HumanEval_117_select_words
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbj52bnob.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpbj52bnob.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj52bnob.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3np8s5fm.d(19): Error: undefined identifier `split`\\n/tmp/tmp3np8s5fm.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmp3np8s5fm.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3np8s5fm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxftk62bi.d(19): Error: undefined identifier `split`\\n/tmp/tmpxftk62bi.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxftk62bi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpubjzokc4.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpubjzokc4.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubjzokc4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj07zu25n.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpj07zu25n.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj07zu25n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppknu9z22.d(19): Error: undefined identifier `split`\\n/tmp/tmppknu9z22.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppknu9z22.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(letter; word)\n    \
    \    {\n            if(letter.isLetter)\n            {\n                if(letter.isVowel)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3v1utug1.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp3v1utug1.d(26): Error: no property `isLetter` for type `immutable(char)`\\\
    n/tmp/tmp3v1utug1.d(28): Error: no property `isVowel` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3v1utug1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgyy8ajh9.d(19): Error: undefined identifier `split`\\n/tmp/tmpgyy8ajh9.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgyy8ajh9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2d4xrb9k.d(19): Error: undefined identifier `split`\\n/tmp/tmp2d4xrb9k.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2d4xrb9k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt2yn4jne.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpt2yn4jne.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2yn4jne.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        long count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n            {\n                count++;\n            }\n     \
    \   }\n        if(count == n)\n        {\n            result ~= word;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpejtds22u.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpejtds22u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1j7qo3e5.d(19): Error: undefined identifier `split`\\n/tmp/tmp1j7qo3e5.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmp1j7qo3e5.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1j7qo3e5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8f2qsjkn.d(19): Error: undefined identifier `split`\\n/tmp/tmp8f2qsjkn.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8f2qsjkn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.length == n)\n        {\n    \
    \        result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiv1qwa5u.d(19): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiv1qwa5u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6w_y0b2z.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp6w_y0b2z.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6w_y0b2z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprk7m0lnc.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprk7m0lnc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants == n)\n      \
    \  {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq7z44hwq.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpq7z44hwq.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq7z44hwq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[];\n\
    \    foreach(string word; words)\n    {\n        if(count_consonants(word) ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ed988vm.d(19): Error: undefined identifier `split`\\n/tmp/tmp0ed988vm.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmp0ed988vm.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ed988vm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx3ug991t.d(19): Error: undefined identifier `split`\\n/tmp/tmpx3ug991t.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpx3ug991t.d(23): Error: undefined identifier `countConsonants`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx3ug991t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split();\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(c; word)\n        {\n\
    \            if(c.isAlpha && !c.isVowel)\n                count++;\n        }\n\
    \        if(count == n)\n            result ~= word;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg75107m8.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpg75107m8.d(26): Error: no property `isAlpha` for type `immutable(char)`\\\
    n/tmp/tmpg75107m8.d(26): Error: no property `isVowel` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg75107m8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4_t340cn.d(19): Error: undefined identifier `split`\\n/tmp/tmp4_t340cn.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmp4_t340cn.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_t340cn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgt7uau0_.d(19): Error: undefined identifier `split`\\n/tmp/tmpgt7uau0_.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgt7uau0_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb4lgxe15.d(19): Error: undefined identifier `split`\\n/tmp/tmpb4lgxe15.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpb4lgxe15.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4lgxe15.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[0];\n\
    \    foreach(string word; words)\n    {\n        if(count_consonants(word) ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv20slhzi.d(19): Error: undefined identifier `split`\\n/tmp/tmpv20slhzi.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpv20slhzi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3owxn1wk.d(19): Error: undefined identifier `split`\\n/tmp/tmp3owxn1wk.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3owxn1wk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        long count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u')\n            {\n                count++;\n            }\n     \
    \   }\n        if(count == n)\n        {\n            result ~= word;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpblzvgi_r.d(19): Error: undefined identifier `split`\\n/tmp/tmpblzvgi_r.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpblzvgi_r.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgw0czamb.d(19): Error: undefined identifier `split`\\n/tmp/tmpgw0czamb.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgw0czamb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6fpjn1wx.d(19): Error: undefined identifier `split`\\n/tmp/tmp6fpjn1wx.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6fpjn1wx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwo397oa1.d(19): Error: undefined identifier `split`\\n/tmp/tmpwo397oa1.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwo397oa1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgocj6sv5.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpgocj6sv5.d(20): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `string[]`\\'s\\n/tmp/tmpgocj6sv5.d(23): Error: no property\
    \ `countConsonants` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpgocj6sv5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5306dhu8.d(19): Error: undefined identifier `split`\\n/tmp/tmp5306dhu8.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmp5306dhu8.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5306dhu8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpop0v1vcj.d(19): Error: undefined identifier `split`\\n/tmp/tmpop0v1vcj.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpop0v1vcj.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpop0v1vcj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbpdtm9q4.d(19): Error: undefined identifier `split`\\n/tmp/tmpbpdtm9q4.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpbpdtm9q4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmstwno06.d(19): Error: undefined identifier `split`\\n/tmp/tmpmstwno06.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmstwno06.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd6kh644l.d(19): Error: undefined identifier `split`\\n/tmp/tmpd6kh644l.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpd6kh644l.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6kh644l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcyk6jaef.d(19): Error: undefined identifier `split`\\n/tmp/tmpcyk6jaef.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcyk6jaef.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfdl4i2fb.d(19): Error: undefined identifier `split`\\n/tmp/tmpfdl4i2fb.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfdl4i2fb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe2k87mop.d(19): Error: undefined identifier `split`\\n/tmp/tmpe2k87mop.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpe2k87mop.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7cutfmv2.d(19): Error: undefined identifier `split`\\n/tmp/tmp7cutfmv2.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7cutfmv2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqewqmni8.d(19): Error: undefined identifier `split`\\n/tmp/tmpqewqmni8.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpqewqmni8.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqewqmni8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(letter; word)\n    \
    \    {\n            if(!isVowel(letter))\n                count++;\n        }\n\
    \        if(count == n)\n            result ~= word;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2pgvb4qh.d(19): Error: undefined identifier `split`\\n/tmp/tmp2pgvb4qh.d(26):\
    \ Error: undefined identifier `isVowel`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2pgvb4qh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants == n)\n      \
    \  {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr4nb2tfc.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpr4nb2tfc.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4nb2tfc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp47wunmco.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp47wunmco.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47wunmco.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuqxttnte.d(19): Error: undefined identifier `split`\\n/tmp/tmpuqxttnte.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpuqxttnte.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(word.length == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfpvu3bnp.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfpvu3bnp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwhcqjt87.d(19): Error: undefined identifier `split`\\n/tmp/tmpwhcqjt87.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwhcqjt87.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphde7vndo.d(19): Error: undefined identifier `split`\\n/tmp/tmphde7vndo.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmphde7vndo.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphde7vndo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo83ibqcq.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpo83ibqcq.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo83ibqcq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(c; word)\n        {\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \          {\n                count++;\n            }\n        }\n        if(count\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjtqr2f16.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjtqr2f16.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxak_w9sl.d(19): Error: undefined identifier `split`\\n/tmp/tmpxak_w9sl.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxak_w9sl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_808x3qc.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp_808x3qc.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_808x3qc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr72wz0wm.d(19): Error: undefined identifier `split`\\n/tmp/tmpr72wz0wm.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpr72wz0wm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmper0xvg1g.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmper0xvg1g.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmper0xvg1g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5hd4v8kv.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp5hd4v8kv.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5hd4v8kv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3eu6w93r.d(19): Error: undefined identifier `split`\\n/tmp/tmp3eu6w93r.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3eu6w93r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpstcthdb2.d(19): Error: undefined identifier `split`\\n/tmp/tmpstcthdb2.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpstcthdb2.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpstcthdb2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnll2oevv.d(19): Error: undefined identifier `split`\\n/tmp/tmpnll2oevv.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpnll2oevv.d(23): Error: undefined identifier `countConsonants`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnll2oevv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpka0uogyt.d(19): Error: undefined identifier `split`\\n/tmp/tmpka0uogyt.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpka0uogyt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpey85dbib.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpey85dbib.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpey85dbib.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjd5lnw2v.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpjd5lnw2v.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjd5lnw2v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppmdy38jd.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmppmdy38jd.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppmdy38jd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(letter; word)\n    \
    \    {\n            if(letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u')\n            {\n                count++;\n        \
    \    }\n        }\n        if(count == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ok5_9s1.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok5_9s1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo7lt94ml.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpo7lt94ml.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7lt94ml.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcg39d4va.d(19): Error: undefined identifier `split`\\n/tmp/tmpcg39d4va.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcg39d4va.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpagkg344g.d(19): Error: undefined identifier `split`\\n/tmp/tmpagkg344g.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpagkg344g.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpagkg344g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg3i4yqrn.d(19): Error: undefined identifier `split`\\n/tmp/tmpg3i4yqrn.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpg3i4yqrn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp64p6nd_u.d(19): Error: undefined identifier `split`\\n/tmp/tmp64p6nd_u.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp64p6nd_u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8jus7pvj.d(19): Error: undefined identifier `split`\\n/tmp/tmp8jus7pvj.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8jus7pvj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjc9387mf.d(19): Error: undefined identifier `split`\\n/tmp/tmpjc9387mf.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpjc9387mf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] result = [];\n    string[] words = split(s);\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp33vdor7l.d(20): Error: undefined identifier `split`\\n/tmp/tmp33vdor7l.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp33vdor7l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7g4siz6p.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp7g4siz6p.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g4siz6p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.count_consonants == n)\n     \
    \   {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgp76g35i.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpgp76g35i.d(23): Error: no property `count_consonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgp76g35i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxld5awjo.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpxld5awjo.d(20): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `string[]`\\'s\\n/tmp/tmpxld5awjo.d(23): Error: no property\
    \ `countConsonants` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxld5awjo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] res;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n            res ~= word;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxxvxp0xk.d(19): Error: undefined identifier `split`\\n/tmp/tmpxxvxp0xk.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxxvxp0xk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyy1gf6ql.d(19): Error: undefined identifier `split`\\n/tmp/tmpyy1gf6ql.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyy1gf6ql.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpibkrjqxw.d(19): Error: undefined identifier `split`\\n/tmp/tmpibkrjqxw.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpibkrjqxw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5cgfyn4v.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp5cgfyn4v.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cgfyn4v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwwyywj0l.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpwwyywj0l.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwyywj0l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(letter; word)\n    \
    \    {\n            if(letter.isAlpha)\n            {\n                if(!letter.isVowel)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1e0hhsej.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp1e0hhsej.d(26): Error: no property `isAlpha` for type `immutable(char)`\\\
    n/tmp/tmp1e0hhsej.d(28): Error: no property `isVowel` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1e0hhsej.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptuqysf45.d(19): Error: undefined identifier `split`\\n/tmp/tmptuqysf45.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptuqysf45.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphgos4a1m.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmphgos4a1m.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgos4a1m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjxqraloz.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpjxqraloz.d(20): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `string[]`\\'s\\n/tmp/tmpjxqraloz.d(23): Error: no property\
    \ `countConsonants` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpjxqraloz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprle4u03z.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmprle4u03z.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprle4u03z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsa0nluym.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpsa0nluym.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsa0nluym.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr2mu_c7f.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpr2mu_c7f.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr2mu_c7f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(consonants(word) == n)\n        {\n\
    \            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaaa9q165.d(19): Error: undefined identifier `split`\\n/tmp/tmpaaa9q165.d(23):\
    \ Error: undefined identifier `consonants`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpaaa9q165.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplkppwcpq.d(19): Error: undefined identifier `split`\\n/tmp/tmplkppwcpq.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmplkppwcpq.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplkppwcpq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp79j4x8p_.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp79j4x8p_.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp79j4x8p_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn8cy4mvy.d(19): Error: undefined identifier `split`\\n/tmp/tmpn8cy4mvy.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpn8cy4mvy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeufmrtnx.d(19): Error: undefined identifier `split`\\n/tmp/tmpeufmrtnx.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpeufmrtnx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        long count = 0;\n        foreach(letter;\
    \ word)\n        {\n            if(letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u')\n            {\n                count++;\n\
    \            }\n        }\n        if(count == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp66_30760.d(19): Error: undefined identifier `split`\\n/tmp/tmp66_30760.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp66_30760.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw5o2pogf.d(19): Error: undefined identifier `split`\\n/tmp/tmpw5o2pogf.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpw5o2pogf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(letter; word)\n    \
    \    {\n            if(letter.isAlpha)\n            {\n                if(letter.toLower.isConsonant)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpffkrirck.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpffkrirck.d(26): Error: no property `isAlpha` for type `immutable(char)`\\\
    n/tmp/tmpffkrirck.d(28): Error: no property `toLower` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffkrirck.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp49_463ip.d(19): Error: undefined identifier `split`\\n/tmp/tmp49_463ip.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmp49_463ip.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49_463ip.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] result;\n    string[] words = split(s, \" \");\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvauothy9.d(20): Error: undefined identifier `split`\\n/tmp/tmpvauothy9.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvauothy9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpskftk6p9.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpskftk6p9.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpskftk6p9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpogy0xaxo.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpogy0xaxo.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpogy0xaxo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgk480_ot.d(19): Error: undefined identifier `split`\\n/tmp/tmpgk480_ot.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgk480_ot.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5khmzswz.d(19): Error: undefined identifier `split`\\n/tmp/tmp5khmzswz.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5khmzswz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzyhyt42v.d(19): Error: undefined identifier `split`\\n/tmp/tmpzyhyt42v.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpzyhyt42v.d(23): Error: undefined identifier `countConsonants`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzyhyt42v.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpot_eboxq.d(19): Error: undefined identifier `split`\\n/tmp/tmpot_eboxq.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpot_eboxq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.count_consonants() == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9wqewd0k.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp9wqewd0k.d(23): Error: no property `count_consonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wqewd0k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(word.length == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7bk2x7vl.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7bk2x7vl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvv_i2ln_.d(19): Error: undefined identifier `split`\\n/tmp/tmpvv_i2ln_.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvv_i2ln_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split();\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxibuqnef.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpxibuqnef.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxibuqnef.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9wq76yj5.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp9wq76yj5.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wq76yj5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx2rhjc7b.d(19): Error: undefined identifier `split`\\n/tmp/tmpx2rhjc7b.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpx2rhjc7b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpngicyhgi.d(19): Error: undefined identifier `split`\\n/tmp/tmpngicyhgi.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpngicyhgi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp68bb_njo.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp68bb_njo.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68bb_njo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp94_tet8g.d(19): Error: undefined identifier `split`\\n/tmp/tmp94_tet8g.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp94_tet8g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmg2267n_.d(19): Error: undefined identifier `split`\\n/tmp/tmpmg2267n_.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmg2267n_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpboivy69n.d(19): Error: undefined identifier `split`\\n/tmp/tmpboivy69n.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpboivy69n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprtoewv9w.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmprtoewv9w.d(20): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `string[]`\\'s\\n/tmp/tmprtoewv9w.d(23): Error: no property\
    \ `countConsonants` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmprtoewv9w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ainizmt.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp7ainizmt.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ainizmt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplo152ifa.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmplo152ifa.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplo152ifa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp9i6piyx.d(19): Error: undefined identifier `split`\\n/tmp/tmpp9i6piyx.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpp9i6piyx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp277cvmi9.d(19): Error: undefined identifier `split`\\n/tmp/tmp277cvmi9.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmp277cvmi9.d(23): Error: undefined identifier `countConsonants`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp277cvmi9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    auto words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n            result ~=\
    \ word;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw659jxm3.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw659jxm3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplehkz2l2.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmplehkz2l2.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplehkz2l2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_wxm1aqj.d(19): Error: undefined identifier `split`\\n/tmp/tmp_wxm1aqj.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmp_wxm1aqj.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_wxm1aqj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx15lrk2r.d(19): Error: undefined identifier `split`\\n/tmp/tmpx15lrk2r.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpx15lrk2r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi8mmpa8w.d(19): Error: undefined identifier `split`\\n/tmp/tmpi8mmpa8w.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpi8mmpa8w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(i,\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n            result\
    \ ~= word;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_i3w_v8o.d(19): Error: undefined identifier `split`\\n/tmp/tmp_i3w_v8o.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_i3w_v8o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppdnp1_nk.d(19): Error: undefined identifier `split`\\n/tmp/tmppdnp1_nk.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppdnp1_nk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsmuzfuas.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpsmuzfuas.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmuzfuas.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(c; word)\n        {\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \          {\n                count++;\n            }\n        }\n        if(count\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxhfjcdgx.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhfjcdgx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk020_x1x.d(19): Error: undefined identifier `split`\\n/tmp/tmpk020_x1x.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpk020_x1x.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk020_x1x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split();\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(c; word)\n        {\n\
    \            if(c.isAlpha && !c.isVowel)\n                count++;\n        }\n\
    \        if(count == n)\n            result ~= word;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcqb5izh5.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpcqb5izh5.d(26): Error: no property `isAlpha` for type `immutable(char)`\\\
    n/tmp/tmpcqb5izh5.d(26): Error: no property `isVowel` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqb5izh5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6t58optg.d(19): Error: undefined identifier `split`\\n/tmp/tmp6t58optg.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmp6t58optg.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6t58optg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpydn58u84.d(19): Error: undefined identifier `split`\\n/tmp/tmpydn58u84.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpydn58u84.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] res;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n            res ~= word;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp485njc01.d(19): Error: undefined identifier `split`\\n/tmp/tmp485njc01.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp485njc01.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] res = new string[];\n \
    \   foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n   \
    \         res ~= word;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdrhz2bvi.d(19): Error: undefined identifier `split`\\n/tmp/tmpdrhz2bvi.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpdrhz2bvi.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdrhz2bvi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5baxz3xs.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp5baxz3xs.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5baxz3xs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxpkbg_ws.d(19): Error: undefined identifier `split`\\n/tmp/tmpxpkbg_ws.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxpkbg_ws.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp69kapsg1.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp69kapsg1.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69kapsg1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        long count = 0;\n        foreach(ch;\
    \ word)\n        {\n            if(ch == 'a' || ch == 'e' || ch == 'i' || ch ==\
    \ 'o' || ch == 'u')\n            {\n                count++;\n            }\n\
    \        }\n        if(count == n)\n        {\n            result ~= word;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphdu0q4_e.d(19): Error: undefined identifier `split`\\n/tmp/tmphdu0q4_e.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphdu0q4_e.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[0];\n\
    \    foreach(string word; words)\n    {\n        if(count_consonants(word) ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpww17drxy.d(19): Error: undefined identifier `split`\\n/tmp/tmpww17drxy.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpww17drxy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp87mpoa5k.d(19): Error: undefined identifier `split`\\n/tmp/tmp87mpoa5k.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp87mpoa5k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.length == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzskowb0x.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzskowb0x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.length == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpval0a2ob.d(19): Error: undefined identifier `split`\\n/tmp/tmpval0a2ob.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpval0a2ob.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgetvh4dk.d(19): Error: undefined identifier `split`\\n/tmp/tmpgetvh4dk.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpgetvh4dk.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgetvh4dk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplh1qztqj.d(19): Error: undefined identifier `split`\\n/tmp/tmplh1qztqj.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmplh1qztqj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7p68_1bc.d(19): Error: undefined identifier `split`\\n/tmp/tmp7p68_1bc.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7p68_1bc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaamo9amr.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpaamo9amr.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaamo9amr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp86mt02ik.d(19): Error: undefined identifier `split`\\n/tmp/tmp86mt02ik.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp86mt02ik.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp18udagb9.d(19): Error: undefined identifier `split`\\n/tmp/tmp18udagb9.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmp18udagb9.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18udagb9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpczqwy9zk.d(19): Error: undefined identifier `split`\\n/tmp/tmpczqwy9zk.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpczqwy9zk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf7u3ujuu.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpf7u3ujuu.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf7u3ujuu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxyf3q0ml.d(19): Error: undefined identifier `split`\\n/tmp/tmpxyf3q0ml.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxyf3q0ml.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzl0vqnoj.d(19): Error: undefined identifier `split`\\n/tmp/tmpzl0vqnoj.d(23):\
    \ Error: no property `countConsonants` for type `string`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzl0vqnoj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7_yhfrg1.d(19): Error: undefined identifier `split`\\n/tmp/tmp7_yhfrg1.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7_yhfrg1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpga_2jrmp.d(19): Error: undefined identifier `split`\\n/tmp/tmpga_2jrmp.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpga_2jrmp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nlong countConsonants(string\
    \ word)\n{\n    long count = 0;\n    foreach(char; word)\n    {\n        if(isConsonant(char))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpffpdarw8.d(33): Error: no identifier for declarator `char`\\\
    n/tmp/tmpffpdarw8.d(35): Error: found `)` when expecting `.` following char\\\
    n/tmp/tmpffpdarw8.d(35): Error: found `)` when expecting identifier following\
    \ `char`.\\n/tmp/tmpffpdarw8.d(36): Error: found `{` when expecting `,`\\n/tmp/tmpffpdarw8.d(37):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmpffpdarw8.d(38): Error: expression\
    \ expected, not `}`\\n/tmp/tmpffpdarw8.d(39): Error: found `}` when expecting\
    \ `,`\\n/tmp/tmpffpdarw8.d(40): Error: expression expected, not `return`\\n/tmp/tmpffpdarw8.d(40):\
    \ Error: found `count` when expecting `,`\\n/tmp/tmpffpdarw8.d(40): Error: expression\
    \ expected, not `;`\\n/tmp/tmpffpdarw8.d(41): Error: found `}` when expecting\
    \ `,`\\n/tmp/tmpffpdarw8.d(42): Error: expression expected, not `unittest`\\n/tmp/tmpffpdarw8.d(43):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpffpdarw8.d(44): Error: expression\
    \ expected, not `alias`\\n/tmp/tmpffpdarw8.d(44): Error: found `candidate` when\
    \ expecting `,`\\n/tmp/tmpffpdarw8.d(44): Error: expression expected, not `=`\\\
    n/tmp/tmpffpdarw8.d(44): Error: found `select_words` when expecting `,`\\n/tmp/tmpffpdarw8.d(44):\
    \ Error: expression expected, not `;`\\n/tmp/tmpffpdarw8.d(46): Error: found `assert`\
    \ when expecting `,`\\n/tmp/tmpffpdarw8.d(46): Error: found `;` when expecting\
    \ `,`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffpdarw8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppehlyt9j.d(19): Error: undefined identifier `split`\\n/tmp/tmppehlyt9j.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppehlyt9j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9qh7fj19.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp9qh7fj19.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qh7fj19.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp90il1742.d(19): Error: undefined identifier `split`\\n/tmp/tmp90il1742.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp90il1742.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    long countConsonants(string s)\n{\n    long count = 0;\n    foreach(c; s)\n  \
    \  {\n        if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx4o1vlia.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4o1vlia.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz_e0bfog.d(19): Error: undefined identifier `split`\\n/tmp/tmpz_e0bfog.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpz_e0bfog.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz_e0bfog.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3udpsy3w.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp3udpsy3w.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3udpsy3w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbb3dl4e7.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpbb3dl4e7.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbb3dl4e7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp2hsf_ar.d(19): Error: undefined identifier `split`\\n/tmp/tmpp2hsf_ar.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpp2hsf_ar.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nlong count_consonants(string\
    \ s)\n{\n    long count = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1fhicxu4.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fhicxu4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(word.countConsonants == n)\n        {\n    \
    \        result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3gnj55ox.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp3gnj55ox.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3gnj55ox.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv55bmehi.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpv55bmehi.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv55bmehi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt1uzckai.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpt1uzckai.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1uzckai.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split();\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiz0p6gnv.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpiz0p6gnv.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiz0p6gnv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpytwtmqqa.d(19): Error: undefined identifier `split`\\n/tmp/tmpytwtmqqa.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpytwtmqqa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpws4_r_nq.d(19): Error: undefined identifier `split`\\n/tmp/tmpws4_r_nq.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpws4_r_nq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmmr_mz94.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpmmr_mz94.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmmr_mz94.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6_fcqu0m.d(19): Error: undefined identifier `split`\\n/tmp/tmp6_fcqu0m.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6_fcqu0m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxm_0dtfb.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpxm_0dtfb.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxm_0dtfb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptwj67xyu.d(19): Error: undefined identifier `split`\\n/tmp/tmptwj67xyu.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptwj67xyu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2rg48ap_.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp2rg48ap_.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rg48ap_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyf15if9o.d(19): Error: undefined identifier `split`\\n/tmp/tmpyf15if9o.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyf15if9o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjia23g4s.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpjia23g4s.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjia23g4s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxw668zub.d(19): Error: undefined identifier `split`\\n/tmp/tmpxw668zub.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxw668zub.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp50coadd4.d(19): Error: undefined identifier `split`\\n/tmp/tmp50coadd4.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp50coadd4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp033ari3x.d(19): Error: undefined identifier `split`\\n/tmp/tmp033ari3x.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp033ari3x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(string word; words)\n    {\n        if(word.countConsonants() == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptck8chto.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmptck8chto.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptck8chto.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    auto words = s.split(\" \");\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.count_if!(a => a.isConsonant) == n)\n       \
    \ {\n            result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpafk5lj92.d(19): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpafk5lj92.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0yc_y09q.d(19): Error: undefined identifier `split`\\n/tmp/tmp0yc_y09q.d(23):\
    \ Error: no property `countConsonants` for type `string`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0yc_y09q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz8z7x3dw.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpz8z7x3dw.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8z7x3dw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjvjlmxc.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpxjvjlmxc.d(20): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `string[]`\\'s\\n/tmp/tmpxjvjlmxc.d(23): Error: no property\
    \ `countConsonants` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxjvjlmxc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5mxlqeve.d(19): Error: undefined identifier `split`\\n/tmp/tmp5mxlqeve.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5mxlqeve.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb0b6uudh.d(19): Error: undefined identifier `split`\\n/tmp/tmpb0b6uudh.d(23):\
    \ Error: undefined identifier `countConsonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpb0b6uudh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9sagidag.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmp9sagidag.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9sagidag.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpff7w30cd.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpff7w30cd.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpff7w30cd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(countConsonants(word) == n)\n   \
    \     {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe2864bk0.d(19): Error: undefined identifier `split`\\n/tmp/tmpe2864bk0.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpe2864bk0.d(23): Error: undefined identifier `countConsonants`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe2864bk0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp516hhw6f.d(19): Error: undefined identifier `split`\\n/tmp/tmp516hhw6f.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp516hhw6f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmeszupgx.d(19): Error: undefined identifier `split`\\n/tmp/tmpmeszupgx.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmeszupgx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = [];\n  \
    \  foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n    \
    \    {\n            result ~= word;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvmaul1mf.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpvmaul1mf.d(23): Error: no property `countConsonants` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvmaul1mf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpih89_zp7.d(19): Error: undefined identifier `split`\\n/tmp/tmpih89_zp7.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpih89_zp7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7ptabgu.d(19): Error: undefined identifier `split`\\n/tmp/tmps7ptabgu.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmps7ptabgu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split;\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(c; word)\n        {\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \          {\n                count++;\n            }\n        }\n        if(count\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2wetpopu.d(19): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wetpopu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = [];\n \
    \   foreach(word; words)\n    {\n        long count = 0;\n        foreach(c; word)\n\
    \        {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u')\n            {\n                count++;\n            }\n        }\n  \
    \      if(count == n)\n        {\n            result ~= word;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgosw8w_3.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgosw8w_3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        long count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(isConsonant(c))\n                count++;\n\
    \        }\n        if(count == n)\n            result ~= word;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4e5m4zt5.d(19): Error: undefined identifier `split`\\n/tmp/tmp4e5m4zt5.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmp4e5m4zt5.d(26): Error: undefined identifier `isConsonant`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4e5m4zt5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_p44u6v.d(19): Error: undefined identifier `split`\\n/tmp/tmpq_p44u6v.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpq_p44u6v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpve03n6lk.d(19): Error: no property `split` for type `string`\\\
    n/tmp/tmpve03n6lk.d(20): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `string[]`\\'s\\n/tmp/tmpve03n6lk.d(23): Error: no property\
    \ `countConsonants` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpve03n6lk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s);\n    string[] result = new string[0];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgnxnffwh.d(19): Error: undefined identifier `split`\\n/tmp/tmpgnxnffwh.d(23):\
    \ Error: undefined identifier `count_consonants`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgnxnffwh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns a\
    \ list of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty list.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\"\
    , 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[];\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi6occ1s3.d(19): Error: undefined identifier `split`\\n/tmp/tmpi6occ1s3.d(20):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `string[]`\\\
    's\\n/tmp/tmpi6occ1s3.d(23): Error: undefined identifier `count_consonants`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6occ1s3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
