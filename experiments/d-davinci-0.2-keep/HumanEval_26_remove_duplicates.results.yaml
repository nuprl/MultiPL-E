name: HumanEval_26_remove_duplicates
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwwp_z03g.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwwp_z03g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgi7ek1s3.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpgi7ek1s3.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgi7ek1s3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi1obzcra.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpi1obzcra.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpi1obzcra.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7650wwld.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp7650wwld.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7650wwld.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n in result)\n            continue;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx5myfdjc.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx5myfdjc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpydz_qzb2.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydz_qzb2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers) \n    {\n        if(!result.canFind(n))\
    \ \n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcafvqanl.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcafvqanl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(long i; numbers)\n    {\n        if(!result.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxlg7d9oe.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxlg7d9oe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(num; numbers)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkz8q6fwu.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkz8q6fwu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmlcd7c8t.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpmlcd7c8t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n) ==\
    \ 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkcradi7j.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpkcradi7j.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpkcradi7j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6prcunuz.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp6prcunuz.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6prcunuz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcscypbjd.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcscypbjd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(num; numbers)\n    {\n        if(count(numbers, num) == 1)\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6vmn8s21.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6vmn8s21.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(num; numbers)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy_8cjx3b.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_8cjx3b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmq0yit4u.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmq0yit4u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc647wubp.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpc647wubp.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpc647wubp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(i; numbers)\n    {\n        if(!result.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw5ypjt5c.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5ypjt5c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmwcw9gk5.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpmwcw9gk5.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmwcw9gk5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers, n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprubtwtjd.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmprubtwtjd.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprubtwtjd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n    \
    \    {\n            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmfhs0plv.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfhs0plv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers) \n    {\n        if(n in result) \n \
    \       {\n            continue;\n        }\n        result ~= n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgfp33aut.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpgfp33aut.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgfp33aut.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeu1jq_fd.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeu1jq_fd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers, n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9qkc35ui.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp9qkc35ui.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qkc35ui.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp886izi9w.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp886izi9w.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp886izi9w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfy3xqit5.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy3xqit5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers) \n    {\n        if(n in result) \n \
    \       {\n            continue;\n        }\n        result ~= n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmput7qkf_a.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmput7qkf_a.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmput7qkf_a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n !in result)\n        {\n       \
    \     result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n \
    \   assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdnyrvblg.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdnyrvblg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(num; numbers)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6m0frsm_.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6m0frsm_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n) ==\
    \ 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr2v0v31d.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpr2v0v31d.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpr2v0v31d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(result.count(n) ==\
    \ 0)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpquq_b7_6.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpquq_b7_6.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpquq_b7_6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpey27kjz6.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpey27kjz6.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpey27kjz6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers) \n    {\n        if(result.count(n) == 0)\n \
    \           result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9o_wb7a_.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9o_wb7a_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf1m9qh2m.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpf1m9qh2m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpel55bdl2.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpel55bdl2.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpel55bdl2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpczqjk9jf.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpczqjk9jf.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpczqjk9jf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n in result)\n            continue;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcagrjtxx.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcagrjtxx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1fn329o1.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fn329o1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = numbers.dup;\n    foreach(i, ref e; result)\n    {\n        foreach(j, ref\
    \ f; result)\n        {\n            if(i != j && e == f)\n            {\n   \
    \             result.remove(j);\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4d9i_933.d(19): Error: no property `remove` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d9i_933.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcyjl4ej4.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpcyjl4ej4.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcyjl4ej4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptw2xyqqq.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptw2xyqqq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz5620ixh.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpz5620ixh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwiic1xum.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiic1xum.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    return numbers.dup.removeDuplicates();\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr5yrjdop.d(12): Error: no property `removeDuplicates` for type\
    \ `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr5yrjdop.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if (n in result)\n            continue;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_dkci_ng.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_dkci_ng.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwb8us7yx.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpwb8us7yx.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwb8us7yx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(result.count(n) == 0)\n  \
    \      {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6e61iudb.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6e61iudb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n) ==\
    \ 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphgr2fxml.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmphgr2fxml.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmphgr2fxml.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ysdxsgx.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp3ysdxsgx.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp3ysdxsgx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd5kh0alp.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpd5kh0alp.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpd5kh0alp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9vuw4874.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9vuw4874.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        else\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt6i7eu00.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6i7eu00.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdpnooj90.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpdpnooj90.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdpnooj90.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(number; numbers)\n    {\n        if(result.count(number)\
    \ == 0)\n        {\n            result ~= number;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0jmb4j4b.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jmb4j4b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6i82djkp.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp6i82djkp.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6i82djkp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp57weq9aq.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp57weq9aq.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp57weq9aq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(result.count(n) ==\
    \ 0)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp10x81cz3.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp10x81cz3.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp10x81cz3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(result.count(n) == 0)\n  \
    \      {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpowjlkchs.d(15): Error: no property `count` for type `void[]`\\\
    n/tmp/tmpowjlkchs.d(17): Error: cannot append type `long` to type `void[]`\\n/tmp/tmpowjlkchs.d(20):\
    \ Error: cannot implicitly convert expression `result` of type `void[]` to `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpowjlkchs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(e; numbers)\n    {\n        if(e !in result)\n  \
    \      {\n            result ~= e;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk2aprtc5.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpk2aprtc5.d(15): Error: incompatible\
    \ types for `(e) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpk2aprtc5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(i; numbers)\n    {\n        if(!result.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxlijwndl.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpxlijwndl.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxlijwndl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk__yufpy.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpk__yufpy.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpk__yufpy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(num; numbers)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpugo74n5a.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugo74n5a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3_92coe9.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp3_92coe9.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3_92coe9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvwgtldxf.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwgtldxf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6l1n0bz9.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6l1n0bz9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto seen\
    \ = new long[];\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n\
    \        if(n in seen)\n            continue;\n        seen ~= n;\n        result\
    \ ~= n;\n    }\n    return result;\n}\n/*\n    Given a list of integers, return\
    \ a list of the integers, omitting any that are less than 0.\n    >>> no_negatives([1,\
    \ -2])\n    [1]\n    >>> no_negatives([-3, -3, 3, 3])\n    []\n    >>> no_negatives([-1,\
    \ -1, -1])\n    []\n*/\nlong[] no_negatives(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n < 0)\n         \
    \   continue;\n        result ~= n;\n    }\n    return result;\n}\n/*\n    Given\
    \ a list of integers, return a list of the integers, omitting any that are less\
    \ than 0.\n    >>> no_negatives([1, -2])\n    [1]\n    >>> no_negatives([-3, -3,\
    \ 3, 3])\n    []\n    >>> no_negatives([-1, -1, -1])\n    []\n*/\nlong[] no_negatives(long[]\
    \ numbers) \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n\
    \        if(n < 0)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\n/*\n    Given a list of integers, return a list of the integers,\
    \ omitting any that are less than 0.\n    >>> no_negatives([1, -2])\n    [1]\n\
    \    >>> no_negatives([-3, -3, 3, 3])\n    []\n    >>> no_negatives([-1, -1, -1])\n\
    \    []\n*/\nlong[] no_negatives(long[] numbers) \n{\n    auto result = new long[];\n\
    \    foreach(n; numbers)\n    {\n        if(n < 0)\n            continue;\n  \
    \      result ~=\nunittest\n{\n    alias candidate = remove_duplicates;\n\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppkhw7nc6.d(80): Error: expression expected, not `unittest`\\\
    n/tmp/tmppkhw7nc6.d(81): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmppkhw7nc6.d(88): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppkhw7nc6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    return numbers.dup.retain!(a\
    \ => numbers.count(a) == 1);\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp552ih0iy.d(12): Error: no property `retain` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp552ih0iy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdeqwe3so.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdeqwe3so.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers, n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpogtapjlc.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpogtapjlc.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpogtapjlc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkm3_woxt.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkm3_woxt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(count(numbers, n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7bsn3dld.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7bsn3dld.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo_qam3a8.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo_qam3a8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers) \n    {\n        if(!result.canFind(n))\
    \ \n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprx9eeb8f.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmprx9eeb8f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1vimn542.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp1vimn542.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n) ==\
    \ 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy2fh4o6o.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpy2fh4o6o.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpy2fh4o6o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuvfgjwzd.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpuvfgjwzd.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpuvfgjwzd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(result.count(n) == 0)\n  \
    \      {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpslfn1i4b.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpslfn1i4b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwdlhavdb.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdlhavdb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ilrakb_.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ilrakb_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(number; numbers)\n    {\n        if(result.count(number)\
    \ == 0)\n        {\n            result ~= number;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgd4uh4h7.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgd4uh4h7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuudtbzk0.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuudtbzk0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(result.count(n) ==\
    \ 0)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppgngf4y_.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmppgngf4y_.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppgngf4y_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(num; numbers)\n    {\n        if(result.count(num)\
    \ == 0)\n        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsthm5ve2.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsthm5ve2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers) \n    {\n        if(n in result) \n        {\n\
    \            continue;\n        }\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3sc7na1f.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3sc7na1f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk2z1bmmr.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpk2z1bmmr.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpk2z1bmmr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnfwelxd2.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnfwelxd2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(number; numbers) \n    {\n        if(!result.canFind(number))\
    \ \n        {\n            result ~= number;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfegvae4b.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfegvae4b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(num; numbers)\n    {\n        if(count(numbers, num)\
    \ == 1)\n        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsdr0m66a.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpsdr0m66a.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdr0m66a.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa_9eq6_4.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_9eq6_4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppfw4_44c.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmppfw4_44c.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppfw4_44c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmparh84mml.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmparh84mml.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmparh84mml.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(num; numbers)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwe44la9i.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwe44la9i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5lhz5peb.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp5lhz5peb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg3g0kenr.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3g0kenr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpde7jkbiq.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpde7jkbiq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(numbers.count(n) == 1)\n        {\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsv0c8d1p.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsv0c8d1p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(num; numbers)\n    {\n        if(count(numbers, num)\
    \ == 1)\n        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxv7o6o56.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpxv7o6o56.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxv7o6o56.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers) \n    {\n        if(n in result) \n \
    \       {\n            continue;\n        }\n        result ~= n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9oyxx3fc.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9oyxx3fc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_oqucxzn.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp_oqucxzn.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_oqucxzn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    //long[]\
    \ result;\n    //long[] result = new long[];\n    //long[] result = new long[0];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    \    //long[] result = new long[numbers.length];\n    //long[] result = new long[numbers.length];\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp4vl0hny.d(47): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp4vl0hny.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(number; numbers)\n    {\n        if(!result.canFind(number))\n\
    \        {\n            result ~= number;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplvdizxin.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplvdizxin.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n in result)\n            continue;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprj9yw70g.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprj9yw70g.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(numbers.count(n) == 1)\n        {\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0pag93c_.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pag93c_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.contains(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvrmulo19.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpvrmulo19.d(15): Error: no property\
    \ `contains` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvrmulo19.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n    \
    \    {\n            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl4d4ccy0.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl4d4ccy0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(i; numbers)\n    {\n        if(!result.count(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp80p6i7da.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp80p6i7da.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp77kodegp.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77kodegp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n) ==\
    \ 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprdgfgs00.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmprdgfgs00.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprdgfgs00.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2itwp22n.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2itwp22n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg9yeijyt.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg9yeijyt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers, n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2b9f8h4d.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp2b9f8h4d.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2b9f8h4d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n in result)\n            continue;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwtqcjaon.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwtqcjaon.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(result.count(n) == 0)\n  \
    \      {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpboqsqzjh.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpboqsqzjh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqb93dtoj.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpqb93dtoj.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqb93dtoj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps3uhusi5.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmps3uhusi5.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmps3uhusi5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphtauu789.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphtauu789.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzmjq9o9n.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzmjq9o9n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers) \n    {\n        if(n in result) \n\
    \        {\n            continue;\n        }\n        result ~= n;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprtd_njpm.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtd_njpm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        else\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc_79p9qv.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_79p9qv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsq31w9qr.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpsq31w9qr.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpsq31w9qr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpln6iv1q_.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpln6iv1q_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n) ==\
    \ 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4i2_lkfs.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp4i2_lkfs.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4i2_lkfs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n in result)\n            continue;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpctm0k_ej.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctm0k_ej.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto seen\
    \ = new long[];\n    foreach(n; numbers) \n    {\n        if(n in seen) \n   \
    \     {\n            continue;\n        }\n        seen ~= n;\n    }\n    return\
    \ seen;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxowvxj1q.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxowvxj1q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpckh_jgye.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpckh_jgye.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpckh_jgye.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(result.count(n) ==\
    \ 0)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptnm6ithh.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmptnm6ithh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp886v4f8q.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp886v4f8q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ax_d_iy.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp6ax_d_iy.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6ax_d_iy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpws170xlc.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpws170xlc.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpws170xlc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaujvmyvv.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaujvmyvv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(num; numbers)\n    {\n        if(count(numbers, num)\
    \ == 1)\n        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmr5miyuj.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpmr5miyuj.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmr5miyuj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n in result)\n            continue;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp18ffsl7i.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18ffsl7i.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(i; numbers)\n    {\n        if(!result.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgkkdmor4.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpgkkdmor4.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgkkdmor4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6r4a4hwz.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6r4a4hwz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(num; numbers)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm78c2i2k.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm78c2i2k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n    \
    \    {\n            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5r4f3tns.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5r4f3tns.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2cvyvddl.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp2cvyvddl.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2cvyvddl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(numbers.count(n) == 1)\n        {\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_hdxs0j_.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hdxs0j_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n in result)\n            continue;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp72r3v2z2.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72r3v2z2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n in result)\n            continue;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm4xpq5zd.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm4xpq5zd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.contains(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpffvke_oo.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpffvke_oo.d(15): Error: no property\
    \ `contains` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpffvke_oo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps84rghnb.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmps84rghnb.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmps84rghnb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5avvhz_m.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5avvhz_m.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppklgggtx.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmppklgggtx.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppklgggtx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_m3s26wv.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_m3s26wv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsahwvx2i.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsahwvx2i.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplntcj4kh.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplntcj4kh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(num; numbers)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwswa_hi2.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwswa_hi2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(number; numbers)\n    {\n        if(!result.canFind(number))\n\
    \        {\n            result ~= number;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsqy275ue.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqy275ue.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(num; numbers)\n    {\n        if(count(numbers,\
    \ num) == 1)\n        {\n            result ~= num;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4zwlr9oj.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zwlr9oj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkgbzy9sw.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgbzy9sw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcrztl687.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpcrztl687.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcrztl687.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto seen\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in seen)\n     \
    \       continue;\n        seen ~= n;\n    }\n    return seen;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7w5d92wh.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp7w5d92wh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp46ssl787.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46ssl787.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(num; numbers)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp41ttrefg.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp41ttrefg.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp41ttrefg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96z7avdu.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp96z7avdu.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp96z7avdu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprc2g_egz.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprc2g_egz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt0wj7g5f.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpt0wj7g5f.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpt0wj7g5f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3mwwbgkk.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp3mwwbgkk.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3mwwbgkk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\n/*\n\
    \    Given a list of integers, return a list of all pairs of integers that sum\
    \ up to a given number.\n    >>> find_pairs([1, 2, 3, 4, 5, 6], 7)\n    [(1, 6),\
    \ (2, 5), (3, 4)]\n*/\nlong[][] find_pairs(long[] numbers, long sum) \n{\n   \
    \ long[][] result = new long[0][];\n    foreach(n; numbers)\n    {\n        foreach(m;\
    \ numbers)\n        {\n            if(n + m == sum)\n                result ~=\
    \ [n, m];\n        }\n    }\n    return result;\n}\n/*\n    Given a list of integers,\
    \ return a list of all pairs of integers that sum up to a given number.\n    >>>\
    \ find_pairs([1, 2, 3, 4, 5, 6], 7)\n    [(1, 6), (2, 5), (3, 4)]\n*/\nlong[][]\
    \ find_pairs_2(long[] numbers, long sum) \n{\n    long[][] result = new long[0][];\n\
    \    foreach(n; numbers)\n    {\n        foreach(m; numbers)\n        {\n    \
    \        if(n + m == sum)\n                result ~= [n, m];\n        }\n    }\n\
    \    return result;\n}\n/*\n    Given a list of integers, return a list of all\
    \ pairs of integers that sum up to a given number.\n    >>> find_pairs([1, 2,\
    \ 3, 4, 5, 6], 7)\n    [(1, 6), (2, 5), (3, 4)]\n*/\nlong[][] find_pairs_3(long[]\
    \ numbers, long sum) \n{\n    long[][] result = new long[0][];\n    foreach(n;\
    \ numbers)\n    {\n        foreach(m; numbers)\n        {\n            if(n +\
    \ m == sum)\n                result\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn43zu5me.d(71): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpn43zu5me.d(79): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpn43zu5me.d(79): Error: found `End\
    \ of File` when expecting `}` following compound statement\\n/tmp/tmpn43zu5me.d(79):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn43zu5me.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp03is25rf.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp03is25rf.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp03is25rf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(count(numbers, n) == 1)\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfnzfdpeg.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfnzfdpeg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(num; numbers)\n    {\n        if(result.count(num)\
    \ == 0)\n        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpila7mq2c.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpila7mq2c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn9gnpfpv.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpn9gnpfpv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmau8df0q.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmau8df0q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    auto seen = new bool[];\n    foreach (n; numbers) {\n   \
    \     if (seen[n]) {\n            continue;\n        }\n        seen[n] = true;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwtmpvyc8.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpwtmpvyc8.d(13): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `bool[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwtmpvyc8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz3qhgr22.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3qhgr22.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(n in result)\n  \
    \          continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfqrk8qjm.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfqrk8qjm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5z71hm7b.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5z71hm7b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgn5svyw6.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpgn5svyw6.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgn5svyw6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(numbers.count(n) == 1)\n        {\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj6zjejdw.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6zjejdw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpohdxmcig.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpohdxmcig.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpohdxmcig.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprg6ejacq.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmprg6ejacq.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprg6ejacq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(numbers.count(n) == 1)\n        {\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp489as3u9.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp489as3u9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdkdudqmd.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpdkdudqmd.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdkdudqmd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(num; numbers)\n    {\n        if(count(numbers, num)\
    \ == 1)\n        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ftr8cq2.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp4ftr8cq2.d(15): Error: undefined\
    \ identifier `count`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ftr8cq2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n in result)\n            continue;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt9rsmws6.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9rsmws6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjpkmi9zn.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpjpkmi9zn.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpjpkmi9zn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(num; numbers)\n    {\n        if(num !in result)\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj5yx2cxr.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpj5yx2cxr.d(15): Error: incompatible\
    \ types for `(num) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpj5yx2cxr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    auto seen = new bool[];\n    foreach (i; numbers) \n    {\n\
    \        if (seen[i]) \n        {\n            continue;\n        }\n        seen[i]\
    \ = true;\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpefkjusj5.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpefkjusj5.d(13): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `bool[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpefkjusj5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9r6vj9tg.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9r6vj9tg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(number; numbers)\n    {\n        if(!result.canFind(number))\n\
    \        {\n            result ~= number;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp30rdblsv.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30rdblsv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyrl4wst9.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpyrl4wst9.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyrl4wst9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsmud_zpn.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpsmud_zpn.d(15): Error: incompatible\
    \ types for `(n) in (result)`: `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsmud_zpn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ulbzrkw.d(15): Error: no property `count` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ulbzrkw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(count(numbers, n) == 1)\n        {\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvo6ce41x.d(15): Error: undefined identifier `count`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo6ce41x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n    \
    \    {\n            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy3d5ijbt.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3d5ijbt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(num; numbers)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjq3guy05.d(15): Error: no property `canFind` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjq3guy05.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n in result)\n            continue;\n\
    \        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxppia9no.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxppia9no.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjpojuj32.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpjpojuj32.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjpojuj32.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n) ==\
    \ 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqy3va_c7.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpqy3va_c7.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqy3va_c7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n) ==\
    \ 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9kwepfn2.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp9kwepfn2.d(15): Error: no property\
    \ `count` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9kwepfn2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk8goijy_.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8goijy_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.count(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpacb_jt5e.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpacb_jt5e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers) \n    {\n        if(!n in result) \n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_z7sa54k.d(15): Error: incompatible types for `(!n) in (result)`:\
    \ `bool` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_z7sa54k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[0];\n    foreach(n; numbers) \n    {\n        if(n in result) \n\
    \        {\n            continue;\n        }\n        result ~= n;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdoxqgfyq.d(15): Error: incompatible types for `(n) in (result)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdoxqgfyq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n   \
    \         continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt6t83ppo.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpt6t83ppo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.contains(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4zoz2wuf.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp4zoz2wuf.d(15): Error: no property\
    \ `contains` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4zoz2wuf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    auto result\
    \ = new long[];\n    auto seen = new bool[];\n    foreach (n; numbers) \n    {\n\
    \        if (!seen[n]) \n        {\n            seen[n] = true;\n            result\
    \ ~= n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz7ccvz63.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmpz7ccvz63.d(13): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `bool[]`\\'s\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7ccvz63.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1,\
    \ 3, 4]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result\
    \ = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp23e7_79r.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\n/tmp/tmp23e7_79r.d(15): Error: no property\
    \ `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp23e7_79r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
