name: HumanEval_12_longest
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
  \ the longest one. Return the first one in case of multiple\n    strings of the\
  \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
  \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n\
  \    'ccc'\n    \n*/\nNullable!(string) longest(string[] strings) \n"
tests: "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
  \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
  , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n\
  {\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
  , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\n\
  void main(){}"
completions: ["{\n    if (strings.length == 0) return null;\n    Nullable!(string)\
    \ longest = strings[0];\n    foreach (string s; strings) {\n        if (s.length\
    \ > longest.length) longest = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings) \n    {\n        if(result.isNull ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result;\n    foreach(i, s; strings)\n    {\n   \
    \     if(result.isNull || s.length > result.get.length)\n        {\n         \
    \   result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings) \n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if (longest.isNull || s.length > longest.get.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result;\n    foreach(str; strings) \n    {\n   \
    \     if(result.isNull || str.length > result.get.length) \n        {\n      \
    \      result = str;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if (longest is null || s.length > longest.get.length)\n      \
    \  {\n            longest = s;\n        }\n    }\n    return longest;\n}", "{\n\
    \    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n      \
    \  if(result.isNull || s.length > result.get.length)\n        {\n            result\
    \ = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string) result;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings) \n    {\n        if(result.isNull || s.length > result.get.length)\
    \ \n        {\n            result = s;\n        }\n    }\n    return result;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n\
    \        auto longest = strings[0];\n        foreach (string s; strings)\n   \
    \     {\n            if (s.length > longest.length)\n                longest =\
    \ s;\n        }\n        return longest;\n    }\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) result;\n    foreach(str; strings)\n    {\n        if(result.isNull\
    \ || str.length > result.get.length)\n        {\n            result = str;\n \
    \       }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length) \n        {\n            longest = s;\n     \
    \   }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n    \
    \    return null;\n    Nullable!(string) longest = strings[0];\n    foreach (string\
    \ s; strings)\n    {\n        if (s.length > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest is null || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(s.length > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result;\n    foreach(str; strings)\n    {\n        if(result.isNull\
    \ || str.length > result.get.length)\n        {\n            result = str;\n \
    \       }\n    }\n    return result;\n}", "{\n    if (strings.length == 0)\n \
    \       return null;\n    else\n    {\n        auto longest = strings[0];\n  \
    \      foreach (s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n     \
    \   if(result.isNull || s.length > result.get.length)\n        {\n           \
    \ result = s;\n        }\n    }\n    return result;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    else\n    {\n        auto result = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > result.length)\n\
    \                result = s;\n        }\n        return result;\n    }\n}", "{\n\
    \    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n      \
    \  if(result.isNull || s.length > result.get.length)\n        {\n            result\
    \ = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull ||\
    \ s.length > longest.get.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) result;\n    foreach(string s; strings)\
    \ \n    {\n        if(!result.isNull || s.length > result.get.length) \n     \
    \   {\n            result = s;\n        }\n    }\n    return result;\n}", "{\n\
    \    if (strings.length == 0)\n        return null;\n    else\n    {\n       \
    \ string longest = strings[0];\n        foreach (string s; strings)\n        {\n\
    \            if (s.length > longest.length)\n                longest = s;\n  \
    \      }\n        return longest;\n    }\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result;\n    foreach(str; strings)\n    {\n        if(result.isNull\
    \ || str.length > result.get.length)\n        {\n            result = str;\n \
    \       }\n    }\n    return result;\n}", "{\n    Nullable!(string) result;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(!result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n     \
    \   return null;\n    else\n    {\n        auto longest = strings[0];\n      \
    \  foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || longest.get.length < s.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(string s; strings) \n    {\n        if(longest is null || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest is null || s.length > longest.get.length)\n        {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n  \
    \      return null;\n    else\n    {\n        Nullable!(string) longest = null;\n\
    \        foreach (string s; strings)\n        {\n            if (longest is null\
    \ || s.length > longest.length)\n                longest = s;\n        }\n   \
    \     return longest;\n    }\n}", "{\n    Nullable!(string) longest;\n    foreach(string\
    \ s; strings) \n    {\n        if (longest.isNull || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if (longest.isNull || s.length > longest.get.length)\n       \
    \     longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    else\n    {\n        auto longest = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest is null || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(string s; strings)\n    {\n        if(longest.isNull || s.length >\
    \ longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings) \n    {\n        if(result.isNull || s.length > result.get.length)\
    \ \n        {\n            result = s;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n\
    \        if(result.isNull || s.length > result.get.length)\n        {\n      \
    \      result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n  \
    \      return null;\n    else\n    {\n        string longest = strings[0];\n \
    \       foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n      \
    \  string longest = strings[0];\n        foreach (string s; strings)\n       \
    \ {\n            if (s.length > longest.length)\n                longest = s;\n\
    \        }\n        return longest;\n    }\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if(longest.isNull || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n      \
    \  if(longest.isNull || str.length > longest.get.length)\n        {\n        \
    \    longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(s; strings) \n    {\n        if (result.isNull || s.length\
    \ > result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if(longest is null || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) result;\n    foreach(str; strings) \n    {\n        if(!result.isNull\
    \ || str.length > result.get.length) \n        {\n            result = str;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) result;\n\
    \    foreach(s; strings)\n    {\n        if (result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    else\n    {\n        size_t max_length = 0;\n\
    \        size_t max_index = 0;\n        foreach (i, s; strings)\n        {\n \
    \           if (s.length > max_length)\n            {\n                max_length\
    \ = s.length;\n                max_index = i;\n            }\n        }\n    \
    \    return strings[max_index];\n    }\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest.isNull || s.length > longest.get.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ if (strings.length == 0)\n        return null;\n    else\n    {\n        string\
    \ longest = strings[0];\n        foreach (string s; strings)\n        {\n    \
    \        if (s.length > longest.length)\n                longest = s;\n      \
    \  }\n        return longest;\n    }\n}", "{\n    Nullable!(string) result;\n\
    \    foreach(string s; strings)\n    {\n        if(!result.isNull)\n        {\n\
    \            if(s.length > result.get.length)\n            {\n               \
    \ result = s;\n            }\n        }\n        else\n        {\n           \
    \ result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    else\n    {\n        auto max = strings[0];\n        foreach (str;\
    \ strings)\n        {\n            if (str.length > max.length)\n            \
    \    max = str;\n        }\n        return max;\n    }\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || longest.length < s.length)\n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n      \
    \  auto longest = strings[0];\n        foreach (string s; strings)\n        {\n\
    \            if (s.length > longest.length)\n                longest = s;\n  \
    \      }\n        return longest;\n    }\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result;\n\
    \    int maxLength = 0;\n    foreach(string s; strings)\n    {\n        if(s.length\
    \ > maxLength)\n        {\n            maxLength = s.length;\n            result\
    \ = s;\n        }\n    }\n    return result;\n}", "{\n    if (strings.length ==\
    \ 0)\n        return null;\n    else\n    {\n        auto longest = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) result;\n    foreach(str;\
    \ strings)\n    {\n        if(result.isNull || str.length > result.get.length)\n\
    \        {\n            result = str;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n     \
    \   if(result.isNull || s.length > result.get.length)\n        {\n           \
    \ result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result;\n \
    \   foreach(str; strings) \n    {\n        if(result.isNull || str.length > result.get.length)\n\
    \            result = str;\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n     \
    \   return null;\n    else\n    {\n        auto longest = strings[0];\n      \
    \  foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n     \
    \   if(result.isNull || s.length > result.get.length)\n        {\n           \
    \ result = s;\n        }\n    }\n    return result;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    else\n    {\n        auto longest = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if(longest.isNull || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) result;\n    foreach(string s; strings) \n    {\n        if(result\
    \ is null || s.length > result.get.length) \n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if (longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n      \
    \  auto longest = strings[0];\n        foreach (string s; strings)\n        {\n\
    \            if (s.length > longest.length)\n                longest = s;\n  \
    \      }\n        return longest;\n    }\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if (longest is null\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n  \
    \      return null;\n    auto longest = strings[0];\n    foreach (string s; strings)\n\
    \    {\n        if (s.length > longest.length)\n            longest = s;\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if (longest is null || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n      \
    \  string longest = strings[0];\n        foreach (string s; strings)\n       \
    \ {\n            if (s.length > longest.length)\n                longest = s;\n\
    \        }\n        return longest;\n    }\n}", "{\n    if (strings.length ==\
    \ 0)\n        return null;\n    else\n    {\n        auto longest = strings[0];\n\
    \        foreach (s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest is null || s.length > longest.get.length)\n        {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(string s; strings)\n    {\n        if(longest.isNull || s.length >\
    \ longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}\n/*\n    Return the sum of the numbers in the list.\n\
    \    >>> sum([])\n    0\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1.0, 2.0,\
    \ 3.0])\n    6.0\n*/\nT sum(T)(T[] numbers) if(is(T == int) || is(T == double))\n\
    {\n    T sum = 0;\n    foreach(T n; numbers)\n    {\n        sum += n;\n    }\n\
    \    return sum;\n}\n/*\n    Return the average of the numbers in the list.\n\
    \    >>> average([])\n    0\n    >>> average([1, 2, 3])\n    2\n    >>> average([1.0,\
    \ 2.0, 3.0])\n    2.0\n*/\nT average(T)(T[] numbers) if(is(T == int) || is(T ==\
    \ double))\n{\n    return sum(numbers) / numbers.length;\n}\n/*\n    Return the\
    \ median of the numbers in the list.\n    >>> median([])\n    0\n    >>> median([1,\
    \ 2, 3])\n    2\n    >>> median([1.0, 2.0, 3.0])\n    2.0\n    >>> median([1,\
    \ 2, 3, 4])\n    2.5\n*/\nT median(T)(T[] numbers) if(is(T == int) || is(T ==\
    \ double))\n{\n    T[] sorted = numbers[];\n    std.algorithm.sort(sorted);\n\
    \    if(sorted.length % 2 == 0)\n    {\n        return (sorted[sorted.length /\
    \ 2 - 1] + sorted[sorted.length / 2]) / 2;\n    }\n    else\n    {\n        return\
    \ sorted[sorted.length / 2];\n    }\n}\n/*\n    Return the mode of the numbers\
    \ in the list.\n    >>> mode", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    else\n    {\n        auto longest = strings[0];\n        foreach\
    \ (s; strings)\n        {\n            if (s.length > longest.length)\n      \
    \          longest = s;\n        }\n        return longest;\n    }\n}", "{\n \
    \   Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n    \
    \    if(longest.isNull || str.length > longest.get.length)\n        {\n      \
    \      longest = str;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    auto longest = strings[0];\n    foreach (string\
    \ s; strings)\n    {\n        if (s.length > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest is null || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if (longest.isNull || s.length\
    \ > longest.get.length)\n            longest = s;\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n\
    \        if(result.isNull || s.length > result.get.length)\n        {\n      \
    \      result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(string s; strings)\n    {\n        if(longest.isNull || s.length >\
    \ longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n  \
    \      if(longest.isNull || str.length > longest.get.length)\n        {\n    \
    \        longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n  \
    \      return null;\n    else\n    {\n        auto longest = strings[0];\n   \
    \     foreach (i, s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n     \
    \   if(result.isNull || s.length > result.get.length)\n        {\n           \
    \ result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) result;\n    int maxLength\
    \ = 0;\n    foreach(string s; strings)\n    {\n        if(s.length > maxLength)\n\
    \        {\n            maxLength = s.length;\n            result = s;\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest is null || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result;\n    foreach(string s; strings) \n    {\n\
    \        if(result is null || s.length > result.get.length) \n        {\n    \
    \        result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(string str; strings)\n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length)\n        {\n            longest = str;\n        }\n  \
    \  }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n   \
    \ foreach(string s; strings)\n    {\n        if(longest is null || longest.length\
    \ < s.length)\n        {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest;\n    foreach(string s; strings)\n    {\n    \
    \    if(longest.isNull || s.length > longest.get.length)\n        {\n        \
    \    longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result is null ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(string s; strings) \n    {\n        if (longest is null || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if(longest.isNull || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) result;\n    foreach(string s; strings)\n    {\n        if(!result.isNull\
    \ || s.length > result.get.length)\n        {\n            result = s;\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if(longest.isNull || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n\
    \        if(result.isNull || s.length > result.get.length)\n        {\n      \
    \      result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n\
    \        return null;\n    auto longest = strings[0];\n    foreach (i, s; strings)\n\
    \    {\n        if (s.length > longest.length)\n            longest = s;\n   \
    \ }\n    return longest;\n}\n/*\n    Return the sum of all the numbers in the\
    \ list. Return None in case the input list is empty.\n    >>> sum_of_numbers([])",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest is null || longest.length < s.length)\n        {\n       \
    \     longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(string s; strings)\n    {\n        if (longest.isNull || s.length >\
    \ longest.get.length)\n            longest = s;\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest is null || longest.get.length < s.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result;\n    foreach(str; strings)\n    {\n        if(result.isNull\
    \ || str.length > result.get.length)\n        {\n            result = str;\n \
    \       }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ longest.length < s.length)\n        {\n            longest = s;\n        }\n\
    \    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n \
    \   foreach(string s; strings) \n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    else\n    {\n        auto longest = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings) \n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length) \n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull ||\
    \ longest.get.length < s.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) \n    {\n\
    \        return Nullable!(string).init;\n    }\n    else \n    {\n        string\
    \ longest = strings[0];\n        foreach (string s; strings) \n        {\n   \
    \         if (s.length > longest.length) \n            {\n                longest\
    \ = s;\n            }\n        }\n        return Nullable!(string)(longest);\n\
    \    }\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest is null || s.length > longest.get.length)\n       \
    \ {\n            longest = s;\n        }\n    }\n    return longest;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || longest.get.length < s.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    auto longest = strings[0];\n    foreach (i,\
    \ s; strings)\n    {\n        if (s.length > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n  \
    \      if(longest is null || str.length > longest.get.length)\n        {\n   \
    \         longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result;\n \
    \   foreach(str; strings)\n    {\n        if(result.isNull || str.length > result.get.length)\n\
    \        {\n            result = str;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings) \n    {\n        if(result.isNull || s.length > result.get.length)\
    \ \n        {\n            result = s;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest.isNull || s.length > longest.get.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) result;\n    foreach(string s; strings)\n    {\n        if(result.isNull\
    \ || s.length > result.get.length)\n        {\n            result = s;\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings) \n    {\n        if (longest is null || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) result;\n    if (strings.length\
    \ == 0)\n        return result;\n    else\n    {\n        result = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > result.get!string.length)\n\
    \                result = s;\n        }\n        return result;\n    }\n}", "{\n\
    \    if (strings.length == 0)\n        return null;\n    else\n    {\n       \
    \ auto longest = strings[0];\n        foreach (string s; strings)\n        {\n\
    \            if (s.length > longest.length)\n                longest = s;\n  \
    \      }\n        return longest;\n    }\n}", "{\n    Nullable!(string) result;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || longest.get.length < s.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n      \
    \  auto longest = strings[0];\n        foreach (string s; strings)\n        {\n\
    \            if (s.length > longest.length)\n                longest = s;\n  \
    \      }\n        return longest;\n    }\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if (longest.isNull || s.length\
    \ > longest.get.length)\n            longest = s;\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result;\n    foreach(string s; strings) \n    {\n\
    \        if(result.isNull || s.length > result.get.length) \n        {\n     \
    \       result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n \
    \       return null;\n    string longest = strings[0];\n    foreach (string s;\
    \ strings)\n    {\n        if (s.length > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
