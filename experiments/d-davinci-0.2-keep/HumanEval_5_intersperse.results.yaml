name: HumanEval_5_intersperse
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[i * 2] = number;\n        if (i != numbers.length - 1)\n        \
    \    result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpirpiq95o.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpirpiq95o.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpirpiq95o.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x6c50a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    long i = 0;\n    foreach (n; numbers) {\n\
    \        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers[1\
    \ .. $]) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da93]\\n??:? _d_newarrayT\
    \ [0x429818]\\n??:? long[] tmpzcyc3t0d.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpzcyc3t0d.__unittest_L26_C1() [0x427fa4]\\n??:? void tmpzcyc3t0d.__modtest()\
    \ [0x4281f4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c553]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430671]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3bd]\\n??:? runModuleUnitTests [0x42c329]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428938]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288bf]\\n??:? _d_run_main [0x42882a]\\n??:? main [0x428207]\\\
    n??:? __libc_start_main [0xb7a28554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    long i = 0;\n    foreach (n; numbers) {\n\
    \        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0\
    \ .. result.length - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmpr0zx83ic.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpr0zx83ic.__unittest_L26_C1() [0x427fa0]\\n??:? void tmpr0zx83ic.__modtest()\
    \ [0x4281f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x428203]\\\
    n??:? __libc_start_main [0xcb4c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers) \n    {\n        result ~= n;\n       \
    \ if (i != numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n  \
    \  {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi84qp4_n.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpi84qp4_n.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmpi84qp4_n.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x9d445554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n    {\n        result[2\
    \ * i] = e;\n        if (i < numbers.length - 1)\n            result[2 * i + 1]\
    \ = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpui_bmlr5.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpui_bmlr5.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpui_bmlr5.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x34ae0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmp4wwo36vv.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp4wwo36vv.__unittest_L24_C1() [0x427f44]\\n??:? void tmp4wwo36vv.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x52fc5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpl8a3odi1.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428516]\\n??:? long[] tmpl8a3odi1.intersperse(long[],\
    \ long) [0x427f26]\\n??:? void tmpl8a3odi1.__unittest_L24_C1() [0x42801e]\\n??:?\
    \ void tmpl8a3odi1.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x9ede7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      result[i * 2] = number;\n        if (i + 1 < numbers.length) \n       \
    \ {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpq_1h0sjm.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpq_1h0sjm.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpq_1h0sjm.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xe29d2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(n; numbers)\n    {\n        result ~= n;\n        if(n\
    \ != numbers[$-1])\n            result ~= delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp081nmsvx.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmp081nmsvx.__unittest_L22_C1()\
    \ [0x4280f8]\\n??:? void tmp081nmsvx.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ceef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430859]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd59]\\n??:? runModuleUnitTests [0x42ccc5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42886f]\\n??:? _d_run_main [0x4287da]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0x24d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n    {\n\
    \        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn8_3_fxh.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmpn8_3_fxh.__unittest_L24_C1()\
    \ [0x42809d]\\n??:? void tmpn8_3_fxh.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xd6a22554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, n; numbers)\n    {\n        result[i\
    \ * 2] = n;\n        if (i < numbers.length - 1)\n            result[i * 2 + 1]\
    \ = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpebtth5ln.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpebtth5ln.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpebtth5ln.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x3053b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      result[2 * i] = number;\n        if (i < numbers.length - 1) \n       \
    \ {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp6s6jy51x.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp6s6jy51x.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp6s6jy51x.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xb634f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, e; numbers)\n    {\n        result ~= e;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        if (i == 0)\n         \
    \   result ~= n;\n        else\n            result ~= delimeter, n;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp92mlcmxb.d(19): Error: `n` has no effect\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92mlcmxb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpj3d8vrga.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpj3d8vrga.__unittest_L24_C1() [0x427f44]\\n??:? void tmpj3d8vrga.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x7608f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[];\n    foreach(i, number; numbers) \n    {\n        if (i != 0) \n   \
    \     {\n            result ~= delimeter;\n        }\n        result ~= number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5qmov18k.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp5qmov18k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, e; numbers) \n    {\n        if (i != 0) \n       \
    \ {\n            result ~= delimeter;\n        }\n        result ~= e;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number;\
    \ numbers[1 .. $]) \n    {\n        result[2 * i] = delimeter;\n        result[2\
    \ * i + 1] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3pnmpt8a.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp3pnmpt8a.__unittest_L26_C1()\
    \ [0x428091]\\n??:? void tmp3pnmpt8a.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x2e48d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        if (i != 0)\n         \
    \   result ~= delimeter;\n        result ~= n;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n\
    \        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmpxug9toey.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpxug9toey.__unittest_L26_C1() [0x427f7c]\\n??:? void tmpxug9toey.__modtest()\
    \ [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0x794db554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, e; numbers) \n    {\n       \
    \ result[i * 2] = e;\n        if (i < numbers.length - 1) \n        {\n      \
    \      result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpzm648ufq.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpzm648ufq.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpzm648ufq.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x59c9b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(n; numbers)\n    {\n        result ~= n;\n        if (n\
    \ != numbers[$-1])\n            result ~= delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprjk49m1b.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmprjk49m1b.__unittest_L22_C1()\
    \ [0x4280f8]\\n??:? void tmprjk49m1b.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ceef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430859]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd59]\\n??:? runModuleUnitTests [0x42ccc5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42886f]\\n??:? _d_run_main [0x4287da]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0xf7b62554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdn0vu60n.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpdn0vu60n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    long i = 0;\n    foreach (number; numbers)\
    \ {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n\
    \    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4)\n\
    \    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    long i = 0;\n    foreach (number; numbers) {\n        result[i]\
    \ = number;\n        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0\
    \ .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[] intersperse(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    long\
    \ i = 0;\n    foreach (number; numbers) {\n        result[i] = number;\n     \
    \   i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) {\n        result[i]\
    \ = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length -\
    \ 1];\n}\n/*\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3],\
    \ 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[numbers.\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjveqoeg3.d(77): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmpjveqoeg3.d(78): Error: found `{` when expecting `]`\\n/tmp/tmpjveqoeg3.d(79):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpjveqoeg3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[i * 2] = number;\n        if (i != numbers.length - 1)\n        \
    \    result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpw_sk4y8q.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpw_sk4y8q.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpw_sk4y8q.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x82b27554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return [];\n    }\n    else\n    {\n        long[] result\
    \ = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n     \
    \   foreach (i, number; numbers[1 .. $])\n        {\n            result[2 * i]\
    \ = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplots0zsw.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmplots0zsw.__unittest_L29_C1()\
    \ [0x42809d]\\n??:? void tmplots0zsw.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xc4d4d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[];\n    foreach(i, e; numbers)\n    {\n        result ~= e;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzjozqea9.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpzjozqea9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[i * 2] = number;\n        if (i != numbers.length - 1)\n        \
    \    result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpf1kfn1n5.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpf1kfn1n5.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpf1kfn1n5.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x1755a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        if (i > 0)\n          \
    \  result ~= delimeter;\n        result ~= n;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 ..\
    \ $])\n    {\n        result[i * 2] = delimeter;\n        result[i * 2 + 1] =\
    \ number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg9mpmmc7.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpg9mpmmc7.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmpg9mpmmc7.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x44835554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[(numbers.length * 2) - 1];\n    long i = 0;\n    foreach (n; numbers) {\n\
    \        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n\
    }\n/*\n    >>> group([1, 1, 1, 2, 3, 1, 1])\n    [[1, 1, 1], [2], [3], [1, 1]]\n\
    */\nlong[][] group(long[] numbers) \n{\n    long[][] result = new long[][]();\n\
    \    long[] current = new long[]();\n    foreach (n; numbers) {\n        if (current.length\
    \ == 0 || current[0] == n) {\n            current ~= n;\n        } else {\n  \
    \          result ~= current;\n            current = new long[]();\n         \
    \   current ~= n;\n        }\n    }\n    if (current.length != 0) {\n        result\
    \ ~= current;\n    }\n    return result;\n}\n/*\n    >>> encode([1, 1, 1, 2, 3,\
    \ 1, 1])\n    [[3, 1], [1, 2], [1, 3], [2, 1]]\n*/\nlong[][] encode(long[] numbers)\
    \ \n{\n    long[][] result = new long[][]();\n    foreach (g; group(numbers))\
    \ {\n        result ~= new long[](g.length, g[0]);\n    }\n    return result;\n\
    }\n/*\n    >>> decode([[3, 1], [1, 2], [1, 3], [2, 1]])\n    [1, 1, 1, 2, 3, 1,\
    \ 1]\n*/\nlong[] decode(long[][] numbers) \n{\n    long[] result = new long[]();\n\
    \    foreach (g; numbers) {\n        result ~= intersperse(new long[](g[0], g[1]),\
    \ g[1]);\n    }\n    return result;\n}\n/*\n    >>> encodeMod\nunittest\n{\n \
    \   alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n \
    \   assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy41uvsg0.d(72): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy41uvsg0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (num; numbers) {\n\
    \        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num;\
    \ numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return\
    \ result[0 .. $ - 1];\n}\n/*\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[] intersperse2(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int\
    \ i = 0;\n    foreach (num; numbers) {\n        result[i] = num;\n        i +=\
    \ 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result[0 .. $ - 1];\n}\n/*\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[]\
    \ intersperse3(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    int i = 0;\n    foreach (num; numbers) {\n        result[i] =\
    \ num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n   \
    \     result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 .. $\
    \ - 1];\n}\n/*\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2,\
    \ 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[] intersperse4(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[numbers.length * 2\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuk2lkl3_.d(77): Error: found `unittest` when expecting `]`\\\
    n/tmp/tmpuk2lkl3_.d(78): Error: semicolon expected, not `{`\\n/tmp/tmpuk2lkl3_.d(85):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk2lkl3_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[numbers.length * 2 -\
    \ 1];\n    foreach (i, e; numbers)\n    {\n        result[i * 2] = e;\n      \
    \  if (i < numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers) \n    {\n        result ~= n;\n       \
    \ if (i < numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      if (i != 0) \n        {\n            result[2 * i - 1] = delimeter;\n \
    \       }\n        result[2 * i] = number;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpyl5gz1yy.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpyl5gz1yy.__unittest_L24_C1() [0x427f40]\\n??:? void tmpyl5gz1yy.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0xa058d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, e; numbers) \n    {\n       \
    \ result[i * 2] = e;\n        if (i != numbers.length - 1) \n        {\n     \
    \       result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\n/*\n    >>> intercalate([], [1, 2, 3])\n    [1, 2, 3]\n    >>> intercalate([1,\
    \ 2, 3], [])\n    []\n    >>> intercalate([1, 2, 3], [4, 5, 6])\n    [1, 2, 3,\
    \ 4, 5, 6]\n    >>> intercalate([1, 2, 3], [4, 5, 6, 7])\n    [1, 2, 3, 4, 5,\
    \ 6, 7]\n    >>> intercalate([1, 2, 3], [4, 5, 6, 7, 8])\n    [1, 2, 3, 4, 5,\
    \ 6, 7, 8]\n    >>> intercalate([1, 2, 3], [4, 5, 6, 7, 8, 9])\n    [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]\n    >>> intercalate([1, 2, 3], [4, 5, 6, 7, 8, 9, 10])\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> intercalate([1, 2, 3], [4, 5, 6,\
    \ 7, 8, 9, 10, 11])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    >>> intercalate([1,\
    \ 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12]\n    >>> intercalate([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n\
    \    [1, 2, 3, 4, 5, 6, 7\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4fcyqw42.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fcyqw42.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb779d_2g.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpb779d_2g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[];\n    foreach(i, number; numbers)\n    {\n        result ~= number;\n\
    \        if (i != numbers.length - 1)\n            result ~= delimeter;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7lkxvf34.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp7lkxvf34.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $]) {\n  \
    \      result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8_6ag09u.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmp8_6ag09u.__unittest_L23_C1()\
    \ [0x42809d]\\n??:? void tmp8_6ag09u.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x4437d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    long i = 0;\n    foreach (number; numbers)\
    \ \n    {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n \
    \   foreach (number; numbers) \n    {\n        result[i] = delimeter;\n      \
    \  i += 2;\n    }\n    return result[0 .. $ - 1];\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmpwxdsd6tp.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpwxdsd6tp.__unittest_L28_C1() [0x427fa0]\\n??:? void tmpwxdsd6tp.__modtest()\
    \ [0x4281f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x428203]\\\
    n??:? __libc_start_main [0xe021d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers) \n    {\n        if (i == 0) \n  \
    \      {\n            result ~= number;\n        } \n        else \n        {\n\
    \            result ~= delimeter;\n            result ~= number;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    long[] result = new long[(numbers.length\
    \ - 1) * 2 + 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1\
    \ .. $]) \n    {\n        result[i * 2] = delimeter;\n        result[i * 2 + 1]\
    \ = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph0msgncc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42845d]\\n??:? void tmph0msgncc.__unittest_L26_C1()\
    \ [0x428099]\\n??:? void tmph0msgncc.__modtest() [0x4281e0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c53b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430659]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b08]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3a5]\\n??:? runModuleUnitTests [0x42c311]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428920]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288a7]\\n??:? _d_run_main [0x428812]\\n??:? main [0x4281f3]\\\
    n??:? __libc_start_main [0xdcc73554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      result[i * 2] = number;\n        if (i != numbers.length - 1) \n      \
    \  {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\n/*\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[] intersperse(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach\
    \ (i, number; numbers) \n    {\n        result[i * 2] = number;\n        if (i\
    \ != numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n\
    \        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4)\n   \
    \ []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] = number;\n\
    \        if (i != numbers.length - 1) \n        {\n            result[i * 2 +\
    \ 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[]\
    \ intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    foreach (i, number; numbers) \n    {\n        result[i * 2] =\
    \ number;\n        if (i != numbers.length - 1) \n        {\nunittest\n{\n   \
    \ alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n   \
    \ assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n \
    \   assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8zw07463.d(76): Error: found `unittest` instead of statement\\\
    n/tmp/tmp8zw07463.d(84): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp8zw07463.d(84): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8zw07463.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpyp86su_a.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpyp86su_a.__unittest_L24_C1() [0x427f44]\\n??:? void tmpyp86su_a.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0xbdcb1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = [];\n\
    \    foreach(i, number; numbers)\n    {\n        if (i != 0)\n            result\
    \ ~= delimeter;\n        result ~= number;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      result[i * 2] = number;\n        if (i != numbers.length - 1) \n      \
    \  {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp1dnjocyi.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp1dnjocyi.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp1dnjocyi.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x1044a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i != 0)\n    \
    \    {\n            result ~= delimeter;\n        }\n        result ~= number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers) \n    {\n        result ~= n;\n       \
    \ if (i < numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n    {\n\
    \        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjkdv8wsg.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmpjkdv8wsg.__unittest_L24_C1()\
    \ [0x42809d]\\n??:? void tmpjkdv8wsg.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xd7884554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, n; numbers) \n    {\n       \
    \ result[i * 2] = n;\n        if (i != numbers.length - 1) \n        {\n     \
    \       result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpdaevyg5c.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpdaevyg5c.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpdaevyg5c.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x47475554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i > 0)\n     \
    \       result ~= delimeter;\n        result ~= number;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[] intersperse2(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    long\
    \ i = 0;\n    foreach (n; numbers) \n    {\n        result[i] = n;\n        i++;\n\
    \        if (i < result.length) \n        {\n            result[i] = delimeter;\n\
    \            i++;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[]\
    \ intersperse3(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    long i = 0;\n    foreach (n; numbers) \n    {\n        result[i]\
    \ = n;\n        i++;\n        if (i < result.length) \n        {\n           \
    \ result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n\
    \    [1, 4, 2, 4, 3]\n*/\nlong[] intersperse4(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    long i = 0;\n\
    \    foreach (n; numbers) \n    {\n\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqklrdz75.d(81): Error: found `unittest` instead of statement\\\
    n/tmp/tmpqklrdz75.d(89): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqklrdz75.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i != 0)\n    \
    \    {\n            result ~= delimeter;\n        }\n        result ~= number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i > 0)\n     \
    \       result ~= delimeter;\n        result ~= number;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[i * 2] = number;\n        if (i != numbers.length - 1)\n        \
    \    result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpysn3mjno.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpysn3mjno.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpysn3mjno.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x5bceb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n  \
    \  {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp78c5jhhx.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp78c5jhhx.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmp78c5jhhx.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0xf9bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers) \n    {\n        if (i > 0) \n        {\n\
    \            result ~= delimeter;\n        }\n        result ~= n;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[(numbers.length * 2) - 1];\n    foreach (i, number; numbers) \n    {\n\
    \        result[i * 2] = number;\n        if (i != numbers.length - 1) \n    \
    \    {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp_p1atbzq.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp_p1atbzq.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp_p1atbzq.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x44f0e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers) \n    {\n        result ~= n;\n       \
    \ if (i < numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps91443el.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmps91443el.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmps91443el.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x92237554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    if (numbers.length == 1)\n        return\
    \ numbers;\n    long[] result = new long[numbers.length * 2 - 1];\n    result[0]\
    \ = numbers[0];\n    for (long i = 1; i < numbers.length; i++)\n    {\n      \
    \  result[2 * i - 1] = delimeter;\n        result[2 * i] = numbers[i];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    long i = 0;\n    foreach (n; numbers) {\n\
    \        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result[0\
    \ .. result.length - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmp43_4dgvz.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmp43_4dgvz.__unittest_L26_C1() [0x427fa0]\\n??:? void tmp43_4dgvz.__modtest()\
    \ [0x4281f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x428203]\\\
    n??:? __libc_start_main [0x2d79e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      result[2 * i] = number;\n        if (i != numbers.length - 1) \n      \
    \  {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpgxay4_wq.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpgxay4_wq.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpgxay4_wq.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xe0c24554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpe__lq9vm.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpe__lq9vm.__unittest_L24_C1() [0x427f44]\\n??:? void tmpe__lq9vm.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0xbb99a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers) \n    {\n        if (i > 0) \n        {\n\
    \            result ~= delimeter;\n        }\n        result ~= n;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[i * 2] = number;\n        if (i != numbers.length - 1)\n        \
    \    result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp9euhvr5o.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp9euhvr5o.__unittest_L22_C1() [0x427f3c]\\n??:? void tmp9euhvr5o.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xc913b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[(numbers.length * 2) - 1];\n    long i = 0;\n    foreach (n; numbers) {\n\
    \        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmpb4aqvzhc.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpb4aqvzhc.__unittest_L26_C1() [0x427f80]\\n??:? void tmpb4aqvzhc.__modtest()\
    \ [0x4281d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281e3]\\\
    n??:? __libc_start_main [0xea7fa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[i * 2] = number;\n        if (i < numbers.length - 1)\n         \
    \   result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp8smcytoi.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp8smcytoi.__unittest_L22_C1() [0x427f3c]\\n??:? void tmp8smcytoi.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xe2676554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpstw2i3gt.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpstw2i3gt.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmpstw2i3gt.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0xaeb86554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      result[2 * i] = number;\n        if (i != numbers.length - 1) \n      \
    \  {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp4q865k2o.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp4q865k2o.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp4q865k2o.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x18a3e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n    {\n        result[2\
    \ * i] = e;\n        if (i < numbers.length - 1)\n            result[2 * i + 1]\
    \ = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpd7_f_f4q.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpd7_f_f4q.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpd7_f_f4q.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xadca8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = [];\n\
    \    foreach(n; numbers) \n    {\n        result ~= n;\n        if (n != numbers[$\
    \ - 1]) \n        {\n            result ~= delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq332wzbp.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42842d]\\n??:? void tmpq332wzbp.__unittest_L24_C1()\
    \ [0x4280fc]\\n??:? void tmpq332wzbp.__modtest() [0x4281ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430781]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c30]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43070d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd05]\\n??:? runModuleUnitTests [0x42cc71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428877]\\n??:? _d_run_main [0x4287e2]\\n??:? main [0x4281bf]\\\
    n??:? __libc_start_main [0x5f5e6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[2 * i] = number;\n        if (i < numbers.length - 1)\n         \
    \   result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpq8n0lxs1.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpq8n0lxs1.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpq8n0lxs1.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x3d840554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers) \n    {\n        if (i != 0) \n  \
    \      {\n            result ~= delimeter;\n        }\n        result ~= number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpbg8jrss0.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpbg8jrss0.__unittest_L24_C1() [0x427f44]\\n??:? void tmpbg8jrss0.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x313e7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(n; numbers)\n    {\n        result ~= n;\n        if (n\
    \ != numbers[$-1])\n            result ~= delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph3zk31uu.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmph3zk31uu.__unittest_L22_C1()\
    \ [0x4280f8]\\n??:? void tmph3zk31uu.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ceef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430859]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd59]\\n??:? runModuleUnitTests [0x42ccc5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42886f]\\n??:? _d_run_main [0x4287da]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0x302d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, x; numbers)\n    {\n        if(i == 0)\n        {\n\
    \            result ~= x;\n        }\n        else\n        {\n            result\
    \ ~= delimeter;\n            result ~= x;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[i * 2] = number;\n        if (i != numbers.length - 1)\n        \
    \    result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpq9ko0fj6.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpq9ko0fj6.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpq9ko0fj6.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x140d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n    {\n\
    \        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgmx5vggg.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmpgmx5vggg.__unittest_L24_C1()\
    \ [0x42809d]\\n??:? void tmpgmx5vggg.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x5dd8c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpxnewy2kl.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpxnewy2kl.__unittest_L24_C1() [0x427f44]\\n??:? void tmpxnewy2kl.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x3741c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[2 * i] = number;\n        if (i < numbers.length - 1)\n         \
    \   result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpmojtwl2f.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpmojtwl2f.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpmojtwl2f.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x5f828554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    else\n    {\n        long[] result = new\
    \ long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        for\
    \ (int i = 1; i < numbers.length; i++)\n        {\n            result[2 * i -\
    \ 1] = delimeter;\n            result[2 * i] = numbers[i];\n        }\n      \
    \  return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n\
    \        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmpccwqr2b5.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpccwqr2b5.__unittest_L26_C1() [0x427f7c]\\n??:? void tmpccwqr2b5.__modtest()\
    \ [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0x5c0df554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      result[i * 2] = number;\n        if (i != numbers.length - 1) \n      \
    \  {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp5p1rs9vx.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp5p1rs9vx.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp5p1rs9vx.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xc36e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2\
    \ * i] = n;\n        if (i < numbers.length - 1)\n            result[2 * i + 1]\
    \ = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpwsfhiduf.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpwsfhiduf.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpwsfhiduf.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x81abd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpywj6o_xu.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpywj6o_xu.__unittest_L24_C1() [0x427f44]\\n??:? void tmpywj6o_xu.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x564e6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[(numbers.length * 2) - 1];\n    long i = 0;\n    foreach (n; numbers) \n\
    \    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (n; numbers) \n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmpbt8pcq49.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpbt8pcq49.__unittest_L28_C1() [0x427f80]\\n??:? void tmpbt8pcq49.__modtest()\
    \ [0x4281d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281e3]\\\
    n??:? __libc_start_main [0xde31e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[]\
    \ result = new long[numbers.length * 2 - 1];\n        foreach (i, e; numbers)\n\
    \        {\n            result[i * 2] = e;\n            if (i != numbers.length\
    \ - 1)\n            {\n                result[i * 2 + 1] = delimeter;\n      \
    \      }\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[2 * i] = number;\n        if (i < numbers.length - 1)\n         \
    \   result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp2w_n0e2p.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp2w_n0e2p.__unittest_L22_C1() [0x427f3c]\\n??:? void tmp2w_n0e2p.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xd45a2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i == 0)\n    \
    \    {\n            result ~= number;\n        }\n        else\n        {\n  \
    \          result ~= delimeter;\n            result ~= number;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[i * 2] = number;\n        if (i != numbers.length - 1)\n        \
    \    result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpdh_80p6_.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpdh_80p6_.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpdh_80p6_.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x14d1a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[i * 2] = number;\n        if (i != numbers.length - 1)\n        \
    \    result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpk37bzeb3.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpk37bzeb3.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpk37bzeb3.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x9e3ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz56rq1uu.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpz56rq1uu.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmpz56rq1uu.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x6dd32554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpr3xu59qv.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpr3xu59qv.__unittest_L24_C1() [0x427f44]\\n??:? void tmpr3xu59qv.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x2ad4e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i > 0)\n     \
    \       result ~= delimeter;\n        result ~= number;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i == 0)\n    \
    \    {\n            result ~= number;\n        }\n        else\n        {\n  \
    \          result ~= delimeter;\n            result ~= number;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmp0r9c7p6l.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp0r9c7p6l.__unittest_L24_C1() [0x427f44]\\n??:? void tmp0r9c7p6l.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x4ba0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(n; numbers)\n    {\n        result ~= n;\n        if (n\
    \ != numbers[$-1])\n            result ~= delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpllsfwn8b.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmpllsfwn8b.__unittest_L22_C1()\
    \ [0x4280f8]\\n??:? void tmpllsfwn8b.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ceef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430859]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd59]\\n??:? runModuleUnitTests [0x42ccc5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42886f]\\n??:? _d_run_main [0x4287da]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0xe1848554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        result ~= number;\n\
    \        if (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[(numbers.length * 2) - 1];\n    long i = 0;\n    foreach (num; numbers)\
    \ \n    {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (num; numbers) \n    {\n        result[i] = delimeter;\n        i += 2;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmp6o_zw39f.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmp6o_zw39f.__unittest_L28_C1() [0x427f80]\\n??:? void tmp6o_zw39f.__modtest()\
    \ [0x4281d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281e3]\\\
    n??:? __libc_start_main [0xa0745554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i > 0)\n     \
    \       result ~= delimeter;\n        result ~= number;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i != numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n    {\n        result[2\
    \ * i] = n;\n        if (i < numbers.length - 1)\n            result[2 * i + 1]\
    \ = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpjoaeccza.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpjoaeccza.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpjoaeccza.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x6711a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    long i = 0;\n    foreach (number; numbers)\
    \ \n    {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n \
    \   foreach (number; numbers) \n    {\n        result[i] = delimeter;\n      \
    \  i += 2;\n    }\n    return result[0 .. $ - 1];\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmppuaqwud4.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmppuaqwud4.__unittest_L28_C1() [0x427fa0]\\n??:? void tmppuaqwud4.__modtest()\
    \ [0x4281f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x428203]\\\
    n??:? __libc_start_main [0x131d9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(n; numbers)\n    {\n        result ~= n;\n        if(n\
    \ != numbers[$-1])\n            result ~= delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3y48dl9u.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmp3y48dl9u.__unittest_L22_C1()\
    \ [0x4280f8]\\n??:? void tmp3y48dl9u.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ceef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430859]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd59]\\n??:? runModuleUnitTests [0x42ccc5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42886f]\\n??:? _d_run_main [0x4287da]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0x9ce3b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers) \n    {\n        result ~= number;\n\
    \        if (i < numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i > 0)\n     \
    \       result ~= delimeter;\n        result ~= number;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    for (long i = 0; i < numbers.length; i++) \n    {\n        result\
    \ ~= numbers[i];\n        if (i != numbers.length - 1) \n        {\n         \
    \   result ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpfy69_heo.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428516]\\n??:? long[] tmpfy69_heo.intersperse(long[],\
    \ long) [0x427f26]\\n??:? void tmpfy69_heo.__unittest_L24_C1() [0x42801e]\\n??:?\
    \ void tmpfy69_heo.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xe7bd6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmppzcorit4.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmppzcorit4.__unittest_L24_C1() [0x427f44]\\n??:? void tmppzcorit4.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0xd9b5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[i * 2] = number;\n        if (i != numbers.length - 1)\n        \
    \    result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpltmv1r6j.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpltmv1r6j.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpltmv1r6j.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xf453b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, e; numbers) \n    {\n        if (i != 0) \n       \
    \ {\n            result ~= delimeter;\n        }\n        result ~= e;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers) \n    {\n        result ~= number;\n\
    \        if (i < numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, n; numbers) \n    {\n       \
    \ if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n      \
    \  }\n        result[i * 2] = n;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpplecsnx7.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpplecsnx7.__unittest_L24_C1() [0x427f40]\\n??:? void tmpplecsnx7.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0x5d3e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 ..\
    \ $])\n    {\n        result[i * 2] = delimeter;\n        result[i * 2 + 1] =\
    \ number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwm8hs8zz.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpwm8hs8zz.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmpwm8hs8zz.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x61291554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyh6uiyj2.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmpyh6uiyj2.__unittest_L24_C1()\
    \ [0x42809d]\\n??:? void tmpyh6uiyj2.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x37da0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $]) {\n  \
    \      result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2mt8sc1p.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmp2mt8sc1p.__unittest_L23_C1()\
    \ [0x42809d]\\n??:? void tmp2mt8sc1p.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x77bb7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, n; numbers)\n    {\n        result[i\
    \ * 2] = n;\n        if (i != numbers.length - 1)\n            result[i * 2 +\
    \ 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpyulap8ju.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpyulap8ju.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpyulap8ju.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xf814d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers) \n    {\n        if (i == 0) \n       \
    \ {\n            result ~= n;\n        }\n        else \n        {\n         \
    \   result ~= delimeter;\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n    {\n\
    \        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa_4gy3qc.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmpa_4gy3qc.__unittest_L24_C1()\
    \ [0x42809d]\\n??:? void tmpa_4gy3qc.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x6074c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[] intersperse2(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    long\
    \ i = 0;\n    foreach (number; numbers) \n    {\n        result[i * 2] = number;\n\
    \        if (i < numbers.length - 1) \n        {\n            result[i * 2 + 1]\
    \ = delimeter;\n        }\n        i++;\n    }\n    return result;\n}\n/*\n  \
    \  >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1,\
    \ 4, 2, 4, 3]\n*/\nlong[] intersperse3(long[] numbers, long delimeter) \n{\n \
    \   long[] result = new long[numbers.length * 2 - 1];\n    long i = 0;\n    foreach\
    \ (number; numbers) \n    {\n        result[i * 2] = number;\n        if (i <\
    \ numbers.length - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n\
    \        }\n        i++;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[]\
    \ intersperse4(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    long i = 0;\n    foreach (number\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbhnf9ugu.d(77): Error: no identifier for declarator `number`\\\
    n/tmp/tmpbhnf9ugu.d(77): Error: found `unittest` when expecting `;`\\n/tmp/tmpbhnf9ugu.d(85):\
    \ Error: found `void` when expecting `)`\\n/tmp/tmpbhnf9ugu.d(85): Error: found\
    \ `{` when expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpbhnf9ugu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpuflck6ge.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpuflck6ge.__unittest_L24_C1() [0x427f44]\\n??:? void tmpuflck6ge.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x29959554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    auto result = new\
    \ long[];\n    foreach (i, number; numbers) \n    {\n        if (i != 0) \n  \
    \      {\n            result ~= delimeter;\n        }\n        result ~= number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc00yi3zd.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpc00yi3zd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n  \
    \  {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq__te074.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpq__te074.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmpq__te074.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0xb1077554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, n; numbers) \n    {\n       \
    \ result[2 * i] = n;\n        if (i != numbers.length - 1) \n        {\n     \
    \       result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmptt5k14hx.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmptt5k14hx.__unittest_L24_C1() [0x427f3c]\\n??:? void tmptt5k14hx.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x64c0b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpenw6y5ud.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpenw6y5ud.__unittest_L24_C1() [0x427f44]\\n??:? void tmpenw6y5ud.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0xf39a8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers) \n    {\n        result ~= number;\n\
    \        if (i < numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[(numbers.length * 2) - 1];\n    long i = 0;\n    foreach (num; numbers)\
    \ {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmpg8ke4zke.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpg8ke4zke.__unittest_L26_C1() [0x427f80]\\n??:? void tmpg8ke4zke.__modtest()\
    \ [0x4281d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281e3]\\\
    n??:? __libc_start_main [0x90a89554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i != numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkqgsmgg4.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpkqgsmgg4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      result[i * 2] = number;\n        if (i != numbers.length - 1)\n       \
    \     result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpleof61c3.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpleof61c3.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpleof61c3.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x3c20a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, e; numbers) \n    {\n       \
    \ result[i * 2] = e;\n        if (i != numbers.length - 1) \n        {\n     \
    \       result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpnm0q3367.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpnm0q3367.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpnm0q3367.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x75a76554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n \
    \       }\n        result[i * 2] = number;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpzxz674in.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpzxz674in.__unittest_L24_C1() [0x427f40]\\n??:? void tmpzxz674in.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0x418ab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpqvg60h4r.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpqvg60h4r.__unittest_L24_C1() [0x427f44]\\n??:? void tmpqvg60h4r.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x15c2a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      result[i * 2] = number;\n        if (i != numbers.length - 1) \n      \
    \  {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp_l20vetz.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp_l20vetz.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp_l20vetz.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xfb6b3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[numbers.length * 2 -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[i * 2] = delimeter;\n        result[i * 2 + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb83dhp5b.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmpb83dhp5b.__unittest_L24_C1()\
    \ [0x42809d]\\n??:? void tmpb83dhp5b.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xcaf05554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        result ~= number;\n\
    \        if (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i != 0)\n    \
    \    {\n            result ~= delimeter;\n        }\n        result ~= number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        result ~= number;\n\
    \        if (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      result[2 * i] = number;\n        if (i < numbers.length - 1) \n       \
    \ {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp5kmxkuqn.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp5kmxkuqn.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp5kmxkuqn.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x32fc2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = [];\n\
    \    foreach(n; numbers)\n    {\n        result ~= n;\n        if (n != numbers[$-1])\n\
    \            result ~= delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[]\
    \ intersperse(long[] numbers, long delimeter) \n{\n    long[] result = [];\n \
    \   foreach(n; numbers)\n    {\n        result ~= n;\n        if (n != numbers[$-1])\n\
    \            result ~= delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[]\
    \ intersperse(long[] numbers, long delimeter) \n{\n    long[] result = [];\n \
    \   foreach(n; numbers)\n    {\n        result ~= n;\n        if (n != numbers[$-1])\n\
    \            result ~= delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[]\
    \ intersperse(long[] numbers, long delimeter) \n{\n    long[] result = [];\n \
    \   foreach(n; numbers)\n    {\n        result ~= n;\n        if (n != numbers[$-1])\n\
    \            result ~= delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nlong[]\
    \ intersperse(long[] numbers, long delimeter) \n{\n    long[] result = [];\n \
    \   foreach(n; numbers)\n    {\n        result ~= n;\n        if (n != numbers[\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpydtlfcrd.d(86): Error: expression expected, not `unittest`\\\
    n/tmp/tmpydtlfcrd.d(87): Error: found `{` when expecting `,`\\n/tmp/tmpydtlfcrd.d(88):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpydtlfcrd.d(88): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpydtlfcrd.d(88): Error: expression expected,\
    \ not `=`\\n/tmp/tmpydtlfcrd.d(88): Error: found `intersperse` when expecting\
    \ `,`\\n/tmp/tmpydtlfcrd.d(88): Error: expression expected, not `;`\\n/tmp/tmpydtlfcrd.d(90):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpydtlfcrd.d(90): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpydtlfcrd.d(91): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpydtlfcrd.d(92): Error: found `;` when expecting `,`\\n/tmp/tmpydtlfcrd.d(93):\
    \ Error: expression expected, not `}`\\n/tmp/tmpydtlfcrd.d(94): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmpydtlfcrd.d(94): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmpydtlfcrd.d(94): Error: expression expected, not `}`\\n/tmp/tmpydtlfcrd.d(94):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmpydtlfcrd.d(94): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmpydtlfcrd.d(94): Error: found\
    \ `End of File` when expecting `)`\\n/tmp/tmpydtlfcrd.d(94): Error: found `End\
    \ of File` instead of statement\\n/tmp/tmpydtlfcrd.d(94): Error: found `End of\
    \ File` when expecting `}` following compound statement\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpydtlfcrd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n    {\n        result[2\
    \ * i] = e;\n        if (i < numbers.length - 1)\n            result[2 * i + 1]\
    \ = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmphr4jtr42.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmphr4jtr42.__unittest_L22_C1() [0x427f3c]\\n??:? void tmphr4jtr42.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x44b96554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n\
    \        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmpk74drfaz.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpk74drfaz.__unittest_L26_C1() [0x427f7c]\\n??:? void tmpk74drfaz.__modtest()\
    \ [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0x61d69554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(num; numbers)\n    {\n        result ~= num;\n       \
    \ if(num != numbers[$-1])\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd6stnzqa.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmpd6stnzqa.__unittest_L22_C1()\
    \ [0x4280f8]\\n??:? void tmpd6stnzqa.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ceef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430859]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd59]\\n??:? runModuleUnitTests [0x42ccc5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42886f]\\n??:? _d_run_main [0x4287da]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0xe69a1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    long i = 0;\n    foreach (number; numbers)\
    \ {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n\
    \    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmpj93dxp61.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpj93dxp61.__unittest_L26_C1() [0x427fa0]\\n??:? void tmpj93dxp61.__modtest()\
    \ [0x4281f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x428203]\\\
    n??:? __libc_start_main [0xcf3a7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4,\
    \ 2, 4, 3]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4,\
    \ 2, 4, 3]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4,\
    \ 2, 4, 3]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeyqu2_yu.d(71): Error: found `unittest` when expecting `,`\\\
    n/tmp/tmpeyqu2_yu.d(79): Error: found `void` when expecting `,`\\n/tmp/tmpeyqu2_yu.d(79):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpeyqu2_yu.d(79): Error: expression\
    \ expected, not `}`\\n/tmp/tmpeyqu2_yu.d(79): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmpeyqu2_yu.d(79): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmpeyqu2_yu.d(79): Error: found `End of File` when expecting `;`\
    \ following statement\\n/tmp/tmpeyqu2_yu.d(79): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpeyqu2_yu.d(79): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpeyqu2_yu.d(79):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeyqu2_yu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i != 0)\n    \
    \    {\n            result ~= delimeter;\n        }\n        result ~= number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n  \
    \  {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppruu3eup.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmppruu3eup.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmppruu3eup.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x43668554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, num; numbers)\n    {\n        result ~= num;\n    \
    \    if (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers) \n    {\n        result ~= number;\n\
    \        if (i < numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    else\n    {\n        long[] result = new long[2\
    \ * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i,\
    \ number; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n\
    \            result[2 * i + 1] = number;\n        }\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmxy_43ro.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmpmxy_43ro.__unittest_L27_C1()\
    \ [0x42809d]\\n??:? void tmpmxy_43ro.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x96476554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    auto result = new\
    \ long[];\n    foreach (i, n; numbers) \n    {\n        result ~= n;\n       \
    \ if (i != numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwsdutt6c.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwsdutt6c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(n; numbers)\n    {\n        result ~= n;\n        if(n\
    \ != numbers[$-1])\n            result ~= delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5axen5e1.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmp5axen5e1.__unittest_L22_C1()\
    \ [0x4280f8]\\n??:? void tmp5axen5e1.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ceef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430859]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd59]\\n??:? runModuleUnitTests [0x42ccc5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42886f]\\n??:? _d_run_main [0x4287da]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0x1c1e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $]) {\n\
    \        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuw8jg7qa.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpuw8jg7qa.__unittest_L23_C1()\
    \ [0x428091]\\n??:? void tmpuw8jg7qa.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x37c67554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, n; numbers) \n    {\n       \
    \ result[2 * i] = n;\n        if (i != numbers.length - 1) \n        {\n     \
    \       result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmphl16tdb4.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmphl16tdb4.__unittest_L24_C1() [0x427f3c]\\n??:? void tmphl16tdb4.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x88671554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n\
    \        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers)\
    \ {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmp8bclmn2q.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmp8bclmn2q.__unittest_L26_C1() [0x427f7c]\\n??:? void tmp8bclmn2q.__modtest()\
    \ [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0xbd9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    long i = 0;\n    foreach (n; numbers) \n\
    \    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (n; numbers) \n    {\n        result[i] = delimeter;\n        i += 2;\n    }\n\
    \    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmphvltwqlf.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmphvltwqlf.__unittest_L28_C1() [0x427fa0]\\n??:? void tmphvltwqlf.__modtest()\
    \ [0x4281f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x428203]\\\
    n??:? __libc_start_main [0x33837554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[];\n    foreach(i, n; numbers)\n    {\n        if (i > 0)\n           \
    \ result ~= delimeter;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppv_v8u1f.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmppv_v8u1f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmp07ptho6y.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp07ptho6y.__unittest_L24_C1() [0x427f44]\\n??:? void tmp07ptho6y.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x70fd8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, e; numbers) \n    {\n        result ~= e;\n       \
    \ if (i != numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[];\n    foreach(i, number; numbers)\n    {\n        result ~= number;\n\
    \        if (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4haanoud.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4haanoud.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = [];\n\
    \    foreach(i, number; numbers) \n    {\n        if (i > 0) \n        {\n   \
    \         result ~= delimeter;\n        }\n        result ~= number;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[];\n    foreach(n; numbers)\n    {\n        result ~= n;\n        if (n\
    \ != numbers[$-1])\n            result ~= delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp22rym3ly.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp22rym3ly.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmp8objlgbi.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp8objlgbi.__unittest_L24_C1() [0x427f44]\\n??:? void tmp8objlgbi.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x6fe4c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    long i = 0;\n    foreach (number; numbers)\
    \ {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n\
    \    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmpfu7577qz.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpfu7577qz.__unittest_L26_C1() [0x427fa0]\\n??:? void tmpfu7577qz.__modtest()\
    \ [0x4281f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x428203]\\\
    n??:? __libc_start_main [0xcbb6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        foreach (i, number; numbers[1 .. $])\n        {\n            result[2\
    \ * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n    \
    \    return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsnckoir1.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpsnckoir1.__unittest_L29_C1()\
    \ [0x428091]\\n??:? void tmpsnckoir1.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x4b1bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[i * 2] = number;\n        if (i < numbers.length - 1)\n         \
    \   result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmppuppf5rd.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmppuppf5rd.__unittest_L22_C1() [0x427f3c]\\n??:? void tmppuppf5rd.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xc568b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers) \n    {\n        if (i != 0) \n       \
    \ {\n            result ~= delimeter;\n        }\n        result ~= n;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, e; numbers[1 .. $]) {\n\
    \        result[2 * i] = delimeter;\n        result[2 * i + 1] = e;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt5j0ss7i.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpt5j0ss7i.__unittest_L23_C1()\
    \ [0x428091]\\n??:? void tmpt5j0ss7i.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0xca2ef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers) \n    {\n        result ~= number;\n\
    \        if (i < numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(n; numbers) \n    {\n        result ~= n;\n        if\
    \ (n != numbers[$ - 1]) \n        {\n            result ~= delimeter;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgzozwtjd.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmpgzozwtjd.__unittest_L24_C1()\
    \ [0x4280f8]\\n??:? void tmpgzozwtjd.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ceef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430859]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd59]\\n??:? runModuleUnitTests [0x42ccc5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42886f]\\n??:? _d_run_main [0x4287da]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0xc1dc6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      result[i * 2] = number;\n        if (i != numbers.length - 1) \n      \
    \  {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp8ibufc78.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp8ibufc78.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp8ibufc78.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x6d2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, e; numbers) \n    {\n       \
    \ result[2 * i] = e;\n        if (i < numbers.length - 1) \n        {\n      \
    \      result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\n/*\n    >>> isPrime(1)\n    false\n    >>> isPrime(2)\n    true\n    >>> isPrime(3)\n\
    \    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(5)\n    true\n    >>>\
    \ isPrime(6)\n    false\n    >>> isPrime(7)\n    true\n    >>> isPrime(8)\n  \
    \  false\n    >>> isPrime(9)\n    false\n    >>> isPrime(10)\n    false\n    >>>\
    \ isPrime(11)\n    true\n    >>> isPrime(12)\n    false\n    >>> isPrime(13)\n\
    \    true\n    >>> isPrime(14)\n    false\n    >>> isPrime(15)\n    false\n  \
    \  >>> isPrime(16)\n    false\n    >>> isPrime(17)\n    true\n    >>> isPrime(18)\n\
    \    false\n    >>> isPrime(19)\n    true\n    >>> isPrime(20)\n    false\n  \
    \  >>> isPrime(21)\n    false\n    >>> isPrime(22)\n    false\n    >>> isPrime(23)\n\
    \    true\n    >>> isPrime(24)\n    false\n    >>> isPrime(25)\n    false\n  \
    \  >>> isPrime(26)\n    false\n    >>> isPrime(27)\n    false\n    >>> isPrime(28)\n\
    \    false\n    >>> isPrime(29)\n    true\n    >>> isPrime(30)\n    false\n  \
    \  >>> isPrime(31)\n    true\n    >>> isPrime(32)\n    false\n    >>> isPrime(33)\n\
    \    false\n    >>> isPrime(34)\n    false\n    >>> isPrime(35)\n    false\n \
    \   >>> isPrime(36)\n    false\n    >>> isPrime(37)\n    true\n    >>> isPrime(38)\n\
    \    false\n    >>> is\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvb_9whs4.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvb_9whs4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, n; numbers)\n    {\n        result[i\
    \ * 2] = n;\n        if (i < numbers.length - 1)\n            result[i * 2 + 1]\
    \ = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpz_z1v9kt.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpz_z1v9kt.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpz_z1v9kt.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x202b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    long i = 0;\n    foreach (number; numbers)\
    \ \n    {\n        result[i] = number;\n        if (++i < result.length)\n   \
    \         result[i++] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpf27vvsy7.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpf27vvsy7.__unittest_L23_C1() [0x427f40]\\n??:? void tmpf27vvsy7.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0x86e83554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return [];\n    }\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, e; numbers)\n    {\n        result[2 * i] = e;\n    \
    \    if (i < numbers.length - 1)\n        {\n            result[2 * i + 1] = delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[2 * i] = number;\n        if (i < numbers.length - 1)\n         \
    \   result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpugsda0uu.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpugsda0uu.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpugsda0uu.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xfbff0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(n; numbers)\n    {\n        result ~= n;\n        if (n\
    \ != numbers[$-1])\n            result ~= delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptmsd69a3.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmptmsd69a3.__unittest_L22_C1()\
    \ [0x4280f8]\\n??:? void tmptmsd69a3.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ceef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430859]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd59]\\n??:? runModuleUnitTests [0x42ccc5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42886f]\\n??:? _d_run_main [0x4287da]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0xb3772554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        result ~= number;\n\
    \        if (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(num; numbers)\n    {\n        result ~= num;\n       \
    \ if(num != numbers[$-1])\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkuw05_an.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmpkuw05_an.__unittest_L22_C1()\
    \ [0x4280f8]\\n??:? void tmpkuw05_an.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ceef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430859]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd59]\\n??:? runModuleUnitTests [0x42ccc5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42886f]\\n??:? _d_run_main [0x4287da]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0x4656d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers) \n    {\n        result ~= n;\n       \
    \ if (i < numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\n/*\n    >>> is_prime(2)\n    true\n\
    \    >>> is_prime(3)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(5)\n\
    \    true\n    >>> is_prime(6)\n    false\n    >>> is_prime(7)\n    true\n   \
    \ >>> is_prime(8)\n    false\n    >>> is_prime(9)\n    false\n    >>> is_prime(10)\n\
    \    false\n    >>> is_prime(11)\n    true\n    >>> is_prime(12)\n    false\n\
    \    >>> is_prime(13)\n    true\n    >>> is_prime(14)\n    false\n    >>> is_prime(15)\n\
    \    false\n    >>> is_prime(16)\n    false\n    >>> is_prime(17)\n    true\n\
    \    >>> is_prime(18)\n    false\n    >>> is_prime(19)\n    true\n    >>> is_prime(20)\n\
    \    false\n    >>> is_prime(21)\n    false\n    >>> is_prime(22)\n    false\n\
    \    >>> is_prime(23)\n    true\n    >>> is_prime(24)\n    false\n    >>> is_prime(25)\n\
    \    false\n    >>> is_prime(26)\n    false\n    >>> is_prime(27)\n    false\n\
    \    >>> is_prime(28)\n    false\n    >>> is_prime(29)\n    true\n    >>> is_prime(30)\n\
    \    false\n    >>> is_prime(31)\n    true\n    >>> is_prime(32)\n    false\n\
    \    >>> is_prime(33)\n    false\n    >>> is_prime(34)\n    false\n    >>> is_prime(35)\n\
    \    false\n    >>> is_prime(36)\n    false\n    >>> is_prime(37)\n    true\n\
    \    >>> is_prime\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0545p8z0.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0545p8z0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n   \
    \     result[2 * i] = number;\n        if (i != numbers.length - 1)\n        \
    \    result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpyceuw9ks.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpyceuw9ks.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpyceuw9ks.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x9c0d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[];\n    foreach(n; numbers)\n    {\n        if(n == numbers[0])\n     \
    \   {\n            result ~= n;\n        }\n        else\n        {\n        \
    \    result ~= delimeter;\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6bb_4h80.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6bb_4h80.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers) \n    {\n        result ~= n;\n       \
    \ if (i < numbers.length - 1) \n        {\n            result ~= delimeter;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    foreach (i, number; numbers) \n    {\n  \
    \      if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n \
    \       }\n        result[i * 2] = number;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmplkvx5koi.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmplkvx5koi.__unittest_L24_C1() [0x427f40]\\n??:? void tmplkvx5koi.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0xa9f38554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(num; numbers)\n    {\n        result ~= num;\n       \
    \ if(num != numbers[$-1])\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp41j54na0.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428425]\\n??:? void tmp41j54na0.__unittest_L22_C1()\
    \ [0x4280f8]\\n??:? void tmp41j54na0.__modtest() [0x4281a8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ceef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430859]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd59]\\n??:? runModuleUnitTests [0x42ccc5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42886f]\\n??:? _d_run_main [0x4287da]\\n??:? main [0x4281bb]\\\
    n??:? __libc_start_main [0xd8637554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers) \n    {\n        if (i > 0) \n   \
    \     {\n            result ~= delimeter;\n        }\n        result ~= number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers)\n    {\n        if (i != 0)\n    \
    \    {\n            result ~= delimeter;\n        }\n        result ~= number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, number; numbers) \n    {\n        if (i != 0) \n  \
    \      {\n            result ~= delimeter;\n        }\n        result ~= number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    if (numbers.length == 1)\n        return numbers;\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    for (size_t i = 1; i < numbers.length; i++) \n    {\n        result[2 * i\
    \ - 1] = delimeter;\n        result[2 * i] = numbers[i];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[0];\n    foreach(i, n; numbers)\n    {\n        result ~= n;\n        if\
    \ (i < numbers.length - 1)\n            result ~= delimeter;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
