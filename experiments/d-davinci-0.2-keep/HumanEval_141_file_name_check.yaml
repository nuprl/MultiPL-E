name: HumanEval_141_file_name_check
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nCreate a function which takes\
  \ a string representing a file's name, and returns\n    'Yes' if the the file's\
  \ name is valid, and returns 'No' otherwise.\n    A file's name is considered to\
  \ be valid if and only if all the following conditions \n    are met:\n    - There\
  \ should not be more than three digits ('0'-'9') in the file's name.\n    - The\
  \ file's name contains exactly one dot '.'\n    - The substring before the dot should\
  \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
  \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
  \ 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n\
  \    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
  \ alphapet letter)\n    \n*/\nstring file_name_check(string file_name) \n"
tests: "unittest\n{\n    alias candidate = file_name_check;\n\n    assert(candidate(\"\
  example.txt\") == \"Yes\");\n    assert(candidate(\"1example.dll\") == \"No\");\n\
  \    assert(candidate(\"s1sdf3.asd\") == \"No\");\n    assert(candidate(\"K.dll\"\
  ) == \"Yes\");\n    assert(candidate(\"MY16FILE3.exe\") == \"Yes\");\n    assert(candidate(\"\
  His12FILE94.exe\") == \"No\");\n    assert(candidate(\"_Y.txt\") == \"No\");\n \
  \   assert(candidate(\"?aREYA.exe\") == \"No\");\n    assert(candidate(\"/this_is_valid.dll\"\
  ) == \"No\");\n    assert(candidate(\"this_is_valid.wow\") == \"No\");\n    assert(candidate(\"\
  this_is_valid.txt\") == \"Yes\");\n    assert(candidate(\"this_is_valid.txtexe\"\
  ) == \"No\");\n    assert(candidate(\"#this2_i4s_5valid.ten\") == \"No\");\n   \
  \ assert(candidate(\"@this1_is6_valid.exe\") == \"No\");\n    assert(candidate(\"\
  this_is_12valid.6exe4.txt\") == \"No\");\n    assert(candidate(\"all.exe.txt\")\
  \ == \"No\");\n    assert(candidate(\"I563_No.exe\") == \"Yes\");\n    assert(candidate(\"\
  Is3youfault.txt\") == \"Yes\");\n    assert(candidate(\"no_one#knows.dll\") == \"\
  Yes\");\n    assert(candidate(\"1I563_Yes3.exe\") == \"No\");\n    assert(candidate(\"\
  I563_Yes3.txtt\") == \"No\");\n    assert(candidate(\"final..txt\") == \"No\");\n\
  \    assert(candidate(\"final132\") == \"No\");\n    assert(candidate(\"_f4indsartal132.\"\
  ) == \"No\");\n    assert(candidate(\".txt\") == \"No\");\n    assert(candidate(\"\
  s.\") == \"No\");\n}\nvoid main(){}"
completions: ["{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n \
    \   string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (!file_name_parts[0].isAlpha)\n        return \"\
    No\";\n    if (file_name_parts[0].countDigits > 3)\n        return \"No\";\n \
    \   if (!valid_extensions.any!(e => e == file_name_parts[1]))\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.indexOf('.');\n    string\
    \ extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    if (dot_index == -1 || name.length == 0 || !valid_extensions.contains(extension)\
    \ || name.count(\"0123456789\") > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length !=\
    \ 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n      \
    \  return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n\
    \        return \"No\";\n    if (valid_extensions.find(file_name_parts[1]) ==\
    \ -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index\
    \ = file_name.find('.');\n    string extension = file_name.substr(dot_index +\
    \ 1);\n    string name = file_name.substr(0, dot_index);\n    int digits_count\
    \ = 0;\n    foreach(c; name)\n    {\n        if(isdigit(c))\n            digits_count++;\n\
    \    }\n    if(digits_count > 3)\n        return \"No\";\n    if(!isalpha(name[0]))\n\
    \        return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" &&\
    \ extension != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (valid_extensions.count(file_name_parts[1]) ==\
    \ 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    string before_dot = \"\"\
    ;\n    string after_dot = \"\";\n    foreach(i, c; file_name)\n    {\n       \
    \ if(c == '.')\n        {\n            dot_count++;\n            dot_index = i;\n\
    \        }\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    before_dot = file_name[0..dot_index];\n    after_dot = file_name[dot_index+1..$];\n\
    \    if(before_dot.length == 0 || (before_dot[0] < 'a' || before_dot[0] > 'z')\
    \ && (before_dot[0] < 'A' || before_dot[0] > 'Z'))\n    {\n        return \"No\"\
    ;\n    }\n    if(after_dot != \"txt\" && after_dot != \"exe\" && after_dot !=\
    \ \"dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n\
    \    int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits_count\
    \ = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n      \
    \      digits_count++;\n    }\n    if(digits_count > 3)\n        return \"No\"\
    ;\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <=\
    \ 'Z'))\n        return \"No\";\n    if(extension != \"txt\" && extension != \"\
    exe\" && extension != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    int dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return\
    \ \"No\";\n    string prefix = file_name[0..dot_pos];\n    string suffix = file_name[dot_pos+1..$];\n\
    \    if (prefix.length == 0 || prefix.length > 8 || suffix.length == 0 || suffix.length\
    \ > 3)\n        return \"No\";\n    if (prefix.count('0'..'9') > 3)\n        return\
    \ \"No\";\n    if (prefix[0] < 'a' || prefix[0] > 'z' && prefix[0] < 'A' || prefix[0]\
    \ > 'Z')\n        return \"No\";\n    if (suffix != \"txt\" && suffix != \"exe\"\
    \ && suffix != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].filter!(a => a >= '0' && a <= '9').length > 3)\n  \
    \      return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z' && file_name_parts[0][0] < 'A' || file_name_parts[0][0] > 'Z')\n     \
    \   return \"No\";\n    if (valid_extensions.indexOf(file_name_parts[1]) == -1)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.indexOf('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string name = file_name[0..dot_index];\n\
    \    string extension = file_name[dot_index+1..$];\n    if (name.length == 0 ||\
    \ !isAlpha(name[0]))\n        return \"No\";\n    int digits_count = 0;\n    foreach\
    \ (c; name)\n        if (c >= '0' && c <= '9')\n            digits_count++;\n\
    \    if (digits_count > 3)\n        return \"No\";\n    if (valid_extensions.indexOf(extension)\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   auto extension = file_name.slice(dot_index + 1);\n    if (extension != \"\
    txt\" && extension != \"exe\" && extension != \"dll\")\n        return \"No\"\
    ;\n    auto name = file_name.slice(0, dot_index);\n    if (name.length == 0)\n\
    \        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A'\
    \ || name[0] > 'Z')\n        return \"No\";\n    if (name.count!(c => c >= '0'\
    \ && c <= '9') > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n   \
    \ int dot_index = file_name.find('.');\n    string ext = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n        \
    \    digits++;\n    }\n    if(digits > 3)\n        return \"No\";\n    if(ext\
    \ != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"No\";\n  \
    \  if(name.length == 0)\n        return \"No\";\n    if(name[0] < 'a' || name[0]\
    \ > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos ==\
    \ -1)\n        return \"No\";\n    auto ext = file_name.substr(dot_pos + 1);\n\
    \    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"\
    No\";\n    auto name = file_name.substr(0, dot_pos);\n    if (name.length == 0)\n\
    \        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A'\
    \ || name[0] > 'Z')\n        return \"No\";\n    if (name.count!(c => c >= '0'\
    \ && c <= '9') > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n   \
    \ auto dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return\
    \ \"No\";\n    auto ext = file_name.slice(dot_pos+1);\n    if (ext != \"txt\"\
    \ && ext != \"exe\" && ext != \"dll\")\n        return \"No\";\n    auto name\
    \ = file_name.slice(0, dot_pos);\n    if (name.empty)\n        return \"No\";\n\
    \    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n \
    \       return \"No\";\n    auto digits = 0;\n    foreach (c; name)\n    {\n \
    \       if (c >= '0' && c <= '9')\n            digits++;\n    }\n    if (digits\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_parts[0].length == 0)\n        return \"No\";\n    if (file_name_parts[0][0]\
    \ < 'a' || file_name_parts[0][0] > 'z')\n        return \"No\";\n    if (count(file_name_parts[0],\
    \ \"0123456789\") > 3)\n        return \"No\";\n    if (valid_extensions.indexOf(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length ==\
    \ 0)\n        return \"No\";\n    if (parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n        return \"\
    No\";\n    if (parts[0][0] < 'A' || parts[0][0] > 'Z')\n        return \"No\"\
    ;\n    if (valid_extensions.find(parts[1]) == -1)\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n       \
    \ return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = split(file_name, \".\"\
    );\n    if (parts.length != 2) return \"No\";\n    if (parts[0].length == 0) return\
    \ \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z') return \"No\";\n  \
    \  if (parts[1] !in valid_extensions) return \"No\";\n    if (parts[0].count!(a\
    \ => a >= '0' && a <= '9') > 3) return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count('0', '9') > 3)\n        return \"No\";\n    if\
    \ (!valid_extensions.contains(file_name_parts[1]))\n        return \"No\";\n \
    \   if (!file_name_parts[0][0].isLetter)\n        return \"No\";\n    return \"\
    Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    string[] parts = split(file_name, \".\");\n    if (parts.length != 2)\n \
    \       return \"No\";\n    if (parts[0].length == 0)\n        return \"No\";\n\
    \    if (parts[0].length > 3)\n        return \"No\";\n    if (parts[0].length\
    \ != count(parts[0], ch => ch >= '0' && ch <= '9'))\n        return \"No\";\n\
    \    if (parts[1] !in valid_extensions)\n        return \"No\";\n    return \"\
    Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    string[] parts = file_name.split(\".\");\n    if (parts.length != 2)\n  \
    \      return \"No\";\n    if (parts[0].length == 0)\n        return \"No\";\n\
    \    if (!parts[0].isalpha)\n        return \"No\";\n    if (parts[0].count(\"\
    0-9\") > 3)\n        return \"No\";\n    if (!valid_extensions.contains(parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    if (extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        return \"No\";\n    if (name.length == 0)\n        return\
    \ \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0]\
    \ > 'Z')\n        return \"No\";\n    int digits = 0;\n    foreach (c; name)\n\
    \    {\n        if (c >= '0' && c <= '9')\n            digits++;\n    }\n    if\
    \ (digits > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_parts[0][0] !in \"a-zA-Z\")\n        return \"No\";\n    if (file_name_parts[1]\
    \ !in valid_extensions)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts\
    \ = split(file_name, \".\");\n    if (parts.length != 2)\n        return \"No\"\
    ;\n    if (parts[0].length == 0)\n        return \"No\";\n    if (parts[0].count!(c\
    \ => c >= '0' && c <= '9') > 3)\n        return \"No\";\n    if (parts[0][0] <\
    \ 'a' || parts[0][0] > 'z' && parts[0][0] < 'A' || parts[0][0] > 'Z')\n      \
    \  return \"No\";\n    if (valid_extensions.count!(e => e == parts[1]) == 0)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    int digit_count = 0;\n    string extension = file_name.substr(dot_index +\
    \ 1);\n    string name = file_name.substr(0, dot_index);\n    foreach(c; name)\n\
    \    {\n        if(c >= '0' && c <= '9')\n            digit_count++;\n    }\n\
    \    if(digit_count > 3)\n        return \"No\";\n    if(extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n \
    \   if(name.length == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0]\
    \ <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n    if\
    \ (dot_index == -1)\n        return \"No\";\n    auto extension = file_name.slice(dot_index\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    auto name = file_name.slice(0, dot_index);\n\
    \    if (name.empty || !isAlpha(name[0]))\n        return \"No\";\n    if (count(name,\
    \ (c) => isDigit(c)) > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    string file_name_part = file_name_parts[0];\n\
    \    string file_extension = file_name_parts[1];\n    int digits_count = 0;\n\
    \    foreach(char ch; file_name_part)\n    {\n        if(ch >= '0' && ch <= '9')\n\
    \        {\n            digits_count++;\n        }\n    }\n    if(digits_count\
    \ > 3)\n    {\n        return \"No\";\n    }\n    if(file_name_part.length ==\
    \ 0)\n    {\n        return \"No\";\n    }\n    if(!(file_name_part[0] >= 'a'\
    \ && file_name_part[0] <= 'z') && !(file_name_part[0] >= 'A' && file_name_part[0]\
    \ <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(!valid_extensions.contains(file_extension))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(c => c.isDigit) > 3)\n        return \"No\";\n\
    \    if (!file_name_parts[0][0].isLetter)\n        return \"No\";\n    if (!valid_extensions.any!(e\
    \ => e == file_name_parts[1]))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = split(file_name, \".\");\n    if (file_name_parts.length != 2) return \"No\"\
    ;\n    if (file_name_parts[0].length == 0) return \"No\";\n    if (file_name_parts[0].count(\"\
    0-9\") > 3) return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z') return \"No\";\n    if (valid_extensions.count(file_name_parts[1]) ==\
    \ 0) return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int\
    \ dot_count = 0;\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    string[] file_name_split = split(file_name, \".\");\n    foreach(char c;\
    \ file_name_split[0])\n    {\n        if(isdigit(c))\n        {\n            count++;\n\
    \        }\n    }\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1 || file_name_split[0].length == 0 || !isalpha(file_name_split[0][0]) ||\
    \ !in(file_name_split[1], valid_extensions))\n    {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto extension = file_name.slice(dot_index\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    auto name = file_name.slice(0, dot_index);\n\
    \    if (name.length == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0]\
    \ > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\";\n    int digits\
    \ = 0;\n    foreach (c; name)\n    {\n        if (c >= '0' && c <= '9')\n    \
    \        digits++;\n    }\n    if (digits > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(c => c >= '0' && c <= '9')\
    \ > 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(s => s == file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index\
    \ = file_name.indexOf('.');\n    if (dot_index == -1) return \"No\";\n    string\
    \ before_dot = file_name[0..dot_index];\n    string after_dot = file_name[dot_index+1..$];\n\
    \    if (before_dot.length == 0 || before_dot.length > 8) return \"No\";\n   \
    \ if (after_dot.length == 0 || after_dot.length > 3) return \"No\";\n    if (after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") return \"No\";\n\
    \    if (before_dot.count!(a => a >= '0' && a <= '9') > 3) return \"No\";\n  \
    \  if (before_dot.count!(a => (a >= 'a' && a <= 'z') || (a >= 'A' && a <= 'Z'))\
    \ == 0) return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot = file_name.find('.');\n\
    \    if (dot == -1)\n        return \"No\";\n    auto ext = file_name.slice(dot\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.slice(0, dot);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    int count = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            count++;\n\
    \    }\n    if (count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts\
    \ = file_name.split(\".\");\n    if (parts.length != 2)\n        return \"No\"\
    ;\n    if (parts[0].length == 0)\n        return \"No\";\n    if (parts[0].count(\"\
    0-9\") > 3)\n        return \"No\";\n    if (parts[0][0] < 'a' || parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (parts[0][0] < 'A' || parts[0][0] > 'Z')\n\
    \        return \"No\";\n    if (valid_extensions.find(parts[1]) == -1)\n    \
    \    return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || after_dot.length == 0)\n        return \"No\";\n    if (before_dot.length\
    \ - before_dot.count!(a => a.isDigit) > 3)\n        return \"No\";\n    if (!before_dot[0].isLetter)\n\
    \        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\"\
    \ && after_dot != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_split\
    \ = file_name.split(\".\");\n    if (file_name_split.length != 2)\n        return\
    \ \"No\";\n    if (file_name_split[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_split[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_split[0][0] < 'a' || file_name_split[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.count(file_name_split[1]) == 0)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto before_dot = file_name[0..dot_pos];\n\
    \    auto after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length == 0\
    \ || before_dot.length > 8)\n        return \"No\";\n    if (after_dot != \"txt\"\
    \ && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"No\";\n \
    \   if (before_dot.count!(a => a >= '0' && a <= '9') > 3)\n        return \"No\"\
    ;\n    if (before_dot[0] < 'a' || before_dot[0] > 'z')\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n       \
    \ return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    import std.algorithm\
    \ : count;\n    import std.array : empty;\n    import std.string : startsWith,\
    \ endsWith;\n    import std.conv : to;\n    import std.range : take, drop;\n \
    \   import std.typecons : tuple;\n    import std.math : isNaN;\n    import std.regex\
    \ : regex;\n    import std.regex : match;\n    import std.regex : Regex;\n   \
    \ import std.regex : RegexMatch;\n    import std.regex : RegexSplitter;\n    import\
    \ std.regex : RegexSplitterResult;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex : RegexSplitterResultType;\n\
    \    import std.regex : RegexSplitterResultType;\n    import std.regex", "{\n\
    \    auto dot_index = file_name.find('.');\n    if (dot_index == -1)\n       \
    \ return \"No\";\n    auto ext = file_name.split('.')[1];\n    if (ext != \"txt\"\
    \ && ext != \"exe\" && ext != \"dll\")\n        return \"No\";\n    auto name\
    \ = file_name.split('.')[0];\n    if (name.length == 0)\n        return \"No\"\
    ;\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n\
    \        return \"No\";\n    int count = 0;\n    foreach (c; name)\n    {\n  \
    \      if (c >= '0' && c <= '9')\n            count++;\n    }\n    if (count >\
    \ 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count =\
    \ 0;\n    int digit_count = 0;\n    int i = 0;\n    foreach(ch; file_name)\n \
    \   {\n        if(ch == '.')\n        {\n            dot_count++;\n        }\n\
    \        if(ch >= '0' && ch <= '9')\n        {\n            digit_count++;\n \
    \       }\n        if(dot_count > 1)\n        {\n            return \"No\";\n\
    \        }\n        if(digit_count > 3)\n        {\n            return \"No\"\
    ;\n        }\n        if(i == 0 && !(ch >= 'a' && ch <= 'z') && !(ch >= 'A' &&\
    \ ch <= 'Z'))\n        {\n            return \"No\";\n        }\n        i++;\n\
    \    }\n    if(dot_count == 0)\n    {\n        return \"No\";\n    }\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string extension = file_name[file_name.length\
    \ - 3..$];\n    foreach(ext; valid_extensions)\n    {\n        if(ext == extension)\n\
    \        {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n\
    }", "{\n    int dot_index = file_name.find('.');\n    if (dot_index == -1) return\
    \ \"No\";\n    string before_dot = file_name[0..dot_index];\n    string after_dot\
    \ = file_name[dot_index+1..$];\n    if (before_dot.length == 0) return \"No\"\
    ;\n    if (after_dot.length == 0) return \"No\";\n    if (after_dot != \"txt\"\
    \ && after_dot != \"exe\" && after_dot != \"dll\") return \"No\";\n    if (before_dot.count(\"\
    0123456789\") > 3) return \"No\";\n    if (before_dot[0] < 'A' || before_dot[0]\
    \ > 'z') return \"No\";\n    if (before_dot[0] > 'Z' && before_dot[0] < 'a') return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto extension = file_name.slice(dot_index\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    auto name = file_name.slice(0, dot_index);\n\
    \    if (name.length == 0)\n        return \"No\";\n    if (!isAlpha(name[0]))\n\
    \        return \"No\";\n    int count = 0;\n    foreach (c; name)\n    {\n  \
    \      if (isDigit(c))\n            count++;\n    }\n    if (count > 3)\n    \
    \    return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    if (dot_index == 0)\n \
    \       return \"No\";\n    if (file_name.count('.') != 1)\n        return \"\
    No\";\n    if (file_name[dot_index + 1 .. $].count('0' .. '9') > 3)\n        return\
    \ \"No\";\n    if (file_name[0 .. dot_index].count('0' .. '9') > 0)\n        return\
    \ \"No\";\n    if (file_name[dot_index + 1 .. $] != \"txt\" && file_name[dot_index\
    \ + 1 .. $] != \"exe\" && file_name[dot_index + 1 .. $] != \"dll\")\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string before_dot = file_name[0..dot_index];\n    string after_dot = file_name[dot_index+1..$];\n\
    \    if(before_dot.count('0'..'9') > 3)\n        return \"No\";\n    if(after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return\
    \ \"No\";\n    if(before_dot.length == 0)\n        return \"No\";\n    if(before_dot[0]\
    \ < 'a' || before_dot[0] > 'z')\n        if(before_dot[0] < 'A' || before_dot[0]\
    \ > 'Z')\n            return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   auto file_name_without_extension = file_name[0..dot_index];\n    auto extension\
    \ = file_name[dot_index+1..$];\n    if (file_name_without_extension.length ==\
    \ 0 || \n        !(file_name_without_extension[0] >= 'a' && file_name_without_extension[0]\
    \ <= 'z' ||\n          file_name_without_extension[0] >= 'A' && file_name_without_extension[0]\
    \ <= 'Z'))\n        return \"No\";\n    if (extension != \"txt\" && extension\
    \ != \"exe\" && extension != \"dll\")\n        return \"No\";\n    if (file_name_without_extension.count!(a\
    \ => a >= '0' && a <= '9') > 3)\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length !=\
    \ 2) \n    {\n        return \"No\";\n    }\n    if (file_name_parts[0].length\
    \ == 0) \n    {\n        return \"No\";\n    }\n    if (file_name_parts[0].count(\"\
    0-9\") > 3) \n    {\n        return \"No\";\n    }\n    if (file_name_parts[0].count(\"\
    a-zA-Z\") == 0) \n    {\n        return \"No\";\n    }\n    if (file_name_parts[1]\
    \ !in valid_extensions) \n    {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int i = 0;\n    string extension = \"\";\n    string name = \"\";\n\
    \    foreach(c; file_name)\n    {\n        if(c == '.')\n        {\n         \
    \   dot_count++;\n            dot_index = i;\n        }\n        i++;\n    }\n\
    \    if(dot_count != 1)\n    {\n        return \"No\";\n    }\n    else\n    {\n\
    \        name = file_name[0..dot_index];\n        extension = file_name[dot_index+1..$];\n\
    \        if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        {\n            return \"No\";\n        }\n        foreach(c; name)\n\
    \        {\n            if(c >= '0' && c <= '9')\n            {\n            \
    \    count++;\n            }\n        }\n        if(count > 3)\n        {\n  \
    \          return \"No\";\n        }\n        else\n        {\n            return\
    \ \"Yes\";\n        }\n    }\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n    if (parts.length\
    \ != 2)\n        return \"No\";\n    if (parts[0].length == 0)\n        return\
    \ \"No\";\n    if (parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (parts[0][0] < 'a' || parts[0][0] > 'z')\n        return \"No\";\n    if (valid_extensions.find(parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   auto prefix = file_name[0..dot_index];\n    if (prefix.length == 0 || !isAlpha(prefix[0]))\n\
    \        return \"No\";\n    auto suffix = file_name[dot_index + 1..$];\n    if\
    \ (suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\")\n        return\
    \ \"No\";\n    if (prefix.count!(a => a >= '0' && a <= '9') > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length()\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = split(file_name, \".\"\
    );\n    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length\
    \ == 0)\n        return \"No\";\n    if (parts[0].length > 3)\n        return\
    \ \"No\";\n    if (valid_extensions.indexOf(parts[1]) == -1)\n        return \"\
    No\";\n    if (parts[0].length == 3)\n    {\n        if (parts[0].indexOfAny(\"\
    0123456789\") == -1)\n            return \"No\";\n    }\n    return \"Yes\";\n\
    }", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ parts = split(file_name, \".\");\n    if (parts.length != 2)\n        return\
    \ \"No\";\n    if (parts[0].length == 0)\n        return \"No\";\n    if (parts[0].count!(c\
    \ => c >= '0' && c <= '9') > 3)\n        return \"No\";\n    if (parts[0][0] <\
    \ 'a' || parts[0][0] > 'z' && parts[0][0] < 'A' || parts[0][0] > 'Z')\n      \
    \  return \"No\";\n    if (valid_extensions.count!(ext => ext == parts[1]) ==\
    \ 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count('0', '9') >\
    \ 3)\n        return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\n\
    \        return \"No\";\n    if (!file_name_parts[0][0].isLetter)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    int digits_count = 0;\n    foreach(char c; file_name)\n    {\n        if(c.isDigit)\n\
    \            digits_count++;\n    }\n    if(digits_count > 3)\n        return\
    \ \"No\";\n    if(file_name_parts.length != 2)\n        return \"No\";\n    if(file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if(!file_name_parts[0][0].isLetter)\n   \
    \     return \"No\";\n    if(!valid_extensions.canFind(file_name_parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_parts[0].length == 0)\n        return \"No\";\n    if (file_name_parts[0][0]\
    \ < 'a' || file_name_parts[0][0] > 'z')\n        return \"No\";\n    if (file_name_parts[1]\
    \ !in valid_extensions)\n        return \"No\";\n    if (file_name_parts[0].count!(x\
    \ => x >= '0' && x <= '9') > 3)\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int\
    \ dot_index = file_name.find('.');\n    if (dot_index == -1)\n        return \"\
    No\";\n    string name = file_name[0..dot_index];\n    string extension = file_name[dot_index+1..$];\n\
    \    if (name.length == 0 || !isAlpha(name[0]))\n        return \"No\";\n    if\
    \ (extension.length == 0 || !valid_extensions.canFind(extension))\n        return\
    \ \"No\";\n    int digits_count = 0;\n    foreach (c; name)\n        if (isDigit(c))\n\
    \            digits_count++;\n    if (digits_count > 3)\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n       \
    \ return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    auto dot_index = file_name.find(\".\");\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto extension = file_name[dot_index+1..$];\n\
    \    if (extension.length == 0 || !valid_extensions.canFind(extension))\n    \
    \    return \"No\";\n    auto name = file_name[0..dot_index];\n    if (name.length\
    \ == 0 || !name[0].isLetter)\n        return \"No\";\n    if (name.count!(c =>\
    \ c.isDigit) > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto\
    \ dot_index = file_name.find('.');\n    if (dot_index == -1)\n        return \"\
    No\";\n    auto extension = file_name.substr(dot_index + 1);\n    if (extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return\
    \ \"No\";\n    auto name = file_name.substr(0, dot_index);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (!isAlpha(name[0]))\n        return \"\
    No\";\n    int digit_count = 0;\n    for (auto c : name)\n    {\n        if (isDigit(c))\n\
    \            digit_count++;\n    }\n    if (digit_count > 3)\n        return \"\
    No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\",\
    \ \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_parts[0].length == 0)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ > 3)\n        return \"No\";\n    if (file_name_parts[0].length < 3)\n    {\n\
    \        foreach(i; 0 .. file_name_parts[0].length)\n        {\n            if\
    \ (file_name_parts[0][i] < '0' || file_name_parts[0][i] > '9')\n             \
    \   return \"No\";\n        }\n    }\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_parts[0][0] < 'A' || file_name_parts[0][0]\
    \ > 'Z')\n        return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_pos = 0;\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    string extension = \"\";\n    foreach(char c; file_name)\n    {\n    \
    \    if(c == '.')\n        {\n            dot_pos = count;\n        }\n      \
    \  count++;\n    }\n    extension = file_name[dot_pos+1..$];\n    if(count - dot_pos\
    \ - 1 > 3)\n    {\n        return \"No\";\n    }\n    if(dot_pos == 0)\n    {\n\
    \        return \"No\";\n    }\n    if(!(file_name[0] >= 'a' && file_name[0] <=\
    \ 'z') && !(file_name[0] >= 'A' && file_name[0] <= 'Z'))\n    {\n        return\
    \ \"No\";\n    }\n    if(!(extension in valid_extensions))\n    {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto prefix = file_name[0..dot_index];\n\
    \    auto suffix = file_name[dot_index + 1..$];\n    if (prefix.length == 0 ||\
    \ prefix.length > 8 || suffix.length == 0 || suffix.length > 3)\n        return\
    \ \"No\";\n    if (prefix.count!(a => a >= '0' && a <= '9') > 3)\n        return\
    \ \"No\";\n    if (!(prefix[0] >= 'a' && prefix[0] <= 'z' || prefix[0] >= 'A'\
    \ && prefix[0] <= 'Z'))\n        return \"No\";\n    if (suffix != \"txt\" &&\
    \ suffix != \"exe\" && suffix != \"dll\")\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n    if (dot_index\
    \ == file_name.length)\n        return \"No\";\n    auto extension = file_name[dot_index\
    \ + 1 .. $];\n    if (extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        return \"No\";\n    auto name = file_name[0 .. dot_index];\n\
    \    if (name.length == 0)\n        return \"No\";\n    if (!isAlpha(name[0]))\n\
    \        return \"No\";\n    if (count(name, ch => isDigit(ch)) > 3)\n       \
    \ return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions =\
    \ [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find(\".\");\n    if (dot_pos == -1)\n        return \"No\";\n \
    \   auto prefix = file_name[0..dot_pos];\n    auto suffix = file_name[dot_pos+1..$];\n\
    \    if (prefix.length == 0 || prefix.length > 8)\n        return \"No\";\n  \
    \  if (suffix.length == 0 || suffix.length > 3)\n        return \"No\";\n    if\
    \ (prefix.count!(a => a >= '0' && a <= '9') > 3)\n        return \"No\";\n   \
    \ if (!(prefix[0] >= 'a' && prefix[0] <= 'z' || prefix[0] >= 'A' && prefix[0]\
    \ <= 'Z'))\n        return \"No\";\n    if (suffix != \"txt\" && suffix != \"\
    exe\" && suffix != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return\
    \ \"No\";\n    auto before_dot = file_name[0..dot_pos];\n    auto after_dot =\
    \ file_name[dot_pos+1..$];\n    if (before_dot.length == 0 || !isAlpha(before_dot[0]))\n\
    \        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\"\
    \ && after_dot != \"dll\")\n        return \"No\";\n    if (before_dot.count!(a\
    \ => a.isDigit) > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n  \
    \  int dot_index = file_name.find('.');\n    string file_name_without_extension\
    \ = file_name.substr(0, dot_index);\n    string file_name_extension = file_name.substr(dot_index\
    \ + 1);\n    if (file_name_without_extension.length == 0 || \n        file_name_without_extension.length\
    \ > 8 || \n        file_name_without_extension.count('0', '9') > 3 || \n     \
    \   file_name_without_extension[0] < 'a' || \n        file_name_without_extension[0]\
    \ > 'z' || \n        file_name_extension != \"txt\" && file_name_extension !=\
    \ \"exe\" && file_name_extension != \"dll\")\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    int dot_index = file_name.find(\".\");\n    string name = file_name[0..dot_index];\n\
    \    string extension = file_name[dot_index + 1..$];\n    if (name.length == 0\
    \ || name[0] < 'a' || name[0] > 'z')\n        return \"No\";\n    if (extension.length\
    \ == 0 || !valid_extensions.canFind(extension))\n        return \"No\";\n    int\
    \ digits_count = 0;\n    foreach (c; name)\n        if (c >= '0' && c <= '9')\n\
    \            digits_count++;\n    if (digits_count > 3)\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] parts = split(file_name, \".\");\n    if (parts.length\
    \ != 2) return \"No\";\n    if (parts[0].length == 0) return \"No\";\n    if (parts[0][0]\
    \ < 'a' || parts[0][0] > 'z') return \"No\";\n    if (count(parts[0], \"0123456789\"\
    ) > 3) return \"No\";\n    if (valid_extensions.count(parts[1]) == 0) return \"\
    No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\",\
    \ \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index\
    \ = file_name.find('.');\n    string file_extension = file_name.substr(dot_index+1);\n\
    \    string file_name_without_extension = file_name.substr(0, dot_index);\n  \
    \  int digits_count = 0;\n    foreach(char c; file_name_without_extension)\n \
    \   {\n        if(c >= '0' && c <= '9')\n            digits_count++;\n    }\n\
    \    if(digits_count > 3)\n        return \"No\";\n    if(file_extension != \"\
    txt\" && file_extension != \"exe\" && file_extension != \"dll\")\n        return\
    \ \"No\";\n    if(file_name_without_extension.length == 0)\n        return \"\
    No\";\n    if(file_name_without_extension[0] < 'a' || file_name_without_extension[0]\
    \ > 'z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_parts[0].length == 0)\n        return \"No\";\n    if (file_name_parts[0][0]\
    \ < 'a' || file_name_parts[0][0] > 'z')\n        return \"No\";\n    if (file_name_parts[1]\
    \ !in valid_extensions)\n        return \"No\";\n    if (file_name_parts[0].count!(c\
    \ => c >= '0' && c <= '9') > 3)\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_split = file_name.split(\".\");\n    string file_name_extension =\
    \ file_name_split[1];\n    string file_name_no_extension = file_name_split[0];\n\
    \    int file_name_no_extension_length = file_name_no_extension.length;\n    int\
    \ file_name_no_extension_digit_count = 0;\n    foreach(char c; file_name_no_extension)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            file_name_no_extension_digit_count++;\n\
    \        }\n    }\n    if(file_name_no_extension_digit_count > 3)\n    {\n   \
    \     return \"No\";\n    }\n    if(file_name_no_extension_length == 0)\n    {\n\
    \        return \"No\";\n    }\n    if(file_name_no_extension[0] < 'a' || file_name_no_extension[0]\
    \ > 'z')\n    {\n        if(file_name_no_extension[0] < 'A' || file_name_no_extension[0]\
    \ > 'Z')\n        {\n            return \"No\";\n        }\n    }\n    if(valid_extensions.canFind(file_name_extension)\
    \ == false)\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts\
    \ = file_name.split(\".\");\n    if (parts.length != 2)\n        return \"No\"\
    ;\n    if (parts[0].length == 0)\n        return \"No\";\n    if (parts[0].count(\"\
    0-9\") > 3)\n        return \"No\";\n    if (parts[0][0] < 'a' || parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (parts[0][0] < 'A' || parts[0][0] > 'Z')\n\
    \        return \"No\";\n    if (parts[1] !in valid_extensions)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto prefix = file_name[0..dot_index];\n\
    \    auto suffix = file_name[dot_index+1..$];\n    if (prefix.length == 0 || prefix.length\
    \ > 8)\n        return \"No\";\n    if (suffix.length == 0 || suffix.length >\
    \ 3)\n        return \"No\";\n    if (prefix.count!(a => a >= '0' && a <= '9')\
    \ > 3)\n        return \"No\";\n    if (prefix.count!(a => a >= 'a' && a <= 'z'\
    \ || a >= 'A' && a <= 'Z') == 0)\n        return \"No\";\n    if (suffix != \"\
    txt\" && suffix != \"exe\" && suffix != \"dll\")\n        return \"No\";\n   \
    \ return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || before_dot.length > 8)\n        return \"No\";\n    if (after_dot.length\
    \ == 0 || after_dot.length > 3)\n        return \"No\";\n    if (before_dot.count('0'..'9')\
    \ > 3)\n        return \"No\";\n    if (before_dot[0] < 'a' || before_dot[0] >\
    \ 'z')\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"\
    exe\" && after_dot != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts\
    \ = file_name.split(\".\");\n    if (parts.length != 2) return \"No\";\n    if\
    \ (parts[0].length == 0) return \"No\";\n    if (parts[0].count(\"0-9\") > 3)\
    \ return \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z') return \"No\"\
    ;\n    if (parts[0][0] < 'A' || parts[0][0] > 'Z') return \"No\";\n    if (!valid_extensions.contains(parts[1]))\
    \ return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions =\
    \ [\"txt\", \"exe\", \"dll\"];\n    string[] parts = split(file_name, \".\");\n\
    \    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length ==\
    \ 0)\n        return \"No\";\n    if (parts[0].length > 3)\n        return \"\
    No\";\n    if (parts[0].length == 3)\n    {\n        if (parts[0].count(c => isDigit(c))\
    \ != 3)\n            return \"No\";\n    }\n    if (parts[0].length == 2)\n  \
    \  {\n        if (parts[0].count(c => isDigit(c)) != 2)\n            return \"\
    No\";\n    }\n    if (parts[0].length == 1)\n    {\n        if (parts[0].count(c\
    \ => isDigit(c)) != 1)\n            return \"No\";\n    }\n    if (!isAlpha(parts[0][0]))\n\
    \        return \"No\";\n    if (!valid_extensions.count(parts[1]))\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1) return \"No\";\n    if (dot_index == 0) return \"No\"\
    ;\n    if (dot_index == file_name.length - 1) return \"No\";\n    if (file_name.count('.')\
    \ != 1) return \"No\";\n    auto before_dot = file_name[0..dot_index];\n    auto\
    \ after_dot = file_name[dot_index + 1..$];\n    if (before_dot.count!(c => c.isDigit)\
    \ > 3) return \"No\";\n    if (!before_dot.any!(c => c.isLetter)) return \"No\"\
    ;\n    if (!after_dot.any!(c => c.isLetter)) return \"No\";\n    if (after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") return \"No\";\n\
    \    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n    if\
    \ (dot_pos == -1)\n        return \"No\";\n    if (dot_pos == 0)\n        return\
    \ \"No\";\n    if (file_name.count('.') != 1)\n        return \"No\";\n    if\
    \ (file_name[dot_pos + 1 .. $].count('.') != 0)\n        return \"No\";\n    if\
    \ (file_name[0 .. dot_pos].count('0' .. '9') > 3)\n        return \"No\";\n  \
    \  if (file_name[0 .. dot_pos].count('0' .. '9') == 0)\n        return \"No\"\
    ;\n    if (file_name[0 .. dot_pos].count('a' .. 'z') == 0 && file_name[0 .. dot_pos].count('A'\
    \ .. 'Z') == 0)\n        return \"No\";\n    if (file_name[dot_pos + 1 .. $] !=\
    \ \"txt\" && file_name[dot_pos + 1 .. $] != \"exe\" && file_name[dot_pos + 1 ..\
    \ $] != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = split(file_name,\
    \ \".\");\n    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length\
    \ == 0)\n        return \"No\";\n    if (parts[0].length > 3)\n        return\
    \ \"No\";\n    if (valid_extensions.indexOf(parts[1]) == -1)\n        return \"\
    No\";\n    if (parts[0].indexOfAny(\"0123456789\") != -1)\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n       \
    \ return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n \
    \   if (dot_index == -1)\n        return \"No\";\n    string name = file_name[0..dot_index];\n\
    \    string extension = file_name[dot_index+1..$];\n    if (name.length == 0 ||\
    \ !isAlpha(name[0]))\n        return \"No\";\n    if (extension.length == 0 ||\
    \ !valid_extensions.contains(extension))\n        return \"No\";\n    int digits_count\
    \ = 0;\n    foreach (c; name)\n    {\n        if (isDigit(c))\n            digits_count++;\n\
    \    }\n    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    int dot_count = 0;\n    int num_count = 0;\n    bool first_char\
    \ = true;\n    bool first_dot = true;\n    bool first_num = true;\n    bool first_ext\
    \ = true;\n    bool first_letter = true;\n    string ext = \"\";\n    foreach(c;\
    \ file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            first_dot = false;\n            first_letter = true;\n        }\n\
    \        else if(c >= '0' && c <= '9')\n        {\n            if(first_num)\n\
    \            {\n                num_count++;\n                first_num = false;\n\
    \            }\n            else if(first_dot)\n            {\n              \
    \  num_count++;\n            }\n        }\n        else if(c >= 'a' && c <= 'z'\
    \ || c >= 'A' && c <= 'Z')\n        {\n            if(first_letter)\n        \
    \    {\n                first_letter = false;\n            }\n            if(first_dot)\n\
    \            {\n                first_char = false;\n            }\n         \
    \   else\n            {\n                if(first_ext)\n                {\n  \
    \                  ext ~= c;\n                    first_ext = false;\n       \
    \         }\n                else\n                {\n                    ext\
    \ ~= c;\n                }\n            }\n        }\n        else\n        {\n\
    \            return \"No\";\n        }\n    }\n    if(dot_count != 1 || num_count\
    \ > 3 || first_char || ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n \
    \   {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    string sub_string_before_dot\
    \ = \"\";\n    string sub_string_after_dot = \"\";\n    foreach(i; 0 .. file_name.length)\n\
    \    {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n        {\n  \
    \          count++;\n        }\n        if(file_name[i] == '.')\n        {\n \
    \           dot_count++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    sub_string_before_dot\
    \ = file_name[0 .. dot_index - 1];\n    sub_string_after_dot = file_name[dot_index\
    \ + 1 .. file_name.length];\n    if(sub_string_before_dot == \"\" || (sub_string_before_dot[0]\
    \ < 'a' || sub_string_before_dot[0] > 'z') && (sub_string_before_dot[0] < 'A'\
    \ || sub_string_before_dot[0] > 'Z'))\n    {\n        return \"No\";\n    }\n\
    \    if(sub_string_after_dot != \"txt\" && sub_string_after_dot != \"exe\" &&\
    \ sub_string_after_dot != \"dll\")\n    {\n        return \"No\";\n    }\n   \
    \ return \"Yes\";\n}\n/*\nCreate a function which takes a string representing\
    \ a file's name, and returns\n    'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n    A file's name is considered to be valid if and only if\
    \ all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    - The file's name contains\
    \ exactly one dot '.'\n    - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    string[] parts = file_name.split(\".\");\n    if (parts.length != 2)\n  \
    \      return \"No\";\n    if (parts[0].length == 0)\n        return \"No\";\n\
    \    if (parts[0].count(\"0123456789\") > 3)\n        return \"No\";\n    if (parts[0][0]\
    \ < 'a' || parts[0][0] > 'z')\n        return \"No\";\n    if (parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ auto ext = file_name.substr(dot_pos + 1);\n    if (ext != \"txt\" && ext !=\
    \ \"exe\" && ext != \"dll\")\n        return \"No\";\n    auto name = file_name.substr(0,\
    \ dot_pos);\n    if (name.length == 0)\n        return \"No\";\n    if (name[0]\
    \ < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"\
    No\";\n    int num_digits = 0;\n    foreach (c; name)\n    {\n        if (c >=\
    \ '0' && c <= '9')\n            num_digits++;\n    }\n    if (num_digits > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0123456789\"\
    ) > 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ string ext = file_name.substr(dot_pos+1);\n    if (ext != \"txt\" && ext !=\
    \ \"exe\" && ext != \"dll\")\n        return \"No\";\n    string name = file_name.substr(0,\
    \ dot_pos);\n    if (name.length == 0)\n        return \"No\";\n    if (name[0]\
    \ < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"\
    No\";\n    int digits = 0;\n    foreach (c; name)\n    {\n        if (c >= '0'\
    \ && c <= '9')\n            digits++;\n    }\n    if (digits > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string ext = file_name.slice(dot_index\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    string name = file_name.slice(0, dot_index);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    int count = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            count++;\n\
    \    }\n    if (count > 3)\n        return \"No\";\n    return \"Yes\";\n}\n/*\n\
    Create a function which takes a string representing a file's name, and returns\n\
    \    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A\
    \ file's name is considered to be valid if and only if all the following conditions\
    \ \n    are met:\n    - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n    - The file's name contains exactly one dot '.'\n    -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"\
    example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\n    \n*/\nstring file_name_check(string\
    \ file_name) \n{\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string ext = file_name.slice(dot_index +\
    \ 1);\n   ", "{\n    int dot_index = file_name.find('.');\n    string extension\
    \ = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(char c; name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count >\
    \ 3)\n        return \"No\";\n    if(!(extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\"))\n        return \"No\";\n    if(name.length ==\
    \ 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z' || name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].length != file_name_parts[0].filter!(c => c.isDigit).length)\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 3)\n        return\
    \ \"No\";\n    if (!file_name_parts[0][0].isLetter)\n        return \"No\";\n\
    \    if (valid_extensions.filter!(ext => ext == file_name_parts[1]).length ==\
    \ 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.indexOf('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string name = file_name[0..dot_index];\n\
    \    string extension = file_name[dot_index+1..$];\n    if (name.length == 0 ||\
    \ name.length > 8 || name.count!(c => c.isDigit) > 3)\n        return \"No\";\n\
    \    if (!name[0].isLetter)\n        return \"No\";\n    if (valid_extensions.count!(ext\
    \ => ext == extension) == 0)\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts\
    \ = file_name.split(\".\");\n    if (parts.length != 2)\n        return \"No\"\
    ;\n    if (parts[0].length == 0)\n        return \"No\";\n    if (parts[0].filter!(c\
    \ => c.isDigit).length > 3)\n        return \"No\";\n    if (!parts[0].front.isLetter)\n\
    \        return \"No\";\n    if (!valid_extensions.any!(e => e == parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2) return \"No\";\n    if (parts[0].length == 0) return\
    \ \"No\";\n    if (parts[0].count(\"0123456789\") > 3) return \"No\";\n    if\
    \ (valid_extensions.count(parts[1]) == 0) return \"No\";\n    return \"Yes\";\n\
    }", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int\
    \ dot_index = file_name.find(\".\");\n    if (dot_index == -1)\n        return\
    \ \"No\";\n    string extension = file_name[dot_index + 1 .. $];\n    if (extension.length\
    \ == 0 || !valid_extensions.canFind(extension))\n        return \"No\";\n    string\
    \ file_name_without_extension = file_name[0 .. dot_index - 1];\n    if (file_name_without_extension.length\
    \ == 0)\n        return \"No\";\n    if (file_name_without_extension[0] < 'a'\
    \ || file_name_without_extension[0] > 'z' &&\n        file_name_without_extension[0]\
    \ < 'A' || file_name_without_extension[0] > 'Z')\n        return \"No\";\n   \
    \ int digits_count = 0;\n    foreach (c; file_name_without_extension)\n    {\n\
    \        if (c >= '0' && c <= '9')\n            digits_count++;\n    }\n    if\
    \ (digits_count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n  \
    \  string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n        return\
    \ \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function which takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n\
    \    file_name_check(\"1example.dll\") # => 'No' (the name should start with a\
    \ latin alphapet letter)\n    \n*/\nstring file_name_check(string file_name) \n\
    {\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length !=\
    \ 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n      \
    \  return \"No\";\n    if (file_name", "{\n    string[] valid_extensions = [\"\
    txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n    if\
    \ (parts.length != 2)\n        return \"No\";\n    if (parts[0].length == 0)\n\
    \        return \"No\";\n    if (parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n        return \"\
    No\";\n    if (parts[0][0] < 'A' || parts[0][0] > 'Z')\n        return \"No\"\
    ;\n    if (valid_extensions.count(parts[1]) == 0)\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (!file_name_parts[0].isLetter)\n        return \"\
    No\";\n    if (file_name_parts[0].count(char(c => c.isDigit)) > 3)\n        return\
    \ \"No\";\n    if (!valid_extensions.any!(ext => file_name_parts[1] == ext))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length ==\
    \ 0)\n        return \"No\";\n    if (parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n        return \"\
    No\";\n    if (parts[0][0] < 'A' || parts[0][0] > 'Z')\n        return \"No\"\
    ;\n    if (valid_extensions.find(parts[1]) == -1)\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos\
    \ == -1)\n        return \"No\";\n    auto ext = file_name.substr(dot_pos + 1);\n\
    \    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"\
    No\";\n    auto name = file_name.substr(0, dot_pos);\n    if (name.empty())\n\
    \        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A'\
    \ || name[0] > 'Z')\n        return \"No\";\n    if (name.count('0') + name.count('1')\
    \ + name.count('2') + name.count('3') + name.count('4') + name.count('5') + name.count('6')\
    \ + name.count('7') + name.count('8') + name.count('9') > 3)\n        return \"\
    No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string sub_str_before_dot = file_name[0..dot_index];\n    string sub_str_after_dot\
    \ = file_name[dot_index+1..$];\n    if(sub_str_before_dot.count('0'..'9') > 3)\n\
    \        return \"No\";\n    if(sub_str_before_dot.length == 0)\n        return\
    \ \"No\";\n    if(!(sub_str_before_dot[0] >= 'a' && sub_str_before_dot[0] <= 'z')\
    \ && !(sub_str_before_dot[0] >= 'A' && sub_str_before_dot[0] <= 'Z'))\n      \
    \  return \"No\";\n    if(sub_str_after_dot != \"txt\" && sub_str_after_dot !=\
    \ \"exe\" && sub_str_after_dot != \"dll\")\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string name = file_name[0..dot_index];\n\
    \    string ext = file_name[dot_index+1..$];\n    if (name.length == 0 || ext.length\
    \ == 0)\n        return \"No\";\n    if (name.count('0','9') > 3)\n        return\
    \ \"No\";\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n     \
    \   return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' ||\
    \ name[0] > 'Z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\"\
    .\");\n    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length\
    \ == 0)\n        return \"No\";\n    if (parts[0].count(\"0123456789\") > 3)\n\
    \        return \"No\";\n    if (valid_extensions.count(parts[1]) == 0)\n    \
    \    return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto extension = file_name.slice(dot_index\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    auto name = file_name.slice(0, dot_index);\n\
    \    if (name.empty || !isAlpha(name[0]))\n        return \"No\";\n    auto digits\
    \ = name.filter!(c => isDigit(c)).length;\n    if (digits > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n    if (parts.length\
    \ != 2) return \"No\";\n    if (parts[0].length == 0) return \"No\";\n    if (parts[0].count(\"\
    0-9\") > 3) return \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z') return\
    \ \"No\";\n    if (parts[0][0] < 'A' || parts[0][0] > 'Z') return \"No\";\n  \
    \  if (!valid_extensions.contains(parts[1])) return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    int dot_pos = file_name.find('.');\n    string ext = file_name.substr(dot_pos+1);\n\
    \    string name = file_name.substr(0, dot_pos);\n    int count = 0;\n    foreach(c;\
    \ name)\n    {\n        if(c >= '0' && c <= '9')\n            count++;\n    }\n\
    \    if(count > 3)\n        return \"No\";\n    if(ext != \"txt\" && ext != \"\
    exe\" && ext != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n \
    \       return \"No\";\n    if(name[0] < 'a' || name[0] > 'z')\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto prefix = file_name[0..dot_pos];\n\
    \    auto suffix = file_name[dot_pos+1..$];\n    if (prefix.length == 0 || !prefix[0].isLetter)\n\
    \        return \"No\";\n    if (prefix.count!(a => a.isDigit) > 3)\n        return\
    \ \"No\";\n    if (suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\"\
    )\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto sub_str_before_dot =\
    \ file_name[0..dot_pos];\n    auto sub_str_after_dot = file_name[dot_pos+1..$];\n\
    \    if (sub_str_before_dot.length == 0 || sub_str_after_dot.length == 0)\n  \
    \      return \"No\";\n    if (sub_str_before_dot.count!(a => a.isDigit) > 3)\n\
    \        return \"No\";\n    if (!sub_str_before_dot[0].isLetter)\n        return\
    \ \"No\";\n    if (sub_str_after_dot != \"txt\" && sub_str_after_dot != \"exe\"\
    \ && sub_str_after_dot != \"dll\")\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int\
    \ dot_index = file_name.find('.');\n    if (dot_index == -1)\n        return \"\
    No\";\n    string name = file_name[0..dot_index];\n    string extension = file_name[dot_index\
    \ + 1..$];\n    if (name.count('0'..'9') > 3)\n        return \"No\";\n    if\
    \ (name.empty || !name.isalpha)\n        return \"No\";\n    if (valid_extensions.find(extension)\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ string pre_dot = file_name[0..dot_pos];\n    string post_dot = file_name[dot_pos+1..$];\n\
    \    if (pre_dot.length == 0 || !isalpha(pre_dot[0]))\n        return \"No\";\n\
    \    if (post_dot != \"txt\" && post_dot != \"exe\" && post_dot != \"dll\")\n\
    \        return \"No\";\n    if (pre_dot.count('0','1','2','3','4','5','6','7','8','9')\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] !in \"a-zA-Z\")\n     \
    \   return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n       \
    \ return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions =\
    \ [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n   \
    \ string name = file_name[0..dot_index];\n    string extension = file_name[dot_index+1..$];\n\
    \    if (name.count('0'..'9') > 3)\n        return \"No\";\n    if (name.length\
    \ == 0 || !('a'..'z').canFind(name[0]) && !('A'..'Z').canFind(name[0]))\n    \
    \    return \"No\";\n    if (!valid_extensions.canFind(extension))\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n    if (parts.length\
    \ != 2)\n        return \"No\";\n    if (parts[0].length == 0)\n        return\
    \ \"No\";\n    if (parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (parts[0][0] < 'a' || parts[0][0] > 'z')\n        return \"No\";\n    if (parts[0][0]\
    \ < 'A' || parts[0][0] > 'Z')\n        return \"No\";\n    if (valid_extensions.find(parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = split(file_name, \".\"\
    );\n    if (parts.length != 2) return \"No\";\n    if (parts[0].length == 0) return\
    \ \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z') return \"No\";\n  \
    \  if (parts[1] !in valid_extensions) return \"No\";\n    int count = 0;\n   \
    \ foreach (c; parts[0])\n    {\n        if (c >= '0' && c <= '9') count++;\n \
    \   }\n    if (count > 3) return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (!valid_extensions.contains(file_name_parts[1]))\n        return \"No\";\n \
    \   if (!file_name_parts[0].startsWith(\"a-z\") && !file_name_parts[0].startsWith(\"\
    A-Z\"))\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_split = file_name.split(\"\
    .\");\n    if (file_name_split.length != 2)\n        return \"No\";\n    if (file_name_split[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_split[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_split[0][0] < 'a' || file_name_split[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_split[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length ==\
    \ 0)\n        return \"No\";\n    if (parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n        return \"\
    No\";\n    if (parts[0][0] < 'A' || parts[0][0] > 'Z')\n        return \"No\"\
    ;\n    if (valid_extensions.find(parts[1]) == -1)\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    static string[] valid_extensions = [\"txt\", \"\
    exe\", \"dll\"];\n    auto dot_index = file_name.find(\".\");\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    auto extension = file_name[dot_index + 1\
    \ .. $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    auto name = file_name[0 .. dot_index];\n    if (name.length\
    \ == 0 || name[0] < 'a' || name[0] > 'z')\n        return \"No\";\n    int digits_count\
    \ = 0;\n    foreach (c; name)\n    {\n        if (c >= '0' && c <= '9')\n    \
    \        digits_count++;\n    }\n    if (digits_count > 3)\n        return \"\
    No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\",\
    \ \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] !in \"a-zA-Z\")\n     \
    \   return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n       \
    \ return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions =\
    \ [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2) return \"No\";\n    if (parts[0].length == 0) return\
    \ \"No\";\n    if (parts[0].filter!(a => a.isDigit).length > 3) return \"No\"\
    ;\n    if (parts[0].filter!(a => a.isLetter).length == 0) return \"No\";\n   \
    \ if (valid_extensions.filter!(a => a == parts[1]).length == 0) return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n   \
    \ if (dot_index == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || after_dot.length == 0)\n        return \"No\";\n    if (before_dot.length\
    \ > 0 && before_dot[0] < 'a' || before_dot[0] > 'z' && before_dot[0] < 'A' ||\
    \ before_dot[0] > 'Z')\n        return \"No\";\n    if (after_dot != \"txt\" &&\
    \ after_dot != \"exe\" && after_dot != \"dll\")\n        return \"No\";\n    int\
    \ count = 0;\n    foreach (c; before_dot)\n    {\n        if (c >= '0' && c <=\
    \ '9')\n            count++;\n    }\n    if (count > 3)\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n   \
    \ string file_name_without_ext = file_name.substr(0, dot_index);\n    string file_ext\
    \ = file_name.substr(dot_index + 1);\n    if (file_name_without_ext.length ==\
    \ 0)\n        return \"No\";\n    if (file_name_without_ext.length == 1)\n   \
    \ {\n        if (file_name_without_ext[0] < 'a' || file_name_without_ext[0] >\
    \ 'z')\n            return \"No\";\n    }\n    else\n    {\n        if (file_name_without_ext[0]\
    \ < 'a' || file_name_without_ext[0] > 'z')\n            return \"No\";\n     \
    \   if (file_name_without_ext[1] < 'a' || file_name_without_ext[1] > 'z')\n  \
    \          return \"No\";\n    }\n    if (file_ext != \"txt\" && file_ext != \"\
    exe\" && file_ext != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    auto file_name_parts = split(file_name, \".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[1] != \"txt\" && file_name_parts[1]\
    \ != \"exe\" && file_name_parts[1] != \"dll\")\n        return \"No\";\n    if\
    \ (file_name_parts[0].length > 3)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 3)\n    {\n        if (file_name_parts[0][0] < '0' || file_name_parts[0][0]\
    \ > '9')\n            return \"No\";\n        if (file_name_parts[0][1] < '0'\
    \ || file_name_parts[0][1] > '9')\n            return \"No\";\n        if (file_name_parts[0][2]\
    \ < '0' || file_name_parts[0][2] > '9')\n            return \"No\";\n    }\n \
    \   if (file_name_parts[0].length == 2)\n    {\n        if (file_name_parts[0][0]\
    \ < '0' || file_name_parts[0][0] > '9')\n            return \"No\";\n        if\
    \ (file_name_parts[0][1] < '0' || file_name_parts[0][1] > '9')\n            return\
    \ \"No\";\n    }\n    if (file_name_parts[0].length == 1)\n    {\n        if (file_name_parts[0][0]\
    \ < '0' || file_name_parts[0][0] > '9')\n            return \"No\";\n    }\n \
    \   return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n    if\
    \ (dot_index == -1)\n        return \"No\";\n    auto ext = file_name.slice(dot_index\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.slice(0, dot_index);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    int count = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            count++;\n\
    \    }\n    if (count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index+1);\n\
    \    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n    foreach(c;\
    \ name)\n    {\n        if(c >= '0' && c <= '9')\n            digits++;\n    }\n\
    \    if(digits > 3)\n        return \"No\";\n    if(extension != \"txt\" && extension\
    \ != \"exe\" && extension != \"dll\")\n        return \"No\";\n    if(name.length\
    \ == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') &&\
    \ !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"\
    Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    string[] parts = split(file_name, \".\");\n    if (parts.length != 2)\n \
    \       return \"No\";\n    if (parts[0].length == 0)\n        return \"No\";\n\
    \    if (parts[0].length > 3)\n        return \"No\";\n    if (parts[0].count!(a\
    \ => a >= '0' && a <= '9') > 3)\n        return \"No\";\n    if (parts[0].count!(a\
    \ => a >= 'a' && a <= 'z' || a >= 'A' && a <= 'Z') == 0)\n        return \"No\"\
    ;\n    if (valid_extensions.count!(a => a == parts[1]) == 0)\n        return \"\
    No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\",\
    \ \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n    if (parts.length\
    \ != 2)\n        return \"No\";\n    if (parts[0].length == 0)\n        return\
    \ \"No\";\n    if (parts[0].filter!(a => a >= '0' && a <= '9').length > 3)\n \
    \       return \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z' && parts[0][0]\
    \ < 'A' || parts[0][0] > 'Z')\n        return \"No\";\n    if (valid_extensions.filter!(a\
    \ => a == parts[1]).length == 0)\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    int dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n     \
    \   return \"No\";\n    string prefix = file_name[0..dot_pos];\n    string suffix\
    \ = file_name[dot_pos+1..$];\n    if (prefix.length == 0 || prefix.count('0'..'9')\
    \ > 3)\n        return \"No\";\n    if (suffix != \"txt\" && suffix != \"exe\"\
    \ && suffix != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    import std.algorithm : count;\n    import std.conv : to;\n    import std.range\
    \ : take, drop;\n    import std.string : startsWith;\n    import std.array : array;\n\
    \    import std.ascii : isAlpha;\n    import std.typecons : tuple;\n    import\
    \ std.math : isNaN;\n    import std.stdio : writeln;\n    auto dot_index = file_name.indexOf('.');\n\
    \    auto file_name_without_extension = file_name.take(dot_index);\n    auto extension\
    \ = file_name.drop(dot_index + 1);\n    auto valid_extensions = tuple(\"txt\"\
    , \"exe\", \"dll\");\n    auto valid_extensions_array = valid_extensions.array;\n\
    \    auto digits_count = file_name.count!(c => c.isDigit);\n    auto is_valid_extension\
    \ = valid_extensions_array.any!(ext => ext == extension);\n    auto is_valid_name\
    \ = file_name_without_extension.startsWith!(c => c.isAlpha);\n    auto is_valid_file_name\
    \ = is_valid_name && is_valid_extension && digits_count <= 3;\n    return is_valid_file_name\
    \ ? \"Yes\" : \"No\";\n}", "{\n    auto dot_pos = file_name.find('.');\n    if\
    \ (dot_pos == -1)\n        return \"No\";\n    auto before_dot = file_name[0..dot_pos];\n\
    \    auto after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length == 0)\n\
    \        return \"No\";\n    if (before_dot.length != before_dot.count!(c => '0'\
    \ <= c && c <= '9'))\n        return \"No\";\n    if (before_dot.length > 3)\n\
    \        return \"No\";\n    if (!('a' <= before_dot[0] && before_dot[0] <= 'z')\
    \ && !('A' <= before_dot[0] && before_dot[0] <= 'Z'))\n        return \"No\";\n\
    \    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\"\
    )\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.indexOf('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || after_dot.length == 0)\n        return \"No\";\n    if (before_dot.length\
    \ == 1 && before_dot[0] >= '0' && before_dot[0] <= '9')\n        return \"No\"\
    ;\n    if (before_dot.length > 1 && before_dot[0] >= '0' && before_dot[0] <= '9')\n\
    \    {\n        int count = 0;\n        foreach (i; before_dot)\n        {\n \
    \           if (i >= '0' && i <= '9')\n                count++;\n        }\n \
    \       if (count > 3)\n            return \"No\";\n    }\n    if (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z')\n        if (before_dot[0] < 'A' || before_dot[0]\
    \ > 'Z')\n            return \"No\";\n    if (after_dot != \"txt\" && after_dot\
    \ != \"exe\" && after_dot != \"dll\")\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length !=\
    \ 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n      \
    \  return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n\
    \        return \"No\";\n    if (valid_extensions.find(file_name_parts[1]) ==\
    \ -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.indexOf('.');\n\
    \    string file_name_without_extension = file_name.substr(0, dot_index);\n  \
    \  string file_extension = file_name.substr(dot_index + 1);\n    if (file_name_without_extension.length\
    \ == 0 || file_name_without_extension.length > 8)\n        return \"No\";\n  \
    \  if (file_name_without_extension.count('0', '9') > 3)\n        return \"No\"\
    ;\n    if (file_name_without_extension[0] < 'a' || file_name_without_extension[0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.indexOf(file_extension)\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length ==\
    \ 0)\n        return \"No\";\n    if (parts[0].countUntil(\"0\") > 3)\n      \
    \  return \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.countUntil(parts[1]) == valid_extensions.length)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto extension = file_name[dot_index\
    \ + 1 .. $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    auto name = file_name[0 .. dot_index];\n    if (name.length\
    \ == 0 || !isAlpha(name[0]))\n        return \"No\";\n    if (name.count!(c =>\
    \ isDigit(c)) > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count = 0;\n    int digit_count\
    \ = 0;\n    string ext = \"\";\n    string name = \"\";\n    foreach(c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n          \
    \  continue;\n        }\n        if(c >= '0' && c <= '9')\n        {\n       \
    \     digit_count++;\n            continue;\n        }\n        if(dot_count ==\
    \ 0)\n        {\n            name ~= c;\n        }\n        else\n        {\n\
    \            ext ~= c;\n        }\n    }\n    if(dot_count != 1 || digit_count\
    \ > 3 || name == \"\" || !(name[0] >= 'a' && name[0] <= 'z') || !(name[0] >= 'A'\
    \ && name[0] <= 'Z') || !(ext == \"txt\" || ext == \"exe\" || ext == \"dll\"))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\"\
    .\");\n    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length\
    \ == 0)\n        return \"No\";\n    if (parts[0].count(\"0123456789\") > 3)\n\
    \        return \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n   \
    \     return \"No\";\n    if (parts[1] !in valid_extensions)\n        return \"\
    No\";\n    return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1) \n        return \"No\";\n    auto before_dot = file_name[0..dot_index];\n\
    \    auto after_dot = file_name[dot_index+1..$];\n    if (before_dot.length ==\
    \ 0 || before_dot.length > 8) \n        return \"No\";\n    if (after_dot.length\
    \ == 0 || after_dot.length > 3) \n        return \"No\";\n    if (before_dot.count!(a\
    \ => a.isDigit) > 3) \n        return \"No\";\n    if (!before_dot[0].isLetter)\
    \ \n        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\"\
    \ && after_dot != \"dll\") \n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    auto dot_index = file_name.find('.');\n    if (dot_index == -1)\n      \
    \  return \"No\";\n    auto before_dot = file_name[0..dot_index];\n    auto after_dot\
    \ = file_name[dot_index+1..$];\n    if (before_dot.empty || !isAlpha(before_dot[0]))\n\
    \        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\"\
    \ && after_dot != \"dll\")\n        return \"No\";\n    if (before_dot.count!(a\
    \ => a >= '0' && a <= '9') > 3)\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ parts = split(file_name, \".\");\n    if (parts.length != 2)\n        return\
    \ \"No\";\n    if (parts[0].length == 0)\n        return \"No\";\n    if (parts[0].count!(c\
    \ => c >= '0' && c <= '9') > 3)\n        return \"No\";\n    if (parts[0][0] <\
    \ 'a' || parts[0][0] > 'z' && parts[0][0] < 'A' || parts[0][0] > 'Z')\n      \
    \  return \"No\";\n    if (valid_extensions.count!(e => e == parts[1]) == 0)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto ext = file_name.slice(dot_pos\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.slice(0, dot_pos);\n    if (name.empty)\n\
    \        return \"No\";\n    if (!isAlpha(name[0]))\n        return \"No\";\n\
    \    if (name.count!(c => isDigit(c)) > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2) return \"No\";\n    if (file_name_parts[0].length == 0) return \"No\"\
    ;\n    if (file_name_parts[0].count(\"0123456789\") > 3) return \"No\";\n    if\
    \ (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z') return \"No\";\n\
    \    if (valid_extensions.count(file_name_parts[1]) == 0) return \"No\";\n   \
    \ return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\",\
    \ \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n       \
    \ return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ auto ext = file_name.substr(dot_pos + 1);\n    if (ext != \"txt\" && ext !=\
    \ \"exe\" && ext != \"dll\")\n        return \"No\";\n    auto name = file_name.substr(0,\
    \ dot_pos);\n    if (name.empty())\n        return \"No\";\n    if (!isalpha(name[0]))\n\
    \        return \"No\";\n    if (count(name.begin(), name.end(), '0') + count(name.begin(),\
    \ name.end(), '1') + count(name.begin(), name.end(), '2') + count(name.begin(),\
    \ name.end(), '3') + count(name.begin(), name.end(), '4') + count(name.begin(),\
    \ name.end(), '5') + count(name.begin(), name.end(), '6') + count(name.begin(),\
    \ name.end(), '7') + count(name.begin(), name.end(), '8') + count(name.begin(),\
    \ name.end(), '9') > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    import std.algorithm : count;\n    import std.array : array;\n    import\
    \ std.conv : to;\n    import std.range : take;\n    import std.string : split;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n   ", "{\n\
    \    int dot_pos = file_name.find('.');\n    if (dot_pos == -1) return \"No\"\
    ;\n    string ext = file_name.substr(dot_pos + 1);\n    if (ext != \"txt\" &&\
    \ ext != \"exe\" && ext != \"dll\") return \"No\";\n    string name = file_name.substr(0,\
    \ dot_pos);\n    if (name.empty()) return \"No\";\n    if (!isalpha(name[0]))\
    \ return \"No\";\n    int count = 0;\n    foreach (c; name)\n    {\n        if\
    \ (isdigit(c)) count++;\n    }\n    if (count > 3) return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    // your code here\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || before_dot.length > 8)\n        return \"No\";\n    if (after_dot.length\
    \ == 0 || after_dot.length > 3)\n        return \"No\";\n    if (before_dot.count('0'..'9')\
    \ > 3)\n        return \"No\";\n    if (before_dot[0] < 'a' || before_dot[0] >\
    \ 'z')\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"\
    exe\" && after_dot != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    int dot_count = 0;\n    int digit_count = 0;\n    int letter_count = 0;\n\
    \    int length = file_name.length;\n    string file_type = \"\";\n    string\
    \ file_name_no_type = \"\";\n    string[] file_types = [\"txt\", \"exe\", \"dll\"\
    ];\n    bool is_valid = true;\n    for (int i = 0; i < length; i++)\n    {\n \
    \       if (file_name[i] == '.')\n        {\n            dot_count++;\n      \
    \      file_type = file_name[i+1..$];\n            file_name_no_type = file_name[0..i-1];\n\
    \        }\n        if (file_name[i] >= '0' && file_name[i] <= '9')\n        {\n\
    \            digit_count++;\n        }\n        if ((file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z'))\n        {\n      \
    \      letter_count++;\n        }\n    }\n    if (dot_count != 1)\n    {\n   \
    \     is_valid = false;\n    }\n    if (digit_count > 3)\n    {\n        is_valid\
    \ = false;\n    }\n    if (letter_count == 0)\n    {\n        is_valid = false;\n\
    \    }\n    if (file_name_no_type.length == 0)\n    {\n        is_valid = false;\n\
    \    }\n    if (file_type.length == 0)\n    {\n        is_valid = false;\n   \
    \ }\n    if (file_type != \"txt\" && file_type != \"exe\" && file_type != \"dll\"\
    )\n    {\n        is_valid = false;\n    }\n    if (is_valid)\n    {\n       \
    \ return \"Yes\";\n    }\n    else\n    {\n        return \"No\";\n    }\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_split = file_name.split(\".\");\n\
    \    if (file_name_split.length != 2)\n        return \"No\";\n    if (file_name_split[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_split[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (!valid_extensions.contains(file_name_split[1]))\n\
    \        return \"No\";\n    if (!file_name_split[0][0].isAlpha)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2) return \"No\";\n    if (file_name_parts[0].length\
    \ == 0) return \"No\";\n    if (file_name_parts[0].length > 3) return \"No\";\n\
    \    if (file_name_parts[0].count!(c => c >= '0' && c <= '9') > 3) return \"No\"\
    ;\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z') return\
    \ \"No\";\n    if (file_name_parts[1] !in valid_extensions) return \"No\";\n \
    \   return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] parts = split(file_name, \".\");\n    if (parts.length\
    \ != 2)\n        return \"No\";\n    if (parts[0].length == 0)\n        return\
    \ \"No\";\n    if (parts[0].length > 3)\n        return \"No\";\n    if (!isAlpha(parts[0][0]))\n\
    \        return \"No\";\n    if (!valid_extensions.contains(parts[1]))\n     \
    \   return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2) return \"No\";\n    if (parts[0].length == 0) return\
    \ \"No\";\n    if (parts[0].count(\"0-9\") > 3) return \"No\";\n    if (parts[0][0]\
    \ < 'a' || parts[0][0] > 'z') return \"No\";\n    if (valid_extensions.find(parts[1])\
    \ == -1) return \"No\";\n    return \"Yes\";\n}", "{\n    // your code here\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index\
    \ = file_name.indexOf('.');\n    if (dot_index == -1)\n        return \"No\";\n\
    \    string extension = file_name[dot_index + 1 .. $];\n    if (extension.length\
    \ == 0 || !valid_extensions.contains(extension))\n        return \"No\";\n   \
    \ string name = file_name[0 .. dot_index];\n    if (name.length == 0 || !name[0].isLetter)\n\
    \        return \"No\";\n    int digits_count = 0;\n    foreach (c; name)\n  \
    \      if (c.isDigit)\n            digits_count++;\n    if (digits_count > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    string before_dot = file_name[0..dot_pos-1];\n    string after_dot = file_name[dot_pos+1..$];\n\
    \    string before_dot_without_digits = before_dot.replace(\"0\", \"\").replace(\"\
    1\", \"\").replace(\"2\", \"\").replace(\"3\", \"\").replace(\"4\", \"\").replace(\"\
    5\", \"\").replace(\"6\", \"\").replace(\"7\", \"\").replace(\"8\", \"\").replace(\"\
    9\", \"\");\n    if(before_dot.length == before_dot_without_digits.length && before_dot.length\
    \ != 0 && (after_dot == \"txt\" || after_dot == \"exe\" || after_dot == \"dll\"\
    ))\n    {\n        return \"Yes\";\n    }\n    return \"No\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0123456789\") > 3)\n        return \"No\";\n\
    \    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n       \
    \ return \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n \
    \       return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length ==\
    \ 0)\n        return \"No\";\n    if (parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n        return \"\
    No\";\n    if (parts[0][0] < 'A' || parts[0][0] > 'Z')\n        return \"No\"\
    ;\n    if (valid_extensions.find(parts[1]) == -1)\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    int dot_pos = file_name.find(\".\");\n    string\
    \ ext = file_name.substr(dot_pos+1);\n    string name = file_name.substr(0, dot_pos);\n\
    \    int digits = 0;\n    foreach(c; name)\n    {\n        if(isdigit(c))\n  \
    \          digits++;\n    }\n    if(digits > 3)\n        return \"No\";\n    if(name.length\
    \ == 0)\n        return \"No\";\n    if(!isalpha(name[0]))\n        return \"\
    No\";\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = split(file_name, \".\"\
    );\n    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length\
    \ == 0)\n        return \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n\
    \        return \"No\";\n    if (parts[1] !in valid_extensions)\n        return\
    \ \"No\";\n    if (parts[0].count!(c => c >= '0' && c <= '9') > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name, \".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].length > 3)\n    \
    \    return \"No\";\n    if (file_name_parts[0].length == 3)\n    {\n        if\
    \ (file_name_parts[0].count(\"0-9\") != 3)\n            return \"No\";\n    }\n\
    \    if (file_name_parts[0].length == 2)\n    {\n        if (file_name_parts[0].count(\"\
    0-9\") != 2)\n            return \"No\";\n    }\n    if (file_name_parts[0].length\
    \ == 1)\n    {\n        if (file_name_parts[0].count(\"0-9\") != 1)\n        \
    \    return \"No\";\n    }\n    if (file_name_parts[0].count(\"a-zA-Z\") != 1)\n\
    \        return \"No\";\n    if (valid_extensions.count(file_name_parts[1]) ==\
    \ 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index =\
    \ file_name.find('.');\n    string extension = file_name.substr(dot_index + 1);\n\
    \    string name = file_name.substr(0, dot_index);\n    if (name.length == 0 ||\
    \ !isalpha(name[0]))\n        return \"No\";\n    if (extension != \"txt\" &&\
    \ extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n    if\
    \ (name.count('0', '9') > 3)\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    auto dot_index = file_name.find('.');\n    if (dot_index == -1)\n      \
    \  return \"No\";\n    auto before_dot = file_name[0..dot_index];\n    auto after_dot\
    \ = file_name[dot_index+1..$];\n    if (before_dot.length == 0 || before_dot.length\
    \ > 8)\n        return \"No\";\n    if (after_dot.length == 0 || after_dot.length\
    \ > 3)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"\
    exe\" && after_dot != \"dll\")\n        return \"No\";\n    if (before_dot.count!(a\
    \ => a >= '0' && a <= '9') > 3)\n        return \"No\";\n    if (before_dot.count!(a\
    \ => a >= 'a' && a <= 'z') == 0 && before_dot.count!(a => a >= 'A' && a <= 'Z')\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   auto dot_index_2 = file_name.find('.', dot_index + 1);\n    if (dot_index_2\
    \ != -1)\n        return \"No\";\n    auto digits_count = 0;\n    foreach (i,\
    \ c; file_name)\n    {\n        if (c >= '0' && c <= '9')\n            digits_count++;\n\
    \    }\n    if (digits_count > 3)\n        return \"No\";\n    auto extension\
    \ = file_name[dot_index + 1 .. $];\n    if (extension != \"txt\" && extension\
    \ != \"exe\" && extension != \"dll\")\n        return \"No\";\n    auto name =\
    \ file_name[0 .. dot_index];\n    if (name.empty)\n        return \"No\";\n  \
    \  if (!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto ext = file_name.slice(dot_pos\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.slice(0, dot_pos);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    auto digits = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            digits++;\n\
    \    }\n    if (digits > 3)\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_split\
    \ = file_name.split(\".\");\n    if (file_name_split.length != 2)\n        return\
    \ \"No\";\n    if (file_name_split[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_split[0].count(\"0123456789\") > 3)\n        return \"No\";\n\
    \    if (file_name_split[0][0] < 'a' || file_name_split[0][0] > 'z')\n       \
    \ return \"No\";\n    if (valid_extensions.count(file_name_split[1]) == 0)\n \
    \       return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_parts[0].length == 0)\n        return \"No\";\n    if (file_name_parts[0].count!(c\
    \ => c >= '0' && c <= '9') > 3)\n        return \"No\";\n    if (file_name_parts[0][0]\
    \ < 'a' || file_name_parts[0][0] > 'z')\n        return \"No\";\n    if (valid_extensions.count!(ext\
    \ => ext == file_name_parts[1]) == 0)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length !=\
    \ 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n      \
    \  return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n\
    \        return \"No\";\n    if (valid_extensions.find(file_name_parts[1]) ==\
    \ -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos =\
    \ file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n    string\
    \ before_dot = file_name[0..dot_pos];\n    string after_dot = file_name[dot_pos+1..$];\n\
    \    if (before_dot.length == 0 || before_dot.length > 8)\n        return \"No\"\
    ;\n    if (after_dot.length == 0 || after_dot.length > 3)\n        return \"No\"\
    ;\n    if (before_dot.count('0'..'9') > 3)\n        return \"No\";\n    if (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z')\n        return \"No\";\n    if (after_dot !=\
    \ \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"\
    No\";\n    return \"Yes\";\n}\n/*\nCreate a function which takes a string representing\
    \ a file's name, and returns\n    'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n    A file's name is considered to be valid if and only if\
    \ all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    - The file's name contains\
    \ exactly one dot '.'\n    - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    \    \n*/\nstring file_name_check(string file_name) \n{\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_pos];\n\
    \   ", "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n \
    \       return \"No\";\n    auto dot_pos_end = dot_pos + 1;\n    if (dot_pos ==\
    \ 0)\n        return \"No\";\n    if (file_name[dot_pos_end] == '\\0')\n     \
    \   return \"No\";\n    auto digits_count = 0;\n    for (int i = 0; i < dot_pos;\
    \ i++)\n    {\n        if (file_name[i] >= '0' && file_name[i] <= '9')\n     \
    \       digits_count++;\n        if (digits_count > 3)\n            return \"\
    No\";\n    }\n    auto file_type = file_name.slice(dot_pos_end);\n    if (file_type\
    \ == \"txt\" || file_type == \"exe\" || file_type == \"dll\")\n        return\
    \ \"Yes\";\n    return \"No\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string extension = file_name[dot_index +\
    \ 1 .. $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    string name = file_name[0 .. dot_index];\n    if\
    \ (name.length == 0 || !(name[0] >= 'a' && name[0] <= 'z' || name[0] >= 'A' &&\
    \ name[0] <= 'Z'))\n        return \"No\";\n    int count = 0;\n    foreach (c;\
    \ name)\n        if (c >= '0' && c <= '9')\n            count++;\n    if (count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length ==\
    \ 0)\n        return \"No\";\n    if (parts[0].count(\"0123456789\") > 3)\n  \
    \      return \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n     \
    \   return \"No\";\n    if (valid_extensions.indexOf(parts[1]) == -1)\n      \
    \  return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    string extension = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(char c; name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count >\
    \ 3)\n        return \"No\";\n    if(!(extension in valid_extensions))\n     \
    \   return \"No\";\n    if(name.length == 0)\n        return \"No\";\n    if(!(name[0]\
    \ >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto extension = file_name.substr(dot_index\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    auto name = file_name.substr(0, dot_index);\n\
    \    if (name.length == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0]\
    \ > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\";\n    if (name.count('0')\
    \ + name.count('1') + name.count('2') + name.count('3') + name.count('4') + name.count('5')\
    \ + name.count('6') + name.count('7') + name.count('8') + name.count('9') > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find(\"\
    .\");\n    if (dot_index == -1)\n        return \"No\";\n    string before_dot\
    \ = file_name[0..dot_index];\n    string after_dot = file_name[dot_index + 1..$];\n\
    \    if (before_dot.length == 0 || !isLetter(before_dot[0]))\n        return \"\
    No\";\n    if (after_dot.length == 0 || after_dot.length > 3)\n        return\
    \ \"No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot !=\
    \ \"dll\")\n        return \"No\";\n    int digits_count = 0;\n    foreach (c;\
    \ before_dot)\n    {\n        if (isDigit(c))\n            digits_count++;\n \
    \   }\n    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int\
    \ dot_index = file_name.find(\".\");\n    string name = file_name[0..dot_index];\n\
    \    string extension = file_name[dot_index+1..$];\n    if(name.length == 0 ||\
    \ name[0] < 'a' || name[0] > 'z')\n        return \"No\";\n    if(extension.length\
    \ == 0 || !valid_extensions.canFind(extension))\n        return \"No\";\n    int\
    \ digits_count = 0;\n    foreach(c; name)\n        if(c >= '0' && c <= '9')\n\
    \            digits_count++;\n    if(digits_count > 3)\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] file_name_split = file_name.split(\".\");\n    if (file_name_split.length\
    \ != 2)\n        return \"No\";\n    if (file_name_split[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_split[0].filter!(a => a >= '0' && a <=\
    \ '9').length > 3)\n        return \"No\";\n    if (file_name_split[0][0] < 'a'\
    \ || file_name_split[0][0] > 'z' && file_name_split[0][0] < 'A' || file_name_split[0][0]\
    \ > 'Z')\n        return \"No\";\n    if (valid_extensions.filter!(a => a == file_name_split[1]).length\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1) return \"No\";\n    auto sub_str_before_dot\
    \ = file_name[0..dot_pos];\n    auto sub_str_after_dot = file_name[dot_pos+1..$];\n\
    \    if (sub_str_before_dot.count!(a => a.isDigit) > 3) return \"No\";\n    if\
    \ (sub_str_before_dot.empty || !sub_str_before_dot[0].isLetter) return \"No\"\
    ;\n    if (sub_str_after_dot != \"txt\" && sub_str_after_dot != \"exe\" && sub_str_after_dot\
    \ != \"dll\") return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].filter!(c => c.isDigit).length\
    \ > 3)\n        return \"No\";\n    if (file_name_parts[0][0].isDigit)\n     \
    \   return \"No\";\n    if (valid_extensions.indexOf(file_name_parts[1]) == -1)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto extension = file_name[dot_index+1..$];\n\
    \    if (extension.length == 0 || !valid_extensions.canFind(extension))\n    \
    \    return \"No\";\n    auto name = file_name[0..dot_index];\n    if (name.length\
    \ == 0 || !isAlpha(name[0]))\n        return \"No\";\n    if (name.count!(c =>\
    \ isDigit(c)) > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int\
    \ dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits_count\
    \ = 0;\n    foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n \
    \           digits_count++;\n    }\n    if(digits_count > 3)\n        return \"\
    No\";\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"\
    dll\")\n        return \"No\";\n    if(name.length == 0)\n        return \"No\"\
    ;\n    if(name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count('0', '9') >\
    \ 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count = 0;\n\
    \    int digit_count = 0;\n    bool valid = true;\n    foreach(c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n        }\n\
    \        else if('0' <= c && c <= '9')\n        {\n            digit_count++;\n\
    \        }\n    }\n    if(dot_count != 1 || digit_count > 3)\n    {\n        valid\
    \ = false;\n    }\n    else\n    {\n        string[] parts = file_name.split(\"\
    .\");\n        if(parts[0].length == 0 || !('a' <= parts[0][0] && parts[0][0]\
    \ <= 'z') && !('A' <= parts[0][0] && parts[0][0] <= 'Z'))\n        {\n       \
    \     valid = false;\n        }\n        else if(parts[1] != \"txt\" && parts[1]\
    \ != \"exe\" && parts[1] != \"dll\")\n        {\n            valid = false;\n\
    \        }\n    }\n    return valid ? \"Yes\" : \"No\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = split(file_name,\
    \ \".\");\n    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length\
    \ == 0)\n        return \"No\";\n    if (parts[0].length > 3)\n        return\
    \ \"No\";\n    if (valid_extensions.indexOf(parts[1]) == -1)\n        return \"\
    No\";\n    if (!isAlpha(parts[0][0]))\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_split = file_name.split(\".\");\n    if (file_name_split.length !=\
    \ 2)\n        return \"No\";\n    if (file_name_split[0].length == 0)\n      \
    \  return \"No\";\n    if (file_name_split[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (file_name_split[0][0] < 'a' || file_name_split[0][0] > 'z')\n\
    \        return \"No\";\n    if (valid_extensions.find(file_name_split[1]) ==\
    \ -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot = 0;\n    string[] valid_ext = [\"txt\", \"exe\", \"dll\"];\n   \
    \ string[] file_name_split = file_name.split(\".\");\n    foreach(char c; file_name_split[0])\n\
    \    {\n        if(c >= '0' && c <= '9')\n            count++;\n    }\n    if(count\
    \ > 3)\n        return \"No\";\n    if(file_name_split.length != 2)\n        return\
    \ \"No\";\n    if(file_name_split[0].length == 0)\n        return \"No\";\n  \
    \  if(!(file_name_split[0][0] >= 'a' && file_name_split[0][0] <= 'z') && !(file_name_split[0][0]\
    \ >= 'A' && file_name_split[0][0] <= 'Z'))\n        return \"No\";\n    foreach(string\
    \ s; valid_ext)\n    {\n        if(s == file_name_split[1])\n            dot =\
    \ 1;\n    }\n    if(dot == 0)\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return\
    \ \"No\";\n    if (dot_pos == 0)\n        return \"No\";\n    if (file_name.count('.')\
    \ != 1)\n        return \"No\";\n    if (file_name[dot_pos + 1..$].count('0','1','2','3','4','5','6','7','8','9')\
    \ > 3)\n        return \"No\";\n    if (file_name[0..dot_pos].count('0','1','2','3','4','5','6','7','8','9')\
    \ > 0)\n        return \"No\";\n    if (file_name[dot_pos + 1..$] != \"txt\" &&\
    \ file_name[dot_pos + 1..$] != \"exe\" && file_name[dot_pos + 1..$] != \"dll\"\
    )\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length ==\
    \ 0)\n        return \"No\";\n    if (parts[0].filter!(c => c.isDigit).length\
    \ > 3)\n        return \"No\";\n    if (!parts[0].front.isLetter)\n        return\
    \ \"No\";\n    if (!valid_extensions.any!(ext => ext == parts[1]))\n        return\
    \ \"No\";\n    return \"Yes\";\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
