name: HumanEval_133_sum_squares
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
  \    You need to return the sum of squared numbers in the given list,\n    round\
  \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n   \
  \ For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should\
  \ be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0]\
  \ the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n   \
  \ \n\n    \n*/\nlong sum_squares(float[] lst) \n"
tests: "unittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
  \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
  \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n   \
  \ assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
  \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
  \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9,\
  \ 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
  \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
