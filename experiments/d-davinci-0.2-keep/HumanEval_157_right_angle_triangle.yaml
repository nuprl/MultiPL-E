name: HumanEval_157_right_angle_triangle
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return True if the three\n    sides form a right-angled\
  \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3,\
  \ 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \n*/\nbool right_angle_triangle(long\
  \ a, long b, long c) \n"
tests: "unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
  \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
  \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
  \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
  \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
  \ 2L, 10L) == false);\n}\nvoid main(){}"
completions: ["{\n    // your code here\n    return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n}", "{\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return (a * a + b * b == c\
    \ * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    //\
    \ your code here\n    return a*a + b*b == c*c;\n}", "{\n    return (a > 0 && b\
    \ > 0 && c > 0) && (a * a + b * b == c * c || a * a + c * c == b * b || b * b\
    \ + c * c == a * a);\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max =\
    \ maxElement(sides);\n    auto sum = a + b + c;\n    auto max_index = indexOf(sides,\
    \ max);\n    auto other_sides = sides[0..max_index] ~ sides[max_index+1..$];\n\
    \    return max * max == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n\
    }", "{\n    // your code here\n    return a*a + b*b == c*c;\n}", "{\n    return\
    \ a*a + b*b == c*c;\n}", "{\n    return a*a + b*b == c*c;\n}", "{\n    // your\
    \ code here\n    return false;\n}", "{\n    // TODO: Write your code here\n  \
    \  return false;\n}", "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a);\n}", "{\n    // TODO: implement\n    return false;\n}",
  "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto\
    \ other_sides = sides.filter!(x => x != max_side);\n    return max_side * max_side\
    \ == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n}", "{\n\
    \    // TODO: implement\n    // return true;\n    // return false;\n    // return\
    \ a == b && b == c;\n    // return a == b || b == c || a == c;\n    // return\
    \ a != b && b != c && a != c;\n    // return a == b && b == c && a == c;\n   \
    \ // return a != b || b != c || a != c;\n    // return a == b || b == c || a ==\
    \ c || a != b || b != c || a != c;\n    // return a == b && b == c || a != b &&\
    \ b != c && a != c;\n    // return a == b && b == c || a != b || b != c || a !=\
    \ c;\n    // return a == b || b == c || a == c && a != b || b != c || a != c;\n\
    \    // return a == b || b == c || a == c && a != b && b != c && a != c;\n   \
    \ // return a == b || b == c || a == c && a != b && b != c || a != c;\n    //\
    \ return a == b || b == c || a == c && a != b || b != c && a != c;\n    // return\
    \ a == b || b == c || a == c && a != b || b != c || a != c;\n    // return a ==\
    \ b || b == c || a == c && a != b || b != c || a != c;\n    // return a == b ||\
    \ b == c || a == c && a != b || b != c || a != c;\n    // return a == b || b ==\
    \ c || a == c && a != b || b != c || a != c;\n    // return a == b || b == c ||\
    \ a == c && a != b || b != c || a != c;\n    // return a == b || b == c || a ==\
    \ c && a != b || b != c || a != c;\n    // return a == b || b == c || a == c &&\
    \ a != b || b != c || a != c;\n    // return a == b || b == c || a == c && a !=\
    \ b || b != c || a != c;\n    //", "{\n    // your code here\n    return false;\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    //return (a*a + b*b\
    \ == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n    return (a*a + b*b\
    \ == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    // your code\
    \ here\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n}", "{\n    auto sides = tuple(a, b, c);\n \
    \   sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    // return a*a + b*b == c*c;\n    // return a*a + b*b\
    \ == c*c || a*a + c*c == b*b || b*b + c*c == a*a;\n    // return a*a + b*b ==\
    \ c*c || a*a + c*c == b*b || b*b + c*c == a*a;\n    // return a*a + b*b == c*c\
    \ || a*a + c*c == b*b || b*b + c*c == a*a;\n    // return a*a + b*b == c*c ||\
    \ a*a + c*c == b*b || b*b + c*c == a*a;\n    // return a*a + b*b == c*c || a*a\
    \ + c*c == b*b || b*b + c*c == a*a;\n    // return a*a + b*b == c*c || a*a + c*c\
    \ == b*b || b*b + c*c == a*a;\n    // return a*a + b*b == c*c || a*a + c*c ==\
    \ b*b || b*b + c*c == a*a;\n    // return a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a;\n    // return a*a + b*b == c*c || a*a + c*c == b*b ||\
    \ b*b + c*c == a*a;\n    // return a*a + b*b == c*c || a*a + c*c == b*b || b*b\
    \ + c*c == a*a;\n    // return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c\
    \ == a*a;\n    // return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c ==\
    \ a*a;\n    // return a*a + b*b == c*", "{\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    // your code here\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto sum_of_other_sides\
    \ = sum(sides) - max_side;\n    return max_side * max_side == sum_of_other_sides\
    \ * sum_of_other_sides;\n}", "{\n    // your code here\n    return (a*a + b*b\
    \ == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return a *\
    \ a + b * b == c * c;\n}", "{\n    return (a*a + b*b == c*c) || (a*a + c*c ==\
    \ b*b) || (b*b + c*c == a*a);\n}", "{\n    return a * a + b * b == c * c;\n}",
  "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n\
    }", "{\n    //return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c ==\
    \ a*a);\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c ==\
    \ a*a);\n}", "{\n    // your code here\n    auto sides = tuple(a, b, c);\n   \
    \ auto sorted_sides = sort(sides);\n    auto max_side = sorted_sides[2];\n   \
    \ auto other_sides = sorted_sides[0..2];\n    return max_side * max_side == other_sides[0]\
    \ * other_sides[0] + other_sides[1] * other_sides[1];\n}", "{\n    return (a *\
    \ a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }", "{\n    // your code here\n    return (a * a + b * b == c * c) || (a * a +\
    \ c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    auto sides = tuple(a, b, c);\n\
    \    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x => x\
    \ != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    // your code here\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto other_sides\
    \ = sides.filter!(x => x != max_side);\n    return max_side * max_side == other_sides[0]\
    \ * other_sides[0] + other_sides[1] * other_sides[1];\n}", "{\n    return (a*a\
    \ + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    // TODO:\
    \ Implement me\n    return false;\n}", "{\n    long[] sides = [a, b, c];\n   \
    \ sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    // your code here\n    return (a*a + b*b == c*c) ||\
    \ (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto maxSide = max(sides);\n    auto otherSides = sides.filter!(x\
    \ => x != maxSide);\n    return maxSide * maxSide == otherSides[0] * otherSides[0]\
    \ + otherSides[1] * otherSides[1];\n}", "{\n    // your code here\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  auto sides = tuple(a, b, c);\n    return (sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]) ||\n           (sides[0] * sides[0] + sides[2]\
    \ * sides[2] == sides[1] * sides[1]) ||\n           (sides[1] * sides[1] + sides[2]\
    \ * sides[2] == sides[0] * sides[0]);\n}", "{\n    // TODO: Implement me\n   \
    \ // return false;\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b\
    \ + c*c == a*a);\n}", "{\n    // your code here\n    return (a*a + b*b == c*c)\
    \ || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    auto sides = tuple(a, b, c);\n\
    \    auto max = maxElement(sides);\n    auto sum = sum(sides) - max;\n    return\
    \ max * max == sum * sum;\n}", "{\n    // your code here\n    return false;\n}",
  "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto\
    \ other_sides = sides.filter!(x => x != max_side);\n    return max_side * max_side\
    \ == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2)\
    \ + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    return (a*a + b*b == c*c)\
    \ || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return (a*a + b*b\
    \ == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    auto sides\
    \ = tuple(a, b, c);\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    // your code here\n    return (a*a + b*b\
    \ == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return (a*a\
    \ + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  auto sides = tuple(a, b, c);\n    auto max = maxElement(sides);\n    auto sum\
    \ = reduce!((a, b) => a + b)(sides);\n    return pow(max, 2) == sum - pow(max,\
    \ 2);\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b)\
    \ || (b * b + c * c == a * a);\n}", "{\n    // Your code here\n    return (a*a\
    \ + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    // sort\
    \ the sides\n    auto sides = tuple(a, b, c).sort!((x, y) => x > y);\n    // check\
    \ if the square of the largest side is equal to the sum of the squares of the\
    \ other two sides\n    return sides[0] * sides[0] == sides[1] * sides[1] + sides[2]\
    \ * sides[2];\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c ==\
    \ b * b) || (b * b + c * c == a * a);\n}", "{\n    // your code here\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    long a2 = sides[0] * sides[0];\n \
    \   long b2 = sides[1] * sides[1];\n    long c2 = sides[2] * sides[2];\n    return\
    \ a2 + b2 == c2;\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c *\
    \ c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return (a*a + b*b == c*c)\
    \ || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max = maxElement(sides);\n    auto sum = a + b + c;\n    return\
    \ (sum - max) > max;\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side\
    \ = max(sides);\n    auto other_sides = sides.filter!(x => x != max_side);\n \
    \   return max_side * max_side == other_sides[0] * other_sides[0] + other_sides[1]\
    \ * other_sides[1];\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side\
    \ = max(sides);\n    auto sum_of_other_sides = sum(sides) - max_side;\n    return\
    \ max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n}", "{\n  \
    \  // TODO: implement this function\n    // return true if the three sides form\
    \ a right-angled triangle, false otherwise\n    // a right-angled triangle is\
    \ a triangle in which one angle is right angle or 90 degree\n    // a^2 + b^2\
    \ = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n\
    \    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    //\
    \ a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2\
    \ + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2\
    \ = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n\
    \    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    //\
    \ a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2\
    \ + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2\
    \ = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n\
    \    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2", "{\n\
    \    return a*a + b*b == c*c;\n}", "{\n    auto sides = tuple(a, b, c);\n    sort(sides);\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    // your code here\n    long max = max(a, max(b, c));\n    long sum = a +\
    \ b + c;\n    return max * max == sum - max * max;\n}", "{\n    // TODO: implement\n\
    \    //return true;\n    //return false;\n    //return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n    //return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n    //return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n    //return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n    //return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n    //return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n    //return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n    //return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n    //return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n    //return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n    //return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c ==", "{\n    return (a * a + b * b == c * c) ||\
    \ (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    auto sides\
    \ = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    return (a*a + b*b == c*c) ||\
    \ (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto sorted = sort(sides);\n    auto c2 = pow(sorted[2], 2);\n \
    \   auto a2 = pow(sorted[0], 2);\n    auto b2 = pow(sorted[1], 2);\n    return\
    \ c2 == a2 + b2;\n}", "{\n    auto sides = tuple(a, b, c);\n    sort(sides);\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    return a*a + b*b == c*c;\n}", "{\n    auto sides = tuple(a, b, c);\n    auto\
    \ max_side = max(sides);\n    auto other_sides = sides.filter!(x => x != max_side);\n\
    \    return max_side * max_side == other_sides[0] * other_sides[0] + other_sides[1]\
    \ * other_sides[1];\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c\
    \ * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max = maxElement(sides);\n    auto sum = reduce!((a, b) =>\
    \ a + b)(sides);\n    return max * max == sum - max * max;\n}", "{\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  return a * a + b * b == c * c;\n}", "{\n    // TODO: Implement me!\n    return\
    \ false;\n}", "{\n    long max = max(a, max(b, c));\n    long min = min(a, min(b,\
    \ c));\n    long mid = a + b + c - max - min;\n    return max * max == min * min\
    \ + mid * mid;\n}", "{\n    // We need to check if the sum of the squares of the\
    \ two shorter sides\n    // is equal to the square of the longest side.\n    //\
    \ We need to sort the sides first.\n    auto sides = tuple(a, b, c);\n    sides.sort();\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    auto sides = tuple(a, b, c);\n    auto max = maxElement(sides);\n    auto\
    \ sum = a + b + c;\n    auto max_side = sum - max;\n    return max * max == max_side\
    \ * max_side;\n}", "{\n    // sort the sides\n    auto sides = tuple(a, b, c).sort();\n\
    \    // Pythagorean theorem\n    return pow(sides[0], 2) + pow(sides[1], 2) ==\
    \ pow(sides[2], 2);\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side\
    \ = max(sides);\n    auto sum_of_other_sides = reduce!((a, b) => a + b)(sides);\n\
    \    return max_side * max_side == sum_of_other_sides - max_side * max_side;\n\
    }", "{\n    // return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c ==\
    \ a*a);\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c ==\
    \ a*a);\n}", "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b +\
    \ c*c == a*a);\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c\
    \ == b * b) || (b * b + c * c == a * a);\n}", "{\n    return a * a + b * b ==\
    \ c * c;\n}", "{\n    return a * a + b * b == c * c;\n}", "{\n    // your code\
    \ here\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    return sides.max == sides.min +\
    \ sides.middle;\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c\
    \ == b * b) || (b * b + c * c == a * a);\n}", "{\n    return (a * a + b * b ==\
    \ c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n  \
    \  return a*a + b*b == c*c;\n}", "{\n    return (a * a + b * b == c * c) || (a\
    \ * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return (a *\
    \ a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    return a * a + b * b == c * c;\n}", "{\n\
    \    // sort the array\n    auto arr = [a, b, c];\n    sort(arr);\n    // check\
    \ if the square of the largest side is equal to the sum of the squares of the\
    \ other two sides\n    return arr[2] * arr[2] == arr[0] * arr[0] + arr[1] * arr[1];\n\
    }", "{\n    return a * a + b * b == c * c;\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) ==\
    \ pow(sides[2], 2);\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c\
    \ * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    // return a*a + b*b\
    \ == c*c;\n    return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a;\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n  \
    \  auto other_sides = sides.filter!(s => s != max_side);\n    return max_side\
    \ * max_side == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n  \
    \  auto other_sides = sides.filter!(x => x != max_side);\n    return max_side\
    \ * max_side == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n\
    }", "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n\
    }", "{\n    // TODO: Implement me!\n    return false;\n}", "{\n    // TODO: implement\n\
    \    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}",
  "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b +\
    \ c * c == a * a);\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c\
    \ * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    // your code here\n\
    \    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}",
  "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto\
    \ other_sides = sides.filter!(x => x != max_side);\n    return max_side * max_side\
    \ == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n}", "{\n\
    \    if(a == 0 || b == 0 || c == 0) return false;\n    if(a < 0 || b < 0 || c\
    \ < 0) return false;\n    if(a == b && b == c) return false;\n    if(a == b ||\
    \ b == c || a == c) return false;\n    if(a > b && a > c) return a*a == b*b +\
    \ c*c;\n    if(b > a && b > c) return b*b == a*a + c*c;\n    if(c > a && c > b)\
    \ return c*c == a*a + b*b;\n    return false;\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    return (a*a + b*b == c*c) ||\
    \ (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    // Your code here\n    return (a*a + b*b == c*c) ||\
    \ (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return a*a + b*b == c*c;\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n  \
    \  auto other_sides = sides.filter!(x => x != max_side);\n    return max_side\
    \ * max_side == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n\
    }", "{\n    // TODO: Implement this function\n    return false;\n}", "{\n    auto\
    \ sides = [a, b, c];\n    auto max_side = max(a, max(b, c));\n    auto sum_of_other_sides\
    \ = accumulate(sides, 0, (x, y) => x + y) - max_side;\n    return max_side * max_side\
    \ == sum_of_other_sides * sum_of_other_sides;\n}", "{\n    auto sides = [a, b,\
    \ c];\n    auto max = maxElement(sides);\n    auto sum = a + b + c;\n    return\
    \ (sum - max) > max;\n}", "{\n    // your code here\n    return false;\n}", "{\n\
    \    auto sides = tuple(a, b, c);\n    auto sorted = sort(sides);\n    auto a2\
    \ = pow(sorted[0], 2);\n    auto b2 = pow(sorted[1], 2);\n    auto c2 = pow(sorted[2],\
    \ 2);\n    return a2 + b2 == c2;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2)\
    \ + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    // your code here\n   \
    \ return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}",
  "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2)\
    \ + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    auto sides = tuple(a, b,\
    \ c);\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2],\
    \ 2);\n}", "{\n    auto sides = [a, b, c];\n    auto max = maxElement(sides);\n\
    \    auto sum = a + b + c;\n    return (sum - max) > max;\n}", "{\n    // your\
    \ code here\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c\
    \ == a*a);\n}", "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b\
    \ + c*c == a*a);\n}", "{\n    //return a*a + b*b == c*c;\n    return a*a + b*b\
    \ == c*c || a*a + c*c == b*b || b*b + c*c == a*a;\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    auto sides = tuple(a, b, c);\n\
    \    auto max_side = max(sides);\n    auto min_side = min(sides);\n    auto mid_side\
    \ = sides[1];\n    if (min_side + mid_side > max_side)\n    {\n        return\
    \ max_side * max_side == min_side * min_side + mid_side * mid_side;\n    }\n \
    \   return false;\n}", "{\n    // TODO: implement this function\n    return false;\n\
    }", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    // your code here\n    long[] arr = [a,\
    \ b, c];\n    sort(arr);\n    return arr[0] * arr[0] + arr[1] * arr[1] == arr[2]\
    \ * arr[2];\n}", "{\n    // your code here\n    return a*a + b*b == c*c;\n}",
  "{\n    // TODO: Implement me\n    //return true;\n    long max = max(max(a,b),c);\n\
    \    long sum = a+b+c;\n    return (max*max) == (sum-max)*(sum-max);\n}", "{\n\
    \    long max = max(a, max(b, c));\n    long min = min(a, min(b, c));\n    long\
    \ mid = a + b + c - max - min;\n    return max * max == mid * mid + min * min;\n\
    }", "{\n    // your code here\n    return false;\n}", "{\n    // your code here\n\
    \    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}",
  "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    return (a*a + b*b ==\
    \ c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    long max = max(a,\
    \ max(b, c));\n    long min = min(a, min(b, c));\n    long mid = a + b + c - max\
    \ - min;\n    return max * max == min * min + mid * mid;\n}", "{\n    //return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  return a * a + b * b == c * c;\n}", "{\n    auto sides = tuple(a, b, c);\n\
    \    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x => x\
    \ != max_side);\n    auto sum_of_other_sides = reduce!((a, b) => a + b)(other_sides);\n\
    \    return max_side * max_side == sum_of_other_sides;\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    // your code here\n    return (a * a +\
    \ b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}",
  "{\n    long max = max(a, max(b, c));\n    long min = min(a, min(b, c));\n    long\
    \ mid = a + b + c - max - min;\n    return max * max == min * min + mid * mid;\n\
    }", "{\n    return a*a + b*b == c*c;\n}", "{\n    return a > 0 && b > 0 && c >\
    \ 0 && (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a\
    \ * a);\n}", "{\n    return a*a + b*b == c*c;\n}", "{\n    // Your code here\n\
    \    return (a > 0 && b > 0 && c > 0) && (a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a);\n}", "{\n    // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n    // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n    // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n    // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n    // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n    // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n    // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n    // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n    // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n    // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n    // return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n    // return (a*a + b*b == c*", "{\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  return a*a + b*b == c*c;\n}", "{\n    // your code here\n    return (a*a +\
    \ b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  long max = max(a, max(b, c));\n    long sum = a + b + c;\n    return max *\
    \ max == sum - max;\n}", "{\n    // TODO: Implement me!\n    return false;\n}",
  "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2)\
    \ + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    auto sides = tuple(a, b,\
    \ c);\n    auto max_side = max(sides);\n    auto sum_of_other_sides = sum(sides)\
    \ - max_side;\n    return max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    // return a*a + b*b\
    \ == c*c;\n    return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a;\n\
    }", "{\n    // TODO: Implement me!\n    return false;\n}", "{\n    return (a*a\
    \ + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return\
    \ (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a\
    \ * a);\n}", "{\n    // your code here\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    auto sides = tuple(a, b, c);\n\
    \    auto max = maxElement(sides);\n    auto sum = a + b + c;\n    return (sum\
    \ - max) > max;\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side =\
    \ max(sides);\n    auto other_sides = sides.filter!(x => x != max_side);\n   \
    \ return max_side * max_side == other_sides[0] * other_sides[0] + other_sides[1]\
    \ * other_sides[1];\n}", "{\n    return a*a + b*b == c*c;\n}", "{\n    long max\
    \ = max(a, max(b, c));\n    long min = min(a, min(b, c));\n    long mid = a +\
    \ b + c - max - min;\n    return max * max == mid * mid + min * min;\n}", "{\n\
    \    long max = max(a, max(b, c));\n    long sum = a + b + c;\n    return max\
    \ * max == sum - max;\n}", "{\n    return (a*a + b*b == c*c) || (a*a + c*c ==\
    \ b*b) || (b*b + c*c == a*a);\n}", "{\n    return a * a + b * b == c * c;\n}",
  "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2)\
    \ + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    return (a*a + b*b == c*c)\
    \ || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return (a * a + b\
    \ * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}",
  "{\n    long max = max(a, max(b, c));\n    long min = min(a, min(b, c));\n    long\
    \ mid = a + b + c - max - min;\n    return max * max == mid * mid + min * min;\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n  \
    \  auto other_sides = sides.filter!(x => x != max_side);\n    auto sum_of_other_sides\
    \ = other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n    return\
    \ max_side * max_side == sum_of_other_sides;\n}", "{\n    long[] sides = [a, b,\
    \ c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2],\
    \ 2);\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n\
    \    auto sum_of_other_sides = sum(sides) - max_side;\n    return max_side * max_side\
    \ == sum_of_other_sides * sum_of_other_sides;\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) ==\
    \ pow(sides[2], 2);\n}", "{\n    // your code here\n    return (a*a + b*b == c*c)\
    \ || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto sides_without_max = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == sides_without_max[0] *\
    \ sides_without_max[0] + sides_without_max[1] * sides_without_max[1];\n}", "{\n\
    \    auto sides = tuple(a, b, c);\n    return sides.max == sides.hypotenuse &&\
    \ sides.min.pow(2) + sides.mid.pow(2) == sides.hypotenuse.pow(2);\n}", "{\n  \
    \  // your code here\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b\
    \ + c*c == a*a);\n}", "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
