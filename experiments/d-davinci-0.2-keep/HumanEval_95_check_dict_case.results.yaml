name: HumanEval_95_check_dict_case
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n   \
    \     if(!isLower(key)) is_lower = false;\n        if(!isUpper(key)) is_upper\
    \ = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9y_19o6j.d(24): Error: undefined identifier `isLower`, did you\
    \ mean variable `is_lower`?\\n/tmp/tmp9y_19o6j.d(25): Error: undefined identifier\
    \ `isUpper`, did you mean variable `is_upper`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9y_19o6j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (k,v; dict)\n    {\n      \
    \  if (k.isUpper) all_lower = false;\n        if (k.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5gq5xxu9.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp5gq5xxu9.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5gq5xxu9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.isUpper) all_lower = false;\n        if(key.isLower) all_upper =\
    \ false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk7ovf585.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpk7ovf585.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7ovf585.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.isUpper) is_lower = false;\n        if (key.isLower) is_upper =\
    \ false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ka4c53u.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp8ka4c53u.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ka4c53u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool isLower\
    \ = true;\n    bool isUpper = true;\n    foreach(key; dict.keys)\n    {\n    \
    \    if(key.isUpper) isLower = false;\n        if(key.isLower) isUpper = false;\n\
    \    }\n    return isLower || isUpper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptyvzlfka.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmptyvzlfka.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptyvzlfka.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      all_lower &= key.isLower;\n        all_upper &= key.isUpper;\n    }\n \
    \   return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwrhzku3d.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpwrhzku3d.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrhzku3d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp9gov6u0.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpp9gov6u0.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp9gov6u0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt31r0ugt.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpt31r0ugt.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt31r0ugt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1y_bv9bu.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp1y_bv9bu.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1y_bv9bu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpta7f_904.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpta7f_904.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpta7f_904.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool isLower = true;\n    bool isUpper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            isLower = false;\n        if (key.isLower)\n\
    \            isUpper = false;\n    }\n    return isLower || isUpper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwjedmn6i.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpwjedmn6i.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwjedmn6i.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            all_lower = false;\n        }\n        else if (key.isLower)\
    \ \n        {\n            all_upper = false;\n        }\n        else \n    \
    \    {\n            return false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe9mghdyj.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpe9mghdyj.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe9mghdyj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpopr669c3.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpopr669c3.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpopr669c3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n     \
    \   if (k.isUpper) all_lower = false;\n        if (k.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7wru9dwe.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp7wru9dwe.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7wru9dwe.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.length == 0)\n            return false;\n        if (key[0].isUpper)\n\
    \            is_lower = false;\n        if (key[0].isLower)\n            is_upper\
    \ = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp49bgscor.d(28): Error: no property `isUpper` for type `immutable(char)`\\\
    n/tmp/tmp49bgscor.d(30): Error: no property `isLower` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49bgscor.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n        {\n            all_lower = false;\n        }\n\
    \        else\n        {\n            all_upper = false;\n        }\n    }\n \
    \   return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1qvu0qvf.d(24): Error: no property `isUpper` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1qvu0qvf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp90ytu53s.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp90ytu53s.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90ytu53s.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (is_lower && !isLower(key)) is_lower = false;\n        if (is_upper\
    \ && !isUpper(key)) is_upper = false;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaifcsaub.d(24): Error: undefined identifier `isLower`, did you\
    \ mean variable `is_lower`?\\n/tmp/tmpaifcsaub.d(25): Error: undefined identifier\
    \ `isUpper`, did you mean variable `is_upper`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpaifcsaub.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper)\n            all_lower = false;\n        if(key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptetwc3ox.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmptetwc3ox.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptetwc3ox.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool isLower = true;\n    bool isUpper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            isLower = false;\n        if (key.isLower)\n\
    \            isUpper = false;\n    }\n    return isLower || isUpper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp17y82wzk.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp17y82wzk.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17y82wzk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpev69fgtt.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpev69fgtt.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpev69fgtt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    bool lower = true;\n    bool upper = true;\n   \
    \ foreach (key; dict.keys) \n    {\n        if (key.isUpper) upper = false;\n\
    \        if (key.isLower) lower = false;\n    }\n    return lower || upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_jpe5th3.d(23): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp_jpe5th3.d(24): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_jpe5th3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    foreach(key; dict.keys)\n    {\n        if(key.isUpper) all_lower = false;\n\
    \        if(key.isLower) all_upper = false;\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp22k8ynrm.d(23): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp22k8ynrm.d(24): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22k8ynrm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (k,v; dict)\n\
    \    {\n        if (k.length == 0)\n            return false;\n        if (k[0].isUpper)\n\
    \            all_lower = false;\n        if (k[0].isLower)\n            all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1q_kgrv8.d(28): Error: no property `isUpper` for type `immutable(char)`\\\
    n/tmp/tmp1q_kgrv8.d(30): Error: no property `isLower` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1q_kgrv8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool isUpper\
    \ = true;\n    bool isLower = true;\n    foreach(key; dict.keys)\n    {\n    \
    \    if(key.isUpper) isLower = false;\n        if(key.isLower) isUpper = false;\n\
    \    }\n    return isUpper || isLower;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkuq6smts.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpkuq6smts.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkuq6smts.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      is_lower = is_lower && islower(key);\n        is_upper = is_upper && isupper(key);\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuiqs_ggr.d(24): Error: undefined identifier `islower`, did you\
    \ mean variable `is_lower`?\\n/tmp/tmpuiqs_ggr.d(25): Error: undefined identifier\
    \ `isupper`, did you mean variable `is_upper`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpuiqs_ggr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool is_upper = true;\n    bool is_lower\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            is_lower = false;\n        }\n        else if (key.isLower)\
    \ \n        {\n            is_upper = false;\n        }\n        else \n     \
    \   {\n            return false;\n        }\n    }\n    return is_upper || is_lower;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe9ypkesx.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpe9ypkesx.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe9ypkesx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (k, v; dict)\n    {\n        is_lower = is_lower && k.isLower;\n\
    \        is_upper = is_upper && k.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu6246l8d.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpu6246l8d.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6246l8d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            is_lower = false;\n        }\n        if (key.isLower)\
    \ \n        {\n            is_upper = false;\n        }\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp58p4t7mi.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp58p4t7mi.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58p4t7mi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        is_lower = is_lower &&\
    \ key.isLower;\n        is_upper = is_upper && key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbggru909.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpbggru909.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbggru909.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool isLower\
    \ = false;\n    bool isUpper = false;\n    foreach (k, v; dict)\n    {\n     \
    \   if (k.isUpper) isUpper = true;\n        if (k.isLower) isLower = true;\n \
    \   }\n    return isLower ^ isUpper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2i2a6v8a.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp2i2a6v8a.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2i2a6v8a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            is_lower = false;\n        }\n        if (key.isLower)\
    \ \n        {\n            is_upper = false;\n        }\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc32mesmn.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpc32mesmn.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc32mesmn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        is_lower = is_lower && key.isLower;\n\
    \        is_upper = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc88xwr2w.d(23): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpc88xwr2w.d(24): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc88xwr2w.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpspfi6xpc.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpspfi6xpc.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpspfi6xpc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg5fzcvec.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpg5fzcvec.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5fzcvec.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper)\n            all_lower = false;\n        if(key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdt_k7xmf.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpdt_k7xmf.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdt_k7xmf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            is_lower = false;\n        }\n        if (key.isLower)\
    \ \n        {\n            is_upper = false;\n        }\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo96bc9tb.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpo96bc9tb.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo96bc9tb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool isUpper\
    \ = true;\n    bool isLower = true;\n    foreach (key; dict.keys) \n    {\n  \
    \      isUpper = isUpper && key.isUpper;\n        isLower = isLower && key.isLower;\n\
    \    }\n    return isUpper || isLower;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv_t7ufs3.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpv_t7ufs3.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_t7ufs3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.isUpper) all_lower = false;\n        if(key.isLower) all_upper =\
    \ false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcvauq3f3.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpcvauq3f3.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvauq3f3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(!isLower(key))\n            all_lower = false;\n        if(!isUpper(key))\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr03tvndc.d(26): Error: undefined identifier `isLower`\\n/tmp/tmpr03tvndc.d(28):\
    \ Error: undefined identifier `isUpper`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpr03tvndc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool isLower = true;\n    bool isUpper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        isLower = isLower && key.isLower;\n\
    \        isUpper = isUpper && key.isUpper;\n    }\n    return isLower || isUpper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppmdejyz2.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmppmdejyz2.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppmdejyz2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool allLower\
    \ = true;\n    bool allUpper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (allLower && key.isUpper) allLower = false;\n        if (allUpper &&\
    \ key.isLower) allUpper = false;\n    }\n    return allLower || allUpper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu9nwnl2l.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpu9nwnl2l.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu9nwnl2l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool lower\
    \ = true;\n    bool upper = true;\n    foreach(key; dict.keys)\n    {\n      \
    \  if(key.isUpper) upper = false;\n        if(key.isLower) lower = false;\n  \
    \  }\n    return lower || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmn3pwm56.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpmn3pwm56.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmn3pwm56.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcqpe6img.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpcqpe6img.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqpe6img.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphu8wj_b8.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmphu8wj_b8.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphu8wj_b8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool isUpper\
    \ = false;\n    bool isLower = false;\n    foreach (key, value; dict)\n    {\n\
    \        if (key.toUpper() == key) isUpper = true;\n        if (key.toLower()\
    \ == key) isLower = true;\n    }\n    return isUpper ^ isLower;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ozg0dde.d(24): Error: no property `toUpper` for type `string`\\\
    n/tmp/tmp1ozg0dde.d(25): Error: no property `toLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ozg0dde.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkb1ckuc5.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpkb1ckuc5.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkb1ckuc5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach(key; dict.keys)\n    {\n \
    \       if(key.isUpper) is_upper = true;\n        if(key.isLower) is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsd7jrjya.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpsd7jrjya.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsd7jrjya.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool isUpper = true;\n    bool isLower\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (isUpper && !key.isUpper)\n\
    \            isUpper = false;\n        if (isLower && !key.isLower)\n        \
    \    isLower = false;\n    }\n    return isUpper || isLower;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl634bu6s.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpl634bu6s.d(26): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl634bu6s.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdu4q98qz.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpdu4q98qz.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdu4q98qz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjycbuh17.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpjycbuh17.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjycbuh17.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach(key; dict.keys)\n    {\n \
    \       if(key.isUpper) is_upper = true;\n        if(key.isLower) is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmcfljldh.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpmcfljldh.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcfljldh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach(key; dict.keys)\n    {\n        is_lower &= key.isLower;\n      \
    \  is_upper &= key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpojlud6ud.d(23): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpojlud6ud.d(24): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpojlud6ud.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n     \
    \   if (k.isUpper) all_lower = false;\n        if (k.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpopf2u82v.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpopf2u82v.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpopf2u82v.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n            lower\
    \ = false;\n        if (key.isLower)\n            upper = false;\n    }\n    return\
    \ lower || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkv6hopcw.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpkv6hopcw.d(26): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkv6hopcw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.isUpper) all_lower = false;\n        if(key.isLower) all_upper =\
    \ false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpidrqrut2.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpidrqrut2.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidrqrut2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        is_lower = is_lower && key.isLower;\n        is_upper = is_upper\
    \ && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n \
    \   alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnki7r9rx.d(26): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpnki7r9rx.d(27): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnki7r9rx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) is_upper = true;\n        if (key.isLower) is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppykzczhq.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmppykzczhq.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppykzczhq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    foreach (k, v; dict)\n    {\n        if (k.isUpper)\n        {\n        \
    \    all_lower = false;\n        }\n        else if (k.isLower)\n        {\n \
    \           all_upper = false;\n        }\n        else\n        {\n         \
    \   return false;\n        }\n    }\n    return all_lower || all_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcy_tbf53.d(23): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpcy_tbf53.d(27): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcy_tbf53.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool isUpper = true;\n    foreach (key; dict.keys)\n    {\n        if (key.length\
    \ == 0)\n            return false;\n        if (isUpper)\n        {\n        \
    \    if (key[0].isLower)\n                isUpper = false;\n        }\n      \
    \  else\n        {\n            if (key[0].isUpper)\n                return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpspahylyx.d(29): Error: no property `isLower` for type `immutable(char)`\\\
    n/tmp/tmpspahylyx.d(34): Error: no property `isUpper` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpspahylyx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\n  \
    \          all_lower = false;\n        else if (key.isLower)\n            all_upper\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyl9szeyx.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpyl9szeyx.d(26): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyl9szeyx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            is_lower = false;\n        }\n        if (key.isLower)\
    \ \n        {\n            is_upper = false;\n        }\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnjvuk2m_.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpnjvuk2m_.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnjvuk2m_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool isUpper = true;\n    bool isLower = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (isUpper && key.isUpper)\n            continue;\n        else\n\
    \            isUpper = false;\n        if (isLower && key.isLower)\n         \
    \   continue;\n        else\n            isLower = false;\n    }\n    return isUpper\
    \ || isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi2couvog.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpi2couvog.d(30): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi2couvog.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n   \
    \     if(!is_lower) break;\n        is_lower = is_lower && key.isLower;\n    }\n\
    \    foreach(key; dict.keys)\n    {\n        if(!is_upper) break;\n        is_upper\
    \ = is_upper && key.isUpper;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphtlfp3oq.d(25): Error: no property `isLower` for type `string`\\\
    n/tmp/tmphtlfp3oq.d(30): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphtlfp3oq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool isLower = true;\n    bool isUpper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        isLower = isLower && key.isLower;\n        isUpper = isUpper &&\
    \ key.isUpper;\n    }\n    return isLower || isUpper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphow6768u.d(26): Error: no property `isLower` for type `string`\\\
    n/tmp/tmphow6768u.d(27): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphow6768u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2jh9ox2l.d(26): Error: no property `isLower` for type `string`\\\
    n/tmp/tmp2jh9ox2l.d(27): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jh9ox2l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper)\n            all_lower = false;\n        if(key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq2hsvcw5.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpq2hsvcw5.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2hsvcw5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool isUpper\
    \ = true;\n    bool isLower = true;\n    foreach (key; dict.keys) \n    {\n  \
    \      isUpper = isUpper && key.isUpper;\n        isLower = isLower && key.isLower;\n\
    \    }\n    return isUpper || isLower;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4j5gxoi1.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp4j5gxoi1.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j5gxoi1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    else if (dict.length ==\
    \ 0) \n    {\n        return false;\n    }\n    else \n    {\n        bool is_upper\
    \ = false;\n        bool is_lower = false;\n        foreach (key, value; dict)\
    \ \n        {\n            if (key.isUpper) \n            {\n                is_upper\
    \ = true;\n            }\n            else if (key.isLower) \n            {\n\
    \                is_lower = true;\n            }\n            else \n        \
    \    {\n                return false;\n            }\n        }\n        return\
    \ is_upper ^ is_lower;\n    }\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv8qwd9c0.d(32): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpv8qwd9c0.d(36): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8qwd9c0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper)\n            all_lower = false;\n        if(key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfox02_2r.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpfox02_2r.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfox02_2r.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    foreach(key; dict.keys)\n    {\n        if(key.length == 0) return\
    \ false;\n        if(is_lower)\n        {\n            if(key[0].isUpper) is_lower\
    \ = false;\n        }\n        else\n        {\n            if(key[0].isLower)\
    \ return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph8zlih6k.d(26): Error: no property `isUpper` for type `immutable(char)`\\\
    n/tmp/tmph8zlih6k.d(30): Error: no property `isLower` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph8zlih6k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else if (key.isLower)\n            all_upper\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6fyt08r3.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp6fyt08r3.d(26): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fyt08r3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach (k, v; dict)\n    {\n    \
    \    if (k.isUpper) is_upper = true;\n        if (k.isLower) is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnhs_021k.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpnhs_021k.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhs_021k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmasl5svv.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpmasl5svv.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmasl5svv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n        if\
    \ (key.isUpper) \n        {\n            all_lower = false;\n        }\n     \
    \   else if (key.isLower) \n        {\n            all_upper = false;\n      \
    \  }\n        else \n        {\n            return false;\n        }\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4fqctcq1.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp4fqctcq1.d(30): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fqctcq1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_upper\
    \ = true;\n    bool all_lower = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.isUpper) all_lower = false;\n        if(key.isLower) all_upper =\
    \ false;\n    }\n    return all_upper || all_lower;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyk2y14j5.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpyk2y14j5.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyk2y14j5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isLower)\n            is_lower = true;\n        if (key.isUpper)\n\
    \            is_upper = true;\n    }\n    return is_lower != is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplj7rc2nk.d(26): Error: no property `isLower` for type `string`\\\
    n/tmp/tmplj7rc2nk.d(28): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplj7rc2nk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool allLower = true;\n    bool allUpper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         allLower = false;\n        else\n            allUpper = false;\n   \
    \ }\n    return allLower || allUpper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7dqv97vc.d(24): Error: no property `isUpper` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dqv97vc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper)\n            is_lower = false;\n        if(key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9yn5dpdw.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp9yn5dpdw.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yn5dpdw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach(k,v; dict)\n\
    \    {\n        if(k.isUpper)\n            all_lower = false;\n        if(k.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt6yih2dj.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpt6yih2dj.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6yih2dj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        is_lower\
    \ &= key.isLower;\n        is_upper &= key.isUpper;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3lxi57xo.d(26): Error: no property `isLower` for type `string`\\\
    n/tmp/tmp3lxi57xo.d(27): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lxi57xo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) is_lower = false;\n        if (key.isLower) is_upper\
    \ = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp91outpxo.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp91outpxo.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp91outpxo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (k, v; dict)\n    {\n      \
    \  is_lower = is_lower && k.isLower;\n        is_upper = is_upper && k.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp904avaph.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmp904avaph.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp904avaph.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool isUpper = false;\n    bool isLower = false;\n    foreach (key, value;\
    \ dict)\n    {\n        if (key.isUpper)\n            isUpper = true;\n      \
    \  if (key.isLower)\n            isLower = true;\n    }\n    return isUpper ^\
    \ isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv0q8zatx.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpv0q8zatx.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0q8zatx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) is_upper = true;\n        if (key.isLower) is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmbf_eged.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpmbf_eged.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbf_eged.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpew6sg833.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpew6sg833.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpew6sg833.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            all_lower = false;\n        }\n        else \n        {\n\
    \            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphmhbra8z.d(30): Error: no property `isUpper` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphmhbra8z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcpxt6tpt.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpcpxt6tpt.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpxt6tpt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) \n    {\n        return false;\n    }\n    if(dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach(k, v; dict) \n    {\n        if(k.length == 0) \n     \
    \   {\n            return false;\n        }\n        if(k.length != k.toLower().length)\
    \ \n        {\n            all_lower = false;\n        }\n        if(k.length\
    \ != k.toUpper().length) \n        {\n            all_upper = false;\n       \
    \ }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzh8wjp_m.d(34): Error: no property `toLower` for type `string`\\\
    n/tmp/tmpzh8wjp_m.d(38): Error: no property `toUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzh8wjp_m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\n  \
    \          all_lower = false;\n        else if (key.isLower)\n            all_upper\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppzhvm726.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmppzhvm726.d(26): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzhvm726.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool isLower = true;\n    bool isUpper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        isLower = isLower && key.isLower;\n        isUpper = isUpper &&\
    \ key.isUpper;\n    }\n    return isLower || isUpper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvdlrt7up.d(26): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpvdlrt7up.d(27): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvdlrt7up.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8hy2l0_q.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp8hy2l0_q.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hy2l0_q.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper)\n            is_lower = false;\n        if(key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqkit3ivp.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpqkit3ivp.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqkit3ivp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_upper = true;\n    bool is_lower = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_upper || is_lower;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvgchnr76.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpvgchnr76.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgchnr76.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd6kaz9r2.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpd6kaz9r2.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6kaz9r2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.isUpper) all_lower = false;\n        if(key.isLower) all_upper =\
    \ false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp44f7tci2.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp44f7tci2.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44f7tci2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0o8v_raf.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp0o8v_raf.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0o8v_raf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.isUpper)\n        {\n            all_lower = false;\n        }\n\
    \        else\n        {\n            all_upper = false;\n        }\n    }\n \
    \   return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsbq0qcja.d(24): Error: no property `isUpper` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbq0qcja.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfjokn8iv.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpfjokn8iv.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjokn8iv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyw3gerba.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpyw3gerba.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyw3gerba.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n            lower\
    \ = false;\n        if (key.isLower)\n            upper = false;\n    }\n    return\
    \ lower || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe0m99yvu.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpe0m99yvu.d(26): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe0m99yvu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcw8yg54a.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpcw8yg54a.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcw8yg54a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    foreach(key; dict.keys)\n    {\n        if(!isLower(key)) is_lower = false;\n\
    \        if(!isUpper(key)) is_upper = false;\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4kbc4ejf.d(23): Error: undefined identifier `isLower`, did you\
    \ mean variable `is_lower`?\\n/tmp/tmp4kbc4ejf.d(24): Error: undefined identifier\
    \ `isUpper`, did you mean variable `is_upper`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4kbc4ejf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool allLower\
    \ = true;\n    bool allUpper = true;\n    foreach(key; dict.keys)\n    {\n   \
    \     if(key.isUpper) allLower = false;\n        if(key.isLower) allUpper = false;\n\
    \    }\n    return allLower || allUpper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2pu8bs5o.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp2pu8bs5o.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2pu8bs5o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool isLower\
    \ = dict.keys[0].isLower;\n    foreach (key; dict.keys)\n    {\n        if (key.isLower\
    \ != isLower) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpab8tlu2i.d(20): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpab8tlu2i.d(23): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpab8tlu2i.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (!isLower(key))\n            all_lower = false;\n        if\
    \ (!isUpper(key))\n            all_upper = false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp72lqy440.d(26): Error: undefined identifier `isLower`\\n/tmp/tmp72lqy440.d(28):\
    \ Error: undefined identifier `isUpper`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp72lqy440.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfi71uwcv.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpfi71uwcv.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfi71uwcv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    foreach(key; dict.keys)\n    {\n \
    \       if(key.isUpper) is_upper = true;\n        if(key.isLower) is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpytugblc_.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpytugblc_.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpytugblc_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool lower\
    \ = false;\n    bool upper = false;\n    foreach(key, value; dict)\n    {\n  \
    \      if(key.isUpper) upper = true;\n        if(key.isLower) lower = true;\n\
    \    }\n    return lower ^ upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk7wh5114.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpk7wh5114.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7wh5114.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) is_lower = false;\n        if (key.isLower) is_upper\
    \ = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5iax8fcn.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp5iax8fcn.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5iax8fcn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n   \
    \     if(key.isUpper) is_lower = false;\n        if(key.isLower) is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_t3jafbl.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp_t3jafbl.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_t3jafbl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (k,v; dict)\n\
    \    {\n        if (k.isUpper)\n            all_lower = false;\n        if (k.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk_5cwsmw.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpk_5cwsmw.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_5cwsmw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.isUpper)\n        {\n            all_lower = false;\n        }\n\
    \        else\n        {\n            all_upper = false;\n        }\n    }\n \
    \   return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45x6omyj.d(24): Error: no property `isUpper` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp45x6omyj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        is_lower = is_lower &&\
    \ key.isLower;\n        is_upper = is_upper && key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq41hjuhv.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpq41hjuhv.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq41hjuhv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    foreach(key; dict.keys)\n    {\n        if(key.isUpper) is_upper = true;\n\
    \        if(key.isLower) is_lower = true;\n    }\n    return is_lower ^ is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiq83fzrk.d(23): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpiq83fzrk.d(24): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiq83fzrk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (k, v; dict)\n\
    \    {\n        if (k.isUpper)\n            all_lower = false;\n        if (k.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4pb7swl5.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp4pb7swl5.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4pb7swl5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool is_lower_case = true;\n    bool\
    \ is_upper_case = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ \n        {\n            is_lower_case = false;\n        }\n        if (key.isLower)\
    \ \n        {\n            is_upper_case = false;\n        }\n    }\n    return\
    \ is_lower_case || is_upper_case;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps9o7wsv4.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmps9o7wsv4.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9o7wsv4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9g1vg9cs.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp9g1vg9cs.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9g1vg9cs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpolbomn4e.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpolbomn4e.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpolbomn4e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            all_lower = false;\n        }\n        else if (key.isLower)\
    \ \n        {\n            all_upper = false;\n        }\n        else \n    \
    \    {\n            return false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7cb86e3j.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp7cb86e3j.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7cb86e3j.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    foreach (key; dict.keys)\n    {\n        if (lower && key != key.toLower)\n\
    \            lower = false;\n        if (upper && key != key.toUpper)\n      \
    \      upper = false;\n    }\n    return lower || upper;\n}\nunittest\n{\n   \
    \ alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpquv588gn.d(24): Error: no property `toLower` for type `string`\\\
    n/tmp/tmpquv588gn.d(26): Error: no property `toUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpquv588gn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool isUpper = true;\n    bool isLower = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            isLower = false;\n        else\n\
    \            isUpper = false;\n    }\n    return isUpper || isLower;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1875bqkh.d(26): Error: no property `isUpper` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1875bqkh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        is_lower = is_lower &&\
    \ key.isLower;\n        is_upper = is_upper && key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr4dd_id1.d(30): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpr4dd_id1.d(31): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4dd_id1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            lower = false;\n        if (key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgvpqwgrl.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpgvpqwgrl.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvpqwgrl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.length == 0) return false;\n        if (key[0].isUpper) is_lower\
    \ = false;\n        if (key[0].isLower) is_upper = false;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmporwuck6n.d(25): Error: no property `isUpper` for type `immutable(char)`\\\
    n/tmp/tmporwuck6n.d(26): Error: no property `isLower` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporwuck6n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool isLower\
    \ = true;\n    bool isUpper = true;\n    foreach (k, v; dict)\n    {\n       \
    \ if (k.isUpper) isLower = false;\n        if (k.isLower) isUpper = false;\n \
    \   }\n    return isLower || isUpper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa_coufq9.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpa_coufq9.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_coufq9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.empty)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7rbfy437.d(20): Error: no property `empty` for type `Nullable!(string[string])`\\\
    n/tmp/tmp7rbfy437.d(26): Error: no property `isUpper` for type `string`\\n/tmp/tmp7rbfy437.d(28):\
    \ Error: no property `isLower` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7rbfy437.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            is_lower = false;\n        }\n        if (key.isLower)\
    \ \n        {\n            is_upper = false;\n        }\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp289th3zq.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp289th3zq.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp289th3zq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn47l2gx3.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpn47l2gx3.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn47l2gx3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool lower = false;\n    bool upper = false;\n    foreach (key, value; dict)\n\
    \    {\n        if (key.isUpper)\n            upper = true;\n        if (key.isLower)\n\
    \            lower = true;\n    }\n    return lower ^ upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptmnt2yy6.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmptmnt2yy6.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmnt2yy6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool isUpper\
    \ = true;\n    bool isLower = true;\n    foreach (key; dict.keys) \n    {\n  \
    \      isUpper = isUpper && key.isUpper;\n        isLower = isLower && key.isLower;\n\
    \    }\n    return isUpper || isLower;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9gm2rajw.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp9gm2rajw.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gm2rajw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxc18i6b7.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpxc18i6b7.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxc18i6b7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool isUpper = true;\n    bool isLower = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper)\n            isLower = false;\n        else\n\
    \            isUpper = false;\n    }\n    return isUpper || isLower;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsggd0h0f.d(26): Error: no property `isUpper` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsggd0h0f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq7bknq8s.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpq7bknq8s.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq7bknq8s.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool isUpper = true;\n    bool isLower = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            isLower = false;\n        else\n\
    \            isUpper = false;\n    }\n    return isUpper || isLower;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwff33d38.d(26): Error: no property `isUpper` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwff33d38.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool isLower\
    \ = true;\n    bool isUpper = true;\n    foreach (key; dict.keys)\n    {\n   \
    \     if (key.isUpper) isLower = false;\n        if (key.isLower) isUpper = false;\n\
    \    }\n    return isLower || isUpper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaq4_x340.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpaq4_x340.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaq4_x340.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_upper\
    \ = true;\n    bool is_lower = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      is_upper = is_upper && key.isUpper;\n        is_lower = is_lower && key.isLower;\n\
    \    }\n    return is_upper || is_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcqjzq0e2.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpcqjzq0e2.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqjzq0e2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp15potdz2.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp15potdz2.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15potdz2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.empty) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.isUpper) all_lower = false;\n        if(key.isLower) all_upper =\
    \ false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpedcldla2.d(19): Error: no property `empty` for type `Nullable!(string[string])`\\\
    n/tmp/tmpedcldla2.d(24): Error: no property `isUpper` for type `string`\\n/tmp/tmpedcldla2.d(25):\
    \ Error: no property `isLower` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpedcldla2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.isUpper) all_lower = false;\n        if(key.isLower) all_upper =\
    \ false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4mhpthvf.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp4mhpthvf.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mhpthvf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool isUpper = false;\n    bool isLower = false;\n    foreach (key, value;\
    \ dict)\n    {\n        if (key.isUpper)\n            isUpper = true;\n      \
    \  if (key.isLower)\n            isLower = true;\n    }\n    return isUpper ^\
    \ isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf7v7k7fm.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpf7v7k7fm.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf7v7k7fm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu8plnt_i.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpu8plnt_i.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu8plnt_i.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    foreach(key; dict.keys)\n    {\n        all_lower &= key.isLower;\n     \
    \   all_upper &= key.isUpper;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm1x4m412.d(23): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpm1x4m412.d(24): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm1x4m412.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg4xbkydn.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpg4xbkydn.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4xbkydn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool isUpper = false;\n    bool isLower = false;\n    foreach(key, value;\
    \ dict)\n    {\n        if(key.isUpper)\n            isUpper = true;\n       \
    \ if(key.isLower)\n            isLower = true;\n    }\n    return isUpper ^ isLower;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0le643_j.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp0le643_j.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0le643_j.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            is_lower = false;\n        }\n        if (key.isLower)\
    \ \n        {\n            is_upper = false;\n        }\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp92tu1i2w.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp92tu1i2w.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92tu1i2w.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_upper = true;\n        if (key.isLower)\n\
    \            is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyao4mux0.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpyao4mux0.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyao4mux0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_upper\
    \ = true;\n    bool is_lower = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      is_upper = is_upper && key.isUpper;\n        is_lower = is_lower && key.isLower;\n\
    \    }\n    return is_upper || is_lower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp85tpp3y8.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp85tpp3y8.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp85tpp3y8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n        {\n            all_lower = false;\n        }\n\
    \        else if (key.isLower)\n        {\n            all_upper = false;\n  \
    \      }\n        else\n        {\n            return false;\n        }\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd04igjnw.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpd04igjnw.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd04igjnw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict.isNull)\
    \ return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    foreach(key;\
    \ dict.get.keys)\n    {\n        if(key.isUpper)\n        {\n            all_lower\
    \ = false;\n        }\n        else if(key.isLower)\n        {\n            all_upper\
    \ = false;\n        }\n        else\n        {\n            return false;\n  \
    \      }\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2r6t5n5k.d(23): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp2r6t5n5k.d(27): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2r6t5n5k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.length == 0) return false;\n        if (key[0].isUpper) is_lower\
    \ = false;\n        if (key[0].isLower) is_upper = false;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp02rrvykl.d(25): Error: no property `isUpper` for type `immutable(char)`\\\
    n/tmp/tmp02rrvykl.d(26): Error: no property `isLower` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02rrvykl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n     \
    \   if (k.isUpper) all_lower = false;\n        if (k.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxgpu2wan.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpxgpu2wan.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxgpu2wan.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool isUpper\
    \ = false;\n    bool isLower = false;\n    foreach (key, value; dict)\n    {\n\
    \        if (key.isUpper) isUpper = true;\n        if (key.isLower) isLower =\
    \ true;\n    }\n    return isUpper ^ isLower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8girr3r5.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp8girr3r5.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8girr3r5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper)\n            all_lower = false;\n        if(key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp00o_wncn.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp00o_wncn.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp00o_wncn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5qj61r7a.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp5qj61r7a.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qj61r7a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    bool lower = false;\n    bool upper = false;\n\
    \    foreach(key; dict.keys)\n    {\n        if(key.isUpper)\n            upper\
    \ = true;\n        else if(key.isLower)\n            lower = true;\n        else\n\
    \            return false;\n    }\n    return lower ^ upper;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl0roco4u.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpl0roco4u.d(26): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0roco4u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach(key; dict.keys)\n    {\n   \
    \     if(!isLower(key)) is_lower = false;\n        if(!isUpper(key)) is_upper\
    \ = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqh83ypba.d(24): Error: undefined identifier `isLower`, did you\
    \ mean variable `is_lower`?\\n/tmp/tmpqh83ypba.d(25): Error: undefined identifier\
    \ `isUpper`, did you mean variable `is_upper`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqh83ypba.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n     \
    \   if (k.isUpper) all_lower = false;\n        if (k.isLower) all_upper = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7wqsmdgn.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp7wqsmdgn.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7wqsmdgn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyizos0ey.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpyizos0ey.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyizos0ey.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        is_lower = is_lower &&\
    \ key.isLower;\n        is_upper = is_upper && key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp59yi6ppt.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmp59yi6ppt.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59yi6ppt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            is_lower = false;\n        }\n        if (key.isLower)\
    \ \n        {\n            is_upper = false;\n        }\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplcon06dc.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmplcon06dc.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplcon06dc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9sezixrb.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp9sezixrb.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9sezixrb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    bool is_upper = true;\n    bool is_lower = true;\n\
    \    foreach(key; dict.keys)\n    {\n        is_upper &= key.isUpper;\n      \
    \  is_lower &= key.isLower;\n    }\n    return is_upper || is_lower;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo31ildtu.d(23): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpo31ildtu.d(24): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo31ildtu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0w43c_wm.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp0w43c_wm.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0w43c_wm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n \
    \       if (key.isUpper) is_lower = false;\n        if (key.isLower) is_upper\
    \ = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn_2twgy6.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpn_2twgy6.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn_2twgy6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.isUpper) all_lower = false;\n        if(key.isLower) all_upper =\
    \ false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl43zt5b_.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpl43zt5b_.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl43zt5b_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (!key.isUpper) all_upper = false;\n        if (!key.isLower) all_lower\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_v1ldbec.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp_v1ldbec.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_v1ldbec.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.isUpper) all_lower = false;\n        if(key.isLower) all_upper =\
    \ false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl4fjsdwo.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpl4fjsdwo.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl4fjsdwo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            all_lower = false;\n        }\n        else if (key.isLower)\
    \ \n        {\n            all_upper = false;\n        }\n        else \n    \
    \    {\n            return false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnc4gi7vl.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpnc4gi7vl.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnc4gi7vl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.length == 0) return false;\n        if (key[0].isUpper) is_lower\
    \ = false;\n        if (key[0].isLower) is_upper = false;\n    }\n    return is_lower\
    \ || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdc3xeukp.d(25): Error: no property `isUpper` for type `immutable(char)`\\\
    n/tmp/tmpdc3xeukp.d(26): Error: no property `isLower` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdc3xeukp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      is_lower = is_lower && key.isLower;\n        is_upper = is_upper && key.isUpper;\n\
    \    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprf5vu9xp.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmprf5vu9xp.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprf5vu9xp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else if (key.isLower)\n            all_upper\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt5p07df8.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpt5p07df8.d(26): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5p07df8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.isUpper) is_lower = false;\n        if (key.isLower) is_upper =\
    \ false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx2z2kajd.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpx2z2kajd.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2z2kajd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (!isLower(key))\n            is_lower = false;\n        if\
    \ (!isUpper(key))\n            is_upper = false;\n    }\n    return is_lower ||\
    \ is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa7llubup.d(26): Error: undefined identifier `isLower`, did you\
    \ mean variable `is_lower`?\\n/tmp/tmpa7llubup.d(28): Error: undefined identifier\
    \ `isUpper`, did you mean variable `is_upper`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpa7llubup.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    foreach(key; dict.keys)\n\
    \    {\n        if(key.isUpper)\n            lower = false;\n        if(key.isLower)\n\
    \            upper = false;\n    }\n    return lower || upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppi2ugxbg.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmppi2ugxbg.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppi2ugxbg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool allUpper\
    \ = true;\n    bool allLower = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.isUpper) allLower = false;\n        if (key.isLower) allUpper =\
    \ false;\n    }\n    return allUpper || allLower;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0hub_gfc.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp0hub_gfc.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hub_gfc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy0f1fijh.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpy0f1fijh.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0f1fijh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\n\
    \        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    foreach (key; dict.get.keys)\n    {\n        if (key.isUpper)\n         \
    \   all_lower = false;\n        else if (key.isLower)\n            all_upper =\
    \ false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuygir9vw.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpuygir9vw.d(26): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuygir9vw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper)\n        {\n            all_lower = false;\n        }\n\
    \        else if (key.isLower)\n        {\n            all_upper = false;\n  \
    \      }\n        else\n        {\n            return false;\n        }\n    }\n\
    \    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ebcl3x9.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp_ebcl3x9.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ebcl3x9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    if (dict.length == 0) \n\
    \    {\n        return false;\n    }\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper) \n \
    \       {\n            all_lower = false;\n        }\n        else if (key.isLower)\
    \ \n        {\n            all_upper = false;\n        }\n        else \n    \
    \    {\n            return false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ose242o.d(30): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp3ose242o.d(34): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ose242o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach(key; dict.keys)\n    {\n        if(!key.isLower)\n    \
    \        all_lower = false;\n        if(!key.isUpper)\n            all_upper =\
    \ false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw00mkwbb.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpw00mkwbb.d(26): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00mkwbb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            all_lower = false;\n        if (key.isLower)\n\
    \            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqq3utn5v.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpqq3utn5v.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqq3utn5v.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach(key; dict.keys)\n    {\n  \
    \      if(key.toLower() != key) all_lower = false;\n        if(key.toUpper() !=\
    \ key) all_upper = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsd83b7jr.d(24): Error: no property `toLower` for type `string`\\\
    n/tmp/tmpsd83b7jr.d(25): Error: no property `toUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsd83b7jr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool isLower\
    \ = true;\n    bool isUpper = true;\n    foreach (key; dict.keys) \n    {\n  \
    \      isLower = isLower && key.isLower;\n        isUpper = isUpper && key.isUpper;\n\
    \    }\n    return isLower || isUpper;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr_oq4eho.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpr_oq4eho.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_oq4eho.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdltas6s9.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpdltas6s9.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdltas6s9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys) \n    {\n\
    \        if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_dnrqv9m.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp_dnrqv9m.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_dnrqv9m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool isLower\
    \ = true;\n    bool isUpper = true;\n    foreach (key; dict.keys) \n    {\n  \
    \      if (!isLowerCase(key)) isLower = false;\n        if (!isUpperCase(key))\
    \ isUpper = false;\n    }\n    return isLower || isUpper;\n}\nunittest\n{\n  \
    \  alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxsm2_vnv.d(24): Error: undefined identifier `isLowerCase`\\n/tmp/tmpxsm2_vnv.d(25):\
    \ Error: undefined identifier `isUpperCase`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxsm2_vnv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool lower\
    \ = true;\n    bool upper = true;\n    foreach(key; dict.keys)\n    {\n      \
    \  if(key.isUpper) upper = false;\n        if(key.isLower) lower = false;\n  \
    \  }\n    return lower || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeicukyzj.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpeicukyzj.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeicukyzj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaq4gaoa6.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpaq4gaoa6.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaq4gaoa6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) \n    {\n        return false;\n    }\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    foreach (key; dict.keys) \n    {\n        if (key.isUpper)\
    \ \n        {\n            is_lower = false;\n        }\n        else if (key.isLower)\
    \ \n        {\n            is_upper = false;\n        }\n        else \n     \
    \   {\n            return false;\n        }\n    }\n    return is_lower || is_upper;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7basisf.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmps7basisf.d(30): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7basisf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.empty) return false;\n    bool is_upper\
    \ = true;\n    bool is_lower = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      is_upper &= key.isUpper;\n        is_lower &= key.isLower;\n    }\n   \
    \ return is_upper || is_lower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy3qa35gx.d(19): Error: no property `empty` for type `Nullable!(string[string])`\\\
    n/tmp/tmpy3qa35gx.d(24): Error: no property `isUpper` for type `string`\\n/tmp/tmpy3qa35gx.d(25):\
    \ Error: no property `isLower` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpy3qa35gx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n\
    \    {\n        if (key.isUpper)\n            is_lower = false;\n        if (key.isLower)\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo2m_rqr4.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpo2m_rqr4.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo2m_rqr4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    if (dict.length == 0)\n        return false;\n\
    \    bool isUpper = false;\n    bool isLower = false;\n    foreach (key, value;\
    \ dict)\n    {\n        if (key.isUpper)\n            isUpper = true;\n      \
    \  if (key.isLower)\n            isLower = true;\n    }\n    return isUpper ^\
    \ isLower;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5wys3egm.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp5wys3egm.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5wys3egm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        is_lower = is_lower &&\
    \ key.isLower;\n        is_upper = is_upper && key.isUpper;\n    }\n    return\
    \ is_lower || is_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsqmijk4l.d(24): Error: no property `isLower` for type `string`\\\
    n/tmp/tmpsqmijk4l.d(25): Error: no property `isUpper` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqmijk4l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    foreach (key; dict.keys)\n    {\n  \
    \      if (key.isUpper) is_lower = false;\n        if (key.isLower) is_upper =\
    \ false;\n    }\n    return is_lower || is_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7uqhmjth.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp7uqhmjth.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7uqhmjth.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    foreach (key; dict.keys)\n    {\n        if (key.isUpper)\n   \
    \         all_lower = false;\n        else\n            all_upper = false;\n \
    \   }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprrt6c4uc.d(24): Error: no property `isUpper` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrt6c4uc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null)\n        return false;\n    if(dict.length == 0)\n        return false;\n\
    \    bool isUpper = false;\n    bool isLower = false;\n    foreach(key,value;\
    \ dict)\n    {\n        if(key.isUpper)\n            isUpper = true;\n       \
    \ if(key.isLower)\n            isLower = true;\n    }\n    return isUpper ^ isLower;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcbjqledu.d(26): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpcbjqledu.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbjqledu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if(dict\
    \ is null) return false;\n    if(dict.length == 0) return false;\n    bool lower\
    \ = true;\n    bool upper = true;\n    foreach(key; dict.keys)\n    {\n      \
    \  if(key.isUpper)\n        {\n            lower = false;\n        }\n       \
    \ else if(key.isLower)\n        {\n            upper = false;\n        }\n   \
    \     else\n        {\n            return false;\n        }\n    }\n    return\
    \ lower || upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp238f7wn4.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmp238f7wn4.d(28): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp238f7wn4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (key; dict.keys)\n    {\n \
    \       if (key.isUpper) all_lower = false;\n        if (key.isLower) all_upper\
    \ = false;\n    }\n    return all_lower || all_upper;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf231qudv.d(24): Error: no property `isUpper` for type `string`\\\
    n/tmp/tmpf231qudv.d(25): Error: no property `isLower` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf231qudv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict\
    \ is null) return false;\n    if (dict.length == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    foreach (k, v; dict)\n    {\n     \
    \   if (k.isUpper)\n        {\n            all_lower = false;\n        }\n   \
    \     else\n        {\n            all_upper = false;\n        }\n    }\n    return\
    \ all_lower || all_upper;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv38jwcje.d(24): Error: no property `isUpper` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv38jwcje.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
