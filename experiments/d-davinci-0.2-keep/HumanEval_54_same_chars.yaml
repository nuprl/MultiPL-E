name: HumanEval_54_same_chars
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
  \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
  \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
  \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>>\
  \ same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string s1)\
  \ \n"
tests: "unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
  eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"\
  dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n\
  \    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
  abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
  ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
