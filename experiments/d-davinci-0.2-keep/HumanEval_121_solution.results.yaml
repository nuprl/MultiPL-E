name: HumanEval_121_solution
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2\
    \ == 0 && v % 2 != 0)\n        {\n            sum += v;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    int sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 1; i < lst.length; i += 2)\n  \
    \  {\n        if(i % 2 == 0)\n        {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n \
    \   assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcoead9hf.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpcoead9hf.__unittest_L25_C1()\
    \ [0x427de4]\\n??:? void tmpcoead9hf.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2ef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b182]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430315]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307c4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b159]\\n??:? runModuleUnitTests [0x42c0c5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428730]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286b7]\\n??:? _d_run_main [0x428622]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0xbd88c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2\
    \ == 0 && v % 2 != 0)\n        {\n            sum += v;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2==0\
    \ && e%2!=0)\n        {\n            sum+=e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    return lst.filter!(a => a % 2 == 1 && lst.indexOf(a) % 2 == 0).sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7k6jl_c6.d(15): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7k6jl_c6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2\
    \ == 0 && v % 2 != 0)\n        {\n            sum += v;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2==0\
    \ && e%2!=0)\n        {\n            sum+=e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum=0;\n    foreach(i,e;lst)\n    {\n        if(i%2==0 &&\
    \ e%2!=0)\n        {\n            sum+=e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2\
    \ == 0 && v % 2 != 0)\n        {\n            sum += v;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2 ==\
    \ 0 && e%2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    return lst.filter!(a => a % 2 == 1 && lst.indexOf(a) % 2 == 0).sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm9p7n7ey.d(15): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9p7n7ey.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    return lst.filter!(x => x % 2 == 1).filter!(x => lst.indexOf(x)\
    \ % 2 == 0).sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2n6uw5tz.d(15): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2n6uw5tz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    return lst.enumerate.filter!(a => a.index % 2 == 0 && a.value\
    \ % 2 != 0).sum!(a => a.value)();\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvwfvbqxo.d(15): Error: no property `enumerate` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwfvbqxo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    return lst.filter!(a => a % 2 == 1 && lst.indexOf(a) % 2 == 0).sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt2f6p5m1.d(15): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2f6p5m1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e;lst)\n    {\n        if(i%2==0\
    \ && e%2!=0)\n            sum+=e;\n    }\n    return sum;\n}\nunittest\n{\n  \
    \  alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n\
    \    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    return lst.enumerate.filter!(a => a.index % 2 == 0 && a.value\
    \ % 2 != 0).map!(a => a.value).sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp921mgkjv.d(15): Error: no property `enumerate` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp921mgkjv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(lst[i] % 2 == 1 && i % 2 == 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2\
    \ == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3,\
    \ 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n*/\nlong solution(long[]\
    \ lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
