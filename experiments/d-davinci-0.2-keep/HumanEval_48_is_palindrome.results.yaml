name: HumanEval_48_is_palindrome
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcuqo7nsd.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcuqo7nsd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuk17ohu6.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk17ohu6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1sf3lrsd.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1sf3lrsd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplbuxbxrj.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplbuxbxrj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmrm5fqmv.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrm5fqmv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoztre0b7.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpoztre0b7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgl9s_ju8.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpgl9s_ju8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvmk4bpav.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpvmk4bpav.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_qd60bz9.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qd60bz9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp52hoxb6n.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp52hoxb6n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphfgcy3xc.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfgcy3xc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp35xw8gqz.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp35xw8gqz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqli3vvyo.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqli3vvyo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxq7id88n.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxq7id88n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6gvr8kp3.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6gvr8kp3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length;\n\
    \    for (int i = 0; i < len / 2; i++) \n    {\n        if (text[i] != text[len\
    \ - i - 1]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7w9njbzn.d(18): Error: cannot implicitly convert expression `text.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7w9njbzn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf2zu9naj.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2zu9naj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpind0lkpd.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpind0lkpd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2v8ftqt7.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2v8ftqt7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplz9fi2un.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplz9fi2un.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppk0wxs6w.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppk0wxs6w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ufabfju.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ufabfju.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp46jyn3cr.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp46jyn3cr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph6ksygrf.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph6ksygrf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp59_py7gl.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp59_py7gl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpykd_i4hj.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpykd_i4hj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphxdyhasa.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphxdyhasa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn7zpyhro.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7zpyhro.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8vyzz4i8.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vyzz4i8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbjsaypww.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjsaypww.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqlmf7u1h.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqlmf7u1h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp97mbof_n.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp97mbof_n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnme9r9cm.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpnme9r9cm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len = text.length;\n\
    \    if (len <= 1)\n        return true;\n    else\n        return text[0] ==\
    \ text[$-1] && is_palindrome(text[1..$-1]);\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphaln32qw.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphaln32qw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkiels041.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpkiels041.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3azuj753.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3azuj753.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnd0mr4sl.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpnd0mr4sl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl945455d.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl945455d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3j5yhmnd.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3j5yhmnd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfg3icc1m.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfg3icc1m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk55k1x2w.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpk55k1x2w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz5swcq1c.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5swcq1c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdle3u1f3.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpdle3u1f3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.mirror;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n \
    \   assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkam3jhhu.d(18): Error: no property `mirror` for type `char[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkam3jhhu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw9gbahu9.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9gbahu9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp098pedj6.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp098pedj6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.front\
    \ == text.back && text.length > 1 ? is_palindrome(text.popFront.popBack) : text.length\
    \ <= 1;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphfitl19g.d(18): Error: no property `front` for type `string`\\\
    n/tmp/tmphfitl19g.d(18): Error: no property `back` for type `string`\\n/tmp/tmphfitl19g.d(18):\
    \ Error: no property `popFront` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmphfitl19g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfapshetv.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfapshetv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0iwfjk6s.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0iwfjk6s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn468r4mg.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpn468r4mg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpebitmhms.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebitmhms.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmfz6it09.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfz6it09.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmq7noq1t.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmq7noq1t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw9sq28ot.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9sq28ot.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzup7ujji.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzup7ujji.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcoe5owfk.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoe5owfk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len = text.length;\n\
    \    if (len == 0) return true;\n    if (len == 1) return true;\n    if (len ==\
    \ 2) return text[0] == text[1];\n    return text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8nlurv4m.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8nlurv4m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp17t492em.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp17t492em.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5pr5qlx2.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5pr5qlx2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpygy83dn7.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpygy83dn7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaw0lokst.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpaw0lokst.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.mirror;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n \
    \   assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5o_51l7d.d(18): Error: no property `mirror` for type `char[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5o_51l7d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpctxml2lp.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctxml2lp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq199w20g.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpq199w20g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkenfqn9m.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpkenfqn9m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl9rg9z5j.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpl9rg9z5j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsg9hczsq.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsg9hczsq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk7nimmu5.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7nimmu5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy8amcqv4.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8amcqv4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppa2itril.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmppa2itril.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx1zrxhsd.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpx1zrxhsd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz2r12y9f.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2r12y9f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3a6j4izr.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a6j4izr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.mirror;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n \
    \   assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_hrdxxpf.d(18): Error: no property `mirror` for type `char[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hrdxxpf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpns198pj9.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpns198pj9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx59e63lh.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx59e63lh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len = text.length;\n\
    \    if (len == 0) return true;\n    auto half = len / 2;\n    for (size_t i =\
    \ 0; i < half; i++) \n    {\n        if (text[i] != text[len - i - 1]) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    auto n = text.length;\n\
    \    foreach (i, j; zip(iota(0, n), iota(n - 1, -1, -1)))\n    {\n        if (text[i]\
    \ != text[j])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4j6brha9.d(19): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j6brha9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4evudm2h.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4evudm2h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9d9bsew2.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9d9bsew2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzvbf9di5.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzvbf9di5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpse65y7a6.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpse65y7a6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppkpx2uc8.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmppkpx2uc8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqfg8hte9.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfg8hte9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len = text.length;\n\
    \    for (size_t i = 0; i < len / 2; i++) \n    {\n        if (text[i] != text[len\
    \ - i - 1]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxm9kiyd0.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxm9kiyd0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len = text.length;\n\
    \    for (size_t i = 0; i < len / 2; i++)\n    {\n        if (text[i] != text[len\
    \ - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9u_5yay6.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9u_5yay6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ci9qzn4.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ci9qzn4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.front\
    \ == text.back && is_palindrome(text.popFront.popBack);\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp2uevwqz.d(18): Error: no property `front` for type `string`\\\
    n/tmp/tmpp2uevwqz.d(18): Error: no property `back` for type `string`\\n/tmp/tmpp2uevwqz.d(18):\
    \ Error: no property `popFront` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpp2uevwqz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyddxik7r.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyddxik7r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpamxg2i9j.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpamxg2i9j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn6k352_r.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpn6k352_r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.mirror;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n \
    \   assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9622t5jg.d(18): Error: no property `mirror` for type `char[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9622t5jg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqslzyssz.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqslzyssz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0rcvad88.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rcvad88.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len = text.length;\n\
    \    for (size_t i = 0; i < len / 2; i++)\n    {\n        if (text[i] != text[len\
    \ - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpygb6q202.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpygb6q202.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo9txlvjd.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9txlvjd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0xes7afj.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0xes7afj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8rkoq3du.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8rkoq3du.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfus8u3ff.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfus8u3ff.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len = text.length;\n\
    \    for (size_t i = 0; i < len / 2; i++)\n    {\n        if (text[i] != text[len\
    \ - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmka9m0h5.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmka9m0h5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb4_j86xb.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4_j86xb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe7563xs7.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7563xs7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    text = text.toLower();\n\
    \    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiwdp56k3.d(18): Error: no property `toLower` for type `string`\\\
    n/tmp/tmpiwdp56k3.d(19): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpiwdp56k3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpprc9vph8.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprc9vph8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8m6hynv7.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8m6hynv7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkdb9h63s.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdb9h63s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ynckngb.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ynckngb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0mvyqsop.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0mvyqsop.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.front\
    \ == text.back && \n        (text.length <= 1 || is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp3dxt4m_.d(18): Error: no property `front` for type `string`\\\
    n/tmp/tmpp3dxt4m_.d(18): Error: no property `back` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp3dxt4m_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuroztmml.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpuroztmml.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3djbh9ei.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3djbh9ei.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9ostcyy2.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ostcyy2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7zplznh.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7zplznh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6eyzl2ce.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6eyzl2ce.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3mla_dqh.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mla_dqh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxbhsbzna.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbhsbzna.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpolp2_gzg.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpolp2_gzg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9vrcgc92.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9vrcgc92.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnxyjx677.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpnxyjx677.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4w3kdxc8.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w3kdxc8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2y2e65zs.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y2e65zs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf8_ptut9.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8_ptut9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3mga7ciq.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mga7ciq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdvs5va7r.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvs5va7r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpybmca809.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpybmca809.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0puq7spg.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0puq7spg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp85cpsxa2.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp85cpsxa2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqzn47y4j.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzn47y4j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpio2wz91t.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpio2wz91t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq70uopi1.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq70uopi1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph0mqoz9j.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph0mqoz9j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpth3jguuy.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpth3jguuy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphxnddihg.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphxnddihg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw9avhw19.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9avhw19.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2oqitmcv.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2oqitmcv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8yj80icv.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp8yj80icv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ur5pt23.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ur5pt23.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4pfl1jct.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4pfl1jct.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptds77m4r.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptds77m4r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwnhgqykq.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnhgqykq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfw0jo0nx.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpfw0jo0nx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1olwbj9j.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1olwbj9j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6wmfy1i_.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wmfy1i_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    int len = text.length;\n\
    \    if (len == 0) return true;\n    int half = len / 2;\n    for (int i = 0;\
    \ i < half; i++)\n    {\n        if (text[i] != text[len - i - 1]) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplfbkjmpl.d(18): Error: cannot implicitly convert expression `text.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmplfbkjmpl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyuvkhfb5.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpyuvkhfb5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.mirror;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n \
    \   assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpswmj1d6u.d(18): Error: no property `mirror` for type `char[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswmj1d6u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpde9mq12h.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpde9mq12h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpssd4uzz3.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpssd4uzz3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpntuddrde.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpntuddrde.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc6iy78up.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6iy78up.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_74s_w1w.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_74s_w1w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7uh9zz5a.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp7uh9zz5a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjy1yokdz.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjy1yokdz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy4ld2o84.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4ld2o84.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplhbmvjn_.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplhbmvjn_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfb6eif4c.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfb6eif4c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbls8cina.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbls8cina.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo3ia67lu.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpo3ia67lu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkzxzm9xk.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzxzm9xk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4c7q98qc.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4c7q98qc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp27h3aewk.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp27h3aewk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.length\
    \ == 0 || text.length == 1 || text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.mirror;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n \
    \   assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxsqrpznd.d(18): Error: no property `mirror` for type `char[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxsqrpznd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpixyxmml7.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpixyxmml7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3hg7fdnq.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hg7fdnq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpghb7nthy.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpghb7nthy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9a2va7ur.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9a2va7ur.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu4dty84q.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4dty84q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len = text.length;\n\
    \    for (size_t i = 0; i < len / 2; i++)\n    {\n        if (text[i] != text[len\
    \ - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp54ad7ty5.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp54ad7ty5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvrysyix1.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpvrysyix1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpygdz6l8v.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpygdz6l8v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxoe1fby1.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxoe1fby1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmqrs4q6z.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqrs4q6z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe1w5fz4o.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1w5fz4o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0) \n    {\n        return true;\n    }\n    else \n    {\n        return\
    \ text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n    }\n}\nunittest\n{\n\
    \    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp4696kvks.d(24): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427f16]\\n??:? bool tmp4696kvks.is_palindrome(immutable(char)[])\
    \ [0x427a94]\\n??:? bool tmp4696kvks.is_palindrome(immutable(char)[]) [0x427aa7]\\\
    n??:? void tmp4696kvks.__unittest_L27_C1() [0x427af3]\\n??:? void tmp4696kvks.__modtest()\
    \ [0x427be8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa92]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc25]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa69]\\n??:? runModuleUnitTests [0x42b9d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428328]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282af]\\n??:? _d_run_main [0x42821a]\\n??:? main [0x427bfb]\\\
    n??:? __libc_start_main [0x7c8f7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe735mmfl.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpe735mmfl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwmqdmk_l.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmqdmk_l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphlv2ls_e.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphlv2ls_e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.front\
    \ == text.back && \n           (text.length <= 1 || is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcthrq7lh.d(18): Error: no property `front` for type `string`\\\
    n/tmp/tmpcthrq7lh.d(18): Error: no property `back` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcthrq7lh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpns_7xgs4.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpns_7xgs4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text.equal(text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7tupsmvr.d(18): Error: no property `equal` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7tupsmvr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \n*/\nbool is_palindrome(string text) \n{\n    return text ==\
    \ text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1v2tbtje.d(18): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1v2tbtje.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
