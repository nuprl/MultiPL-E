name: HumanEval_18_how_many_times
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0onhbcqc.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0onhbcqc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1kl9zyp7.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1kl9zyp7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long result = 0;\n    long i = 0;\n    while\
    \ (i < string.length) \n    {\n        long index = string.find(substring, i);\n\
    \        if (index == -1) \n        {\n            break;\n        }\n       \
    \ result++;\n        i = index + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_g_8s71c.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_g_8s71c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr6pgocjf.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr6pgocjf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n\tlong count = 0;\n\tlong pos = 0;\n\twhile (true)\n\
    \t{\n\t\tpos = string.find(substring, pos);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\
    \t\tcount++;\n\t\tpos++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb0t1oqpy.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0t1oqpy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk24dwtq3.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk24dwtq3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true) \n    {\n        pos = string.find(substring, pos);\n        if (pos\
    \ == -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmcmb9ot_.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcmb9ot_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoh4b387m.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh4b387m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1) \n    {\n        index\
    \ += substring.length;\n        count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps9l7pyev.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9l7pyev.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp28sunq3l.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp28sunq3l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvmg7u82k.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvmg7u82k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    foreach(i; 0 .. string.length\
    \ - substring.length + 1)\n    {\n        if(string[i .. i + substring.length\
    \ - 1] == substring)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdovlffmi.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f65]\\n??:? void tmpdovlffmi.__unittest_L25_C1()\
    \ [0x427baf]\\n??:? void tmpdovlffmi.__modtest() [0x427ce4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab92]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fca9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430158]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab69]\\n??:? runModuleUnitTests [0x42ba59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428428]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283af]\\n??:? _d_run_main [0x42831a]\\n??:? main [0x427cf7]\\\
    n??:? __libc_start_main [0x8a5b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45c2psy9.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp45c2psy9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp78u441ka.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78u441ka.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if(index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz52td57i.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz52td57i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpga0upnqw.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpga0upnqw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9gjwlt1i.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gjwlt1i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfg8jyh54.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfg8jyh54.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long i = 0;\n    while\
    \ (i < string.length)\n    {\n        if (string[i..$] == substring)\n       \
    \ {\n            count++;\n            i += substring.length;\n        }\n   \
    \     else\n        {\n            i++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk8q0qz03.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f45]\\n??:? void tmpk8q0qz03.__unittest_L31_C1()\
    \ [0x427b93]\\n??:? void tmpk8q0qz03.__modtest() [0x427cc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab72]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430138]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab49]\\n??:? runModuleUnitTests [0x42ba39]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428408]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42838f]\\n??:? _d_run_main [0x4282fa]\\n??:? main [0x427cdb]\\\
    n??:? __libc_start_main [0xea11a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyq7cw751.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyq7cw751.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  long length = substring.length;\n    while (true) \n    {\n        index =\
    \ string.find(substring, index);\n        if (index == -1) \n        {\n     \
    \       break;\n        }\n        count++;\n        index += length;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp04pij4kf.d(20): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04pij4kf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphdcuw3bx.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphdcuw3bx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp6zn99l8.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6zn99l8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk7g34dwd.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7g34dwd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\n/*\n    >>> is_palindrome(\"\")\n    True\n    >>>\
    \ is_palindrome(\"a\")\n    True\n    >>> is_palindrome(\"aa\")\n    True\n  \
    \  >>> is_palindrome(\"aba\")\n    True\n    >>> is_palindrome(\"abba\")\n   \
    \ True\n    >>> is_palindrome(\"abca\")\n    False\n    >>> is_palindrome(\"abcd\"\
    )\n    False\n*/\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwur0dlwj.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwur0dlwj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true) \n    {\n        index = string.find(substring, index);\n     \
    \   if(index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0rt_b4n0.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rt_b4n0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4gv9xfr8.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4gv9xfr8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7p79x5fc.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7p79x5fc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0mce8pn6.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0mce8pn6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeieccfcj.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeieccfcj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyrce04p4.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrce04p4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph20drm2p.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph20drm2p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiydhtbxy.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiydhtbxy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp59_0v_4q.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59_0v_4q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph0zfl1c3.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0zfl1c3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprjbfhv8g.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjbfhv8g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ioyzwmf.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ioyzwmf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        pos++;\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9dy0ldtc.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9dy0ldtc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1) \n        {\n            break;\n        }\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpga9uotue.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpga9uotue.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true) \n    {\n        pos = string.find(substring, pos);\n        if (pos\
    \ == -1) \n        {\n            break;\n        }\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzv4xj3ru.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzv4xj3ru.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1) \n        {\n            break;\n        }\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphm1pf9jo.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphm1pf9jo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1zat7xo_.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1zat7xo_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1)\n    {\n        count++;\n     \
    \   pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk1jpxft1.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1jpxft1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjcf9s3_m.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcf9s3_m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1) \n    {\n        count++;\n\
    \        index += substring.length;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptpzyq8r0.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptpzyq8r0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy4ugw3h3.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4ugw3h3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index < string.length)\n    {\n        long found = string.find(substring,\
    \ index);\n        if (found == -1)\n            break;\n        count++;\n  \
    \      index = found + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp6b3ro0r.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6b3ro0r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1) \n    {\n        count++;\n\
    \        index += substring.length;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi3rfmsz0.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3rfmsz0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long start = 0;\n  \
    \  while (true) \n    {\n        start = string.find(substring, start);\n    \
    \    if (start == -1) \n        {\n            break;\n        }\n        count++;\n\
    \        start += substring.length;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg6yff7m3.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg6yff7m3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(index < string.length)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplxvip4bk.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxvip4bk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        pos += 1;\n        count += 1;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfw4metc1.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfw4metc1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index < string.length) \n    {\n        auto found = string.find(substring,\
    \ index);\n        if (found == string.npos)\n            break;\n        count++;\n\
    \        index = found + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5m5zjnpq.d(19): Error: no property `find` for type `string`\\\
    n/tmp/tmp5m5zjnpq.d(20): Error: no property `npos` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5m5zjnpq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1) \n        {\n            break;\n        }\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\n/*\n    >>> is_palindrome('a')\n\
    \    True\n    >>> is_palindrome('aa')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abca')\n\
    \    False\n    >>> is_palindrome('abcd')\n    False\n*/\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1hegkfr0.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hegkfr0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxk_over.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxk_over.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7f44d4jf.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7f44d4jf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true) {\n        pos = string.find(substring, pos);\n        if (pos == -1)\
    \ break;\n        count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2pmob79t.d(18): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2pmob79t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long i = 0;\n    while(i\
    \ != -1)\n    {\n        i = string.find(substring, i);\n        if(i != -1)\n\
    \        {\n            count++;\n            i++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprljssziu.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprljssziu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1) \n    {\n        count++;\n\
    \        index += substring.length;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8t_pjy7i.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8t_pjy7i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long start = 0;\n  \
    \  while (start < string.length) \n    {\n        long found = string.find(substring,\
    \ start);\n        if (found == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        start = found + 1;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7dnnlrep.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dnnlrep.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  long length = string.length;\n    long sublength = substring.length;\n    while\
    \ (index < length) \n    {\n        if (string[index..$] == substring) \n    \
    \    {\n            count++;\n            index += sublength;\n        }\n   \
    \     else \n        {\n            index++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0pvt7tqc.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f4d]\\n??:? void tmp0pvt7tqc.__unittest_L33_C1()\
    \ [0x427b9b]\\n??:? void tmp0pvt7tqc.__modtest() [0x427cd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430140]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab51]\\n??:? runModuleUnitTests [0x42ba41]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428410]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428397]\\n??:? _d_run_main [0x428302]\\n??:? main [0x427ce3]\\\
    n??:? __libc_start_main [0x76170554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1) \n    {\n        count++;\n\
    \        index += substring.length;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnvms38y_.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvms38y_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long i = 0;\n    while\
    \ (i < string.length) \n    {\n        if (string[i..$] == substring) \n     \
    \   {\n            count++;\n            i += substring.length;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph6br450y.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f45]\\n??:? void tmph6br450y.__unittest_L31_C1()\
    \ [0x427b93]\\n??:? void tmph6br450y.__modtest() [0x427cc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab72]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430138]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab49]\\n??:? runModuleUnitTests [0x42ba39]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428408]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42838f]\\n??:? _d_run_main [0x4282fa]\\n??:? main [0x427cdb]\\\
    n??:? __libc_start_main [0xead43554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ykfrj2o.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ykfrj2o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp64fekss5.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64fekss5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq1z20m7o.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1z20m7o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmj1zh15k.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmj1zh15k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_0k0zye3.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0k0zye3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4jlc5pvb.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jlc5pvb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1) \n        {\n            break;\n        }\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfxmkuamx.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfxmkuamx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcp67x2rf.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcp67x2rf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdc44eq3m.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdc44eq3m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ string.npos)\n            break;\n        count++;\n        pos++;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp006lpdon.d(19): Error: no property `find` for type `string`\\\
    n/tmp/tmp006lpdon.d(20): Error: no property `npos` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp006lpdon.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n/*\n    >>> how_many_times_2('', 'a')\n    0\n  \
    \  >>> how_many_times_2('aaa', 'a')\n    3\n    >>> how_many_times_2('aaaa', 'aa')\n\
    \    3\n*/\nlong how_many_times_2(string string, string substring) \n{\n    long\
    \ count = 0;\n    long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index += substring.length;\n    }\n    return count;\n}\n/*\n    >>> how_many_times_3('',\
    \ 'a')\n    0\n    >>> how_many_times_3('aaa', 'a')\n    3\n    >>> how_many_times_3('aaaa',\
    \ 'aa')\n    3\n*/\nlong how_many_times_3(string string, string substring) \n\
    {\n    long count = 0;\n    long index = 0;\n    while(true)\n    {\n        index\
    \ = string.find(substring, index);\n        if(index == -1)\n            break;\n\
    \        count++;\n        index += substring.length - 1;\n    }\n    return count;\n\
    }\n/*\n    >>> how_many_times_4('', 'a')\n    0\n    >>> how_many_times_4('aaa',\
    \ 'a')\n    3\n    >>> how_many_times_4('aaaa', 'aa')\n    3\n*/\nlong how_many_times_4(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index +=\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdkd9r6g9.d(90): Error: expression expected, not `unittest`\\\
    n/tmp/tmpdkd9r6g9.d(91): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmpdkd9r6g9.d(99): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdkd9r6g9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwq0zek04.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwq0zek04.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ string.npos)\n            break;\n        count++;\n        pos++;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5w8d48eb.d(19): Error: no property `find` for type `string`\\\
    n/tmp/tmp5w8d48eb.d(20): Error: no property `npos` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5w8d48eb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkunia2zr.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkunia2zr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj9nloum7.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9nloum7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4179i4rv.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4179i4rv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq1mki4kr.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1mki4kr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprmovk5vo.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmovk5vo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_t_ugilv.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_t_ugilv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfzsill1t.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfzsill1t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index += substring.length;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj_o25ri6.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_o25ri6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdjhtvjty.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjhtvjty.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  long sub_len = substring.length;\n    long str_len = string.length;\n    while\
    \ (index < str_len)\n    {\n        if (string[index..$] == substring)\n     \
    \   {\n            count++;\n            index += sub_len;\n        }\n      \
    \  else\n        {\n            index++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbduqxtgy.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f4d]\\n??:? void tmpbduqxtgy.__unittest_L33_C1()\
    \ [0x427b9b]\\n??:? void tmpbduqxtgy.__modtest() [0x427cd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430140]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab51]\\n??:? runModuleUnitTests [0x42ba41]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428410]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428397]\\n??:? _d_run_main [0x428302]\\n??:? main [0x427ce3]\\\
    n??:? __libc_start_main [0x73e1a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long start = 0;\n  \
    \  while (start < string.length)\n    {\n        long index = string.find(substring,\
    \ start);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      start = index + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp13osqodi.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13osqodi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp65a9sky1.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp65a9sky1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp19bhqzbp.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19bhqzbp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long i = 0;\n    while\
    \ (i < string.length)\n    {\n        if (string[i..$] == substring)\n       \
    \ {\n            count++;\n            i += substring.length;\n        }\n   \
    \     else\n        {\n            i++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8og7vary.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f45]\\n??:? void tmp8og7vary.__unittest_L31_C1()\
    \ [0x427b93]\\n??:? void tmp8og7vary.__modtest() [0x427cc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab72]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430138]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab49]\\n??:? runModuleUnitTests [0x42ba39]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428408]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42838f]\\n??:? _d_run_main [0x4282fa]\\n??:? main [0x427cdb]\\\
    n??:? __libc_start_main [0x75508554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjdfiny4e.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjdfiny4e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz78k5rkd.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz78k5rkd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpivk6zwgc.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpivk6zwgc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true) \n    {\n        pos = string.find(substring, pos);\n        if (pos\
    \ == -1) \n        {\n            break;\n        }\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8n0o7h5h.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8n0o7h5h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\n/*\n    >>> find_the_longest_substring('', 'a')\n\
    \    ''\n    >>> find_the_longest_substring('a', 'a')\n    'a'\n    >>> find_the_longest_substring('aa',\
    \ 'a')\n    'aa'\n    >>> find_the_longest_substring('aaa', 'a')\n    'aaa'\n\
    \    >>> find_the_longest_substring('aaaa', 'aa')\n    'aaaa'\n    >>> find_the_longest_substring('aaaa',\
    \ 'a')\n    'aaaa'\n    >>> find_the_longest_substring('aaaaa', 'aa')\n    'aaaaa'\n\
    \    >>> find_the_longest_substring('aaaaa', 'a')\n    'aaaaa'\n    >>> find_the_longest_substring('aaaaaa',\
    \ 'aa')\n    'aaaaaa'\n    >>> find_the_longest_substring('aaaaaa', 'a')\n   \
    \ 'aaaaaa'\n    >>> find_the_longest_substring('aaaaaaa', 'aa')\n    'aaaaaaa'\n\
    \    >>> find_the_longest_substring('aaaaaaa', 'a')\n    'aaaaaaa'\n    >>> find_the_longest_substring('aaaaaaaa',\
    \ 'aa')\n    'aaaaaaaa'\n    >>> find_the_longest_substring('aaaaaaaa', 'a')\n\
    \    'aaaaaaaa'\n    >>> find_the_longest_substring('aaaaaaaaa', 'aa')\n    'aaaaaaaaa'\n\
    \    >>> find_the_longest_substring('aaaaaaaaa', 'a')\n    'aaaaaaaaa'\n    >>>\
    \ find_the_longest_substring('aaaaaaaaaa', 'aa')\n    'aaaaaaaaaa'\n    >>> find_the_longest_substring('aaaaaaaaaa',\
    \ 'a')\n    'aaaaaaaa\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv9wdw28o.d(27): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9wdw28o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index < string.length) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv4m0afsd.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv4m0afsd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdkorxxi0.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdkorxxi0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpun72e8t2.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpun72e8t2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvna2coml.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvna2coml.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true) \n    {\n        pos = string.find(substring, pos);\n        if (pos\
    \ == -1) \n        {\n            break;\n        }\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeh891_h6.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeh891_h6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1) \n    {\n        count++;\n\
    \        index += substring.length;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmg9352so.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmg9352so.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1dn0u7g2.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1dn0u7g2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        if(string[i .. i + substring.length] == substring)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpvhw8ydzi.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428006]\\n??:? long tmpvhw8ydzi.how_many_times(immutable(char)[],\
    \ immutable(char)[]) [0x427ac5]\\n??:? void tmpvhw8ydzi.__unittest_L25_C1() [0x427bce]\\\
    n??:? void tmpvhw8ydzi.__modtest() [0x427cd8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430148]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab59]\\n??:? runModuleUnitTests [0x42ba49]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428418]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42839f]\\n??:? _d_run_main [0x42830a]\\n??:? main [0x427ceb]\\\
    n??:? __libc_start_main [0xd4a04554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjlrh2mij.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjlrh2mij.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyyo1tb7h.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyo1tb7h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1)\n    {\n        count++;\n\
    \        index += substring.length;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0x71yy4a.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0x71yy4a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkkh15ydu.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkkh15ydu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index < string.length) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwuff6z39.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwuff6z39.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1) \n        {\n            break;\n        }\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1enk3e17.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1enk3e17.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index < string.length) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyi3tgqfm.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyi3tgqfm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvavnxl5q.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvavnxl5q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    foreach(i; 0 .. string.length\
    \ - substring.length + 1) \n    {\n        if(string[i .. i + substring.length\
    \ - 1] == substring) \n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdl0p2b9w.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f65]\\n??:? void tmpdl0p2b9w.__unittest_L25_C1()\
    \ [0x427baf]\\n??:? void tmpdl0p2b9w.__modtest() [0x427ce4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab92]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fca9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430158]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab69]\\n??:? runModuleUnitTests [0x42ba59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428428]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283af]\\n??:? _d_run_main [0x42831a]\\n??:? main [0x427cf7]\\\
    n??:? __libc_start_main [0x2043d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_vlupnp7.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vlupnp7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5tr4ehwx.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5tr4ehwx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp84kcwk2i.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84kcwk2i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptlo0pelv.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptlo0pelv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpce9wo2hy.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpce9wo2hy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp61bv33cu.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp61bv33cu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgmkve68r.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmkve68r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long result = 0;\n    long sub_len = substring.length;\n\
    \    long str_len = string.length;\n    long i = 0;\n    while (i < str_len) \n\
    \    {\n        if (string[i .. i + sub_len] == substring) \n        {\n     \
    \       result += 1;\n            i += sub_len;\n        } \n        else \n \
    \       {\n            i += 1;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0d966gpa.d(21): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428016]\\n??:? long tmp0d966gpa.how_many_times(immutable(char)[],\
    \ immutable(char)[]) [0x427ac0]\\n??:? void tmp0d966gpa.__unittest_L33_C1() [0x427bda]\\\
    n??:? void tmp0d966gpa.__modtest() [0x427ce4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab92]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fca9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430158]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab69]\\n??:? runModuleUnitTests [0x42ba59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428428]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283af]\\n??:? _d_run_main [0x42831a]\\n??:? main [0x427cf7]\\\
    n??:? __libc_start_main [0x8cfbc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpscdsgybi.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscdsgybi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt1tom8t3.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1tom8t3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz5wt7461.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5wt7461.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzgsid949.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzgsid949.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkdryd8uc.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdryd8uc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf5p5q6c8.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf5p5q6c8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjt84ylur.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjt84ylur.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1) \n    {\n        index\
    \ += substring.length;\n        count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe77xvlnh.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe77xvlnh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index < string.length)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoiopayxn.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoiopayxn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (pos < string.length)\n    {\n        pos = string.find(substring, pos);\n \
    \       if (pos == -1)\n            break;\n        count++;\n        pos++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppy41lnjk.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy41lnjk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppi2pxlzk.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppi2pxlzk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\n/*\n    >>> how_many_times_overlapping('',\
    \ 'a')\n    0\n    >>> how_many_times_overlapping('aaa', 'a')\n    3\n    >>>\
    \ how_many_times_overlapping('aaaa', 'aa')\n    4\n*/\nlong how_many_times_overlapping(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos++;\n    }\n    return count;\n}\n/*\n    >>> how_many_times_overlapping('',\
    \ 'a')\n    0\n    >>> how_many_times_overlapping('aaa', 'a')\n    3\n    >>>\
    \ how_many_times_overlapping('aaaa', 'aa')\n    4\n*/\nlong how_many_times_overlapping_2(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    long\
    \ sublen = substring.length;\n    while ((pos = string.find(substring, pos)) !=\
    \ -1) \n    {\n        count++;\n        pos += sublen;\n    }\n    return count;\n\
    }\n/*\n    >>> how_many_times_overlapping('', 'a')\n    0\n    >>> how_many_times_overlapping('aaa',\
    \ 'a')\n    3\n    >>> how_many_times_overlapping('aaaa', 'aa')\n    4\n*/\nlong\
    \ how_many_times_overlapping_3(string string, string substring) \n{\n    long\
    \ count = 0;\n    long pos = 0;\n    long sublen = substring.length;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += sublen\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph6tplwso.d(80): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmph6tplwso.d(89): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmph6tplwso.d(89): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph6tplwso.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8bo6emft.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bo6emft.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true) \n    {\n        pos = string.find(substring, pos);\n        if (pos\
    \ == string.npos) \n        {\n            break;\n        }\n        count++;\n\
    \        pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplz8_vk92.d(19): Error: no property `find` for type `string`\\\
    n/tmp/tmplz8_vk92.d(20): Error: no property `npos` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplz8_vk92.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1) \n        {\n            break;\n        }\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp90pc1x9o.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90pc1x9o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfn4gqebp.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfn4gqebp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn01nlasi.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn01nlasi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long i = 0;\n    while\
    \ (i < string.length)\n    {\n        if (string[i..$] == substring)\n       \
    \ {\n            count++;\n            i += substring.length;\n        }\n   \
    \     else\n        {\n            i++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvrwexda4.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f45]\\n??:? void tmpvrwexda4.__unittest_L31_C1()\
    \ [0x427b93]\\n??:? void tmpvrwexda4.__modtest() [0x427cc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab72]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430138]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab49]\\n??:? runModuleUnitTests [0x42ba39]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428408]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42838f]\\n??:? _d_run_main [0x4282fa]\\n??:? main [0x427cdb]\\\
    n??:? __libc_start_main [0xcb281554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgatso871.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgatso871.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1) break;\n        count++;\n        pos++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoi5o287z.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi5o287z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp70jri6c1.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70jri6c1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4497c7xa.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4497c7xa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1hkffgd3.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hkffgd3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0mn23pka.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0mn23pka.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu6ktg57i.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6ktg57i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1) \n    {\n        count++;\n\
    \        index += substring.length;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdyk3tn6_.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdyk3tn6_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    for (size_t i = 0; i\
    \ < string.length; i++)\n    {\n        if (string[i..$] == substring)\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvwt0ulci.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f45]\\n??:? void tmpvwt0ulci.__unittest_L25_C1()\
    \ [0x427b8f]\\n??:? void tmpvwt0ulci.__modtest() [0x427cc4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab72]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430138]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab49]\\n??:? runModuleUnitTests [0x42ba39]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428408]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42838f]\\n??:? _d_run_main [0x4282fa]\\n??:? main [0x427cd7]\\\
    n??:? __libc_start_main [0x22daf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzy_1lxe3.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzy_1lxe3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7dqwz42x.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dqwz42x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3txmxukt.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3txmxukt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0_7n8mo1.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_7n8mo1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1) \n    {\n        count++;\n\
    \        index += substring.length;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi91h53kw.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi91h53kw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4uetycyh.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4uetycyh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppzl4nsi9.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzl4nsi9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true) \n    {\n        pos = string.find(substring, pos);\n        if (pos\
    \ == -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpky74sq95.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpky74sq95.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long i = 0;\n    while\
    \ (i < string.length) \n    {\n        if (string[i..$] == substring) \n     \
    \   {\n            count += 1;\n            i += substring.length;\n        }\n\
    \        else \n        {\n            i += 1;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf88q9srh.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f45]\\n??:? void tmpf88q9srh.__unittest_L31_C1()\
    \ [0x427b93]\\n??:? void tmpf88q9srh.__modtest() [0x427cc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab72]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430138]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab49]\\n??:? runModuleUnitTests [0x42ba39]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428408]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42838f]\\n??:? _d_run_main [0x4282fa]\\n??:? main [0x427cdb]\\\
    n??:? __libc_start_main [0xcf31d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2s4j35wd.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s4j35wd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl5666xzo.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl5666xzo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr2kmsw23.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr2kmsw23.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp24k1r1_f.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24k1r1_f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if(index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi5pz3tzm.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5pz3tzm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpju75iq94.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpju75iq94.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index += substring.length;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuis5sv_e.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuis5sv_e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphed2xzv3.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphed2xzv3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_8zm8s41.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8zm8s41.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk1xhbv9n.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1xhbv9n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    foreach(i; 0 .. string.length\
    \ - substring.length + 1)\n    {\n        if(string[i .. i + substring.length\
    \ - 1] == substring)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9dnc_77m.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f65]\\n??:? void tmp9dnc_77m.__unittest_L25_C1()\
    \ [0x427baf]\\n??:? void tmp9dnc_77m.__modtest() [0x427ce4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab92]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fca9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430158]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab69]\\n??:? runModuleUnitTests [0x42ba59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428428]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283af]\\n??:? _d_run_main [0x42831a]\\n??:? main [0x427cf7]\\\
    n??:? __libc_start_main [0xbeca8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_6nv940n.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_6nv940n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsahn4v30.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsahn4v30.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1)\n    {\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0diqapu8.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0diqapu8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl488z2m8.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl488z2m8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps0gzl0ut.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps0gzl0ut.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp88myd2ki.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88myd2ki.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1) \n        {\n            break;\n        }\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4i8d6eey.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4i8d6eey.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqz8reu_5.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqz8reu_5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuq9smtx5.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuq9smtx5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1) \n        {\n            break;\n        }\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1xlstv3c.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xlstv3c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjvzkviwe.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjvzkviwe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ciggeww.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ciggeww.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long start = 0;\n  \
    \  long end = 0;\n    while (start < string.length) \n    {\n        end = string.find(substring,\
    \ start);\n        if (end == -1)\n            break;\n        count++;\n    \
    \    start = end + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp70_on2li.d(20): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70_on2li.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3x_ido7k.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3x_ido7k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1) \n        {\n            break;\n        }\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps_g_bwox.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_g_bwox.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(true)\n    {\n        index = string.find(substring, index);\n      \
    \  if(index == -1)\n            break;\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnp20dp51.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp20dp51.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqyol4fpm.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqyol4fpm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmponnib6z6.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponnib6z6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true)\n    {\n        pos = string.find(substring, pos);\n        if (pos ==\
    \ -1)\n            break;\n        count++;\n        pos++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwxyhufri.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxyhufri.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1) \n        {\n            break;\n        }\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp98yq9lr_.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp98yq9lr_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1) \n        {\n            break;\n        }\n        count\
    \ += 1;\n        index += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplngiczrp.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplngiczrp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while(index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if(index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf8yywdk8.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8yywdk8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ttufhft.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ttufhft.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true) \n    {\n        index = string.find(substring, index);\n    \
    \    if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvnjsz8j7.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvnjsz8j7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp62dji3u5.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62dji3u5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while ((index = string.find(substring, index)) != -1) \n    {\n        count++;\n\
    \        index += substring.length;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4jyqr17k.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jyqr17k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1)\n    {\n        count++;\n     \
    \   pos += substring.length;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo8aggg9v.d(17): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo8aggg9v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdwy3j0v3.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwy3j0v3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while(true)\n\
    \    {\n        pos = string.find(substring, pos);\n        if(pos == -1)\n  \
    \          break;\n        count++;\n        pos++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3mpydr1h.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mpydr1h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgfpkf0mf.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgfpkf0mf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1) \n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1) \n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwa80gcee.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwa80gcee.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (true)\n    {\n        index = string.find(substring, index);\n     \
    \   if (index == -1)\n            break;\n        count++;\n        index++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe4xfnfam.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe4xfnfam.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ (true) \n    {\n        pos = string.find(substring, pos);\n        if (pos\
    \ == -1) \n        {\n            break;\n        }\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4h4ym1qe.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4h4ym1qe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n   \
    \ 3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \n*/\nlong how_many_times(string\
    \ string, string substring) \n{\n    long count = 0;\n    long index = 0;\n  \
    \  while (index != -1)\n    {\n        index = string.find(substring, index);\n\
    \        if (index != -1)\n        {\n            count++;\n            index++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpse4khuyb.d(19): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpse4khuyb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
